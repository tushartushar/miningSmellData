Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,Cyclomatic complexity of the method is 18
Complex Method,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,Cyclomatic complexity of the method is 14
Long Parameter List,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerFile,The method has 7 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The method has 15 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetQuestionResults,The method has 6 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The method has 12 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,GetAllUsersListByFilter,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,GetVotersCompleteEntries,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,GetVotersTextEntries,The method has 5 parameters.
Long Identifier,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateNSurveySecuritySettings,The length of the parameter allowMultipleNSurveySubmissions is 31.
Long Identifier,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the parameter addNewQuestionSectionGridAnswers is 32.
Long Identifier,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the parameter insertQuestionSectionGridAnswersCommand is 39.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddAnswer,The length of the statement  "	// DbConnection.db.UpdateDataSet(this.GetInsertAnswerCommand(sqlConnection' null)' new SqlCommand()' new SqlCommand()' newAnswer' "Answers"' true); " is 147.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddAnswer,The length of the statement  "	DbConnection.db.UpdateDataSet (newAnswer' "Answers"' this.GetInsertAnswerCommand (sqlConnection' null)' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 172.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddMatrixAnswer,The length of the statement  "	DbConnection.db.UpdateDataSet (newAnswer' "Answers"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetAnswerById,The length of the statement  "	//SqlParameter[] commandParameters = new SqlParameter[] { new SqlParameter("@AnswerId"' answerId)' new SqlParameter("@LanguageCode"' languageCode) }; " is 149.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetAnswers,The length of the statement  "	//SqlParameter[] commandParameters = new SqlParameter[] { new SqlParameter("@QuestionId"' questionId)' new SqlParameter("@LanguageCode"' languageCode) }; " is 153.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spAnswerAddNew"' sqlConnection) : new SqlCommand ("vts_spAnswerAddNew"' sqlConnection' sqlTransaction); " is 172.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerConnectionCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spAnswerConnectionSubscribeToPublisher"' sqlConnection) : new SqlCommand ("vts_spAnswerConnectionSubscribeToPublisher"' sqlConnection' sqlTransaction); " is 220.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerPropertyCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spAnswerPropertyStore"' sqlConnection) : new SqlCommand ("vts_spAnswerPropertyStore"' sqlConnection' sqlTransaction); " is 186.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedAnswer' "Answers"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateMatrixAnswer,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedAnswer' "Answers"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,AddAnswerType,The length of the statement  "	DbConnection.db.UpdateDataSet (newAnswerType' "AnswerTypes"' this.GetInsertAnswerTypeCommand (sqlConnection' null' userId)' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 192.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spAnswerTypeAddNew"' sqlConnection) : new SqlCommand ("vts_spAnswerTypeAddNew"' sqlConnection' sqlTransaction); " is 180.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The length of the statement  "	command.Parameters.Add (new SqlParameter ("@JavascriptFunctionName"' SqlDbType.VarChar' 0x3e8' "JavascriptFunctionName")); " is 122.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The length of the statement  "	command.Parameters.Add (new SqlParameter ("@JavascriptErrorMessage"' SqlDbType.VarChar' 0x3e8' "JavascriptErrorMessage")); " is 122.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@JavascriptFunctionName"' SqlDbType.VarChar' 0x3e8' "JavascriptFunctionName")); " is 128.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@JavascriptErrorMessage"' SqlDbType.VarChar' 0x3e8' "JavascriptErrorMessage")); " is 128.
Long Statement,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedAnswerType' "AnswerTypes"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 144.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetFirstSurveyId,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetFirstIDForUser"' new SqlParameter ("@UserId"' userId).SqlValue); " is 132.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetPagesNumber,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetPagesNumber"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetSurveyIdFromGuid,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetSurveyIdFromGuid"' new SqlParameter ("@SurveyGuID"' id).SqlValue); " is 134.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetSurveyIdFromFriendlyName,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetSurveyIdFromFriendlyName"' new SqlParameter ("@FriendlyName"' name).SqlValue); " is 146.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddSurvey,The length of the statement  "		DbConnection.db.UpdateDataSet (newSurvey' "Surveys"' addNewSurvey' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 135.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The length of the statement  "	SqlCommand addNewSurvey = (sqlTransaction == null) ? new SqlCommand ("vts_spSurveyAddNew"' sqlConnection) : new SqlCommand ("vts_spSurveyAddNew"' sqlConnection' sqlTransaction); " is 177.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The length of the statement  "	addNewSurvey.Parameters.Add (new SqlParameter ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled")); " is 125.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The length of the statement  "	DbConnection.db.UpdateDataSet (newBranchingRule' "BranchingRules"' addNewRule' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 147.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The length of the statement  "	addNewCondition.Parameters.Add (new SqlParameter ("@MessageConditionalOperator"' SqlDbType.Int' 4' "MessageConditionalOperator")); " is 130.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The length of the statement  "	DbConnection.db.UpdateDataSet (newMessageCondition' "MessageConditions"' addNewCondition' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 158.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The length of the statement  "	updateCondition.Parameters.Add (new SqlParameter ("@MessageConditionalOperator"' SqlDbType.Int' 4' "MessageConditionalOperator")); " is 130.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedMessageCondition' "MessageConditions"' updateCondition' new SqlCommand ()' updateCondition' UpdateBehavior.Transactional); " is 160.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,DeleteMessageConditionById,The length of the statement  "	DbConnection.db.ExecuteNonQuery ("vts_spSurveyMessageConditionDeleteByID"' new SqlParameter ("@MessageConditionID"' messageConditionId).SqlValue); " is 146.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,DeleteBranchingRuleById,The length of the statement  "	DbConnection.db.ExecuteNonQuery ("vts_spSurveyBranchingRuleDeleteByID"' new SqlParameter ("@BranchingRuleID"' branchingRuleId).SqlValue); " is 137.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The length of the statement  "		DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional); " is 134.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetCookieExpiration,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetCookieExpiration"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 138.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetIPExpiration,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyIPExpirationGet"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 134.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetSurveyPassword,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyAccessPasswordGet"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,IsSurveyEmailInviteOnly,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyOnlyInvitedGet"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,IsSurveySaveTokenUserData,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveySaveTokenUserDataGet"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 139.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetSurveyUnAuthentifiedUserAction,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyGetUnAuthentifiedUserAction"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 146.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurveyPageOptions,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedPageOptions' "PageOptions"' updatePageOptions' new SqlCommand ()' updatePageOptions' UpdateBehavior.Transactional); " is 153.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,IsSurveyScored,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyIsScored"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 127.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AspSecurityAllowsMultipleSubmissions,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyAllowMultipleASPNetVotes"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 143.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,NSurveyAllowsMultipleSubmissions,The length of the statement  "	Object scalarValue = DbConnection.db.ExecuteScalar ("vts_spSurveyAllowMultipleNSurveyVotes"' new SqlParameter ("@SurveyID"' surveyId).SqlValue); " is 144.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "	SqlCommand addNewRegularExpression = new RegularExpression ().GetInsertRegularExpressionCommand (dbConnection' insertTransaction' userId); " is 138.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "	SqlCommand addNewQuestionSection = new Question ().GetInsertQuestionSectionCommand (dbConnection' insertTransaction' ""); " is 121.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "	SqlCommand addNewQuestionSectionGridAnswers = new Question ().GetInsertQuestionSectionGridAnswersCommand (dbConnection' insertTransaction); " is 139.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional); " is 145.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional); " is 166.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "			foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "				importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere); " is 158.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional); " is 139.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional); " is 163.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional); " is 154.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional); " is 157.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional); " is 166.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "		DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional); " is 192.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "			multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey); " is 124.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "							multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "				multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "			if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12) " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "				multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 202.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The length of the statement  "				multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 196.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,IncreaseQuotaEntries,The length of the statement  "	DbConnection.db.ExecuteNonQuery ("vts_spSurveyEntryQuotaIncreaseEntry"' new SqlParameter ("@SurveyId"' surveyId).SqlValue); " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateQuotaSettings,The length of the statement  "	DbConnection.db.UpdateDataSet (surveyQuota' "SurveyEntryQuotas"' updateQuota' new SqlCommand ()' updateQuota' UpdateBehavior.Transactional); " is 140.
Long Statement,Votations.NSurvey.SQLServerDAL,SurveyIPRange,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\SurveyIPRange.cs,UpdateSurveyIPRange,The length of the statement  "	DbConnection.db.UpdateDataSet (updIPRange' "SurveyIPRange"' command' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 137.
Long Statement,Votations.NSurvey.SQLServerDAL,SurveyIPRange,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\SurveyIPRange.cs,AddNewSurveyIPRange,The length of the statement  "	DbConnection.db.UpdateDataSet (updIPRange' "SurveyIPRange"' command' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 137.
Long Statement,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddFilter,The length of the statement  "	DbConnection.db.UpdateDataSet (newFilter' "Filters"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddRule,The length of the statement  "	DbConnection.db.UpdateDataSet (newRule' "FilterRules"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 138.
Long Statement,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,UpdateFilter,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@LogicalOperatorTypeID"' SqlDbType.SmallInt' 4' "LogicalOperatorTypeID")); " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,UpdateFilter,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedFilter' "Filters"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,Folder,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Folder.cs,GetTreeNodes,The length of the statement  "	//SqlHelper.FillDataset(SqlHelper.DbConnectionString' CommandType.StoredProcedure' "vts_spTreeNodesGetAll"' folderData' new string[] { "TreeNodes" }'spParameters); " is 163.
Long Statement,Votations.NSurvey.SQLServerDAL,Folder,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Folder.cs,GetFolderById,The length of the statement  "	// SqlHelper.FillDataset(SqlHelper.DbConnectionString' CommandType.StoredProcedure' "vts_spFolderGetByFolderId"' folderData' new string[] { "TreeNodes" }' spParameters); " is 169.
Long Statement,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,AddLibrary,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@DefaultLanguageCode"' SqlDbType.NVarChar' 50' "DefaultLanguageCode")); " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,AddLibrary,The length of the statement  "	DbConnection.db.UpdateDataSet (newLibrary' "Libraries"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 139.
Long Statement,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@DefaultLanguageCode"' SqlDbType.NVarChar' 50' "DefaultLanguageCode")); " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedLibrary' "Libraries"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 139.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddChildQuestion,The length of the statement  "	DbConnection.db.UpdateDataSet (newChildQuestion' "ChildQuestions"' this.GetInsertChildQuestionCommand (sqlConnection' null)' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 193.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddQuestion,The length of the statement  "	DbConnection.db.UpdateDataSet (newQuestion' "Questions"' this.GetInsertQuestionCommand (sqlConnection' null)' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 178.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The length of the statement  "	DbConnection.db.UpdateDataSet (newSkipLogicRule' "SkipLogicRules"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 150.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertChildQuestionCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spQuestionChildAddNew"' sqlConnection) : new SqlCommand ("vts_spQuestionChildAddNew"' sqlConnection' sqlTransaction); " is 186.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spQuestionAddNew"' sqlConnection) : new SqlCommand ("vts_spQuestionAddNew"' sqlConnection' sqlTransaction); " is 176.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spQuestionSectionOptionUpdate"' sqlConnection) : new SqlCommand ("vts_spQuestionSectionOptionUpdate"' sqlConnection' sqlTransaction); " is 202.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The length of the statement  "	command.Parameters.Add (new SqlParameter ("@DeleteSectionLinkText"' SqlDbType.NVarChar' 0xff' "DeleteSectionLinkText")); " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The length of the statement  "	command.Parameters.Add (new SqlParameter ("@UpdateSectionLinkText"' SqlDbType.NVarChar' 0xff' "UpdateSectionLinkText")); " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionGridAnswersCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spQuestionSectionGridAnswerAddNew"' sqlConnection) : new SqlCommand ("vts_spQuestionSectionGridAnswerAddNew"' sqlConnection' sqlTransaction); " is 210.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "	SqlCommand command2 = new RegularExpression ().GetInsertRegularExpressionCommand (sqlConnection' sqlTransaction' userId); " is 121.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "	SqlCommand insertAnswerConnectionCommand = new Answer ().GetInsertAnswerConnectionCommand (sqlConnection' sqlTransaction); " is 122.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "	SqlCommand insertQuestionSectionGridAnswersCommand = this.GetInsertQuestionSectionGridAnswersCommand (sqlConnection' sqlTransaction); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first " is 126.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "			importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere); " is 127.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 141.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional); " is 138.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional); " is 155.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional); " is 149.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional); " is 179.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional); " is 170.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional); " is 173.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional); " is 142.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "		DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional); " is 208.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "							multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 123.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "			if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12) " is 120.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "				multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 125.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The length of the statement  "				multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText); " is 192.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateChildQuestion,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedChildQuestion' "ChildQuestions"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 150.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedQuestion' "Questions"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 140.
Long Statement,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestionSectionOptions,The length of the statement  "	DbConnection.db.UpdateDataSet (sectionOptions' "QuestionSectionOptions"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 152.
Long Statement,Votations.NSurvey.SQLServerDAL,RegularExpression,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\RegularExpression.cs,AddRegularExpression,The length of the statement  "	DbConnection.db.UpdateDataSet (newRegularExpression' "RegularExpressions"' this.GetInsertRegularExpressionCommand (sqlConnection' null' userId)' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 213.
Long Statement,Votations.NSurvey.SQLServerDAL,RegularExpression,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\RegularExpression.cs,GetInsertRegularExpressionCommand,The length of the statement  "	SqlCommand command = (sqlTransaction == null) ? new SqlCommand ("vts_spRegularExpressionAddNew"' sqlConnection) : new SqlCommand ("vts_spRegularExpressionAddNew"' sqlConnection' sqlTransaction); " is 194.
Long Statement,Votations.NSurvey.SQLServerDAL,RegularExpression,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\RegularExpression.cs,UpdateRegularExpression,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedRegularExpression' "RegularExpressions"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 162.
Long Statement,Votations.NSurvey.SQLServerDAL,Role,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Role.cs,AddRole,The length of the statement  "	DbConnection.db.UpdateDataSet (newRole' "Roles"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 132.
Long Statement,Votations.NSurvey.SQLServerDAL,Role,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Role.cs,UpdateRole,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedRole' "Roles"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 136.
Long Statement,Votations.NSurvey.SQLServerDAL,SurveyLayout,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\SurveyLayout.cs,SurveyLayoutUpdate,The length of the statement  "	DbConnection.db.UpdateDataSet (sld' "SurveyLayout"' command' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 129.
Long Statement,Votations.NSurvey.SQLServerDAL,SurveyLayout,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\SurveyLayout.cs,SurveyLayoutUpdate,The length of the statement  "	//   SqlHelper.ExecuteNonQuery(SqlHelper.DbConnectionString' CommandType.StoredProcedure' "vts_spRoleSecurityRightAddNew"' commandParameters); " is 142.
Long Statement,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,AddUser,The length of the statement  "	DbConnection.db.UpdateDataSet (newUser' "Users"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 132.
Long Statement,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,AddUserSettings,The length of the statement  "	DbConnection.db.UpdateDataSet (newUserSettings' "UserSettings"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 147.
Long Statement,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,UpdateUser,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedUser' "Users"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 132.
Long Statement,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,UpdateUserSettings,The length of the statement  "	DbConnection.db.UpdateDataSet (updatedUserSettings' "UserSettings"' updateCommand' new SqlCommand ()' updateCommand' UpdateBehavior.Transactional); " is 147.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The length of the statement  "	insertCommand.Parameters.Add (new SqlParameter ("@ResumeHighestPageNumber"' SqlDbType.Int' 4' "ResumeHighestPageNumber")); " is 122.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The length of the statement  "		DbConnection.db.UpdateDataSet (voterAnswers' "Voters"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 134.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The length of the statement  "		DbConnection.db.UpdateDataSet (voterAnswers' "VotersAnswers"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional); " is 131.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The length of the statement  "			dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText; " is 127.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The length of the statement  "			DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The length of the statement  "			DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional); " is 124.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,DeleteVoterInvitation,The length of the statement  "	//SqlParameter[] commandParameters = new SqlParameter[] { new SqlParameter("@SurveyID"' surveyId)' new SqlParameter("@Email"' email) }; " is 135.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,GetEmailUId,The length of the statement  "	//SqlParameter[] commandParameters = new SqlParameter[] { new SqlParameter("@SurveyID"' surveyId)' new SqlParameter("@Email"' email) }; " is 135.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,LogInvitationError,The length of the statement  "	DbConnection.db.UpdateDataSet (invitationLog' "InvitationLogs"' insertCommand' new SqlCommand ()' new SqlCommand ()' UpdateBehavior.Transactional); " is 147.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ResumeVoterAnswers,The length of the statement  "	//SqlHelper.FillDatasetWithoutChangesAccept(DbConnection.NewDbConnectionString' CommandType.StoredProcedure' "vts_spVoterResumeSession"' dataSet' new string[] { "Voters"' "VotersAnswers" }' commandParameters); " is 209.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ResumeVoterAnswers,The length of the statement  "	//AcceptChanges() : Commits all the changes made to this DataSet since it was loaded or since the last time AcceptChanges was called. " is 133.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ResumeVoterAnswers,The length of the statement  "	//AcceptChangesDuringFill: Gets or sets a value indicating whether AcceptChanges is called on a DataRow after it is added to the DataTable during any of the Fill operations. " is 173.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ResumeVoterAnswers,The length of the statement  "	//If false' AcceptChanges is not called' and the newly added rows are treated as inserted rows: rowstate = added instead of unchanged. " is 134.
Long Statement,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,UpdateVoter,The length of the statement  "		DbConnection.db.UpdateDataSet (updatedVoterAnswers' "VotersAnswers"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional); " is 148.
Empty Catch Block,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The method has an empty catch block.
Empty Catch Block,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The method has an empty catch block.
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddMatrixAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddMatrixAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ParentQuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,AddMatrixAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@ScorePoint"' SqlDbType.Int' 4' "ScorePoint"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@DisplayOrder"' SqlDbType.Int' 4' "DisplayOrder"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@RegularExpressionId"' SqlDbType.Int' 4' "RegularExpressionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerIDText"' SqlDbType.NVarChar' 255' "AnswerIDText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerAlias"' SqlDbType.NVarChar' 255' "AnswerAlias"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SliderRange"' SqlDbType.NVarChar' 3' "SliderRange"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SliderValue"' SqlDbType.Int' 6' "SliderValue"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SliderMin"' SqlDbType.Int' 6' "SliderMin"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SliderMax"' SqlDbType.Int' 6' "SliderMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SliderStep"' SqlDbType.Int' 6' "SliderStep"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerConnectionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@PublisherAnswerId"' SqlDbType.Int' 4' "PublisherAnswerId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerConnectionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SubscriberAnswerId"' SqlDbType.Int' 4' "SubscriberAnswerId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,GetInsertAnswerPropertyCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerFile,The following statement contains a magic number: sqlParams.Add (new SqlParameter ("@GroupGuid"' SqlDbType.NVarChar' 40) {  	Value = groupGuid  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerFile,The following statement contains a magic number: sqlParams.Add (new SqlParameter ("@FileSize"' SqlDbType.Int' 4) {  	Value = fileSize  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerFile,The following statement contains a magic number: sqlParams.Add (new SqlParameter ("@UploadedFileTimeOut"' SqlDbType.Int' 4) {  	Value = uploadedFileTimeOut  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerFile,The following statement contains a magic number: sqlParams.Add (new SqlParameter ("@SessionUploadedFileTimeOut"' SqlDbType.Int' 4) {  	Value = sessionUploadedFileTimeOut  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,StoreAnswerProperties,The following statement contains a magic number: sqlParams.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4) {  	Value = answerId  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ScorePoint"' SqlDbType.Int' 4' "ScorePoint"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@RegularExpressionId"' SqlDbType.Int' 4' "RegularExpressionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerIDText"' SqlDbType.NVarChar' 255' "AnswerIDText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerAlias"' SqlDbType.NVarChar' 255' "AnswerAlias"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SliderRange"' SqlDbType.NVarChar' 3' "SliderRange"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SliderValue"' SqlDbType.Int' 6' "SliderValue"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SliderMin"' SqlDbType.Int' 6' "SliderMin"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SliderMax"' SqlDbType.Int' 6' "SliderMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SliderStep"' SqlDbType.Int' 6' "SliderStep"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateMatrixAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Answer.cs,UpdateMatrixAnswer,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.VarChar' 200' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@XmlDataSource"' SqlDbType.VarChar' 200' "XmlDataSource"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@TypeMode"' SqlDbType.Int' 4' "TypeMode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@FieldWidth"' SqlDbType.Int' 4' "FieldWidth"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@FieldHeight"' SqlDbType.Int' 4' "FieldHeight"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@FieldLength"' SqlDbType.Int' 4' "FieldLength"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@TypeAssembly"' SqlDbType.VarChar' 200' "TypeAssembly"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,GetInsertAnswerTypeCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@TypeNameSpace"' SqlDbType.VarChar' 200' "TypeNameSpace"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerTypeID"' SqlDbType.Int' 4' "AnswerTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.VarChar' 200' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@XmlDataSource"' SqlDbType.VarChar' 200' "XmlDataSource"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@TypeMode"' SqlDbType.Int' 4' "TypeMode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FieldWidth"' SqlDbType.Int' 4' "FieldWidth"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FieldHeight"' SqlDbType.Int' 4' "FieldHeight"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FieldLength"' SqlDbType.Int' 4' "FieldLength"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@TypeAssembly"' SqlDbType.VarChar' 200' "TypeAssembly"));  
Magic Number,Votations.NSurvey.SQLServerDAL,AnswerType,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\AnswerType.cs,UpdateAnswerType,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@TypeNameSpace"' SqlDbType.VarChar' 200' "TypeNameSpace"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@Title"' SqlDbType.NVarChar' 255' "Title"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@AccessPassword"' SqlDbType.VarChar' 255' "AccessPassword"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@SurveyDisplayTimes"' SqlDbType.Int' 4' "SurveyDisplayTimes"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@ResultsDisplayTimes"' SqlDbType.Int' 4' "ResultsDisplayTime"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@IPExpires"' SqlDbType.Int' 4' "IPExpires"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@CookieExpires"' SqlDbType.Int' 4' "CookieExpires"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@ResumeModeId"' SqlDbType.Int' 4' "ResumeModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,GetInsertSurveyCommand,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@FolderId"' SqlDbType.Int' 4' "FolderId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@PageNumber"' SqlDbType.Int' 4' "PageNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@ExpressionOperator"' SqlDbType.Int' 4' "ExpressionOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@TargetPageNumber"' SqlDbType.Int' 4' "TargetPageNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@TextFilter"' SqlDbType.NVarChar' 4000' "TextFilter"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@ConditionalOperator"' SqlDbType.Int' 4' "ConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@Score"' SqlDbType.Int' 4' "Score"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@ScoreMax"' SqlDbType.Int' 4' "ScoreMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddBranchingRule,The following statement contains a magic number: addNewRule.Parameters.Add (new SqlParameter ("@BranchingRuleID"' SqlDbType.Int' 4' "BranchingRuleID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@MessageConditionalOperator"' SqlDbType.Int' 4' "MessageConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@TextFilter"' SqlDbType.NVarChar' 4000' "TextFilter"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@ThankYoumessage"' SqlDbType.NVarChar' 4000' "ThankYoumessage"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@ConditionalOperator"' SqlDbType.Int' 4' "ConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@ExpressionOperator"' SqlDbType.Int' 4' "ExpressionOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@Score"' SqlDbType.Int' 4' "Score"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@ScoreMax"' SqlDbType.Int' 4' "ScoreMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,AddMessageCondition,The following statement contains a magic number: addNewCondition.Parameters.Add (new SqlParameter ("@MessageConditionId"' SqlDbType.Int' 4' "MessageConditionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@MessageConditionID"' SqlDbType.Int' 4' "MessageConditionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@MessageConditionalOperator"' SqlDbType.Int' 4' "MessageConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@TextFilter"' SqlDbType.NVarChar' 4000' "TextFilter"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@ThankYoumessage"' SqlDbType.NVarChar' 4000' "ThankYoumessage"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@ConditionalOperator"' SqlDbType.Int' 4' "ConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@ExpressionOperator"' SqlDbType.Int' 4' "ExpressionOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@Score"' SqlDbType.Int' 4' "Score"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateMessageCondition,The following statement contains a magic number: updateCondition.Parameters.Add (new SqlParameter ("@ScoreMax"' SqlDbType.Int' 4' "ScoreMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: try {  	SqlConnection dbConnection = new SqlConnection (DbConnection.NewDbConnectionString);  	SqlCommand updateSurvey = new SqlCommand ("vts_spSurveyUpdate"' dbConnection);  	updateSurvey.CommandType = CommandType.StoredProcedure;  	updateSurvey.Parameters.AddWithValue ("@LanguageCode"' languageCode);  	updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  	updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  	updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  	updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  	updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  	updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  	updateSurvey.Parameters.Add ("@Archive"' SqlDbType.Bit' 1' "Archive");  	updateSurvey.Parameters.Add ("@Activated"' SqlDbType.Bit' 1' "Activated");  	updateSurvey.Parameters.Add ("@ResumeModeID"' SqlDbType.Int' 1' "ResumeModeID");  	updateSurvey.Parameters.Add ("@NavigationEnabled"' SqlDbType.Bit' 1' "NavigationEnabled");  	updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  	updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  	updateSurvey.Parameters.Add ("@Scored"' SqlDbType.Bit' 1' "Scored");  	updateSurvey.Parameters.Add ("@QuestionNumberingDisabled"' SqlDbType.Bit' 1' "QuestionNumberingDisabled");  	updateSurvey.Parameters.Add ("@DefaultSurvey"' SqlDbType.Bit' 1' "DefaultSurvey");  	DbConnection.db.UpdateDataSet (updatedSurvey' "Surveys"' updateSurvey' updateSurvey' new SqlCommand ()' UpdateBehavior.Transactional);  }  catch (SqlException ex) {  	if (ex.Message == "DUPLICATEFOLDER")  		throw new SurveyExistsFoundException ();  	throw;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add (new SqlParameter ("@OpenDate"' SqlDbType.DateTime' 8' "OpenDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add (new SqlParameter ("@CloseDate"' SqlDbType.DateTime' 8' "CloseDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@Title"' SqlDbType.NVarChar' 255' "Title");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@RedirectionURL"' SqlDbType.NVarChar' 1024' "RedirectionURL");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@ProgressDisplayModeId"' SqlDbType.Int' 4' "ProgressDisplayModeId");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurvey,The following statement contains a magic number: updateSurvey.Parameters.Add ("@NotificationModeId"' SqlDbType.Int' 4' "NotificationModeId");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurveyPageOptions,The following statement contains a magic number: updatePageOptions.Parameters.Add ("@SurveyID"' SqlDbType.Int' 4' "SurveyID");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateSurveyPageOptions,The following statement contains a magic number: updatePageOptions.Parameters.Add ("@PageNumber"' SqlDbType.Int' 4' "PageNumber");  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: try {  	importSurveys.Survey [0].FolderId = folderId;  	addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  	addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerType"' addNewAnswerType' new SqlCommand ()' addNewAnswerType' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "RegularExpression"' addNewRegularExpression' new SqlCommand ()' addNewRegularExpression' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Survey"' addNewSurvey' new SqlCommand ()' addNewSurvey' UpdateBehavior.Transactional);  	// Add Question groups so we can attach them to questions  	var groups = new QuestionGroups ();  	var defl = importSurveys.SurveyLanguage.SingleOrDefault (x => x.DefaultLanguage);  	string defaultLang = defl == null ? null : defl.LanguageCode;  	defaultLang = defaultLang ?? "en-US";  	if (defaultLang != null)//Load groups only if default language is not null  	 {  		var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  		foreach (var qgrp in importSurveys.QuestionGroup.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  		 {  			var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			int groupIdHere;  			if (grpHere == null) {  				int? parentGroupId = null;  				if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  				 {  					var pgrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.Id == qgrp.ParentGroupId);  					if (pgrp != null) {  						var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  						if (exPar != null)  							parentGroupId = exPar.ID;  					}  				}  				groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  				var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  				groupIdHere = grt.ID;  			}  			else {  				groupIdHere = grpHere.ID;  			}  			importSurveys.Question.Where (x => !x.IsQuestionGroupIdNull () && (x.QuestionGroupId == qgrp.OldId)).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  		}  	}  	DbConnection.db.UpdateDataSet (importSurveys' "Question"' addNewQuestion' new SqlCommand ()' addNewQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "Answer"' addNewAnswer' new SqlCommand ()' addNewAnswer' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerConnection"' addNewAnswerConnection' new SqlCommand ()' addNewAnswerConnection' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "ChildQuestion"' addNewChildQuestion' new SqlCommand ()' addNewChildQuestion' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "AnswerProperty"' addNewAnswerProperty' new SqlCommand ()' addNewAnswerProperty' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionOption"' addNewQuestionSection' new SqlCommand ()' addNewQuestionSection' UpdateBehavior.Transactional);  	int newSurveyId = importSurveys.Survey [0].SurveyID;  	DbConnection.db.UpdateDataSet (importSurveys' "QuestionSectionGridAnswer"' addNewQuestionSectionGridAnswers' new SqlCommand ()' addNewQuestionSectionGridAnswers' UpdateBehavior.Transactional);  	insertTransaction.Commit ();  	var multiLanguage = new MultiLanguage ();  	foreach (var lang in importSurveys.SurveyLanguage)  		multiLanguage.UpdateSurveyLanguage (newSurveyId' lang.LanguageCode' lang.DefaultLanguage' Constants.Constants.EntitySurvey);  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var langText in importSurveys.MultiLanguageText) {  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  			multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	dbConnection.Close ();  }  catch (Exception e) {  	throw (e);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4' "MultiLanguageModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: addNewSurvey.Parameters.Add (new SqlParameter ("@ThankYouMessage"' SqlDbType.NVarChar' 4000' "ThankYouMessage"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: foreach (var langText in importSurveys.MultiLanguageText) {  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  		multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 10) {  	var impGrp = importSurveys.QuestionGroup.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  	if (impGrp != null) {  		var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  		try {  			if (localGrp != null)  				multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		}  		catch (Exception ex) {  		}  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  	multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 4 || langText.LanguageMessageTypeId == 5)  	multiLanguage.AddMultiLanguageText (newSurveyId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (importSurveys.Question.Single (x => x.OldQuestionId == langText.LanguageItemId).QuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  	multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,ImportSurveys,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  	multiLanguage.AddMultiLanguageText (importSurveys.Answer.Single (x => x.OldAnswerId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateQuotaSettings,The following statement contains a magic number: updateQuota.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateQuotaSettings,The following statement contains a magic number: updateQuota.Parameters.Add (new SqlParameter ("@MaxReachedMessage"' SqlDbType.NVarChar' 4000' "MaxReachedMessage"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Survey.cs,UpdateQuotaSettings,The following statement contains a magic number: updateQuota.Parameters.Add (new SqlParameter ("@MaxEntries"' SqlDbType.Int' 4' "MaxEntries"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.VarChar' 200' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LogicalOperatorTypeID"' SqlDbType.Int' 4' "LogicalOperatorTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FilterId"' SqlDbType.Int' 4' "FilterId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FilterId"' SqlDbType.Int' 4' "FilterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerId"' SqlDbType.Int' 4' "AnswerId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@QuestionId"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,AddRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FilterRuleID"' SqlDbType.Int' 4' "FilterRuleID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,UpdateFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@FilterId"' SqlDbType.Int' 4' "FilterId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,UpdateFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.VarChar' 200' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Filter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Filter.cs,UpdateFilter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LogicalOperatorTypeID"' SqlDbType.SmallInt' 4' "LogicalOperatorTypeID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,AddLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LibraryId"' SqlDbType.Int' 4' "LibraryId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,AddLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.NText' 10000' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,AddLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@DefaultLanguageCode"' SqlDbType.NVarChar' 50' "DefaultLanguageCode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LibraryID"' SqlDbType.Int' 4' "LibraryID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LibraryName"' SqlDbType.NVarChar' 255' "LibraryName"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Description"' SqlDbType.NText' 10000' "Description"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Library,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Library.cs,UpdateLibrary,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@DefaultLanguageCode"' SqlDbType.NVarChar' 50' "DefaultLanguageCode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,DeleteSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4) {  	Value = surveyId  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,DeleteSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50) {  	Value = languageCode  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,DeleteSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@Entity"' SqlDbType.VarChar' 20) {  	Value = Entity  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,UpdateMultiLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@MultiLanguageModeId"' SqlDbType.Int' 4) {  	Value = Convert.ToInt32 (languageMode)  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,UpdateSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4) {  	Value = surveyId  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,UpdateSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50) {  	Value = languageCode  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,UpdateSurveyLanguage,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@Entity"' SqlDbType.VarChar' 20) {  	Value = Entity  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,AddMultiLanguageText,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@LanguageItemId"' SqlDbType.Int' 4) {  	Value = languageItemId  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,AddMultiLanguageText,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50) {  	Value = languageCode  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,AddMultiLanguageText,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@LanguageMessageTypeId"' SqlDbType.Int' 4) {  	Value = LanguageMessageTypeId  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,MultiLanguage,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\MultiLanguage.cs,AddMultiLanguageText,The following statement contains a magic number: commandParameters.Add (new SqlParameter ("@ItemText"' SqlDbType.VarChar' 4000) {  	Value = ItemText  }.SqlValue);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SkipQuestionId"' SqlDbType.Int' 4' "SkipQuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ConditionalOperator"' SqlDbType.Int' 4' "ConditionalOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ExpressionOperator"' SqlDbType.Int' 4' "ExpressionOperator"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Score"' SqlDbType.Int' 4' "Score"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ScoreMax"' SqlDbType.Int' 4' "ScoreMax"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,AddSkipLogicRule,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SkipLogicRuleID"' SqlDbType.Int' 4' "SkipLogicRuleID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,CopyQuestionById,The following statement contains a magic number: return int.Parse (commandParameters [4].ToString ());  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,CopyQuestionToLibrary,The following statement contains a magic number: return int.Parse (commandParameters [2].ToString ());  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertChildQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@ParentQuestionId"' SqlDbType.Int' 4' "ParentQuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertChildQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@LibraryId"' SqlDbType.Int' 4' "LibraryId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@SelectionModeId"' SqlDbType.Int' 4' "SelectionModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@LayoutModeId"' SqlDbType.Int' 4' "LayoutModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@DisplayOrder"' SqlDbType.Int' 4' "DisplayOrder"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@PageNumber"' SqlDbType.Int' 4' "PageNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@ColumnsNumber"' SqlDbType.Int' 4' "ColumnsNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@MinSelectionRequired"' SqlDbType.Int' 4' "MinSelectionRequired"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@MaxSelectionAllowed"' SqlDbType.Int' 4' "MaxSelectionAllowed"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionID"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionIDText"' SqlDbType.NVarChar' 255' "QuestionIDText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@Alias"' SqlDbType.NVarChar' 255' "Alias"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@HelpText"' SqlDbType.NVarChar' 255' "HelpText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionGroupId"' SqlDbType.Int' 4' "QuestionGroupId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionId"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@RepeatableSectionModeId"' SqlDbType.Int' 4' "RepeatableSectionModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@MaxSections"' SqlDbType.Int' 4' "MaxSections"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionGridAnswersCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@QuestionId"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,GetInsertQuestionSectionGridAnswersCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@AnswerId"' SqlDbType.Int' 4' "AnswerId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: try {  	// Add Question groups so we can attach them to questions  	int surveyId = importQuestions.Question.First ().SurveyId;  	// Add Question groups so we can attach them to questions  	string defaultLang = null;  	var groups = new QuestionGroups ();  	var existingGroups = groups.GetAll (defaultLang).QuestionGroups;  	foreach (var qgrp in importQuestions.QuestionGroups.OrderBy (x => x.IsParentGroupIdNull () ? 0 : 1))//Load parent groups first  	 {  		var grpHere = existingGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  		int groupIdHere;  		if (grpHere == null) {  			int? parentGroupId = null;  			if (!qgrp.IsParentGroupIdNull ())//Has Parent Group  			 {  				var pgrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.ID == qgrp.ParentGroupId);  				if (pgrp != null) {  					var exPar = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == pgrp.GroupName);  					if (exPar != null)  						parentGroupId = exPar.ID;  				}  			}  			groups.AddNewGroup (qgrp.GroupName' parentGroupId' defaultLang);  			var grt = groups.GetAll (defaultLang).QuestionGroups.FirstOrDefault (x => x.GroupName == qgrp.GroupName);  			groupIdHere = grt.ID;  		}  		else {  			groupIdHere = grpHere.ID;  		}  		importQuestions.Question.Where (x => x.QuestionGroupId == qgrp.OldId).ToList ().ForEach (x => x.QuestionGroupId = groupIdHere);  	}  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerType"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "RegularExpression"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Question"' insertQuestionCommand' new SqlCommand ()' insertQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "Answer"' insertAnswerCommand' new SqlCommand ()' insertAnswerCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerConnection"' insertAnswerConnectionCommand' new SqlCommand ()' insertAnswerConnectionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "ChildQuestion"' insertChildQuestionCommand' new SqlCommand ()' insertChildQuestionCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "AnswerProperty"' insertAnswerPropertyCommand' new SqlCommand ()' insertAnswerPropertyCommand' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionOption"' command8' new SqlCommand ()' command8' UpdateBehavior.Transactional);  	DbConnection.db.UpdateDataSet (importQuestions' "QuestionSectionGridAnswer"' insertQuestionSectionGridAnswersCommand' new SqlCommand ()' insertQuestionSectionGridAnswersCommand' UpdateBehavior.Transactional);  	var multiLanguage = new MultiLanguage ();  	int newQuestionId = importQuestions.Question [0].QuestionId;  	foreach (var langText in importQuestions.MultiLanguageText) {  		var localGroups = groups.GetAll (defaultLang).QuestionGroups;  		//Process Survey level  		if (langText.LanguageMessageTypeId == 10) {  			var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  			if (impGrp != null) {  				var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  				try {  					if (localGrp != null)  						multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  				}  				catch (Exception ex) {  				}  			}  		}  		if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  			multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  			multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	}  	sqlTransaction.Commit ();  	sqlConnection.Close ();  }  catch (Exception exception) {  	sqlTransaction.Rollback ();  	throw exception;  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: foreach (var langText in importQuestions.MultiLanguageText) {  	var localGroups = groups.GetAll (defaultLang).QuestionGroups;  	//Process Survey level  	if (langText.LanguageMessageTypeId == 10) {  		var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  		if (impGrp != null) {  			var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  			try {  				if (localGrp != null)  					multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  			}  			catch (Exception ex) {  			}  		}  	}  	if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  		multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  	if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  		multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 10) {  	var impGrp = importQuestions.QuestionGroups.SingleOrDefault (x => x.OldId == langText.LanguageItemId);  	if (impGrp != null) {  		var localGrp = localGroups.SingleOrDefault (x => x.GroupName == impGrp.GroupName);  		try {  			if (localGrp != null)  				multiLanguage.AddMultiLanguageText (localGrp.ID' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  		}  		catch (Exception ex) {  		}  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 3 || langText.LanguageMessageTypeId == 11 || langText.LanguageMessageTypeId == 12)  	multiLanguage.AddMultiLanguageText (newQuestionId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  	multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,ImportQuestions,The following statement contains a magic number: if (langText.LanguageMessageTypeId == 1 || langText.LanguageMessageTypeId == 2 || langText.LanguageMessageTypeId == 13)  	multiLanguage.AddMultiLanguageText (importQuestions.Answer.Single (x => x.OldId == langText.LanguageItemId).AnswerId' langText.LanguageCode' langText.LanguageMessageTypeId' langText.ItemText);  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateChildQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ChildQuestionId"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@QuestionId"' SqlDbType.Int' 4' "QuestionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SelectionModeId"' SqlDbType.Int' 4' "SelectionModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LayoutModeId"' SqlDbType.Int' 4' "LayoutModeId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ColumnsNumber"' SqlDbType.Int' 4' "ColumnsNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@MinSelectionRequired"' SqlDbType.Int' 4' "MinSelectionRequired"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@MaxSelectionAllowed"' SqlDbType.Int' 4' "MaxSelectionAllowed"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@QuestionGroupId"' SqlDbType.Int' 4' "QuestionGroupId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@HelpText"' SqlDbType.NVarChar' 4000' "HelpText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@Alias"' SqlDbType.NVarChar' 255' "Alias"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Question.cs,UpdateQuestion,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@QuestionIdText"' SqlDbType.NVarChar' 255' "QuestionIdText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,RegularExpression,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\RegularExpression.cs,GetInsertRegularExpressionCommand,The following statement contains a magic number: command.Parameters.Add (new SqlParameter ("@RegularExpressionId"' SqlDbType.Int' 4' "RegularExpressionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,RegularExpression,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\RegularExpression.cs,UpdateRegularExpression,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@RegularExpressionId"' SqlDbType.Int' 4' "RegularExpressionId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Role,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Role.cs,AddRole,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@RoleId"' SqlDbType.Int' 4' "RoleId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Role,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Role.cs,UpdateRole,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@RoleId"' SqlDbType.Int' 4' "RoleId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,AddUser,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@UserId"' SqlDbType.Int' 4' "UserId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,AddUserSettings,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@UserId"' SqlDbType.Int' 4' "UserId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,UpdateUser,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@UserId"' SqlDbType.Int' 4' "UserId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,User,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\User.cs,UpdateUserSettings,The following statement contains a magic number: updateCommand.Parameters.Add (new SqlParameter ("@UserId"' SqlDbType.Int' 4' "UserId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@UId"' SqlDbType.VarChar' 50' "UId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ResumeUId"' SqlDbType.VarChar' 50' "ResumeUId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ProgressSaveDate"' SqlDbType.DateTime' 8' "ProgressSaveDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ResumeAtPageNumber"' SqlDbType.Int' 4' "ResumeAtPageNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ResumeQuestionNumber"' SqlDbType.Int' 4' "ResumeQuestionNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ResumeHighestPageNumber"' SqlDbType.Int' 4' "ResumeHighestPageNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.VarChar' 50' "LanguageCode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,AddVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: for (int voterIndex = 0; voterIndex < voterImport.Voter.Count; voterIndex++) {  	var voter = voterImport.Voter [voterIndex];  	voter.SurveyID = SurveyId;  	//Create a new structure with voter and answers for the voter  	NSurveyVoter voterAnswers = new NSurveyVoter ();  	voterAnswers.EnforceConstraints = false;  	voterAnswers.Voter.ImportRow (voter);  	voterAnswers.Answer.Columns.Add ("SurveyId"' typeof(int));  	voterAnswers.Answer.Columns.Add ("QuestionText"' typeof(string));  	var answers = voterImport.Answer.Where (x => x.VoterId == voter.VoterID).ToList ();  	for (int answerIndex = 0; answerIndex < answers.Count (); answerIndex++) {  		var currAnswer = answers [answerIndex];  		voterAnswers.Answer.ImportRow (currAnswer);  	}  	foreach (var dr in voterAnswers.Answer) {  		dr ["QuestionText"] = voterImport.Question.Single (x => x.QuestionId == dr.QuestionId && x.VoterID == dr.VoterId).QuestionText;  		dr ["SurveyId"] = SurveyId;  	}  	SqlCommand insertCommand = new SqlCommand ("vts_spVoterImport"' connection' transaction);  	insertCommand.CommandType = CommandType.StoredProcedure;  	insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  	insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  	insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  	insertCommand.Parameters ["@VoterID"].Direction = ParameterDirection.Output;  	SqlCommand command2 = new SqlCommand ("vts_spVoterAnswersImport"' connection' transaction);  	command2.CommandType = CommandType.StoredProcedure;  	command2.Parameters.Add (new SqlParameter ("@Answer"' SqlDbType.NText' 0x3fffffff' "Answer"));  	command2.Parameters.Add (new SqlParameter ("@VoterAnswer"' SqlDbType.NText' 0x3fffffff' "VoterAnswer"));  	command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  	command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  	command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  	command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  	command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  	try {  		DbConnection.db.UpdateDataSet (voterAnswers' "Voter"' insertCommand' new SqlCommand ()' insertCommand' UpdateBehavior.Transactional);  		int voterId = voterAnswers.Voter [0].VoterID;  		foreach (var dr in voterAnswers.Answer)  			dr.VoterId = voterId;  		DbConnection.db.UpdateDataSet (voterAnswers' "Answer"' command2' new SqlCommand ()' command2' UpdateBehavior.Transactional);  	}  	catch (Exception exception) {  		transaction.Rollback ();  		throw;  	}  }  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@IPSource"' SqlDbType.NVarChar' 50' "IPSource"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@VoteDate"' SqlDbType.DateTime' 8' "VoteDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@StartDate"' SqlDbType.DateTime' 8' "StartDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@LanguageCode"' SqlDbType.NVarChar' 50' "LanguageCode"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@QuestionDisplayOrder"' SqlDbType.Int' 4' "QuestionDisplayOrder"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@AnswerDisplayOrder"' SqlDbType.Int' 4' "AnswerDisplayOrder"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@SurveyId"' SqlDbType.Int' 4' "SurveyId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,ImportVoter,The following statement contains a magic number: command2.Parameters.Add (new SqlParameter ("@QuestionText"' SqlDbType.NVarChar' 4000' "QuestionText"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,LogInvitationError,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SurveyID"' SqlDbType.Int' 4' "SurveyID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,LogInvitationError,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@ErrorDate"' SqlDbType.DateTime' 8' "ErrorDate"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,LogInvitationError,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@InvitationLogId"' SqlDbType.Int' 4' "InvitationLogId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,LogInvitationError,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@EmailId"' SqlDbType.Int' 4' "EmailId"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,UpdateVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@AnswerID"' SqlDbType.Int' 4' "AnswerID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,UpdateVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@VoterID"' SqlDbType.Int' 4' "VoterID"));  
Magic Number,Votations.NSurvey.SQLServerDAL,Voter,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_SQLServerDAL\Votations.NSurvey.SQLServerDAL\Voter.cs,UpdateVoter,The following statement contains a magic number: insertCommand.Parameters.Add (new SqlParameter ("@SectionNumber"' SqlDbType.Int' 4' "SectionNumber"));  
