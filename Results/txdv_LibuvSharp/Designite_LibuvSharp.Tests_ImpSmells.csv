Implementation smell,Namespace,Class,File,Method,Description
Magic Number,LibuvSharp.Tests,AsyncFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\AsyncFixture.cs,Simple,The following statement contains a magic number: async.Callback += () => {  				int n;  				lock (o) {  					n = ++async_cb_called;  				}    				if (n == 3) {  					async.Close();  				}  			};
Magic Number,LibuvSharp.Tests,AsyncFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\AsyncFixture.cs,Simple,The following statement contains a magic number: new Thread(() => {  				while (true) {  					int n;  					lock (o) {  						n = async_cb_called;  					}    					if (n == 3) {  						break;  					}    					async.Send();  				}  			}).Start();
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,NotNullConnect,The following statement contains a magic number: int port = 8000;
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,NotNullConnect,The following statement contains a magic number: var ep = new IPEndPoint(ip' 8000);
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,ConnectToNotListeningPort,The following statement contains a magic number: socket.Connect("127.0.0.1"' 7999' (e) => {  				Assert.NotNull(e);  			});
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,RemoteAndLocalAddress,The following statement contains a magic number: l.Bind(IPAddress.Any' 8000);
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,RemoteAndLocalAddress,The following statement contains a magic number: Action check = () => {  				if (client == null || server == null) {  					return;  				}    				Assert.Equal(client.LocalAddress' server.RemoteAddress);  				Assert.Equal(client.RemoteAddress' server.LocalAddress);  				Assert.Equal(server.LocalAddress.Port' 8000);    				client.Shutdown();  				server.Shutdown();  				l.Close();    				called = true;  			};
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,RemoteAndLocalAddress,The following statement contains a magic number: t.Connect("127.0.0.1"' 8000' (e) => {  				client = t;  				check();  			});
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,NotNullListener,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => t.Bind(null as string' 8000));
Magic Number,LibuvSharp.Tests,TcpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TcpFixture.cs,NotNullListener,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => t.Bind(null as IPAddress' 8000));
Magic Number,LibuvSharp.Tests,UdpFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\UdpFixture.cs,RunTest,The following statement contains a magic number: Assert.Equal(2' close_cb_called);
Magic Number,LibuvSharp.Tests,LoopFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\LoopFixture.cs,Data,The following statement contains a magic number: Loop.Default.Data = new IntPtr(42);
Magic Number,LibuvSharp.Tests,LoopFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\LoopFixture.cs,Data,The following statement contains a magic number: Assert.Equal(Loop.Default.Data.ToInt32()' 42);
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,Default,The following statement contains a magic number: Port = 8000;
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,StressTest,The following statement contains a magic number: int times = 10;
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,StressTest,The following statement contains a magic number: Assert.Equal(3' close_cb_called);
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,StressTest,The following statement contains a magic number: j < 10
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,SimpleTest,The following statement contains a magic number: Assert.Equal(3' close_cb_called);
Magic Number,LibuvSharp.Tests,Default,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\Default.cs,OneSideCloseTest,The following statement contains a magic number: Assert.Equal(3' close_cb_called);
Magic Number,LibuvSharp.Tests,DirectoryFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\DirectoryFixture.cs,CreateDirectory,The following statement contains a magic number: UVDirectory.Create(Default.Directory' 511' (e) => {  				Assert.Null(e);  				Assert.True(Directory.Exists(Default.Directory));  				Directory.Delete(Default.Directory);  			});
Magic Number,LibuvSharp.Tests,DirectoryFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\DirectoryFixture.cs,ReadNotEmptyDirectory,The following statement contains a magic number: UVDirectory.Read(Default.Directory' (e' list) => {  				Assert.Null(e);  				Assert.NotNull(list);  				Assert.Equal(list.Length' 2);    				Assert.True(list.Select(entity => entity.Name).Contains("dir"));  				Assert.True(list.Select(entity => entity.Name).Contains("file"));    				Directory.Delete(Default.Directory' true);  			});
Magic Number,LibuvSharp.Tests,ThreadingFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\ThreadingFixture.cs,LoopBlocking,The following statement contains a magic number: Loop.Default.QueueUserWorkItem(() => {  				var stopwatch = Stopwatch.StartNew();  				System.Threading.Thread.Sleep(1000);  				stopwatch.Stop();  				span = stopwatch.Elapsed;  			}' null);
Magic Number,LibuvSharp.Tests,ThreadingFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\ThreadingFixture.cs,LoopBlocking,The following statement contains a magic number: Assert.True(span.TotalMilliseconds >= 1000);
Magic Number,LibuvSharp.Tests,TimeoutFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TimeoutFixture.cs,WorksWith,The following statement contains a magic number: Timeout.In<TEndPoint>(TimeSpan.FromMilliseconds(100)' successClient.Connect)(endPoint' (exception) => {  				Assert.Equal<Exception>(null' exception);  				successClient.Dispose();  				callbacks++;  			});
Magic Number,LibuvSharp.Tests,TimeoutFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TimeoutFixture.cs,WorksWith,The following statement contains a magic number: Assert.Equal<int>(2' callbacks);
Magic Number,LibuvSharp.Tests,TimeoutFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TimeoutFixture.cs,WorksWithAsync,The following statement contains a magic number: Loop.Default.Run(async () => {  				using (var server = new TListener()) {  					server.Unref();  					server.Bind(endPoint);  					server.Listen();  					server.Connection += () => server.Accept().Shutdown();    					int callbacks = 0;    					using (var failClient = new TClient()) {  						try {  							await failClient.ConnectAsync(endPoint' TimeSpan.FromTicks(1));  						} catch (TimeoutException) {  							callbacks++;  						}  					}    					using (var successClient = new TClient())  					await successClient.ConnectAsync(endPoint' TimeSpan.FromMilliseconds(100));    					callbacks++;    					Assert.Equal<int>(2' callbacks);  				}  			});
Magic Number,LibuvSharp.Tests,TimeoutFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\TimeoutFixture.cs,WorksWithAsync,The following statement contains a magic number: Loop.Default.Run(async () => {  				using (var server = new TListener()) {  					server.Unref();  					server.Bind(endPoint);  					server.Listen();  					server.Connection += () => server.Accept().Shutdown();    					int callbacks = 0;    					using (var failClient = new TClient()) {  						try {  							await failClient.ConnectAsync(endPoint' TimeSpan.FromTicks(1));  						} catch (TimeoutException) {  							callbacks++;  						}  					}    					using (var successClient = new TClient())  					await successClient.ConnectAsync(endPoint' TimeSpan.FromMilliseconds(100));    					callbacks++;    					Assert.Equal<int>(2' callbacks);  				}  			});
Magic Number,LibuvSharp.Tests,IPCFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\IPCFixture.cs,TestCanSendHandles,The following statement contains a magic number: Loop.Default.Run(async () => {  				var handles = new Stack<Handle>();  				var pipelistener = new IPCPipeListener();  				pipelistener.Bind(pipename);  				pipelistener.Connection += () => {  					var client = pipelistener.Accept();  					client.Resume();  					client.HandleData += (handle' data) => {  						handles.Push(handle);  						count++;  						if (count == 3) {  							foreach (var h in handles) {  								h.Close();  							}  							pipelistener.Close();  						}  					};  				};  				pipelistener.Listen();    				var pipe = new IPCPipe();  				await pipe.ConnectAsync(pipename);    				var tcplistener = new TcpListener();  				tcplistener.Bind(ipep);  				tcplistener.Connection += () => {  					var client = tcplistener.Accept();  					pipe.Write(client' new byte[1]' (ex) => {  						client.Close();  						tcplistener.Close();  					});  				};  				tcplistener.Listen();    				var tcp = new Tcp();  				await tcp.ConnectAsync(ipep);  				tcp.Write("HELLO WORLD");    				var udp = new Udp();  				udp.Bind(ipep);  				pipe.Write(udp' Encoding.Default.GetBytes("UDP")' (ex) => udp.Close());  				pipe.Write(pipe' Encoding.Default.GetBytes("pipe")' (ex) => pipe.Close());  			});
Magic Number,LibuvSharp.Tests,IPCFixture,D:\research\architectureSmells\repos1\txdv_LibuvSharp\LibuvSharp.Tests\IPCFixture.cs,TestCanSendHandles,The following statement contains a magic number: Assert.Equal(3' count);
