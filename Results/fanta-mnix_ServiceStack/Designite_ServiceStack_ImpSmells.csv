Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The method has 107 lines of code.
Long Method,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,GetBlockPattern,The method has 128 lines of code.
Long Method,MarkdownDeep,Block,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Block.cs,Render,The method has 159 lines of code.
Long Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The method has 232 lines of code.
Long Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The method has 234 lines of code.
Long Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanHtml,The method has 149 lines of code.
Long Method,MarkdownDeep,LinkDefinition,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\LinkDefinition.cs,ParseLinkTarget,The method has 108 lines of code.
Long Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The method has 158 lines of code.
Long Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessLinkOrImageOrFootnote,The method has 110 lines of code.
Complex Method,ServiceStack.CacheAccess.Providers,CacheClientExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\CacheClientExtensions.cs,ResolveFromCache,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Html.AntiXsrf,CryptoUtil,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\BinaryBlob.cs,ComputeSHA256,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,ValidateTokens,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Html,DictionaryHelpers,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelStateDictionary.cs,FindKeysWithPrefix,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,SelectInternal,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationSummary,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,GenerateType,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Html,ExpressionHelper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ExpressionHelper.cs,GetExpressionText,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,InputHelper,Cyclomatic complexity of the method is 28
Complex Method,ServiceStack.Html,ModelMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelMetadata.cs,FromLambdaExpression,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Html,ModelMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelMetadata.cs,FromStringExpression,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Html,TagBuilder,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TagBuilder.cs,ToString,Cyclomatic complexity of the method is 18
Complex Method,ServiceStack,MetadataTypesHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack,PredefinedRoutesFeature,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\PredefinedRoutesFeature.cs,GetHandlerForPathParts,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack,MetadataFeature,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataFeature.cs,GetHandlerForPathParts,Cyclomatic complexity of the method is 17
Complex Method,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.ServiceHost,MetadataPagesConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\MetadataPagesConfig.cs,MetadataPagesConfig,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.ServiceHost,NServiceExec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\NServiceExec.cs,NServiceExec,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.ServiceHost,ServiceRunner,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceRunner.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,RestPath,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,CreateRequest,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,GetRestPathForRequest,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.ServiceHost,ServiceExec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\GServiceExec.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,ToNewApiAction,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.MiniProfiler.SqlFormatters,InlineFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\InlineFormatter.cs,GetParameterValue,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,FormatSql,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,Includes,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ServiceStackHttpHandlerFactory,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,GetHandler,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,AfterInit,Cyclomatic complexity of the method is 24
Complex Method,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,ApplyRequestFilters,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,ApplyResponseFilters,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,SetPathsFromConfiguration,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,LoadWwwForm,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToOutputStream,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,Cyclomatic complexity of the method is 27
Complex Method,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetResponseContentType,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,IsInLocalSubnet,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,AddViewPage,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,RenderInTemplateIfAny,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.WebHost.Endpoints.Support.Templates,TableTemplate,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\TableTemplate.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.WebHost.Endpoints.Support.Templates,ListTemplate,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\ListTemplate.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,Evaluator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Evaluator.cs,ConstructEvaluator,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,MarkdownPage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\MarkdownPage.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,CreateTemplateBlocks,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,GetNextStatementExpr,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,EatBlockExpr,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,Cyclomatic complexity of the method is 10
Complex Method,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,Markdown,Cyclomatic complexity of the method is 19
Complex Method,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,Normalize,Cyclomatic complexity of the method is 27
Complex Method,ServiceStack.WebHost.Endpoints.Metadata,BaseMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseMetadataHandler.cs,ProcessOperations,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.WebHost.Endpoints.Support,NotFoundHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\NotFoundHttpHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 10
Complex Method,MarkdownDeep,Block,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Block.cs,Render,Cyclomatic complexity of the method is 97
Complex Method,MarkdownDeep,Block,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Block.cs,RenderPlain,Cyclomatic complexity of the method is 40
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,Cyclomatic complexity of the method is 36
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,CollapseLines,Cyclomatic complexity of the method is 32
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,Cyclomatic complexity of the method is 42
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessMarkdownEnabledHtml,Cyclomatic complexity of the method is 17
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanHtml,Cyclomatic complexity of the method is 23
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildList,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildDefinitionLists,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,HtmlTag,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\HtmlTag.cs,ParseHelper,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,LinkDefinition,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\LinkDefinition.cs,ParseLinkTarget,Cyclomatic complexity of the method is 22
Complex Method,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,Transform,Cyclomatic complexity of the method is 13
Complex Method,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,HtmlEncode,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,Cyclomatic complexity of the method is 28
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,MakeID,Cyclomatic complexity of the method is 14
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Render,Cyclomatic complexity of the method is 42
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,RenderPlain,Cyclomatic complexity of the method is 28
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,Cyclomatic complexity of the method is 43
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,CreateEmphasisMark,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,Cyclomatic complexity of the method is 10
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,Cyclomatic complexity of the method is 17
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,Cyclomatic complexity of the method is 8
Complex Method,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessLinkOrImageOrFootnote,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,StringScanner,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\StringScanner.cs,IsUrlChar,Cyclomatic complexity of the method is 21
Complex Method,MarkdownDeep,TableSpec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\TableSpec.cs,RenderRow,Cyclomatic complexity of the method is 11
Complex Method,MarkdownDeep,TableSpec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\TableSpec.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SkipHtmlEntity,Cyclomatic complexity of the method is 9
Complex Method,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SmartHtmlEncodeAmpsAndAngles,Cyclomatic complexity of the method is 19
Complex Method,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SmartHtmlEncodeAmps,Cyclomatic complexity of the method is 10
Complex Method,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,IsEscapableChar,Cyclomatic complexity of the method is 20
Long Parameter List,ServiceStack.CacheAccess.Providers,CacheClientExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\CacheClientExtensions.cs,Cache,The method has 5 parameters.
Long Parameter List,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,EmptyModelMetadataProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\EmptyModelMetadataProvider.cs,CreateMetadata,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,PocoMetadataProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\PocoMetadataProvider.cs,CreateMetadata,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownList,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownList,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListFor,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListFor,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListHelper,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,ListBoxHelper,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,SelectInternal,The method has 7 parameters.
Long Parameter List,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageHelper,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,IViewEngine,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\IViewEngine.cs,RenderPartial,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,CheckBoxHelper,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,HiddenHelper,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,PasswordHelper,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButton,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButton,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButtonHelper,The method has 7 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBox,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBox,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBoxHelper,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,InputHelper,The method has 11 parameters.
Long Parameter List,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextArea,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextArea,The method has 6 parameters.
Long Parameter List,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaFor,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaFor,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaHelper,The method has 5 parameters.
Long Parameter List,ServiceStack.Html,ModelMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelMetadata.cs,ModelMetadata,The method has 5 parameters.
Long Parameter List,ServiceStack,HttpExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\HttpExtensions.cs,EndHttpHandlerRequest,The method has 5 parameters.
Long Parameter List,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ToType,The method has 5 parameters.
Long Parameter List,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,ResolveImpl,The method has 5 parameters.
Long Parameter List,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,ResolveImpl,The method has 6 parameters.
Long Parameter List,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,ResolveImpl,The method has 7 parameters.
Long Parameter List,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,ResolveImpl,The method has 8 parameters.
Long Parameter List,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,The method has 5 parameters.
Long Parameter List,ServiceStack.ServiceHost,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpResponseExtensions.cs,SetCookie,The method has 5 parameters.
Long Parameter List,ServiceStack.ServiceHost,RequestContextExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RequestContextExtensions.cs,ToOptimizedResultUsingCache,The method has 5 parameters.
Long Parameter List,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,RestPath,The method has 6 parameters.
Long Parameter List,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterGServiceExecutor,The method has 7 parameters.
Long Parameter List,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterNServiceExecutor,The method has 7 parameters.
Long Parameter List,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,CallServiceExecuteGeneric,The method has 5 parameters.
Long Parameter List,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetImplementedActions,The method has 6 parameters.
Long Parameter List,ServiceStack.ServiceHost,ServiceRoutes,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceRoutes.cs,Add,The method has 5 parameters.
Long Parameter List,ServiceStack.MiniProfiler,Profiler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Profiler.cs,RenderIncludes,The method has 6 parameters.
Long Parameter List,ServiceStack.MiniProfiler.Data,ProfiledDbDataReader,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Data\ProfiledDbDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,ServiceStack.MiniProfiler.Data,ProfiledDbDataReader,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Data\ProfiledDbDataReader.cs,GetChars,The method has 5 parameters.
Long Parameter List,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,SqlServerFormatter,The method has 7 parameters.
Long Parameter List,ServiceStack.MiniProfiler.Storage,DatabaseStorageBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Storage\DatabaseStorageBase.cs,MapTimings,The method has 5 parameters.
Long Parameter List,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,RenderIncludes,The method has 8 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints,MetadataConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\MetadataConfig.cs,MetadataConfig,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints,SoapMetadataConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\SoapMetadataConfig.cs,SoapMetadataConfig,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,AfterInit,The method has 14 parameters.
Long Parameter List,ServiceStack.Markdown,MarkdownViewBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Markdown\MarkdownViewBase.cs,Init,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteErrorToResponse,The method has 7 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,HandleCustomErrorHandler,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,RenderPartial,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,RenderDynamicPage,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,RenderDynamicPage,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Support.Markdown,MarkdownPage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\MarkdownPage.cs,MarkdownPage,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,EatBlockExpr,The method has 5 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Metadata,Soap11MetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\Soap11MetadataHandler.cs,RenderOperation,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Metadata,Soap12MetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\Soap12MetadataHandler.cs,RenderOperation,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Metadata,BaseMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseMetadataHandler.cs,RenderOperation,The method has 6 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Support.Mocks,HttpRequestMock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Mocks\HttpRequestMock.cs,HttpRequestMock,The method has 7 parameters.
Long Parameter List,ServiceStack.WebHost.Endpoints.Support.Metadata,WsdlMetadataHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\WsdlMetadataHandlerBase.cs,GetWsdlTemplate,The method has 5 parameters.
Long Identifier,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,GenerateFormToken,The length of the parameter requireAuthenticatedUserHeuristicChecks is 39.
Long Identifier,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,ValidateTokens,The length of the parameter useCaseSensitiveUsernameComparison is 34.
Long Identifier,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageHelper,The length of the parameter replaceValidationMessageContents is 32.
Long Identifier,ServiceStack,HttpExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\HttpExtensions.cs,ToAbsoluteUri,The length of the parameter formatFallbackToPredefinedRoute is 31.
Long Statement,ServiceStack.CacheAccess.Providers,BasicPersistenceProviderCacheBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\BasicPersistenceProviderCacheBase.cs,GetByIds,The length of the statement  "		var entityIdsNotInCache = cacheKeys.Where (x => !cacheEntitiesMap.ContainsKey (x)).ConvertAll (x => TypeSerializer.DeserializeFromString (UrnId.GetStringId (x)' entityIdType)); " is 176.
Long Statement,ServiceStack.CacheAccess.Providers,CacheClientExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\CacheClientExtensions.cs,Cache,The length of the statement  "			return (compressedSerializedDto != null) ? new CompressedResult (compressedSerializedDto' context.CompressionType' context.ResponseContentType) : null; " is 151.
Long Statement,ServiceStack.CacheAccess.Providers,CacheClientExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\CacheClientExtensions.cs,RemoveByPattern,The length of the statement  "		throw new NotImplementedException ("ICacheRemovableByPattern is not implemented by the cache client: " + cacheClient.GetType ().FullName); " is 138.
Long Statement,ServiceStack.CacheAccess.Providers,CacheClientExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\CacheClientExtensions.cs,RemoveByRegex,The length of the statement  "		throw new NotImplementedException ("ICacheRemovableByPattern is not implemented by the cache client: " + cacheClient.GetType ().FullName); " is 138.
Long Statement,ServiceStack.CacheAccess.Providers,FileAndCacheTextManager,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\FileAndCacheTextManager.cs,Clear,The length of the statement  "		var deflateFilePath = Path.Combine (this.baseCachePath' cacheKey + CompressionTypes.GetExtension (CompressionTypes.Deflate)); " is 125.
Long Statement,ServiceStack.Configuration,AppSettingsBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Configuration\AppSettingsBase.cs,GetDictionary,The length of the statement  "		var message = string.Format ("The {0} setting had an invalid dictionary format. The correct format is of type \"Key1:Value1'Key2:Value2\""' key); " is 145.
Long Statement,ServiceStack.Configuration,AppSettingsBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Configuration\AppSettingsBase.cs,Get,The length of the statement  "		var message = string.Format ("The {0} setting had an invalid format. The value \"{1}\" could not be cast to type {2}"' name' stringValue' typeof(T).FullName); " is 158.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,ExtractClaimUid,The length of the statement  "	string[] uniqueIdentifierParameters = GetUniqueIdentifierParameters (claimsIdentity' _config.UniqueClaimTypeIdentifier); " is 120.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The length of the statement  "		Claim matchingClaim = claims.SingleOrDefault (claim => String.Equals (uniqueClaimTypeIdentifier' claim.ClaimType' StringComparison.Ordinal)); " is 141.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.ClaimUidExtractor_ClaimNotPresent' uniqueClaimTypeIdentifier)); " is 156.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The length of the statement  "	Claim nameIdentifierClaim = claims.SingleOrDefault (claim => String.Equals (NameIdentifierClaimType' claim.ClaimType' StringComparison.Ordinal)); " is 145.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The length of the statement  "	Claim identityProviderClaim = claims.SingleOrDefault (claim => String.Equals (IdentityProviderClaimType' claim.ClaimType' StringComparison.Ordinal)); " is 149.
Long Statement,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The length of the statement  "	if (nameIdentifierClaim == null || String.IsNullOrEmpty (nameIdentifierClaim.Value) || identityProviderClaim == null || String.IsNullOrEmpty (identityProviderClaim.Value)) { " is 173.
Long Statement,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,GenerateFormToken,The length of the statement  "	if (requireAuthenticatedUserHeuristicChecks && String.IsNullOrEmpty (formToken.Username) && formToken.ClaimUid == null && String.IsNullOrEmpty (formToken.AdditionalData)) { " is 172.
Long Statement,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,GenerateFormToken,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.TokenValidator_AuthenticatedUserWithoutUsername' identity.GetType ())); " is 164.
Long Statement,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,ValidateTokens,The length of the statement  "	bool useCaseSensitiveUsernameComparison = currentUsername.StartsWith ("http://"' StringComparison.OrdinalIgnoreCase) || currentUsername.StartsWith ("https://"' StringComparison.OrdinalIgnoreCase); " is 196.
Long Statement,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,ValidateTokens,The length of the statement  "	if (!String.Equals (fieldToken.Username' currentUsername' (useCaseSensitiveUsernameComparison) ? StringComparison.Ordinal : StringComparison.OrdinalIgnoreCase)) { " is 162.
Long Statement,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,ValidateTokens,The length of the statement  "	if (_config.AdditionalDataProvider != null && !_config.AdditionalDataProvider.ValidateAdditionalData (httpContext' fieldToken.AdditionalData)) { " is 144.
Long Statement,ServiceStack.Html.Claims,ClaimsIdentityConverter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Claims\ClaimsIdentityConverter.cs,AddToList,The length of the statement  "		MethodInfo tryConvertClosedMethod = _claimsIdentityTryConvertOpenMethod.MakeGenericMethod (claimsIdentityType' claimType); " is 122.
Long Statement,ServiceStack.Html.Claims,ClaimsIdentityConverter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Claims\ClaimsIdentityConverter.cs,AddToList,The length of the statement  "		Func<IIdentity' ClaimsIdentity> converter = (Func<IIdentity' ClaimsIdentity>)Delegate.CreateDelegate (typeof(Func<IIdentity' ClaimsIdentity>)' tryConvertClosedMethod); " is 167.
Long Statement,ServiceStack.Html.Claims,ClaimsIdentityConverter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Claims\ClaimsIdentityConverter.cs,GetDefaultConverters,The length of the statement  "                Type claimsIdentityType = Type.GetType("Microsoft.IdentityModel.Claims.IClaimsIdentity' Microsoft.IdentityModel' Version=3.5.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35");" is 181.
Long Statement,ServiceStack.Html.Claims,ClaimsIdentityConverter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Claims\ClaimsIdentityConverter.cs,GetDefaultConverters,The length of the statement  "                Type claimType = Type.GetType("Microsoft.IdentityModel.Claims.Claim' Microsoft.IdentityModel' Version=3.5.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35");" is 162.
Long Statement,ServiceStack.Html,Error,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Error.cs,ViewDataDictionary_WrongTModelType,The length of the statement  "	string message = String.Format (CultureInfo.CurrentCulture' MvcResources.ViewDataDictionary_WrongTModelType' valueType' modelType); " is 131.
Long Statement,ServiceStack.Html,Error,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\Error.cs,ViewDataDictionary_ModelCannotBeNull,The length of the statement  "	string message = String.Format (CultureInfo.CurrentCulture' MvcResources.ViewDataDictionary_ModelCannotBeNull' modelType); " is 122.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownList,The length of the statement  "	return DropDownList (htmlHelper' name' selectList' null/* optionLabel */' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 135.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownList,The length of the statement  "	return DropDownList (htmlHelper' name' selectList' optionLabel' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 125.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownList,The length of the statement  "	return DropDownListHelper (htmlHelper' metadata: null' expression: name' selectList: selectList' optionLabel: optionLabel' htmlAttributes: htmlAttributes); " is 155.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListFor,The length of the statement  "	return DropDownListFor (htmlHelper' expression' selectList' null/* optionLabel */' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 144.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListFor,The length of the statement  "	return DropDownListFor (htmlHelper' expression' selectList' optionLabel' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 134.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListFor,The length of the statement  "	return DropDownListHelper (htmlHelper' metadata' ExpressionHelper.GetExpressionText (expression)' selectList' optionLabel' htmlAttributes); " is 139.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,DropDownListHelper,The length of the statement  "	return SelectInternal (htmlHelper' metadata' optionLabel' expression' selectList' allowMultiple: false' htmlAttributes: htmlAttributes); " is 136.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,ListBoxFor,The length of the statement  "	return ListBoxHelper (htmlHelper' metadata' ExpressionHelper.GetExpressionText (expression)' selectList' htmlAttributes); " is 121.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,ListBoxHelper,The length of the statement  "	return SelectInternal (htmlHelper' metadata' optionLabel: null' name: name' selectList: selectList' allowMultiple: true' htmlAttributes: htmlAttributes); " is 153.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,GetSelectData,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.HtmlHelper_MissingSelectData' name' "IEnumerable<SelectListItem>")); " is 161.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,GetSelectData,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.HtmlHelper_WrongSelectDataType' name' o.GetType ().FullName' "IEnumerable<SelectListItem>")); " is 186.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,GetSelectListWithDefaultValue,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.HtmlHelper_SelectExpressionNotEnumerable' "expression")); " is 150.
Long Statement,ServiceStack.Html,SelectExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\SelectExtensions.cs,SelectInternal,The length of the statement  "	object defaultValue = (allowMultiple) ? htmlHelper.GetModelStateValue (fullName' typeof(string[])) : htmlHelper.GetModelStateValue (fullName' typeof(string)); " is 158.
Long Statement,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.UnobtrusiveJavascript_ValidationTypeCannotBeEmpty' rule.GetType ().FullName)); " is 171.
Long Statement,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.UnobtrusiveJavascript_ValidationTypeMustBeUnique' rule.ValidationType)); " is 165.
Long Statement,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.UnobtrusiveJavascript_ValidationTypeMustBeLegal' rule.ValidationType' rule.GetType ().FullName)); " is 190.
Long Statement,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.UnobtrusiveJavascript_ValidationParameterCannotBeEmpty' rule.GetType ().FullName)); " is 176.
Long Statement,ServiceStack.Html,UnobtrusiveValidationAttributesGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\UnobtrusiveValidationAttributesGenerator.cs,ValidateUnobtrusiveValidationRule,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.UnobtrusiveJavascript_ValidationParameterMustBeLegal' key' rule.GetType ().FullName)); " is 179.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ApplyFieldValidationMetadata,The length of the statement  "	FieldValidationMetadata fieldMetadata = formContext.GetValidationMetadataForField (modelName' true/* createIfNotFound */); " is 122.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ApplyFieldValidationMetadata,The length of the statement  "	//IEnumerable<ModelValidator> validators = ModelValidatorProviders.Providers.GetValidators(modelMetadata' htmlHelper.ViewContext); " is 130.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,GetInvalidPropertyValueResource,The length of the statement  "		resourceValue = httpContext.GetGlobalResourceObject (ResourceClassKey' "InvalidPropertyValue"' CultureInfo.CurrentUICulture) as string; " is 135.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,Validate,The length of the statement  "	ValidateHelper (htmlHelper' ModelMetadata.FromStringExpression (modelName' htmlHelper.ViewContext.ViewData)' modelName); " is 120.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidateFor,The length of the statement  "	ValidateHelper (htmlHelper' ModelMetadata.FromLambdaExpression (expression' htmlHelper.ViewData)' ExpressionHelper.GetExpressionText (expression)); " is 147.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessage,The length of the statement  "	return ValidationMessage (htmlHelper' modelName' null/* validationMessage */' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 139.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessage,The length of the statement  "	return ValidationMessage (htmlHelper' modelName' validationMessage' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 129.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessage,The length of the statement  "	return ValidationMessageHelper (htmlHelper' ModelMetadata.FromStringExpression (modelName' htmlHelper.ViewContext.ViewData)' modelName' validationMessage' htmlAttributes); " is 171.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageFor,The length of the statement  "	return ValidationMessageFor (htmlHelper' expression' validationMessage' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 133.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageFor,The length of the statement  "	return ValidationMessageHelper (htmlHelper' ModelMetadata.FromLambdaExpression (expression' htmlHelper.ViewData)' ExpressionHelper.GetExpressionText (expression)' validationMessage' htmlAttributes); " is 198.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageHelper,The length of the statement  "	ModelError modelError = (((modelErrors == null) || (modelErrors.Count == 0)) ? null : modelErrors.FirstOrDefault (m => !String.IsNullOrEmpty (m.ErrorMessage)) ?? modelErrors [0]); " is 179.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationMessageHelper,The length of the statement  "	builder.AddCssClass ((modelError != null) ? HtmlHelper.ValidationMessageCssClassName : HtmlHelper.ValidationMessageValidCssClassName); " is 134.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationSummary,The length of the statement  "	return ValidationSummary (htmlHelper' false/* excludePropertyErrors */' message' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 142.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationSummary,The length of the statement  "	return ValidationSummary (htmlHelper' excludePropertyErrors' message' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 131.
Long Statement,ServiceStack.Html,ValidationExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValidationExtensions.cs,ValidationSummary,The length of the statement  "	divBuilder.AddCssClass ((htmlHelper.ViewData.ModelState.IsValid) ? HtmlHelper.ValidationSummaryValidCssClassName : HtmlHelper.ValidationSummaryCssClassName); " is 157.
Long Statement,ServiceStack.Html,ValueProviderResult,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValueProviderResult.cs,ConvertSimpleType,The length of the statement  "		string message = String.Format (CultureInfo.CurrentCulture' MvcResources.ValueProviderResult_NoConverterExists' value.GetType ().FullName' destinationType.FullName); " is 165.
Long Statement,ServiceStack.Html,ValueProviderResult,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValueProviderResult.cs,ConvertSimpleType,The length of the statement  "		object convertedValue = (canConvertFrom) ? converter.ConvertFrom (null/* context */' culture' value) : converter.ConvertTo (null/* context */' culture' value' destinationType); " is 176.
Long Statement,ServiceStack.Html,ValueProviderResult,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ValueProviderResult.cs,ConvertSimpleType,The length of the statement  "		string message = String.Format (CultureInfo.CurrentCulture' MvcResources.ValueProviderResult_ConversionThrew' value.GetType ().FullName' destinationType.FullName); " is 163.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,CreateDynamicModule,The length of the statement  "	var builder = new CustomAttributeBuilder (typeof(SecurityTransparentAttribute).GetConstructor (Type.EmptyTypes)' new object[0]); " is 128.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,CreateDynamicModule,The length of the statement  "	var dynamicAssembly = AppDomain.CurrentDomain.DefineDynamicAssembly (new AssemblyName ("System.Web.Mvc.{Dynamic}")' AssemblyBuilderAccess.Run' assemblyAttributes); " is 163.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,GenerateType,The length of the statement  "	var newType = _dynamicModule.DefineType ("System.Web.Mvc.{Dynamic}." + dynamicTypeName' TypeAttributes.AutoLayout | TypeAttributes.Public | TypeAttributes.Class' baseType); " is 172.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,GenerateType,The length of the statement  "	foreach (ConstructorInfo ctor in baseType.GetConstructors (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)) { " is 131.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,ImplementConstructor,The length of the statement  "	var newCtor = newType.DefineConstructor ((baseCtor.Attributes & ~MethodAttributes.MemberAccessMask) | MethodAttributes.Public/* force public constructor */' baseCtor.CallingConvention' parameterTypes); " is 201.
Long Statement,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,ImplementInterfaceMethod,The length of the statement  "	var newMethod = newType.DefineMethod (interfaceMethod.DeclaringType.Name + "." + interfaceMethod.Name' MethodAttributes.Private | MethodAttributes.HideBySig | MethodAttributes.NewSlot | MethodAttributes.Virtual | MethodAttributes.Final' interfaceMethod.ReturnType' parameterTypes); " is 281.
Long Statement,ServiceStack.Html,ExpressionHelper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ExpressionHelper.cs,GetExpressionText,The length of the statement  "	return String.Equals (expression' "model"' StringComparison.OrdinalIgnoreCase) ? String.Empty // If it's exactly "model"' then give them an empty string' to replicate the lambda behavior " is 186.
Long Statement,ServiceStack.Html,ExpressionHelper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ExpressionHelper.cs,GetIndexerInvocation,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' MvcResources.ExpressionHelper_InvalidIndexerExpression' expression' parameters [0].Name)' ex); " is 174.
Long Statement,ServiceStack.Html,ExpressionHelper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ExpressionHelper.cs,IsSingleArgumentIndexer,The length of the statement  "	return methodExpression.Method.DeclaringType.GetDefaultMembers ().OfType<PropertyInfo> ().Any (p => p.GetGetMethod () == methodExpression.Method); " is 146.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,CheckBoxFor,The length of the statement  "	return CheckBoxHelper (htmlHelper' metadata' ExpressionHelper.GetExpressionText (expression)' isChecked' htmlAttributes); " is 121.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,CheckBoxHelper,The length of the statement  "	return InputHelper (htmlHelper' InputType.CheckBox' metadata' name' value: "true"' useViewData: !explicitValue' isChecked: isChecked ?? false' setId: true' isExplicitValue: false' format: null' htmlAttributes: attributes); " is 222.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,Hidden,The length of the statement  "	return HiddenHelper (htmlHelper' metadata: null' value: value' useViewData: value == null' expression: name' htmlAttributes: htmlAttributes); " is 141.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,HiddenFor,The length of the statement  "	return HiddenHelper (htmlHelper' metadata' metadata.Model' false' ExpressionHelper.GetExpressionText (expression)' htmlAttributes); " is 131.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,HiddenHelper,The length of the statement  "	return InputHelper (htmlHelper' InputType.Hidden' metadata' expression' value' useViewData' isChecked: false' setId: true' isExplicitValue: true' format: null' htmlAttributes: htmlAttributes); " is 192.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,PasswordFor,The length of the statement  "	return PasswordHelper (htmlHelper' ModelMetadata.FromLambdaExpression (expression' htmlHelper.ViewData)' ExpressionHelper.GetExpressionText (expression)' value: null' htmlAttributes: htmlAttributes); " is 199.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,PasswordHelper,The length of the statement  "	return InputHelper (htmlHelper' InputType.Password' metadata' name' value' useViewData: false' isChecked: false' setId: true' isExplicitValue: true' format: null' htmlAttributes: htmlAttributes); " is 195.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButton,The length of the statement  "	bool isChecked = (!String.IsNullOrEmpty (name)) && (String.Equals (htmlHelper.EvalString (name)' valueString' StringComparison.OrdinalIgnoreCase)); " is 147.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButton,The length of the statement  "		return InputHelper (htmlHelper' InputType.Radio' metadata: null' name: name' value: value' useViewData: false' isChecked: false' setId: true' isExplicitValue: true' format: null' htmlAttributes: attributes); " is 207.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButton,The length of the statement  "	return InputHelper (htmlHelper' InputType.Radio' metadata: null' name: name' value: value' useViewData: false' isChecked: isChecked' setId: true' isExplicitValue: true' format: null' htmlAttributes: attributes); " is 211.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButtonFor,The length of the statement  "	return RadioButtonHelper (htmlHelper' metadata' metadata.Model' ExpressionHelper.GetExpressionText (expression)' value' null/* isChecked */' htmlAttributes); " is 157.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButtonHelper,The length of the statement  "		isChecked = model != null && !String.IsNullOrEmpty (name) && String.Equals (model.ToString ()' valueString' StringComparison.OrdinalIgnoreCase); " is 144.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,RadioButtonHelper,The length of the statement  "	return InputHelper (htmlHelper' InputType.Radio' metadata' name' value' useViewData: false' isChecked: isChecked ?? false' setId: true' isExplicitValue: true' format: null' htmlAttributes: attributes); " is 201.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBox,The length of the statement  "	return InputHelper (htmlHelper' InputType.Text' metadata: null' name: name' value: value' useViewData: (value == null)' isChecked: false' setId: true' isExplicitValue: true' format: format' htmlAttributes: htmlAttributes); " is 222.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBoxFor,The length of the statement  "	return htmlHelper.TextBoxFor (expression' format: format' htmlAttributes: HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 135.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBoxFor,The length of the statement  "	return TextBoxHelper (htmlHelper' metadata' metadata.Model' ExpressionHelper.GetExpressionText (expression)' format' htmlAttributes); " is 133.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,TextBoxHelper,The length of the statement  "	return InputHelper (htmlHelper' InputType.Text' metadata' expression' model' useViewData: false' isChecked: false' setId: true' isExplicitValue: true' format: format' htmlAttributes: htmlAttributes); " is 199.
Long Statement,ServiceStack.Html,InputExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\InputExtensions.cs,InputHelper,The length of the statement  "		tagBuilder.MergeAttribute ("value"' attemptedValue ?? ((useViewData) ? htmlHelper.EvalString (fullName' format) : valueParameter)' isExplicitValue); " is 148.
Long Statement,ServiceStack.Html,LabelExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\LabelExtensions.cs,LabelFor,The length of the statement  "	return LabelHelper (html' ModelMetadata.FromLambdaExpression (expression' html.ViewData)' ExpressionHelper.GetExpressionText (expression)' labelText); " is 150.
Long Statement,ServiceStack.Html,LabelExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\LabelExtensions.cs,LabelHelper,The length of the statement  "	var resolvedLabelText = labelText ?? metadata.DisplayName ?? metadata.PropertyName ?? htmlFieldName.Split ('.').Last (); " is 120.
Long Statement,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaFor,The length of the statement  "	return TextAreaHelper (htmlHelper' ModelMetadata.FromLambdaExpression (expression' htmlHelper.ViewData)' ExpressionHelper.GetExpressionText (expression)' implicitRowsAndColumns' htmlAttributes); " is 194.
Long Statement,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaFor,The length of the statement  "	return TextAreaFor (htmlHelper' expression' rows' columns' HtmlHelper.AnonymousObjectToHtmlAttributes (htmlAttributes)); " is 120.
Long Statement,ServiceStack.Html,TextAreaExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TextAreaExtensions.cs,TextAreaFor,The length of the statement  "	return TextAreaHelper (htmlHelper' ModelMetadata.FromLambdaExpression (expression' htmlHelper.ViewData)' ExpressionHelper.GetExpressionText (expression)' GetRowsAndColumnsDictionary (rows' columns)' htmlAttributes); " is 215.
Long Statement,ServiceStack.Html,ModelMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelMetadata.cs,FromStringExpression,The length of the statement  "		ModelMetadata propertyMetadata = viewData.ModelMetadata.Properties.Where (p => p.PropertyName == expression).FirstOrDefault (); " is 127.
Long Statement,ServiceStack.Html,TagBuilder,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TagBuilder.cs,GetAttributesString,The length of the statement  "		if (String.Equals (key' "id"' StringComparison.Ordinal/* case-sensitive */) && String.IsNullOrEmpty (attribute.Value)) { " is 120.
Long Statement,ServiceStack.Html,TagBuilder,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TagBuilder.cs,AppendAttributes,The length of the statement  "		if (String.Equals (key' "id"' StringComparison.Ordinal/* case-sensitive */) && String.IsNullOrEmpty (attribute.Value)) { " is 120.
Long Statement,ServiceStack.Html,TypeHelpers,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TypeHelpers.cs,CreateDelegate,The length of the statement  "	TDelegate d = Delegate.CreateDelegate (typeof(TDelegate)' thisParameter' targetMethod' false/* throwOnBindFailure */) as TDelegate; " is 131.
Long Statement,ServiceStack.Html,TemplateProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TemplateProvider.cs,CompileQueuedPages,The length of the statement  "	Log.InfoFormat ("Starting to compile {0}/{1} pages' {2}"' compilePages.Count' priorityCompilePages.Count' compileInParallel ? "In Parallel" : "Sequentially"); " is 158.
Long Statement,ServiceStack,HttpExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\HttpExtensions.cs,ToAbsoluteUri,The length of the statement  "	var relativeUrl = request.ToUrl (httpMethod ?? HttpMethods.Get' formatFallbackToPredefinedRoute ?? EndpointHost.Config.DefaultContentType.ToContentFormat ()); " is 158.
Long Statement,ServiceStack,MetadataTypesHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,Execute,The length of the statement  "	ProcessRequest (new HttpRequestWrapper (GetType ().Name' context.Request)' new HttpResponseWrapper (context.Response)' GetType ().Name); " is 136.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ToType,The length of the statement  "		metaType.InheritsGenericArgs = type.BaseType.IsGenericType ? type.BaseType.GetGenericArguments ().Select (x => x.Name).ToArray () : null; " is 137.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ToAttributes,The length of the statement  "	return !type.IsUserType () || type.IsOrHasGenericInterfaceTypeOf (typeof(IEnumerable<>)) ? null : type.GetCustomAttributes (false).ToAttributes (); " is 147.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ToProperties,The length of the statement  "	var props = !type.IsUserType () || type.IsOrHasGenericInterfaceTypeOf (typeof(IEnumerable<>)) ? null : type.GetInstancePublicProperties ().ToList ().ConvertAll (x => x.ToProperty ()); " is 183.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ExcludeKnownAttrsFilter,The length of the statement  "	return x.GetType () != typeof(RouteAttribute) && x.GetType () != typeof(DescriptionAttribute) && x.GetType ().Name != "DataContractAttribute" //Type equality issues with Mono .NET 3.5/4 " is 185.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,NonDefaultProperties,The length of the statement  "	return attr.GetType ().GetPublicProperties ().Select (pi => pi.ToProperty (attr)).Where (property => property.Name != "TypeId" && property.Value != null).ToList (); " is 164.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,ToProperty,The length of the statement  "		GenericArgs = pi.PropertyType.IsGenericType ? pi.PropertyType.GetGenericArguments ().Select (x => x.Name).ToArray () : null' " is 124.
Long Statement,ServiceStack,MetadataTypeExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataTypesHandler.cs,GetInstancePublicProperties,The length of the statement  "	return type.GetProperties (BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where (t => t.GetIndexParameters ().Length == 0)// ignore indexed properties " is 176.
Long Statement,ServiceStack,MetadataFeature,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MetadataFeature.cs,GetHandlerForPathParts,The length of the statement  "		return new ActionHandler ((httpReq' httpRes) => EndpointHost.Config.HasAccessToMetadata (httpReq' httpRes) ? EndpointHost.Metadata.GetOperationDtos () : null' "Operations"); " is 173.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,CreateResolveException,The length of the statement  "	var errMsg = "Error trying to resolve Service '{0}' or one of its autowired dependencies (see inner exception for details).".Fmt (typeof(TService).FullName); " is 157.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,ResolveImpl,The length of the statement  "	var entry = GetEntry<TService' Func<Container' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TService>> (name' throwIfMissing); " is 123.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,The length of the statement  "		if (CheckAdapterFirst && Adapter != null && typeof(TService) != typeof(IRequestContext) && !Equals (default(TService)' (resolved = Adapter.TryResolve<TService> ()))) { " is 167.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,The length of the statement  "					return new ServiceEntry<TService' TFunc> ((TFunc)(object)(Func<Container' TService>)(c => Adapter.Resolve<TService> ())) { " is 122.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,The length of the statement  "					return new ServiceEntry<TService' TFunc> ((TFunc)(object)(Func<Container' TService>)(c => Adapter.TryResolve<TService> ())) { " is 125.
Long Statement,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,CreateAdapterException,The length of the statement  "	var errMsg = "Error trying to resolve Service '{0}' from Adapter '{1}': {2}".Fmt (typeof(TService).FullName' Adapter.GetType ().Name' ex.Message); " is 146.
Long Statement,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,ToResponseStatus,The length of the statement  "	return httpError != null ? CreateResponseStatus (httpError.ErrorCode' httpError.Message) : CreateResponseStatus (exception.GetType ().Name' exception.Message); " is 159.
Long Statement,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,ToResponseStatus,The length of the statement  "	return ResponseStatusUtils.CreateResponseStatus (validationException.ErrorCode' validationException.Message' validationException.Violations); " is 141.
Long Statement,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,ToResponseStatus,The length of the statement  "	return validationResult.IsValid ? CreateSuccessResponse (validationResult.SuccessMessage) : ResponseStatusUtils.CreateResponseStatus (validationResult.ErrorCode' validationResult.ErrorMessage' validationResult.Errors); " is 218.
Long Statement,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,HandleException,The length of the statement  "	if (EndpointHost.Config != null && EndpointHost.Config.ReturnsInnerException && ex.InnerException != null && !(ex is IHttpError)) { " is 131.
Long Statement,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,GetRequestErrorBody,The length of the statement  "	return String.Format ("[{0}: {1}]:\n[REQUEST: {2}]"' (request ?? new object ()).GetType ().Name' DateTime.UtcNow' requestString); " is 129.
Long Statement,ServiceStack.ServiceHost,NServiceExec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\NServiceExec.cs,Execute,The length of the statement  "	if (execMap.TryGetValue (ActionContext.Key (actionName' requestName)' out action) || execMap.TryGetValue (ActionContext.AnyKey (requestName)' out action)) { " is 156.
Long Statement,ServiceStack.ServiceHost,NServiceExec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\NServiceExec.cs,Execute,The length of the statement  "	throw new NotImplementedException ("Could not find method named {1}({0}) or Any({0}) on Service {2}".Fmt (request.GetType ().Name' expectedMethodName' typeof(TService).Name)); " is 175.
Long Statement,ServiceStack.ServiceHost,ServiceRunner,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceRunner.cs,Process,The length of the statement  "	return requestContext != null && requestContext.EndpointAttributes.Has (EndpointAttributes.OneWay) ? ExecuteOneWay (requestContext' instance' (TRequest)request) : Execute (requestContext' instance' (TRequest)request); " is 217.
Long Statement,ServiceStack.ServiceHost,FileExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\FileExtensions.cs,IsRelativePath,The length of the statement  "	return !relativeOrAbsolutePath.Contains (":") && !relativeOrAbsolutePath.StartsWith ("/") && !relativeOrAbsolutePath.StartsWith ("\\"); " is 135.
Long Statement,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,GetPathUrl,The length of the statement  "	var pos = resolvedPathInfo == String.Empty ? httpReq.AbsoluteUri.Length : httpReq.AbsoluteUri.IndexOf (resolvedPathInfo' StringComparison.InvariantCultureIgnoreCase); " is 166.
Long Statement,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,GetPhysicalPath,The length of the statement  "	var res = aspNetReq != null ? aspNetReq.Request.PhysicalPath : EndpointHostConfig.Instance.WebHostPhysicalPath.CombineWith (httpReq.PathInfo); " is 142.
Long Statement,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,GetHttpMethodOverride,The length of the statement  "	var overrideHttpMethod = httpReq.Headers [HttpHeaders.XHttpMethodOverride].ToNullIfEmpty () ?? httpReq.FormData [HttpHeaders.XHttpMethodOverride].ToNullIfEmpty () ?? httpReq.QueryString [HttpHeaders.XHttpMethodOverride].ToNullIfEmpty (); " is 237.
Long Statement,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,ToStatusCode,The length of the statement  "	if (EndpointHost.Config != null && EndpointHost.Config.MapExceptionToStatusCode.TryGetValue (ex.GetType ()' out errorStatus)) { " is 127.
Long Statement,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,RegisterCaseInsenstivePropertyNameMappings,The length of the statement  "		throw new AmbiguousMatchException ("Property names are case-insensitive: " + this.RequestType.Name + "." + propertyName); " is 121.
Long Statement,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,CreateRequest,The length of the statement  "		var isValidWildCardPath = this.IsWildCardPath && requestComponents.Length >= this.TotalComponentsCount - this.wildcardCount; " is 124.
Long Statement,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,CreateRequest,The length of the statement  "			throw new ArgumentException (string.Format ("Path Mismatch: Request Path '{0}' has invalid number of components compared to: '{1}'"' pathInfo' this.restPath)); " is 159.
Long Statement,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,CreateRequest,The length of the statement  "	return this.typeDeserializer.PopulateFromMap (fromInstance' requestKeyValuesMap' EndpointHostConfig.Instance.IgnoreWarningsOnPropertyNames); " is 140.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,Register,The length of the statement  "		return ServiceExec<TReq>.Execute (service' (TReq)dto' requestContext != null ? requestContext.EndpointAttributes : EndpointAttributes.None); " is 140.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterNService,The length of the statement  "	if (typeof(IService).IsAssignableFrom (serviceType) && !serviceType.IsAbstract && !serviceType.IsGenericTypeDefinition) { " is 121.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterNService,The length of the statement  "			var responseType = returnMarker != null ? returnMarker.GetGenericArguments () [0] : mi.ReturnType != typeof(object) && mi.ReturnType != typeof(void) ? mi.ReturnType : AssemblyUtils.FindType (requestType.FullName + ResponseDtoSuffix); " is 233.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterCommon,The length of the statement  "	Log.DebugFormat ("Registering {0} service '{1}' with request '{2}'"' (responseType != null ? "Reply" : "OneWay")' serviceType.Name' requestType.Name); " is 150.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterRestPaths,The length of the statement  "					throw new NotSupportedException (string.Format ("Config.FallbackRestPath is already defined. Only 1 [FallbackRoute] is allowed.")); " is 131.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterRestPaths,The length of the statement  "			throw new NotSupportedException (string.Format ("RestPath '{0}' on Type '{1}' is not Valid"' attr.Path' requestType.Name)); " is 123.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterRestPath,The length of the statement  "			throw new ArgumentException ("Route '{0}' on '{1}' must start with a '/'".Fmt (restPath.Path' restPath.RequestType.Name)); " is 122.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,RegisterRestPath,The length of the statement  "			throw new ArgumentException (("Route '{0}' on '{1}' contains invalid chars. " + "See https://github.com/ServiceStack/ServiceStack/wiki/Routing for info on valid routes.").Fmt (restPath.Path' restPath.RequestType.Name)); " is 219.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,Register,The length of the statement  "	var handlerFactoryFn = Expression.Lambda<Func<Type' object>> (Expression.New (serviceType)' Expression.Parameter (typeof(Type)' "serviceType")).Compile (); " is 155.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,AddToRequestExecMap,The length of the statement  "		throw new AmbiguousMatchException (string.Format ("Could not register Request '{0}' with service '{1}' as it has already been assigned to another service.\n" + "Each Request DTO can only be handled by 1 service."' requestType.FullName' serviceType.FullName)); " is 259.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,ManagedServiceExec,The length of the statement  "				EndpointHost.Config.PreExecuteServiceFilter (service' requestContext.Get<IHttpRequest> ()' requestContext.Get<IHttpResponse> ()); " is 129.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,ManagedServiceExec,The length of the statement  "				EndpointHost.Config.PostExecuteServiceFilter (service' requestContext.Get<IHttpRequest> ()' requestContext.Get<IHttpResponse> ()); " is 130.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,CallServiceExecuteGeneric,The length of the statement  "		var executeFunc = Expression.Lambda<Func<object' object' EndpointAttributes' object>> (callExecute' requestDtoParam' serviceParam' attrsParam).Compile (); " is 154.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,Execute,The length of the statement  "		AssertServiceRestrictions (requestType' requestContext != null ? requestContext.EndpointAttributes : EndpointAttributes.None); " is 126.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,AssertServiceRestrictions,The length of the statement  "	var hasNoAccessRestrictions = !requestServiceAttrs.TryGetValue (requestType' out restrictAttr) || restrictAttr.HasNoAccessRestrictions; " is 135.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,AssertServiceRestrictions,The length of the statement  "	var internalDebugMsg = (EndpointAttributes.InternalNetworkAccess & actualAttributes) != 0 ? "\n Unauthorized call was made from: " + actualAttributes : ""; " is 155.
Long Statement,ServiceStack.ServiceHost,ServiceController,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceController.cs,AssertServiceRestrictions,The length of the statement  "	throw new UnauthorizedAccessException (string.Format ("Could not execute service '{0}'' The following restrictions were not met: '{1}'" + internalDebugMsg' requestType.Name' failedScenarios)); " is 192.
Long Statement,ServiceStack.ServiceHost,ServiceManager,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceManager.cs,RegisterService,The length of the statement  "		throw new ArgumentException ("Type {0} is not a Web Service that inherits IService<> or IService".Fmt (serviceType.FullName)); " is 126.
Long Statement,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,Add,The length of the statement  "	var restrictTo = requestType.GetCustomAttributes (true).OfType<RestrictAttribute> ().FirstOrDefault () ?? serviceType.GetCustomAttributes (true).OfType<RestrictAttribute> ().FirstOrDefault (); " is 192.
Long Statement,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetImplementedActions,The length of the statement  "		return serviceType.GetActions ().Where (x => x.GetParameters () [0].ParameterType == requestType).Select (x => x.Name.ToUpper ()).ToList (); " is 140.
Long Statement,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetImplementedActions,The length of the statement  "	var oldApiActions = serviceType.GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly).Select (x => ToNewApiAction (x.Name)).Where (x => x != null).ToList (); " is 213.
Long Statement,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,CanShowToNetwork,The length of the statement  "		return operation.RestrictTo.CanShowTo (EndpointAttributes.Localhost) || operation.RestrictTo.CanShowTo (EndpointAttributes.LocalSubnet); " is 136.
Long Statement,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,CanShowToNetwork,The length of the statement  "	return operation.RestrictTo.CanShowTo (reqAttrs.IsLocalSubnet () ? EndpointAttributes.LocalSubnet : EndpointAttributes.External); " is 129.
Long Statement,ServiceStack.ServiceHost,XsdMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetReplyOperationNames,The length of the statement  "	return Metadata.OperationsMap.Values.Where (x => EndpointHost.Config != null && EndpointHost.Config.MetadataPagesConfig.CanAccess (format' x.Name)).Where (x => !x.IsOneWay).Select (x => x.RequestType.Name).ToList (); " is 216.
Long Statement,ServiceStack.ServiceHost,XsdMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetOneWayOperationNames,The length of the statement  "	return Metadata.OperationsMap.Values.Where (x => EndpointHost.Config != null && EndpointHost.Config.MetadataPagesConfig.CanAccess (format' x.Name)).Where (x => x.IsOneWay).Select (x => x.RequestType.Name).ToList (); " is 215.
Long Statement,ServiceStack.ServiceHost,ServiceMetadataExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,GetApiMembers,The length of the statement  "		var memattr = member.GetCustomAttributes (typeof(ApiMemberAttribute)' true).OfType<ApiMemberAttribute> ().Select (x =>  { " is 121.
Long Statement,ServiceStack.MiniProfiler,Profiler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Profiler.cs,RenderIncludes,The length of the statement  "	return MiniProfilerHandler.RenderIncludes (Current' position' showTrivial' showTimeWithChildren' maxTracesToShow' xhtml' showControls); " is 135.
Long Statement,ServiceStack.MiniProfiler,MiniProfilerExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Profiler.cs,Render,The length of the statement  "	var text = new StringBuilder ().Append (HttpUtility.HtmlEncode (Environment.MachineName)).Append (" at ").Append (DateTime.UtcNow).AppendLine (); " is 145.
Long Statement,ServiceStack.MiniProfiler,MiniProfilerExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Profiler.cs,Render,The length of the statement  "		text.AppendFormat ("{2} {0} = {1:###'##0.##}ms"' name' timing.DurationMilliseconds' new string ('>'' timing.Depth)).AppendLine (); " is 130.
Long Statement,ServiceStack.MiniProfiler,SqlTiming,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlTiming.cs,GetFormattedParameterValue,The length of the statement  "	return rawValue is DateTime ? ((DateTime)rawValue).ToString ("s"' System.Globalization.CultureInfo.InvariantCulture) : rawValue.ToString (); " is 140.
Long Statement,ServiceStack.MiniProfiler,SqlTimingParameter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlTimingParameter.cs,Equals,The length of the statement  "	return other != null && ParentSqlTimingId.Equals (other.ParentSqlTimingId) && string.Equals (Name' other.Name) && string.Equals (Value' other.Value); " is 149.
Long Statement,ServiceStack.MiniProfiler.Data,ProfiledDbCommand,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Data\ProfiledDbCommand.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,ServiceStack.MiniProfiler.Helpers,StackTraceSnippet,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Helpers\StackTraceSnippet.cs,Get,The length of the statement  "		if (!Profiler.Settings.AssembliesToExclude.Contains (assembly) && !ShouldExcludeType (method) && !Profiler.Settings.MethodsToExclude.Contains (method.Name)) { " is 158.
Long Statement,ServiceStack.MiniProfiler.Storage,DatabaseStorageBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Storage\DatabaseStorageBase.cs,MapTimings,The length of the statement  "	// TODO: .Root does all the above work again' but it's used after [DataContract] deserialization; refactor it out somehow " is 121.
Long Statement,ServiceStack.MiniProfiler.Storage,HttpRuntimeCacheStorage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Storage\HttpRuntimeCacheStorage.cs,InsertIntoCache,The length of the statement  "	HttpRuntime.Cache.Insert (key: key' value: value' dependencies: null' absoluteExpiration: DateTime.Now.Add (CacheDuration)' // servers will cache based on local now " is 164.
Long Statement,ServiceStack.MiniProfiler.Storage,HttpRuntimeCacheStorage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Storage\HttpRuntimeCacheStorage.cs,InsertIntoCache,The length of the statement  "	slidingExpiration: System.Web.Caching.Cache.NoSlidingExpiration' priority: System.Web.Caching.CacheItemPriority.Low' onRemoveCallback: null); " is 141.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,RenderIncludes,The length of the statement  "	const string format = @"<link rel=""stylesheet"" type=""text/css"" href=""{path}ssr-includes.css?v={version}""{closeXHTML}> " is 123.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,RenderIncludes,The length of the statement  "    if (!window.jquip) document.write(unescape(""%3Cscript src='{path}ssr-jquip.all.js?v={version}' type='text/javascript'%3E%3C/script%3E"")); " is 139.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,RenderIncludes,The length of the statement  "		// so go ahead and add it to the end - it's usually the only id' but if there was a redirect somewhere' it'll be there' too " is 123.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,RenderIncludes,The length of the statement  "		path = (path ?? VirtualPathUtility.ToAbsolute (Profiler.Settings.RouteBasePath).EnsureTrailingSlash ()) + EndpointHost.Config.ServiceStackHandlerFactoryPath; " is 157.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,Results,The length of the statement  "		return isPopup ? NotFound (httpRes) : NotFound (httpRes' "text/plain"' "No MiniProfiler results found with Id=" + id.ToString ()); " is 130.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,ResultsFullPage,The length of the statement  "	return new StringBuilder ().AppendLine ("<html><head>").AppendFormat ("<title>{0} ({1} ms) - MvcMiniProfiler Results</title>"' profiler.Name' profiler.DurationMilliseconds).AppendLine ().AppendLine ("<script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js'></script>").Append ("<script type='text/javascript'> var profiler = ").Append (Profiler.ToJson (profiler)).AppendLine (";</script>").Append (RenderIncludes (profiler))// figure out how to better pass display options " is 517.
Long Statement,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,GetResource,The length of the statement  "		using (var stream = typeof(MiniProfilerHandler).Assembly.GetManifestResourceStream ("ServiceStack.MiniProfiler.UI." + filename)) " is 128.
Long Statement,ServiceStack.VirtualPath,FileSystemVirtualDirectory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\VirtualPath\FileSystemVirtualDirectory.cs,GetEnumerator,The length of the statement  "	var directoryNodes = BackingDirInfo.GetDirectories ().Select (dInfo => new FileSystemVirtualDirectory (VirtualPathProvider' this' dInfo)); " is 138.
Long Statement,ServiceStack.VirtualPath,FileSystemVirtualDirectory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\VirtualPath\FileSystemVirtualDirectory.cs,GetEnumerator,The length of the statement  "	var fileNodes = BackingDirInfo.GetFiles ().Select (fInfo => new FileSystemVirtualFile (VirtualPathProvider' this' fInfo)); " is 122.
Long Statement,ServiceStack.VirtualPath,FileSystemVirtualDirectory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\VirtualPath\FileSystemVirtualDirectory.cs,GetMatchingFilesInDir,The length of the statement  "	var matchingFilesInBackingDir = EnumerateFiles (globPattern).Select (fInfo => (IVirtualFile)new FileSystemVirtualFile (VirtualPathProvider' this' fInfo)); " is 154.
Long Statement,ServiceStack.WebHost.Endpoints,AppHostBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostBase.cs,ExecuteService,The length of the statement  "	return EndpointHost.Config.ServiceController.Execute (requestDto' new HttpRequestContext (requestDto' endpointAttributes)); " is 123.
Long Statement,ServiceStack.WebHost.Endpoints,AppHostHttpListenerLongRunningBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostHttpListenerLongRunningBase.cs,ListenerCallback,The length of the statement  "				error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message); " is 162.
Long Statement,ServiceStack.WebHost.Endpoints,GenericHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\GenericHandler.cs,GetRequest,The length of the statement  "		return requestDto ?? DeserializeHttpRequest (requestType' httpReq' HandlerContentType) ?? requestType.CreateInstance (); " is 120.
Long Statement,ServiceStack.WebHost.Endpoints,HttpWebRequestConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\HttpWebRequestConfig.cs,TransferAuthenticationTokens,The length of the statement  "	var authenticationCookie = new Cookie (FormsAuthentication.FormsCookieName' cookie.Value' cookie.Path' HttpContext.Current.Request.Url.Authority); " is 146.
Long Statement,ServiceStack.WebHost.Endpoints,MetadataConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\MetadataConfig.cs,Create,The length of the statement  "	return new MetadataConfig (format' name ?? format.ToUpper ()' string.Format (SyncReplyUri' format)' string.Format (AsyncOneWayUri' format)' string.Format (DefaultMetadataUri' format)); " is 184.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,GetHandler,The length of the statement  "			if (context.Request.PhysicalPath != WebHostPhysicalPath || !File.Exists (Path.Combine (context.Request.PhysicalPath' DefaultRootFileName ?? ""))) { " is 147.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,GetHandler,The length of the statement  "	return GetHandlerForPathInfo (context.Request.HttpMethod' pathInfo' context.Request.FilePath' pathTranslated) ?? NotFoundHttpHandler; " is 133.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,GetHandler,The length of the statement  "			if (httpReq.GetPhysicalPath () != WebHostPhysicalPath || !File.Exists (Path.Combine (httpReq.ApplicationFilePath' DefaultRootFileName ?? ""))) { " is 144.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,GetHandler,The length of the statement  "	return GetHandlerForPathInfo (httpReq.HttpMethod' pathInfo' pathInfo' httpReq.GetPhysicalPath ()) ?? NotFoundHttpHandler; " is 121.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ReturnRequestInfo,The length of the statement  "	if (EndpointHost.Config.DebugOnlyReturnRequestInfo || (EndpointHost.DebugMode && httpReq.PathInfo.EndsWith ("__requestinfo"))) { " is 128.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ReturnRequestInfo,The length of the statement  "		reqInfo.Host = EndpointHost.Config.DebugAspNetHostEnvironment + "_v" + Env.ServiceStackVersion + "_" + EndpointHost.Config.ServiceName; " is 135.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ReturnRequestInfo,The length of the statement  "	if (EndpointHost.Config.DebugOnlyReturnRequestInfo || (EndpointHost.DebugMode && httpReq.PathInfo.EndsWith ("__requestinfo"))) { " is 128.
Long Statement,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ReturnRequestInfo,The length of the statement  "		reqInfo.Host = EndpointHost.Config.DebugHttpListenerHostEnvironment + "_v" + Env.ServiceStackVersion + "_" + EndpointHost.Config.ServiceName; " is 141.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,ApplyResponseFilters,The length of the statement  "		var attributes = responseDto != null ? FilterAttributeCache.GetResponseFilterAttributes (responseDto.GetType ()) : null; " is 120.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,ExecuteService,The length of the statement  "		return config.ServiceController.Execute (request' new HttpRequestContext (httpReq' httpRes' request' endpointAttributes)); " is 122.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,CreateServiceRunner,The length of the statement  "	return AppHost != null ? AppHost.CreateServiceRunner<TRequest> (actionContext) : new ServiceRunner<TRequest> (null' actionContext); " is 131.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,InferHttpHandlerPath,The length of the statement  "			throw new ConfigurationErrorsException ("Unable to infer ServiceStack's <httpHandler.Path/> from the Web.Config\n" + "Check with http://www.servicestack.net/ServiceStack.Hello/ to ensure you have configured ServiceStack properly.\n" + "Otherwise you can explicitly set your httpHandler.Path by setting: EndpointHostConfig.ServiceStackPath"); " is 341.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,SetPaths,The length of the statement  "	instance.MetadataRedirectPath = PathUtils.CombinePaths (null != locationPath ? instance.ServiceStackHandlerFactoryPath : handlerPath' "metadata"); " is 146.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,ExtractHandlerPathFromWebServerConfigurationXml,The length of the statement  "	return XDocument.Parse (rawXml).Root.Element ("handlers").Descendants ("add").Where (handler => EnsureHandlerTypeAttribute (handler).StartsWith ("ServiceStack")).Select (handler => handler.Attribute ("path").Value).FirstOrDefault (); " is 233.
Long Statement,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,AssertFeatures,The length of the statement  "		throw new UnauthorizedAccessException (String.Format ("'{0}' Features have been disabled by your administrator"' usesFeatures)); " is 128.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,ThrowValidationException,The length of the statement  "	string msg = String.Format ("A potentially dangerous Request.{0} value was " + "detected from the client ({1}={2})."' name' key' v); " is 132.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "					if (response.HandleCustomErrorHandler (serializerCtx.Get<IHttpRequest> ()' defaultContentType' httpError.Status' httpError.ToErrorResponse ())) { " is 145.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "			/* Mono Error: Exception: Method not found: 'System.Web.HttpResponse.get_Headers' */var responseOptions = result as IHasOptions; " is 128.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "			if (bodyPrefix != null && response.ContentType.IndexOf (ContentType.Json' StringComparison.InvariantCultureIgnoreCase) >= 0) { " is 126.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "				throw new ArgumentNullException ("defaultAction"' String.Format ("As result '{0}' is not a supported responseType' a defaultAction must be supplied"' (result != null ? result.GetType ().Name : ""))); " is 199.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "			//TM: It would be good to handle 'remote end dropped connection' problems here. Arguably they should at least be suppressible via configuration " is 143.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "			var errorMessage = String.Format ("Error occured while Processing Request: [{0}] {1}"' originalEx.GetType ().Name' originalEx.Message); " is 135.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteToResponse,The length of the statement  "					response.WriteErrorToResponse (serializerCtx.Get<IHttpRequest> ()' defaultContentType' operationName' errorMessage' originalEx' (int)HttpStatusCode.InternalServerError); " is 169.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\IHttpResponseExtensions.cs,WriteError,The length of the statement  "	httpRes.WriteErrorToResponse (httpReq' httpReq.ResponseContentType' dto.GetType ().Name' errorMessage' null' (int)HttpStatusCode.InternalServerError); " is 150.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetPathInfo,The length of the statement  "	var appPath = String.IsNullOrEmpty (request.ApplicationPath) ? WebHostDirectoryName : request.ApplicationPath.TrimStart ('/'); " is 126.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,ResolvePathInfoFromMappedPath,The length of the statement  "				if (!String.Equals (fullPathParts [fullPathIndex - fullPathIndexOffset + mappedPathRootIndex]' mappedPathRootParts [mappedPathRootIndex]' StringComparison.InvariantCultureIgnoreCase)) { " is 185.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The length of the statement  "		var isIpv4Address = request.UserHostAddress.IndexOf ('.') != -1 && request.UserHostAddress.IndexOf ("::"' StringComparison.InvariantCulture) == -1; " is 147.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The length of the statement  "				ipAddressNumber = request.UserHostAddress.LastIndexOf ("%"' StringComparison.InvariantCulture) > 0 ? request.UserHostAddress.SplitOnLast (":") [0] : request.UserHostAddress; " is 173.
Long Statement,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The length of the statement  "			throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex); " is 150.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,Register,The length of the statement  "				pathInfo = pathInfo.EndsWithIgnoreCase (DefaultPage + ".md") ? pathInfo.Substring (0' pathInfo.Length - (DefaultPage + ".md").Length) : pathInfo.WithoutExtension (); " is 165.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,ProcessMarkdownPage,The length of the statement  "		renderHtml = !(format.StartsWithIgnoreCase ("markdown") || format.StartsWithIgnoreCase ("text") || format.StartsWithIgnoreCase ("plain")); " is 138.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,ReloadModifiedPageAndTemplates,The length of the statement  "	if (markdownPage.DirectiveTemplate != null && this.MasterPageTemplates.TryGetValue (markdownPage.DirectiveTemplate' out template)) { " is 132.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,FindMarkdownPages,The length of the statement  "		var templatePath = pageType == MarkdownPageType.ContentPage ? templateProvider.GetTemplatePath (markDownFile.Directory) : null; " is 127.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,HtmlFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\HtmlFormat.cs,SerializeToStream,The length of the statement  "	if (requestContext.ResponseContentType != ContentType.Html && httpReq != null && httpReq.ResponseContentType != ContentType.JsonReport) " is 135.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,HtmlFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\HtmlFormat.cs,SerializeToStream,The length of the statement  "		html = GetHtmlTemplate ().Replace ("${Dto}"' json).Replace ("${Title}"' string.Format (TitleFormat' requestName' now)).Replace ("${MvcIncludes}"' MiniProfiler.Profiler.RenderIncludes ().ToString ()).Replace ("${Header}"' string.Format (HtmlTitleFormat' requestName' now)).Replace ("${ServiceUrl}"' url); " is 303.
Long Statement,ServiceStack.WebHost.Endpoints.Formats,HtmlFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\HtmlFormat.cs,LoadHtmlTemplateFromEmbeddedResource,The length of the statement  "		throw new FileNotFoundException ("Could not load HTML template embedded resource " + embeddedResourceName' embeddedResourceName); " is 129.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Templates,HtmlTemplates,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\HtmlTemplates.cs,TryLoadExternal,The length of the statement  "		var staticFilePath = PathUtils.CombinePaths (EndpointHost.AppHost.VirtualPathProvider.RootDirectory.RealPath' EndpointHost.Config.MetadataCustomPath' templateName); " is 164.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Templates,WsdlTemplateBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\WsdlTemplateBase.cs,ToString,The length of the statement  "	var replyEndpointUri = string.Format (this.ReplyEndpointUriTemplate' ServiceName' this.ReplyEndpointUri' replyServiceName); " is 123.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Templates,WsdlTemplateBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\WsdlTemplateBase.cs,ToString,The length of the statement  "		oneWayEndpointUri = string.Format (this.OneWayEndpointUriTemplate' ServiceName' this.OneWayEndpointUri' oneWayServiceName); " is 123.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Templates,WsdlTemplateBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Templates\WsdlTemplateBase.cs,ToString,The length of the statement  "	var wsdl = string.Format (Template' WsdlName' Xsd' replyMessages' oneWayMessages' replyOperations' oneWayOperations' replyBindings' oneWayBindings' replyEndpointUri' oneWayEndpointUri' EndpointHost.Config.WsdlServiceNamespace); " is 227.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,Evaluator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Evaluator.cs,AddAssembly,The length of the statement  "	if (IsVersion4AndUp && (location == typeof(string).Assembly.Location || location == typeof(Expression).Assembly.Location)) " is 122.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MarkdownPage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\MarkdownPage.cs,SetTemplateDirectivePath,The length of the statement  "	var templateDirective = this.HtmlBlocks.FirstOrDefault (x => x is DirectiveBlock && ((DirectiveBlock)x).TemplatePath != null); " is 126.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MarkdownPage,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\MarkdownPage.cs,AddDependentPages,The length of the statement  "	if (this.DirectiveTemplate != null && Markdown.MasterPageTemplates.TryGetValue (this.DirectiveTemplate' out template)) { " is 120.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,GetNextStatementExpr,The length of the statement  "		else if (varExpr == "var" || varExpr == "model" || varExpr == "inherits" || varExpr == "helper" || varExpr == "template" || varExpr == "Layout") { " is 146.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,EatBlockExpr,The length of the statement  "			var isEscaped = allowDoubleEscaping && (c == beginChar && nextChar == beginChar || c == endChar && nextChar == endChar); " is 120.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,EatBlockExpr,The length of the statement  "	return result.Replace (beginChar.ToString () + beginChar' beginChar.ToString ()).Replace (endChar.ToString () + endChar' endChar.ToString ()); " is 142.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MemberExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,InitializeValueFn,The length of the statement  "	valueFn = this.ReferencesSelf ? Convert.ToString : DataBinder.CompileToString (memberExprValue.GetType ()' modelMemberExpr); " is 124.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,VarStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,OnFirstRun,The length of the statement  "		throw new InvalidDataException ("Invalid var declaration' should be '@var varName = {MemberExpression} [' {VarDeclaration}]' was: " + declaration); " is 147.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The length of the statement  "		type = usesBaseType ? markdownPage.ExecutionContext.BaseType : markdownPage.Markdown.MarkdownGlobalHelpers.TryGetValue (typePropertyName' out type) ? type : null; " is 162.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The length of the statement  "		throw new InvalidDataException (string.Format ("Unable to resolve type '{0}'. Check type exists in Config.MarkdownBaseType or Page.Markdown.MarkdownGlobalHelpers"' typePropertyName)); " is 183.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The length of the statement  "		var mi = methodName == "Partial" ? type.GetMethods (BindingFlags.Public | BindingFlags.Instance).FirstOrDefault (m => m.GetParameters ().Length == 2 && m.Name == methodName) : type.GetMethod (methodName' BindingFlags.Public | BindingFlags.Instance); " is 249.
Long Statement,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,ProcessListItems,The length of the statement  "	list = Regex.Replace (list' pattern' new MatchEvaluator (ListItemEvaluator)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline); " is 140.
Long Statement,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,BlockQuoteEvaluator,The length of the statement  "	bq = Regex.Replace (bq' @"(\s*<pre>.+?</pre>)"' new MatchEvaluator (BlockQuoteEvaluator2)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline); " is 155.
Long Statement,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,DoAutoLinks,The length of the statement  "		text = Regex.Replace (text' pattern' new MatchEvaluator (EmailEvaluator)' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 138.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,CustomMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\CustomMetadataHandler.cs,CreateMessage,The length of the statement  "		return string.Format ("{{Unable to show example output for type '{0}' using the custom '{1}' filter}}" + ex.Message' dtoType.Name' this.ContentFormat); " is 151.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,Soap11MetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\Soap11MetadataHandler.cs,CreateMessage,The length of the statement  "<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""> " is 175.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,Soap12MetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\Soap12MetadataHandler.cs,CreateMessage,The length of the statement  "<soap12:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap12=""http://www.w3.org/2003/05/soap-envelope""> " is 177.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,BaseSoapMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseSoapMetadataHandler.cs,Execute,The length of the statement  "	ProcessRequest (new HttpRequestWrapper (OperationName' context.Request)' new HttpResponseWrapper (context.Response)' OperationName); " is 132.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,BaseMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseMetadataHandler.cs,Execute,The length of the statement  "	ProcessOperations (writer' new HttpRequestWrapper (GetType ().Name' context.Request)' new HttpResponseWrapper (context.Response)); " is 130.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,BaseMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseMetadataHandler.cs,ProcessOperations,The length of the statement  "		var overrideExtCopy = EndpointHost.Config.AllowRouteContentTypeExtensions ? " the <b>.{0}</b> suffix or ".Fmt (ContentFormat) : ""; " is 131.
Long Statement,ServiceStack.WebHost.Endpoints.Metadata,BaseMetadataHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Metadata\BaseMetadataHandler.cs,ProcessOperations,The length of the statement  "		sb.AppendFormat (@"<p>To override the Content-type in your clients HTTP <b>Accept</b> Header' append {1} <b>?format={0}</b></p>"' ContentFormat' overrideExtCopy); " is 162.
Long Statement,ServiceStack.WebHost.Endpoints.Support,NotFoundHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\NotFoundHttpHandler.cs,ProcessRequest,The length of the statement  "		text.AppendLine ("Handler for Request not found: \n\n").AppendLine ("Request.HttpMethod: " + request.HttpMethod).AppendLine ("Request.HttpMethod: " + request.HttpMethod).AppendLine ("Request.PathInfo: " + request.PathInfo).AppendLine ("Request.QueryString: " + request.QueryString).AppendLine ("Request.RawUrl: " + request.RawUrl); " is 331.
Long Statement,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,ListenerCallback,The length of the statement  "			error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message); " is 162.
Long Statement,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,Stop,The length of the statement  "		Log.ErrorFormat ("Swallowing HttpListenerException({0}) Thread exit or aborted request"' RequestThreadAbortedException); " is 120.
Long Statement,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,AddUrlReservationToAcl,The length of the statement  "			args = string.Format (@"http add urlacl url={0} user={1}\{2} listen=yes"' urlBase' Environment.UserDomainName' Environment.UserName); " is 133.
Long Statement,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The length of the statement  "					if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) { " is 195.
Long Statement,ServiceStack.WebHost.Endpoints.Support,RequestInfoHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\RequestInfoHandler.cs,ProcessRequest,The length of the statement  "		response.DebugString += HttpContext.Current.Request.GetType ().FullName + "|" + HttpContext.Current.Response.GetType ().FullName; " is 129.
Long Statement,ServiceStack.WebHost.Endpoints.Support,RequestInfoHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\RequestInfoHandler.cs,ProcessRequest,The length of the statement  "	ProcessRequest (new HttpRequestWrapper (typeof(RequestInfo).Name' context.Request)' new HttpResponseWrapper (context.Response)' typeof(RequestInfo).Name); " is 154.
Long Statement,ServiceStack.WebHost.Endpoints.Support,RequestInfoHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\RequestInfoHandler.cs,GetRequestInfo,The length of the statement  "		Host = EndpointHost.Config.DebugHttpListenerHostEnvironment + "_v" + Env.ServiceStackVersion + "_" + EndpointHost.Config.ServiceName' " is 133.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,DeserializeHttpRequest,The length of the statement  "			var msg = "Could not deserialize '{0}' request using KeyValueDataContractDeserializer: '{1}'.\nError: '{2}'".Fmt (operationType' queryString' ex); " is 146.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,GetCustomRequestFromBinder,The length of the statement  "	(ServiceManager ?? EndpointHost.ServiceManager).ServiceController.RequestTypeFactoryMap.TryGetValue (requestType' out requestFactoryFn); " is 136.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,ProcessRequest,The length of the statement  "	ProcessRequest (new HttpRequestWrapper (operationName' context.Request)' new HttpResponseWrapper (context.Response)' operationName); " is 132.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,ProcessRequest,The length of the statement  "	ProcessRequest (new HttpListenerRequestWrapper (operationName' context.Request)' new HttpListenerResponseWrapper (context.Response)' operationName); " is 148.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,GetOperationType,The length of the statement  "	return ServiceManager != null ? ServiceManager.Metadata.GetOperationType (operationName) : EndpointHost.Metadata.GetOperationType (operationName); " is 146.
Long Statement,ServiceStack.WebHost.Endpoints.Support,EndpointHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\EndpointHandlerBase.cs,AssertOperationExists,The length of the statement  "		throw new NotImplementedException (string.Format ("The operation '{0}' does not exist for this service"' operationName)); " is 121.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,EmptyResponse,The length of the statement  "	return requestMsg.Headers.Action == null ? Message.CreateMessage (requestMsg.Version' null' response) : Message.CreateMessage (requestMsg.Version' requestType.Name + "Response"' response); " is 188.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "	var httpReq = HttpContext.Current != null && httpRequest == null ? new HttpRequestWrapper (HttpContext.Current.Request) : httpRequest; " is 134.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "	var httpRes = HttpContext.Current != null && httpResponse == null ? new HttpResponseWrapper (HttpContext.Current.Response) : httpResponse; " is 138.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "		var request = useXmlSerializerRequest ? XmlSerializableDeserializer.Instance.Parse (requestXml' requestType) : DataContractDeserializer.Instance.Parse (requestXml' requestType); " is 177.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "		var hasRequestFilters = EndpointHost.RequestFilters.Count > 0 || FilterAttributeCache.GetRequestFilterAttributes (request.GetType ()).Any (); " is 141.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "		var hasResponseFilters = EndpointHost.ResponseFilters.Count > 0 || FilterAttributeCache.GetResponseFilterAttributes (response.GetType ()).Any (); " is 145.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "			return requestMsg.Headers.Action == null ? Message.CreateMessage (requestMsg.Version' null' response' new XmlSerializerWrapper (response.GetType ())) : Message.CreateMessage (requestMsg.Version' requestType.Name + "Response"' response' new XmlSerializerWrapper (response.GetType ())); " is 284.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "		return requestMsg.Headers.Action == null ? Message.CreateMessage (requestMsg.Version' null' response) : Message.CreateMessage (requestMsg.Version' requestType.Name + "Response"' response); " is 188.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,ExecuteMessage,The length of the statement  "		throw new SerializationException ("3) Error trying to deserialize requestType: " + requestType + "' xml body: " + requestXml' ex); " is 130.
Long Statement,ServiceStack.WebHost.Endpoints.Support,SoapHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\SoapHandler.cs,GetSoapContentType,The length of the statement  "	return requestOperationName != null ? contentType.Replace (requestOperationName' requestOperationName + "Response") : (this.HandlerAttributes == EndpointAttributes.Soap11 ? ContentType.Soap11 : ContentType.Soap12); " is 214.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata,WsdlMetadataHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\WsdlMetadataHandlerBase.cs,Execute,The length of the statement  "		var wsdlTemplate = GetWsdlTemplate (operations' baseUri' optimizeForFlash' context.Request.GetBaseUrl ()' EndpointHost.Config.SoapServiceName); " is 143.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata,WsdlMetadataHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\WsdlMetadataHandlerBase.cs,Execute,The length of the statement  "		context.Response.Write ("Autogenerated WSDLs are not supported " + (Env.IsMono ? "on Mono" : "with this configuration")); " is 121.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata,WsdlMetadataHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\WsdlMetadataHandlerBase.cs,Execute,The length of the statement  "		var wsdlTemplate = GetWsdlTemplate (operations' baseUri' optimizeForFlash' httpReq.ResolveBaseUrl ()' EndpointHost.Config.SoapServiceName); " is 139.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata,WsdlMetadataHandlerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\WsdlMetadataHandlerBase.cs,GetWsdlTemplate,The length of the statement  "	var soapFormat = GetType ().Name.StartsWith ("Soap11"' StringComparison.OrdinalIgnoreCase) ? Format.Soap11 : Format.Soap12; " is 123.
Long Statement,ServiceStack.WebHost.Endpoints.Utils,FilterAttributeCache,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Utils\FilterAttributeCache.cs,GetRequestFilterAttributes,The length of the statement  "	var attributes = new List<IHasRequestFilter> ((IHasRequestFilter[])requestDtoType.GetCustomAttributes (typeof(IHasRequestFilter)' true)); " is 137.
Long Statement,ServiceStack.WebHost.Endpoints.Utils,FilterAttributeCache,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Utils\FilterAttributeCache.cs,GetResponseFilterAttributes,The length of the statement  "	var attributes = new List<IHasResponseFilter> ((IHasResponseFilter[])responseDtoType.GetCustomAttributes (typeof(IHasResponseFilter)' true)); " is 141.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata.Controls,OperationControl,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\Controls\OperationControl.cs,Render,The length of the statement  "	var renderedTemplate = HtmlTemplates.Format (HtmlTemplates.OperationControlTemplate' Title' baseUrl.CombineWith (MetadataConfig.DefaultMetadataUri)' ContentFormat.ToUpper ()' OperationName' HttpRequestTemplate' ResponseTemplate' MetadataHtml); " is 243.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata.Controls,OperationsControl,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\Controls\OperationsControl.cs,Render,The length of the statement  "	var renderedTemplate = HtmlTemplates.Format (HtmlTemplates.OperationsControlTemplate' this.Title' this.MetadataOperationPageBodyHtml' operationsPart); " is 150.
Long Statement,ServiceStack.WebHost.Endpoints.Support.Metadata.Controls,IndexOperationsControl,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\Controls\IndexOperationsControl.cs,Render,The length of the statement  "	var renderedTemplate = HtmlTemplates.Format (HtmlTemplates.IndexOperationsTemplate' this.Title' this.MetadataPageBodyHtml' this.XsdServiceTypesIndex' operationsPart' xsdsPart' wsdlTemplate' debugOnlyInfo); " is 205.
Long Statement,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The length of the statement  "				if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) { " is 146.
Long Statement,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildList,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.ul_li || lines [i - 1].blockType == BlockType.ol_li)) { " is 179.
Long Statement,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildList,The length of the statement  "		while (end_of_li < lines.Count - 1 && lines [end_of_li + 1].blockType != BlockType.ul_li && lines [end_of_li + 1].blockType != BlockType.ol_li) " is 143.
Long Statement,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildDefinition,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.dd)) { " is 130.
Long Statement,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildFootnote,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.footnote)) { " is 136.
Long Statement,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,OnPrepareLink,The length of the statement  "	if ((NewWindowForExternalLinks && Utils.IsUrlFullyQualified (url)) || (NewWindowForLocalLinks && !Utils.IsUrlFullyQualified (url))) { " is 133.
Long Statement,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,IsWebAddress,The length of the statement  "	return str.StartsWith ("http://") || str.StartsWith ("https://") || str.StartsWith ("ftp://") || str.StartsWith ("file://"); " is 124.
Complex Conditional,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,GetUniqueIdentifierParameters,The conditional expression  "nameIdentifierClaim == null || String.IsNullOrEmpty (nameIdentifierClaim.Value) || identityProviderClaim == null || String.IsNullOrEmpty (identityProviderClaim.Value)"  is complex.
Complex Conditional,ServiceStack.Html.AntiXsrf,TokenValidator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\TokenValidator.cs,GenerateFormToken,The conditional expression  "requireAuthenticatedUserHeuristicChecks && String.IsNullOrEmpty (formToken.Username) && formToken.ClaimUid == null && String.IsNullOrEmpty (formToken.AdditionalData)"  is complex.
Complex Conditional,Funq,Container,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Funq\Container.cs,GetEntry,The conditional expression  "CheckAdapterFirst && Adapter != null && typeof(TService) != typeof(IRequestContext) && !Equals (default(TService)' (resolved = Adapter.TryResolve<TService> ()))"  is complex.
Complex Conditional,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,HandleException,The conditional expression  "EndpointHost.Config != null && EndpointHost.Config.ReturnsInnerException && ex.InnerException != null && !(ex is IHttpError)"  is complex.
Complex Conditional,ServiceStack.MiniProfiler.Data,ProfiledDbCommand,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Data\ProfiledDbCommand.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,ServiceStack.WebHost.Endpoints,ServiceStackHttpHandlerFactory,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceStackHttpHandlerFactory.cs,ServiceStackHttpHandlerFactory,The conditional expression  "!IsIntegratedPipeline && isAspNetHost && !hostedAtRootPath && !Env.IsMono"  is complex.
Complex Conditional,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,IsInvalidString,The conditional expression  "next == '!' || next < ' ' || (next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z')"  is complex.
Complex Conditional,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,GetNextStatementExpr,The conditional expression  "varExpr == "var" || varExpr == "model" || varExpr == "inherits" || varExpr == "helper" || varExpr == "template" || varExpr == "Layout""  is complex.
Complex Conditional,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The conditional expression  "value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p'"  is complex.
Complex Conditional,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The conditional expression  "(value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The conditional expression  "prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The conditional expression  "(ch == '*' || ch == '+' || ch == '-') && IsLineSpace (CharAtOffset (1))"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanHtml,The conditional expression  "!bHeadBlock && !tag.closing && m_markdown.ExtraMode && !bHasUnsafeContent"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,BuildList,The conditional expression  "(lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.ul_li || lines [i - 1].blockType == BlockType.ol_li)"  is complex.
Complex Conditional,MarkdownDeep,LinkDefinition,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\LinkDefinition.cs,ParseLinkTarget,The conditional expression  "(id == null && p.current != ')') || (id != null && !p.eol)"  is complex.
Complex Conditional,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,OnPrepareLink,The conditional expression  "(NewWindowForExternalLinks && Utils.IsUrlFullyQualified (url)) || (NewWindowForLocalLinks && !Utils.IsUrlFullyQualified (url))"  is complex.
Complex Conditional,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,MakeID,The conditional expression  "char.IsLetterOrDigit (ch) || ch == '_' || ch == '-' || ch == '.'"  is complex.
Complex Conditional,MarkdownDeep,StringScanner,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\StringScanner.cs,SkipFootnoteID,The conditional expression  "char.IsLetterOrDigit (ch) || ch == '-' || ch == '_' || ch == ':' || ch == '.' || ch == ' '"  is complex.
Complex Conditional,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SkipHtmlEntity,The conditional expression  "!(char.IsDigit (ch) || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))"  is complex.
Complex Conditional,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,IsValidHtmlID,The conditional expression  "Char.IsLetterOrDigit (ch) || ch == '_' || ch == '-' || ch == ':' || ch == '.'"  is complex.
Virtual Method Call from Constructor,ServiceStack.WebHost.Endpoints,AppHostBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostBase.cs,AppHostBase,The constructor "AppHostBase" calls a virtual method "CreateServiceManager".
Virtual Method Call from Constructor,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,HttpListenerBase,The constructor "HttpListenerBase" calls a virtual method "CreateServiceManager".
Empty Catch Block,ServiceStack.CacheAccess.Providers,FileAndCacheTextManager,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\CacheAccess.Providers\FileAndCacheTextManager.cs,DeleteFiles,The method has an empty catch block.
Empty Catch Block,ServiceStack.Html.AntiXsrf,AntiForgeryTokenSerializer,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\AntiForgeryTokenSerializer.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,ServiceStack.Html.AntiXsrf,CryptoUtil,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\BinaryBlob.cs,GetSHA256Factory,The method has an empty catch block.
Empty Catch Block,ServiceStack.Html,RouteValueDictionary,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\RouteValueDictionary.cs,RouteValueDictionary,The method has an empty catch block.
Empty Catch Block,ServiceStack.Html,TemplateProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TemplateProvider.cs,CompileQueuedPages,The method has an empty catch block.
Empty Catch Block,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,GetRequestErrorBody,The method has an empty catch block.
Empty Catch Block,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetDigestAuth,The method has an empty catch block.
Empty Catch Block,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,Stop,The method has an empty catch block.
Empty Catch Block,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,FormatSql,The method has an empty catch block.
Empty Catch Block,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,Results,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints,AppHostBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostBase.cs,Release,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints,EndpointHost,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHost.cs,CompleteRequest,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,InferHttpHandlerPath,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpResponseWrapper.cs,End,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints.Extensions,HttpResponseWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpResponseWrapper.cs,SetContentLength,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,Release,The method has an empty catch block.
Empty Catch Block,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,RemoveUrlReservationFromAcl,The method has an empty catch block.
Magic Number,ServiceStack.Html.AntiXsrf,AntiForgeryTokenSerializer,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\AntiForgeryTokenSerializer.cs,DeserializeImpl,The following statement contains a magic number: if (!deserializedToken.IsSessionToken) {  	bool isClaimsBased = reader.ReadBoolean ();  	if (isClaimsBased) {  		byte[] claimUidBytes = reader.ReadBytes (AntiForgeryToken.ClaimUidBitLength / 8);  		deserializedToken.ClaimUid = new BinaryBlob (AntiForgeryToken.ClaimUidBitLength' claimUidBytes);  	}  	else {  		deserializedToken.Username = reader.ReadString ();  	}  	deserializedToken.AdditionalData = reader.ReadString ();  }  
Magic Number,ServiceStack.Html.AntiXsrf,AntiForgeryTokenSerializer,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\AntiForgeryTokenSerializer.cs,DeserializeImpl,The following statement contains a magic number: if (isClaimsBased) {  	byte[] claimUidBytes = reader.ReadBytes (AntiForgeryToken.ClaimUidBitLength / 8);  	deserializedToken.ClaimUid = new BinaryBlob (AntiForgeryToken.ClaimUidBitLength' claimUidBytes);  }  else {  	deserializedToken.Username = reader.ReadString ();  }  
Magic Number,ServiceStack.Html.AntiXsrf,BinaryBlob,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\BinaryBlob.cs,BinaryBlob,The following statement contains a magic number: if (bitLength < 32 || bitLength % 8 != 0) {  	throw new ArgumentOutOfRangeException ("bitLength");  }  
Magic Number,ServiceStack.Html.AntiXsrf,BinaryBlob,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\BinaryBlob.cs,BinaryBlob,The following statement contains a magic number: if (bitLength < 32 || bitLength % 8 != 0) {  	throw new ArgumentOutOfRangeException ("bitLength");  }  
Magic Number,ServiceStack.Html.AntiXsrf,BinaryBlob,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\BinaryBlob.cs,BinaryBlob,The following statement contains a magic number: if (data == null || data.Length != bitLength / 8) {  	throw new ArgumentOutOfRangeException ("data");  }  
Magic Number,ServiceStack.Html.AntiXsrf,ClaimUidExtractor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\AntiXsrf\ClaimUidExtractor.cs,ExtractClaimUid,The following statement contains a magic number: return new BinaryBlob (256' claimUidBytes);  
Magic Number,ServiceStack.Html,MvcHtmlString,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\MvcHtmlString.cs,GetCreator,The following statement contains a magic number: if (iHtmlStringType != null) {  	// first' create the dynamic type  	var dynamicType = DynamicTypeGenerator.GenerateType ("DynamicMvcHtmlString"' typeof(MvcHtmlString)' new[] {  		iHtmlStringType  	});  	// then' create the delegate to instantiate the dynamic type  	var valueParamExpr = Expression.Parameter (typeof(string)' "value");  	var newObjExpr = Expression.New (dynamicType.GetConstructor (new[] {  		typeof(string)  	})' valueParamExpr);  	var lambdaExpr = Expression.Lambda<MvcHtmlStringCreator> (newObjExpr' valueParamExpr);  	return lambdaExpr.Compile ();  }  else {  	// disabling 0618 allows us to call the MvcHtmlString() constructor  	#pragma  	return value => new MvcHtmlString (value);  	#pragma  }  
Magic Number,ServiceStack.Html,MvcHtmlString,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\MvcHtmlString.cs,GetCreator,The following statement contains a magic number: if (iHtmlStringType != null) {  	// first' create the dynamic type  	var dynamicType = DynamicTypeGenerator.GenerateType ("DynamicMvcHtmlString"' typeof(MvcHtmlString)' new[] {  		iHtmlStringType  	});  	// then' create the delegate to instantiate the dynamic type  	var valueParamExpr = Expression.Parameter (typeof(string)' "value");  	var newObjExpr = Expression.New (dynamicType.GetConstructor (new[] {  		typeof(string)  	})' valueParamExpr);  	var lambdaExpr = Expression.Lambda<MvcHtmlStringCreator> (newObjExpr' valueParamExpr);  	return lambdaExpr.Compile ();  }  else {  	// disabling 0618 allows us to call the MvcHtmlString() constructor  	#pragma  	return value => new MvcHtmlString (value);  	#pragma  }  
Magic Number,ServiceStack.Html,TemplateProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TemplateProvider.cs,EnsureAllCompiled,The following statement contains a magic number: waiter.WaitOne (60 * 1000);  
Magic Number,ServiceStack.Html,TemplateProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\TemplateProvider.cs,EnsureAllCompiled,The following statement contains a magic number: waiter.WaitOne (60 * 1000);  
Magic Number,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,LogErrorInRedisIfExists,The following statement contains a magic number: try {  	//Get a thread-safe redis client from the client manager pool  	using (var client = redisManager.GetClient ()) {  		//Get a client with a native interface for storing 'ResponseStatus' objects  		var redis = client.GetTypedClient<ResponseStatus> ();  		//Store the errors in predictable Redis-named lists i.e.   		//'urn:ServiceErrors:{ServiceName}' and 'urn:ServiceErrors:All'   		var redisSeriviceErrorList = redis.Lists [UrnId.Create (UrnServiceErrorType' operationName)];  		var redisCombinedErrorList = redis.Lists [UrnId.Create (UrnServiceErrorType' CombinedServiceLogId)];  		//Append the error at the start of the service-specific and combined error logs.  		redisSeriviceErrorList.Prepend (responseStatus);  		redisCombinedErrorList.Prepend (responseStatus);  		//Clip old error logs from the managed logs  		const int rollingErrorCount = 1000;  		redisSeriviceErrorList.Trim (0' rollingErrorCount);  		redisCombinedErrorList.Trim (0' rollingErrorCount);  	}  }  catch (Exception suppressRedisException) {  	Log.Error ("Could not append exception to redis service error logs"' suppressRedisException);  }  
Magic Number,ServiceStack.ServiceHost,DtoUtils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\DtoUtils.cs,LogErrorInRedisIfExists,The following statement contains a magic number: using (var client = redisManager.GetClient ()) {  	//Get a client with a native interface for storing 'ResponseStatus' objects  	var redis = client.GetTypedClient<ResponseStatus> ();  	//Store the errors in predictable Redis-named lists i.e.   	//'urn:ServiceErrors:{ServiceName}' and 'urn:ServiceErrors:All'   	var redisSeriviceErrorList = redis.Lists [UrnId.Create (UrnServiceErrorType' operationName)];  	var redisCombinedErrorList = redis.Lists [UrnId.Create (UrnServiceErrorType' CombinedServiceLogId)];  	//Append the error at the start of the service-specific and combined error logs.  	redisSeriviceErrorList.Prepend (responseStatus);  	redisCombinedErrorList.Prepend (responseStatus);  	//Clip old error logs from the managed logs  	const int rollingErrorCount = 1000;  	redisSeriviceErrorList.Trim (0' rollingErrorCount);  	redisCombinedErrorList.Trim (0' rollingErrorCount);  }  
Magic Number,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetBasicAuth,The following statement contains a magic number: if (parts.Length != 2)  	return null;  
Magic Number,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetDigestAuth,The following statement contains a magic number: if (parts.Length < 2)  	return null;  
Magic Number,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetDigestAuth,The following statement contains a magic number: auth = auth.Trim (new char[2] {  	' ''  	'''  });  
Magic Number,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetDigestAuth,The following statement contains a magic number: try {  	var result = new Dictionary<string' string> ();  	foreach (var item in parts) {  		var param = item.Trim ().Split (new char[] {  			'='  		}' 2);  		result.Add (param [0]' param [1].Trim (new char[] {  			'"'  		}));  	}  	result.Add ("method"' httpReq.HttpMethod);  	result.Add ("userhostaddress"' httpReq.UserHostAddress);  	return result;  }  catch (Exception) {  }  
Magic Number,ServiceStack.ServiceHost,HttpRequestAuthentication,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestAuthentication.cs,GetDigestAuth,The following statement contains a magic number: foreach (var item in parts) {  	var param = item.Trim ().Split (new char[] {  		'='  	}' 2);  	result.Add (param [0]' param [1].Trim (new char[] {  		'"'  	}));  }  
Magic Number,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,GetApplicationUrl,The following statement contains a magic number: if (httpReq.Url.Port != 80)  	baseUrl += ":" + httpReq.Url.Port;  
Magic Number,ServiceStack.ServiceHost,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\HttpRequestExtensions.cs,GetApplicationUrl,The following statement contains a magic number: if (url.Port != 80)  	baseUrl += ":" + url.Port;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,RestPath,The following statement contains a magic number: for (var i = 0; i < components.Length; i++) {  	var component = components [i];  	if (component.StartsWith (VariablePrefix)) {  		var variableName = component.Substring (1' component.Length - 2);  		if (variableName [variableName.Length - 1] == WildCardChar) {  			this.isWildcard [i] = true;  			variableName = variableName.Substring (0' variableName.Length - 1);  		}  		this.variablesNames [i] = variableName;  		this.variableArgsCount++;  	}  	else {  		this.literalsToMatch [i] = component.ToLower ();  		sbHashKey.Append (i + PathSeperatorChar.ToString () + this.literalsToMatch);  		if (firstLiteralMatch == null) {  			firstLiteralMatch = this.literalsToMatch [i];  		}  	}  }  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,RestPath,The following statement contains a magic number: if (component.StartsWith (VariablePrefix)) {  	var variableName = component.Substring (1' component.Length - 2);  	if (variableName [variableName.Length - 1] == WildCardChar) {  		this.isWildcard [i] = true;  		variableName = variableName.Substring (0' variableName.Length - 1);  	}  	this.variablesNames [i] = variableName;  	this.variableArgsCount++;  }  else {  	this.literalsToMatch [i] = component.ToLower ();  	sbHashKey.Append (i + PathSeperatorChar.ToString () + this.literalsToMatch);  	if (firstLiteralMatch == null) {  		firstLiteralMatch = this.literalsToMatch [i];  	}  }  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,MatchScore,The following statement contains a magic number: score += Math.Max ((10 - wildcardMatchCount)' 1) * 1000;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,MatchScore,The following statement contains a magic number: score += Math.Max ((10 - wildcardMatchCount)' 1) * 1000;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,MatchScore,The following statement contains a magic number: score += Math.Max ((10 - variableArgsCount)' 1) * 100;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,MatchScore,The following statement contains a magic number: score += Math.Max ((10 - variableArgsCount)' 1) * 100;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,MatchScore,The following statement contains a magic number: score += exactVerb ? 10 : 1;  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,ExplodeComponents,The following statement contains a magic number: for (var i = 0; i < withPathInfoParts.Length; i++) {  	var component = withPathInfoParts [i];  	if (string.IsNullOrEmpty (component))  		continue;  	if (this.PathComponentsCount != this.TotalComponentsCount && this.componentsWithSeparators [i]) {  		var subComponents = component.Split (ComponentSeperator);  		if (subComponents.Length < 2)  			return false;  		totalComponents.AddRange (subComponents);  	}  	else {  		totalComponents.Add (component);  	}  }  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,ExplodeComponents,The following statement contains a magic number: if (this.PathComponentsCount != this.TotalComponentsCount && this.componentsWithSeparators [i]) {  	var subComponents = component.Split (ComponentSeperator);  	if (subComponents.Length < 2)  		return false;  	totalComponents.AddRange (subComponents);  }  else {  	totalComponents.Add (component);  }  
Magic Number,ServiceStack.ServiceHost,RestPath,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\RestPath.cs,ExplodeComponents,The following statement contains a magic number: if (subComponents.Length < 2)  	return false;  
Magic Number,ServiceStack.MiniProfiler,Profiler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Profiler.cs,GetRoundedMilliseconds,The following statement contains a magic number: return msTimesTen / 10;  
Magic Number,ServiceStack.MiniProfiler,SqlTiming,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlTiming.cs,ToString,The following statement contains a magic number: return CommandString.Truncate (30) + " (" + DurationMilliseconds + " ms)";  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.IsNullOrWhiteSpace ()) {  	//var rc = request.RequestContext;  	//RouteValueDictionary values;  	//if (rc != null && rc.RouteData != null && (values = rc.RouteData.Values).Count > 0)  	//{  	//    var controller = values["Controller"];  	//    var action = values["Action"];  	//    if (controller != null && action != null)  	//        profiler.Name = controller.ToString() + "/" + action.ToString();  	//}  	if (profiler.Name.IsNullOrWhiteSpace ()) {  		profiler.Name = request.Path ?? "";  		if (profiler.Name.Length > 70)  			profiler.Name = profiler.Name.Remove (70);  	}  }  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.IsNullOrWhiteSpace ()) {  	//var rc = request.RequestContext;  	//RouteValueDictionary values;  	//if (rc != null && rc.RouteData != null && (values = rc.RouteData.Values).Count > 0)  	//{  	//    var controller = values["Controller"];  	//    var action = values["Action"];  	//    if (controller != null && action != null)  	//        profiler.Name = controller.ToString() + "/" + action.ToString();  	//}  	if (profiler.Name.IsNullOrWhiteSpace ()) {  		profiler.Name = request.Path ?? "";  		if (profiler.Name.Length > 70)  			profiler.Name = profiler.Name.Remove (70);  	}  }  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.IsNullOrWhiteSpace ()) {  	profiler.Name = request.Path ?? "";  	if (profiler.Name.Length > 70)  		profiler.Name = profiler.Name.Remove (70);  }  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.IsNullOrWhiteSpace ()) {  	profiler.Name = request.Path ?? "";  	if (profiler.Name.Length > 70)  		profiler.Name = profiler.Name.Remove (70);  }  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.Length > 70)  	profiler.Name = profiler.Name.Remove (70);  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: if (profiler.Name.Length > 70)  	profiler.Name = profiler.Name.Remove (70);  
Magic Number,ServiceStack.MiniProfiler,WebRequestProfilerProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\WebRequestProfilerProvider.cs,EnsureName,The following statement contains a magic number: profiler.Name = profiler.Name.Remove (70);  
Magic Number,ServiceStack.MiniProfiler.Helpers,HaackFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Helpers\HaackFormatter.cs,IndexOfExpressionStart,The following statement contains a magic number: if (index + 1 < format.Length) {  	char nextChar = format [index + 1];  	if (nextChar == '{') {  		return IndexOfExpressionStart (format' index + 2);  	}  }  
Magic Number,ServiceStack.MiniProfiler.Helpers,HaackFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Helpers\HaackFormatter.cs,IndexOfExpressionStart,The following statement contains a magic number: if (nextChar == '{') {  	return IndexOfExpressionStart (format' index + 2);  }  
Magic Number,ServiceStack.MiniProfiler.Helpers,HaackFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Helpers\HaackFormatter.cs,IndexOfExpressionStart,The following statement contains a magic number: return IndexOfExpressionStart (format' index + 2);  
Magic Number,ServiceStack.MiniProfiler.Helpers,HaackFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\Helpers\HaackFormatter.cs,IndexOfExpressionEnd,The following statement contains a magic number: if (braceCount % 2 == 1) {  	return IndexOfExpressionEnd (format' endBraceIndex + braceCount + 1);  }  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,GetWithLenFormatter,The following statement contains a magic number: return p =>  {  	if (p.Size < 1) {  		return capture;  	}  	else {  		return capture + "(" + (p.Size > 8000 ? "max" : p.Size.ToString ()) + ")";  	}  };  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,GetWithLenFormatter,The following statement contains a magic number: if (p.Size < 1) {  	return capture;  }  else {  	return capture + "(" + (p.Size > 8000 ? "max" : p.Size.ToString ()) + ")";  }  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,GetWithLenFormatter,The following statement contains a magic number: return capture + "(" + (p.Size > 8000 ? "max" : p.Size.ToString ()) + ")";  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,FormatSql,The following statement contains a magic number: foreach (var p in timing.Parameters) {  	if (first) {  		first = false;  	}  	else {  		buffer.AppendLine ("'").Append (new string (' '' 8));  	}  	var parsed = DbType.AnsiString;  	string resolvedType = null;  	var validEnum = false;  	try {  		parsed = p.DbType.ToEnum<DbType> ();  		validEnum = true;  	}  	catch {  	}  	if (!validEnum) {  		resolvedType = p.DbType;  	}  	if (resolvedType == null) {  		Func<SqlTimingParameter' string> translator;  		if (paramTranslator.TryGetValue (parsed' out translator)) {  			resolvedType = translator (p);  		}  		resolvedType = resolvedType ?? p.DbType;  	}  	var niceName = p.Name;  	if (!niceName.StartsWith ("@")) {  		niceName = "@" + niceName;  	}  	buffer.Append (niceName).Append (" ").Append (resolvedType).Append (" = ").Append (PrepareValue (p));  }  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,FormatSql,The following statement contains a magic number: if (first) {  	first = false;  }  else {  	buffer.AppendLine ("'").Append (new string (' '' 8));  }  
Magic Number,ServiceStack.MiniProfiler.SqlFormatters,SqlServerFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\SqlFormatters\SqlServerFormatter.cs,FormatSql,The following statement contains a magic number: buffer.AppendLine ("'").Append (new string (' '' 8));  
Magic Number,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,Results,The following statement contains a magic number: if (authorize != null && !authorize (httpReq' profiler)) {  	httpRes.StatusCode = 401;  	httpRes.ContentType = "text/plain";  	return "Unauthorized";  }  
Magic Number,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,Results,The following statement contains a magic number: httpRes.StatusCode = 401;  
Magic Number,ServiceStack.MiniProfiler.UI,MiniProfilerHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\MiniProfiler\UI\MiniProfilerHandler.cs,NotFound,The following statement contains a magic number: httpRes.StatusCode = 404;  
Magic Number,ServiceStack.VirtualPath,VirtualPathExtension,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\VirtualPath\VirtualPathExtension.cs,GroupByFirstToken,The following statement contains a magic number: return resourceNames.Select (n => n.Split (new[] {  	pathSeparator  }' 2)).GroupBy (t => t [0]);  
Magic Number,ServiceStack.WebHost.Endpoints,AppHostHttpListenerLongRunningBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostHttpListenerLongRunningBase.cs,ListenerCallback,The following statement contains a magic number: threadPoolManager.Peek (() =>  {  	try {  		ProcessRequest (context);  	}  	catch (Exception ex) {  		string error = string.Format ("Error this.ProcessRequest(context): [{0}]: {1}"' ex.GetType ().Name' ex.Message);  		log.ErrorFormat (error);  		try {  			var sb = new StringBuilder ();  			sb.AppendLine ("{");  			sb.AppendLine ("\"ResponseStatus\":{");  			sb.AppendFormat (" \"ErrorCode\":{0}'\n"' ex.GetType ().Name.EncodeJson ());  			sb.AppendFormat (" \"Message\":{0}'\n"' ex.Message.EncodeJson ());  			sb.AppendFormat (" \"StackTrace\":{0}\n"' ex.StackTrace.EncodeJson ());  			sb.AppendLine ("}");  			sb.AppendLine ("}");  			context.Response.StatusCode = 500;  			context.Response.ContentType = ContentType.Json;  			byte[] sbBytes = sb.ToString ().ToUtf8Bytes ();  			context.Response.OutputStream.Write (sbBytes' 0' sbBytes.Length);  			context.Response.Close ();  		}  		catch (Exception errorEx) {  			error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message);  			log.ErrorFormat (error);  		}  	}  	threadPoolManager.Free ();  }).Start ();  
Magic Number,ServiceStack.WebHost.Endpoints,AppHostHttpListenerLongRunningBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostHttpListenerLongRunningBase.cs,ListenerCallback,The following statement contains a magic number: try {  	ProcessRequest (context);  }  catch (Exception ex) {  	string error = string.Format ("Error this.ProcessRequest(context): [{0}]: {1}"' ex.GetType ().Name' ex.Message);  	log.ErrorFormat (error);  	try {  		var sb = new StringBuilder ();  		sb.AppendLine ("{");  		sb.AppendLine ("\"ResponseStatus\":{");  		sb.AppendFormat (" \"ErrorCode\":{0}'\n"' ex.GetType ().Name.EncodeJson ());  		sb.AppendFormat (" \"Message\":{0}'\n"' ex.Message.EncodeJson ());  		sb.AppendFormat (" \"StackTrace\":{0}\n"' ex.StackTrace.EncodeJson ());  		sb.AppendLine ("}");  		sb.AppendLine ("}");  		context.Response.StatusCode = 500;  		context.Response.ContentType = ContentType.Json;  		byte[] sbBytes = sb.ToString ().ToUtf8Bytes ();  		context.Response.OutputStream.Write (sbBytes' 0' sbBytes.Length);  		context.Response.Close ();  	}  	catch (Exception errorEx) {  		error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message);  		log.ErrorFormat (error);  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints,AppHostHttpListenerLongRunningBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostHttpListenerLongRunningBase.cs,ListenerCallback,The following statement contains a magic number: try {  	var sb = new StringBuilder ();  	sb.AppendLine ("{");  	sb.AppendLine ("\"ResponseStatus\":{");  	sb.AppendFormat (" \"ErrorCode\":{0}'\n"' ex.GetType ().Name.EncodeJson ());  	sb.AppendFormat (" \"Message\":{0}'\n"' ex.Message.EncodeJson ());  	sb.AppendFormat (" \"StackTrace\":{0}\n"' ex.StackTrace.EncodeJson ());  	sb.AppendLine ("}");  	sb.AppendLine ("}");  	context.Response.StatusCode = 500;  	context.Response.ContentType = ContentType.Json;  	byte[] sbBytes = sb.ToString ().ToUtf8Bytes ();  	context.Response.OutputStream.Write (sbBytes' 0' sbBytes.Length);  	context.Response.Close ();  }  catch (Exception errorEx) {  	error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message);  	log.ErrorFormat (error);  }  
Magic Number,ServiceStack.WebHost.Endpoints,AppHostHttpListenerLongRunningBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\AppHostHttpListenerLongRunningBase.cs,ListenerCallback,The following statement contains a magic number: context.Response.StatusCode = 500;  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,ThrowValidationException,The following statement contains a magic number: if (v.Length > 20)  	v = v.Substring (0' 16) + "...\"";  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,ThrowValidationException,The following statement contains a magic number: if (v.Length > 20)  	v = v.Substring (0' 16) + "...\"";  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,ThrowValidationException,The following statement contains a magic number: v = v.Substring (0' 16) + "...\"";  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpListenerRequestWrapper,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpListenerRequestWrapper.Mono.cs,IsInvalidString,The following statement contains a magic number: if (len < 2)  	return false;  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetQueryStringContentType,The following statement contains a magic number: if (format == null) {  	const int formatMaxLength = 4;  	var pi = httpReq.PathInfo;  	if (pi == null || pi.Length <= formatMaxLength)  		return null;  	if (pi [0] == '/')  		pi = pi.Substring (1);  	format = pi.SplitOnFirst ('/') [0];  	if (format.Length > formatMaxLength)  		return null;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAbsoluteUrl,The following statement contains a magic number: if (url.SafeSubstring (0' 2) == "~/") {  	url = httpReq.GetBaseUrl ().CombineWith (url.Substring (2));  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAbsoluteUrl,The following statement contains a magic number: if (url.SafeSubstring (0' 2) == "~/") {  	url = httpReq.GetBaseUrl ().CombineWith (url.Substring (2));  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAbsoluteUrl,The following statement contains a magic number: url = httpReq.GetBaseUrl ().CombineWith (url.Substring (2));  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: if (request.UserHostAddress != null) {  	var isIpv4Address = request.UserHostAddress.IndexOf ('.') != -1 && request.UserHostAddress.IndexOf ("::"' StringComparison.InvariantCulture) == -1;  	string ipAddressNumber = null;  	if (isIpv4Address) {  		ipAddressNumber = request.UserHostAddress.SplitOnFirst (":") [0];  	}  	else {  		if (request.UserHostAddress.Contains ("]:")) {  			ipAddressNumber = request.UserHostAddress.SplitOnLast (":") [0];  		}  		else {  			ipAddressNumber = request.UserHostAddress.LastIndexOf ("%"' StringComparison.InvariantCulture) > 0 ? request.UserHostAddress.SplitOnLast (":") [0] : request.UserHostAddress;  		}  	}  	try {  		ipAddressNumber = ipAddressNumber.SplitOnFirst (''') [0];  		var ipAddress = ipAddressNumber.StartsWith ("::1") ? IPAddress.IPv6Loopback : IPAddress.Parse (ipAddressNumber);  		portRestrictions |= GetAttributes (ipAddress);  	}  	catch (Exception ex) {  		throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: if (request.UserHostAddress != null) {  	var isIpv4Address = request.UserHostAddress.IndexOf ('.') != -1 && request.UserHostAddress.IndexOf ("::"' StringComparison.InvariantCulture) == -1;  	string ipAddressNumber = null;  	if (isIpv4Address) {  		ipAddressNumber = request.UserHostAddress.SplitOnFirst (":") [0];  	}  	else {  		if (request.UserHostAddress.Contains ("]:")) {  			ipAddressNumber = request.UserHostAddress.SplitOnLast (":") [0];  		}  		else {  			ipAddressNumber = request.UserHostAddress.LastIndexOf ("%"' StringComparison.InvariantCulture) > 0 ? request.UserHostAddress.SplitOnLast (":") [0] : request.UserHostAddress;  		}  	}  	try {  		ipAddressNumber = ipAddressNumber.SplitOnFirst (''') [0];  		var ipAddress = ipAddressNumber.StartsWith ("::1") ? IPAddress.IPv6Loopback : IPAddress.Parse (ipAddressNumber);  		portRestrictions |= GetAttributes (ipAddress);  	}  	catch (Exception ex) {  		throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: try {  	ipAddressNumber = ipAddressNumber.SplitOnFirst (''') [0];  	var ipAddress = ipAddressNumber.StartsWith ("::1") ? IPAddress.IPv6Loopback : IPAddress.Parse (ipAddressNumber);  	portRestrictions |= GetAttributes (ipAddress);  }  catch (Exception ex) {  	throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: try {  	ipAddressNumber = ipAddressNumber.SplitOnFirst (''') [0];  	var ipAddress = ipAddressNumber.StartsWith ("::1") ? IPAddress.IPv6Loopback : IPAddress.Parse (ipAddressNumber);  	portRestrictions |= GetAttributes (ipAddress);  }  catch (Exception ex) {  	throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  
Magic Number,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,GetAttributes,The following statement contains a magic number: throw new ArgumentException ("Could not parse Ipv{0} Address: {1} / {2}".Fmt ((isIpv4Address ? 4 : 6)' request.UserHostAddress' ipAddressNumber)' ex);  
Magic Number,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,Register,The following statement contains a magic number: appHost.CatchAllHandlers.Add ((httpMethod' pathInfo' filePath) =>  {  	MarkdownPage markdownPage = null;  	if (catchAllPathsNotFound.Contains (pathInfo))  		return null;  	markdownPage = FindByPathInfo (pathInfo);  	if (WatchForModifiedPages)  		ReloadModifiedPageAndTemplates (markdownPage);  	if (markdownPage == null) {  		if (pathInfo.EndsWith (".md")) {  			pathInfo = pathInfo.EndsWithIgnoreCase (DefaultPage + ".md") ? pathInfo.Substring (0' pathInfo.Length - (DefaultPage + ".md").Length) : pathInfo.WithoutExtension ();  			return new RedirectHttpHandler {  				AbsoluteUrl = webHostUrl.IsNullOrEmpty () ? null : webHostUrl.CombineWith (pathInfo)'  				RelativeUrl = webHostUrl.IsNullOrEmpty () ? pathInfo : null  			};  		}  		if (catchAllPathsNotFound.Count > 1000)  			//prevent DDOS  			catchAllPathsNotFound = new HashSet<string> ();  		var tmp = new HashSet<string> (catchAllPathsNotFound) {  			pathInfo  		};  		catchAllPathsNotFound = tmp;  		return null;  	}  	return new MarkdownHandler (pathInfo) {  		MarkdownFormat = this'  		MarkdownPage = markdownPage'  		RequestName = "MarkdownPage"  	};  });  
Magic Number,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,Register,The following statement contains a magic number: if (markdownPage == null) {  	if (pathInfo.EndsWith (".md")) {  		pathInfo = pathInfo.EndsWithIgnoreCase (DefaultPage + ".md") ? pathInfo.Substring (0' pathInfo.Length - (DefaultPage + ".md").Length) : pathInfo.WithoutExtension ();  		return new RedirectHttpHandler {  			AbsoluteUrl = webHostUrl.IsNullOrEmpty () ? null : webHostUrl.CombineWith (pathInfo)'  			RelativeUrl = webHostUrl.IsNullOrEmpty () ? pathInfo : null  		};  	}  	if (catchAllPathsNotFound.Count > 1000)  		//prevent DDOS  		catchAllPathsNotFound = new HashSet<string> ();  	var tmp = new HashSet<string> (catchAllPathsNotFound) {  		pathInfo  	};  	catchAllPathsNotFound = tmp;  	return null;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,Register,The following statement contains a magic number: if (catchAllPathsNotFound.Count > 1000)  	//prevent DDOS  	catchAllPathsNotFound = new HashSet<string> ();  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DataBinder,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\DataBinder.cs,CompileStaticAccessToString,The following statement contains a magic number: for (var i = 2; i < members.Length; i++) {  	body = Expression.PropertyOrField (body' members [i]);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,CreateTemplateBlocks,The following statement contains a magic number: while ((pos = content.IndexOf ('@'' lastPos)) != -1) {  	var contentBlock = content.Substring (lastPos' pos - lastPos);  	var prevTextBlock = new TextBlock (contentBlock);  	blocks.Add (prevTextBlock);  	pos++;  	//@  	if (content [pos] == '@') {  		prevTextBlock.Content += "@";  		pos++;  	}  	else if (content [pos] == StatementPlaceholderChar) {  		pos++;  		//^  		var index = content.GetNextAlphaNumericExpr (ref pos);  		int statementNo;  		if (int.TryParse (index' out statementNo)) {  			var statementIndex = statementNo - 1;  			if (statementIndex >= statementBlocks.Count)  				throw new ArgumentOutOfRangeException ("Expected < " + statementBlocks.Count + " but was " + statementIndex);  			var statement = statementBlocks [statementIndex];  			blocks.Add (statement);  		}  		//Strip everything but @^1 in <p>@^1</p>\n  		prevTextBlock.RemoveIfEndingWith (UnwantedPrefix);  		content.SkipIfNextIs (ref pos' UnwantedSuffix);  		content.SkipIfNextIs (ref pos' "\r");  		content.SkipIfNextIs (ref pos' "\n");  	}  	else {  		//ignore email addresses with @ in it  		var charBeforeAtSymbol = content.SafePeekAt (pos - 3);  		if (!charBeforeAtSymbol.IsAlphaNumeric ()) {  			var memberExpr = content.GetNextMemberExpr (ref pos);  			if (memberExpr != null) {  				blocks.Add (new MemberExprBlock (memberExpr));  			}  		}  		else {  			prevTextBlock.Content += "@";  		}  	}  	lastPos = pos;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,CreateTemplateBlocks,The following statement contains a magic number: if (content [pos] == '@') {  	prevTextBlock.Content += "@";  	pos++;  }  else if (content [pos] == StatementPlaceholderChar) {  	pos++;  	//^  	var index = content.GetNextAlphaNumericExpr (ref pos);  	int statementNo;  	if (int.TryParse (index' out statementNo)) {  		var statementIndex = statementNo - 1;  		if (statementIndex >= statementBlocks.Count)  			throw new ArgumentOutOfRangeException ("Expected < " + statementBlocks.Count + " but was " + statementIndex);  		var statement = statementBlocks [statementIndex];  		blocks.Add (statement);  	}  	//Strip everything but @^1 in <p>@^1</p>\n  	prevTextBlock.RemoveIfEndingWith (UnwantedPrefix);  	content.SkipIfNextIs (ref pos' UnwantedSuffix);  	content.SkipIfNextIs (ref pos' "\r");  	content.SkipIfNextIs (ref pos' "\n");  }  else {  	//ignore email addresses with @ in it  	var charBeforeAtSymbol = content.SafePeekAt (pos - 3);  	if (!charBeforeAtSymbol.IsAlphaNumeric ()) {  		var memberExpr = content.GetNextMemberExpr (ref pos);  		if (memberExpr != null) {  			blocks.Add (new MemberExprBlock (memberExpr));  		}  	}  	else {  		prevTextBlock.Content += "@";  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TemplateExtensions.cs,CreateTemplateBlocks,The following statement contains a magic number: if (content [pos] == StatementPlaceholderChar) {  	pos++;  	//^  	var index = content.GetNextAlphaNumericExpr (ref pos);  	int statementNo;  	if (int.TryParse (index' out statementNo)) {  		var statementIndex = statementNo - 1;  		if (statementIndex >= statementBlocks.Count)  			throw new ArgumentOutOfRangeException ("Expected < " + statementBlocks.Count + " but was " + statementIndex);  		var statement = statementBlocks [statementIndex];  		blocks.Add (statement);  	}  	//Strip everything but @^1 in <p>@^1</p>\n  	prevTextBlock.RemoveIfEndingWith (UnwantedPrefix);  	content.SkipIfNextIs (ref pos' UnwantedSuffix);  	content.SkipIfNextIs (ref pos' "\r");  	content.SkipIfNextIs (ref pos' "\n");  }  else {  	//ignore email addresses with @ in it  	var charBeforeAtSymbol = content.SafePeekAt (pos - 3);  	if (!charBeforeAtSymbol.IsAlphaNumeric ()) {  		var memberExpr = content.GetNextMemberExpr (ref pos);  		if (memberExpr != null) {  			blocks.Add (new MemberExprBlock (memberExpr));  		}  	}  	else {  		prevTextBlock.Content += "@";  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,CleanHtml,The following statement contains a magic number: while ((pos = html.IndexOf (EscapedStartTagArtefact' pos' StringComparison.CurrentCulture)) != -1) {  	hasEscapedTags = true;  	var endPos = html.IndexOf ("</p>"' pos' StringComparison.CurrentCulture);  	if (endPos == -1)  		return html;  	//Unexpected Error so skip  	html = html.Substring (0' endPos) + html.Substring (endPos + 4);  	pos = endPos;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,TemplateBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,CleanHtml,The following statement contains a magic number: html = html.Substring (0' endPos) + html.Substring (endPos + 4);  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,RemoveTrailingNewLineIfProceedsStatement,The following statement contains a magic number: if (childBlocks.Count < 2)  	return;  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: while ((pos = content.IndexOf ('@'' lastPos)) != -1) {  	var peekChar = content.Substring (pos + 1' 1);  	var isComment = peekChar == "*";  	if (isComment) {  		var endPos = content.IndexOf ("*@"' pos);  		if (endPos == -1)  			throw new InvalidDataException ("Unterminated Comment at charIndex: " + pos);  		lastPos = endPos + 2;  		continue;  	}  	if (peekChar == "@") {  		sb.Append ('@');  		pos += 2;  		lastPos = pos;  		continue;  	}  	var contentBlock = content.Substring (lastPos' pos - lastPos);  	var startPos = pos;  	pos++;  	//@  	var statementExpr = content.GetNextStatementExpr (ref pos);  	if (statementExpr != null) {  		contentBlock = contentBlock.TrimLineIfOnlyHasWhitespace ();  		sb.Append (contentBlock);  		if (statementExpr is MethodStatementExprBlock)  			sb.Append (' ');  		//ensure a spacer between method blocks  		statementExpr.Prepare (allStatements);  		allStatements.Add (statementExpr);  		var placeholder = "@" + TemplateExtensions.StatementPlaceholderChar + allStatements.Count;  		sb.Append (placeholder);  		lastPos = pos;  	}  	else {  		sb.Append (contentBlock);  		sb.Append ('@');  		lastPos = startPos + 1;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: while ((pos = content.IndexOf ('@'' lastPos)) != -1) {  	var peekChar = content.Substring (pos + 1' 1);  	var isComment = peekChar == "*";  	if (isComment) {  		var endPos = content.IndexOf ("*@"' pos);  		if (endPos == -1)  			throw new InvalidDataException ("Unterminated Comment at charIndex: " + pos);  		lastPos = endPos + 2;  		continue;  	}  	if (peekChar == "@") {  		sb.Append ('@');  		pos += 2;  		lastPos = pos;  		continue;  	}  	var contentBlock = content.Substring (lastPos' pos - lastPos);  	var startPos = pos;  	pos++;  	//@  	var statementExpr = content.GetNextStatementExpr (ref pos);  	if (statementExpr != null) {  		contentBlock = contentBlock.TrimLineIfOnlyHasWhitespace ();  		sb.Append (contentBlock);  		if (statementExpr is MethodStatementExprBlock)  			sb.Append (' ');  		//ensure a spacer between method blocks  		statementExpr.Prepare (allStatements);  		allStatements.Add (statementExpr);  		var placeholder = "@" + TemplateExtensions.StatementPlaceholderChar + allStatements.Count;  		sb.Append (placeholder);  		lastPos = pos;  	}  	else {  		sb.Append (contentBlock);  		sb.Append ('@');  		lastPos = startPos + 1;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: if (isComment) {  	var endPos = content.IndexOf ("*@"' pos);  	if (endPos == -1)  		throw new InvalidDataException ("Unterminated Comment at charIndex: " + pos);  	lastPos = endPos + 2;  	continue;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: lastPos = endPos + 2;  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: if (peekChar == "@") {  	sb.Append ('@');  	pos += 2;  	lastPos = pos;  	continue;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,StatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Extract,The following statement contains a magic number: pos += 2;  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (directive == "model") {  	this.BaseType = typeof(MarkdownViewBase<>);  	this.GenericArgs = new[] {  		GetType (line)  	};  }  else if (directive == "inherits") {  	var parts = line.Split (new[] {  		'<''  		'>'  	}).Where (x => !x.IsNullOrEmpty ()).ToArray ();  	var isGenericType = parts.Length >= 2;  	this.BaseType = isGenericType ? GetType (parts [0] + "`1") : GetType (parts [0]);  	if (isGenericType) {  		this.GenericArgs = new[] {  			GetType (parts [1])  		};  	}  }  else if (directive == "helper") {  	var helpers = line.Split (''');  	this.Helpers = new Dictionary<string' Type> ();  	foreach (var helper in helpers) {  		var parts = helper.Split (':');  		if (parts.Length != 2)  			throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  		var tagName = parts [0].Trim ();  		var typeName = parts [1].Trim ();  		var helperType = GetType (typeName);  		if (helperType == null)  			throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  		this.Helpers [tagName] = helperType;  	}  }  else if (directive == "template" || directive == "layout") {  	this.TemplatePath = line.Trim ().Trim ('"');  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (directive == "model") {  	this.BaseType = typeof(MarkdownViewBase<>);  	this.GenericArgs = new[] {  		GetType (line)  	};  }  else if (directive == "inherits") {  	var parts = line.Split (new[] {  		'<''  		'>'  	}).Where (x => !x.IsNullOrEmpty ()).ToArray ();  	var isGenericType = parts.Length >= 2;  	this.BaseType = isGenericType ? GetType (parts [0] + "`1") : GetType (parts [0]);  	if (isGenericType) {  		this.GenericArgs = new[] {  			GetType (parts [1])  		};  	}  }  else if (directive == "helper") {  	var helpers = line.Split (''');  	this.Helpers = new Dictionary<string' Type> ();  	foreach (var helper in helpers) {  		var parts = helper.Split (':');  		if (parts.Length != 2)  			throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  		var tagName = parts [0].Trim ();  		var typeName = parts [1].Trim ();  		var helperType = GetType (typeName);  		if (helperType == null)  			throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  		this.Helpers [tagName] = helperType;  	}  }  else if (directive == "template" || directive == "layout") {  	this.TemplatePath = line.Trim ().Trim ('"');  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (directive == "inherits") {  	var parts = line.Split (new[] {  		'<''  		'>'  	}).Where (x => !x.IsNullOrEmpty ()).ToArray ();  	var isGenericType = parts.Length >= 2;  	this.BaseType = isGenericType ? GetType (parts [0] + "`1") : GetType (parts [0]);  	if (isGenericType) {  		this.GenericArgs = new[] {  			GetType (parts [1])  		};  	}  }  else if (directive == "helper") {  	var helpers = line.Split (''');  	this.Helpers = new Dictionary<string' Type> ();  	foreach (var helper in helpers) {  		var parts = helper.Split (':');  		if (parts.Length != 2)  			throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  		var tagName = parts [0].Trim ();  		var typeName = parts [1].Trim ();  		var helperType = GetType (typeName);  		if (helperType == null)  			throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  		this.Helpers [tagName] = helperType;  	}  }  else if (directive == "template" || directive == "layout") {  	this.TemplatePath = line.Trim ().Trim ('"');  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (directive == "inherits") {  	var parts = line.Split (new[] {  		'<''  		'>'  	}).Where (x => !x.IsNullOrEmpty ()).ToArray ();  	var isGenericType = parts.Length >= 2;  	this.BaseType = isGenericType ? GetType (parts [0] + "`1") : GetType (parts [0]);  	if (isGenericType) {  		this.GenericArgs = new[] {  			GetType (parts [1])  		};  	}  }  else if (directive == "helper") {  	var helpers = line.Split (''');  	this.Helpers = new Dictionary<string' Type> ();  	foreach (var helper in helpers) {  		var parts = helper.Split (':');  		if (parts.Length != 2)  			throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  		var tagName = parts [0].Trim ();  		var typeName = parts [1].Trim ();  		var helperType = GetType (typeName);  		if (helperType == null)  			throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  		this.Helpers [tagName] = helperType;  	}  }  else if (directive == "template" || directive == "layout") {  	this.TemplatePath = line.Trim ().Trim ('"');  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (directive == "helper") {  	var helpers = line.Split (''');  	this.Helpers = new Dictionary<string' Type> ();  	foreach (var helper in helpers) {  		var parts = helper.Split (':');  		if (parts.Length != 2)  			throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  		var tagName = parts [0].Trim ();  		var typeName = parts [1].Trim ();  		var helperType = GetType (typeName);  		if (helperType == null)  			throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  		this.Helpers [tagName] = helperType;  	}  }  else if (directive == "template" || directive == "layout") {  	this.TemplatePath = line.Trim ().Trim ('"');  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: foreach (var helper in helpers) {  	var parts = helper.Split (':');  	if (parts.Length != 2)  		throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  	var tagName = parts [0].Trim ();  	var typeName = parts [1].Trim ();  	var helperType = GetType (typeName);  	if (helperType == null)  		throw new InvalidDataException ("Unable to resolve helper type: " + typeName);  	this.Helpers [tagName] = helperType;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,DirectiveBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,DirectiveBlock,The following statement contains a magic number: if (parts.Length != 2)  	throw new InvalidDataException ("Invalid helper directive' should be 'TagName: Helper.Namespace.And.Type'");  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,ForEachStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The following statement contains a magic number: if (parts.Length < 3)  	throw new InvalidDataException ("Invalid foreach condition: " + Condition);  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,VarStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,OnFirstRun,The following statement contains a magic number: if (parts.Length != 2)  	throw new InvalidDataException ("Invalid var declaration' should be '@var varName = {MemberExpression} [' {VarDeclaration}]' was: " + declaration);  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The following statement contains a magic number: if (parts.Length > 2)  	throw new ArgumentException ("Unable to resolve method: " + methodExpr);  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Markdown,MethodStatementExprBlock,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\TextBlock.cs,Prepare,The following statement contains a magic number: try {  	var mi = methodName == "Partial" ? type.GetMethods (BindingFlags.Public | BindingFlags.Instance).FirstOrDefault (m => m.GetParameters ().Length == 2 && m.Name == methodName) : type.GetMethod (methodName' BindingFlags.Public | BindingFlags.Instance);  	if (mi == null) {  		mi = HtmlHelper.GetMethod (methodName);  		if (mi == null)  			throw new ArgumentException ("Unable to resolve method '" + methodExpr + "' on type " + type.Name);  	}  	base.ReturnType = mi.ReturnType;  }  catch (Exception ex) {  	throw;  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,FormParagraphs,The following statement contains a magic number: for (int i = 0; i < grafs.Length; i++) {  	if (grafs [i].StartsWith ("\x1AH")) {  		// unhashify HTML blocks  		if (unhash) {  			int sanityCheck = 50;  			// just for safety' guard against an infinite loop  			bool keepGoing = true;  			// as long as replacements where made' keep going  			while (keepGoing && sanityCheck > 0) {  				keepGoing = false;  				grafs [i] = _htmlBlockHash.Replace (grafs [i]' match =>  {  					keepGoing = true;  					return _htmlBlocks [match.Value];  				});  				sanityCheck--;  			}  			/* if (keepGoing)                         {                             // Logging of an infinite loop goes here.                             // If such a thing should happen' please open a new issue on http://code.google.com/p/markdownsharp/                             // with the input that caused it.                         }*/}  	}  	else {  		// do span level processing inside the block' then wrap result in <p> tags  		grafs [i] = _leadingWhitespace.Replace (RunSpanGamut (grafs [i])' "<p>") + "</p>";  	}  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,FormParagraphs,The following statement contains a magic number: if (grafs [i].StartsWith ("\x1AH")) {  	// unhashify HTML blocks  	if (unhash) {  		int sanityCheck = 50;  		// just for safety' guard against an infinite loop  		bool keepGoing = true;  		// as long as replacements where made' keep going  		while (keepGoing && sanityCheck > 0) {  			keepGoing = false;  			grafs [i] = _htmlBlockHash.Replace (grafs [i]' match =>  {  				keepGoing = true;  				return _htmlBlocks [match.Value];  			});  			sanityCheck--;  		}  		/* if (keepGoing)                         {                             // Logging of an infinite loop goes here.                             // If such a thing should happen' please open a new issue on http://code.google.com/p/markdownsharp/                             // with the input that caused it.                         }*/}  }  else {  	// do span level processing inside the block' then wrap result in <p> tags  	grafs [i] = _leadingWhitespace.Replace (RunSpanGamut (grafs [i])' "<p>") + "</p>";  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,FormParagraphs,The following statement contains a magic number: if (unhash) {  	int sanityCheck = 50;  	// just for safety' guard against an infinite loop  	bool keepGoing = true;  	// as long as replacements where made' keep going  	while (keepGoing && sanityCheck > 0) {  		keepGoing = false;  		grafs [i] = _htmlBlockHash.Replace (grafs [i]' match =>  {  			keepGoing = true;  			return _htmlBlocks [match.Value];  		});  		sanityCheck--;  	}  	/* if (keepGoing)                         {                             // Logging of an infinite loop goes here.                             // If such a thing should happen' please open a new issue on http://code.google.com/p/markdownsharp/                             // with the input that caused it.                         }*/}  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _urls [linkID] = EncodeAmpsAndAngles (match.Groups [2].Value);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups [3] != null && match.Groups [3].Length > 0)  	_titles [linkID] = match.Groups [3].Value.Replace ("\""' "&quot;");  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups [3] != null && match.Groups [3].Length > 0)  	_titles [linkID] = match.Groups [3].Value.Replace ("\""' "&quot;");  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups [3] != null && match.Groups [3].Length > 0)  	_titles [linkID] = match.Groups [3].Value.Replace ("\""' "&quot;");  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _titles [linkID] = match.Groups [3].Value.Replace ("\""' "&quot;");  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: if (url.StartsWith ("<") && url.EndsWith (">"))  	url = url.Substring (1' url.Length - 2);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: url = url.Substring (1' url.Length - 2);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: if (url.StartsWith ("<") && url.EndsWith (">"))  	url = url.Substring (1' url.Length - 2);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: url = url.Substring (1' url.Length - 2);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr) {  	r = rand.Next (1' 100);  	if ((r > 90 || c == ':') && c != '@')  		sb.Append (c);  	// m  	else if (r < 45)  		sb.AppendFormat ("&#x{0:x};"' (int)c);  	// &#x6D  	else  		sb.AppendFormat ("&#{0};"' (int)c);  	// &#109  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr) {  	r = rand.Next (1' 100);  	if ((r > 90 || c == ':') && c != '@')  		sb.Append (c);  	// m  	else if (r < 45)  		sb.AppendFormat ("&#x{0:x};"' (int)c);  	// &#x6D  	else  		sb.AppendFormat ("&#{0};"' (int)c);  	// &#109  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr) {  	r = rand.Next (1' 100);  	if ((r > 90 || c == ':') && c != '@')  		sb.Append (c);  	// m  	else if (r < 45)  		sb.AppendFormat ("&#x{0:x};"' (int)c);  	// &#x6D  	else  		sb.AppendFormat ("&#{0};"' (int)c);  	// &#109  }  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: r = rand.Next (1' 100);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: if ((r > 90 || c == ':') && c != '@')  	sb.Append (c);  // m  else if (r < 45)  	sb.AppendFormat ("&#x{0:x};"' (int)c);  // &#x6D  else  	sb.AppendFormat ("&#{0};"' (int)c);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: if ((r > 90 || c == ':') && c != '@')  	sb.Append (c);  // m  else if (r < 45)  	sb.AppendFormat ("&#x{0:x};"' (int)c);  // &#x6D  else  	sb.AppendFormat ("&#{0};"' (int)c);  
Magic Number,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: if (r < 45)  	sb.AppendFormat ("&#x{0:x};"' (int)c);  // &#x6D  else  	sb.AppendFormat ("&#{0};"' (int)c);  
Magic Number,ServiceStack.WebHost.Endpoints.Support,ForbiddenHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\ForbiddenHttpHandler.cs,ProcessRequest,The following statement contains a magic number: response.StatusCode = 403;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,ForbiddenHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\ForbiddenHttpHandler.cs,ProcessRequest,The following statement contains a magic number: response.StatusCode = 403;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,NotFoundHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\NotFoundHttpHandler.cs,ProcessRequest,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,NotFoundHttpHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\NotFoundHttpHandler.cs,ProcessRequest,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,Start,The following statement contains a magic number: try {  	Listener.Start ();  }  catch (HttpListenerException ex) {  	if (Config.AllowAclUrlReservation && ex.ErrorCode == 5 && registeredReservedUrl == null) {  		registeredReservedUrl = AddUrlReservationToAcl (urlBase);  		if (registeredReservedUrl != null) {  			Start (urlBase' listenCallback);  			return;  		}  	}  	throw ex;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,Start,The following statement contains a magic number: if (Config.AllowAclUrlReservation && ex.ErrorCode == 5 && registeredReservedUrl == null) {  	registeredReservedUrl = AddUrlReservationToAcl (urlBase);  	if (registeredReservedUrl != null) {  		Start (urlBase' listenCallback);  		return;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,ListenerCallback,The following statement contains a magic number: try {  	this.ProcessRequest (context);  }  catch (Exception ex) {  	var error = string.Format ("Error this.ProcessRequest(context): [{0}]: {1}"' ex.GetType ().Name' ex.Message);  	Log.ErrorFormat (error);  	try {  		var errorResponse = new ErrorResponse {  			ResponseStatus = new ResponseStatus {  				ErrorCode = ex.GetType ().Name'  				Message = ex.Message'  				StackTrace = ex.StackTrace'  			}  		};  		var operationName = context.Request.GetOperationName ();  		var httpReq = new HttpListenerRequestWrapper (operationName' context.Request);  		var httpRes = new HttpListenerResponseWrapper (context.Response);  		var requestCtx = new HttpRequestContext (httpReq' httpRes' errorResponse);  		var contentType = requestCtx.ResponseContentType;  		var serializer = EndpointHost.ContentTypeFilter.GetResponseSerializer (contentType);  		if (serializer == null) {  			contentType = EndpointHost.Config.DefaultContentType;  			serializer = EndpointHost.ContentTypeFilter.GetResponseSerializer (contentType);  		}  		httpRes.StatusCode = 500;  		httpRes.ContentType = contentType;  		serializer (requestCtx' errorResponse' httpRes);  		httpRes.Close ();  	}  	catch (Exception errorEx) {  		error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message);  		Log.ErrorFormat (error);  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,ListenerCallback,The following statement contains a magic number: try {  	var errorResponse = new ErrorResponse {  		ResponseStatus = new ResponseStatus {  			ErrorCode = ex.GetType ().Name'  			Message = ex.Message'  			StackTrace = ex.StackTrace'  		}  	};  	var operationName = context.Request.GetOperationName ();  	var httpReq = new HttpListenerRequestWrapper (operationName' context.Request);  	var httpRes = new HttpListenerResponseWrapper (context.Response);  	var requestCtx = new HttpRequestContext (httpReq' httpRes' errorResponse);  	var contentType = requestCtx.ResponseContentType;  	var serializer = EndpointHost.ContentTypeFilter.GetResponseSerializer (contentType);  	if (serializer == null) {  		contentType = EndpointHost.Config.DefaultContentType;  		serializer = EndpointHost.ContentTypeFilter.GetResponseSerializer (contentType);  	}  	httpRes.StatusCode = 500;  	httpRes.ContentType = contentType;  	serializer (requestCtx' errorResponse' httpRes);  	httpRes.Close ();  }  catch (Exception errorEx) {  	error = string.Format ("Error this.ProcessRequest(context)(Exception while writing error to the response): [{0}]: {1}"' errorEx.GetType ().Name' errorEx.Message);  	Log.ErrorFormat (error);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,ListenerCallback,The following statement contains a magic number: httpRes.StatusCode = 500;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,AddUrlReservationToAcl,The following statement contains a magic number: try {  	string cmd' args;  	// use HttpCfg for windows versions before Version 6.0' else use NetSH  	if (Environment.OSVersion.Version.Major < 6) {  		var sid = System.Security.Principal.WindowsIdentity.GetCurrent ().User;  		cmd = "httpcfg";  		args = string.Format (@"set urlacl /u {0} /a D:(A;;GX;;;""{1}"")"' urlBase' sid);  	}  	else {  		cmd = "netsh";  		args = string.Format (@"http add urlacl url={0} user={1}\{2} listen=yes"' urlBase' Environment.UserDomainName' Environment.UserName);  	}  	var psi = new ProcessStartInfo (cmd' args) {  		Verb = "runas"'  		CreateNoWindow = true'  		WindowStyle = ProcessWindowStyle.Hidden'  		UseShellExecute = true  	};  	Process.Start (psi).WaitForExit ();  	return urlBase;  }  catch {  	return null;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,AddUrlReservationToAcl,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6) {  	var sid = System.Security.Principal.WindowsIdentity.GetCurrent ().User;  	cmd = "httpcfg";  	args = string.Format (@"set urlacl /u {0} /a D:(A;;GX;;;""{1}"")"' urlBase' sid);  }  else {  	cmd = "netsh";  	args = string.Format (@"http add urlacl url={0} user={1}\{2} listen=yes"' urlBase' Environment.UserDomainName' Environment.UserName);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,RemoveUrlReservationFromAcl,The following statement contains a magic number: try {  	string cmd' args;  	if (Environment.OSVersion.Version.Major < 6) {  		cmd = "httpcfg";  		args = string.Format (@"delete urlacl /u {0}"' urlBase);  	}  	else {  		cmd = "netsh";  		args = string.Format (@"http delete urlacl url={0}"' urlBase);  	}  	var psi = new ProcessStartInfo (cmd' args) {  		Verb = "runas"'  		CreateNoWindow = true'  		WindowStyle = ProcessWindowStyle.Hidden'  		UseShellExecute = true  	};  	Process.Start (psi).WaitForExit ();  }  catch {  	/* ignore */}  
Magic Number,ServiceStack.WebHost.Endpoints.Support,HttpListenerBase,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\HttpListenerBase.cs,RemoveUrlReservationFromAcl,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6) {  	cmd = "httpcfg";  	args = string.Format (@"delete urlacl /u {0}"' urlBase);  }  else {  	cmd = "netsh";  	args = string.Format (@"http delete urlacl url={0}"' urlBase);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: try {  	var worker = GetWorker (context);  	string value = worker.GetKnownRequestHeader (HttpWorkerRequest.HeaderAcceptEncoding);  	if (value == null) {  		return false;  	}  	if (value.Length >= 4) {  		if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  			return true;  		}  		else {  			for (int i = 0; i < value.Length - 3; i++) {  				if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  					return true;  				}  			}  		}  	}  	return false;  }  catch {  	return false;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value.Length >= 4) {  	if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  		return true;  	}  	else {  		for (int i = 0; i < value.Length - 3; i++) {  			if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  				return true;  			}  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if (value [0] == 'g' && value [1] == 'z' && value [2] == 'i' && value [3] == 'p') {  	return true;  }  else {  	for (int i = 0; i < value.Length - 3; i++) {  		if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  			return true;  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: for (int i = 0; i < value.Length - 3; i++) {  	if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  		return true;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: for (int i = 0; i < value.Length - 3; i++) {  	if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  		return true;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: for (int i = 0; i < value.Length - 3; i++) {  	if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  		return true;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: for (int i = 0; i < value.Length - 3; i++) {  	if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  		return true;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: for (int i = 0; i < value.Length - 3; i++) {  	if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  		return true;  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  	return true;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  	return true;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  	return true;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,GzipOptimizationTest,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\GzipOptimizationTest.cs,HasSupport,The following statement contains a magic number: if ((value [i] == 'g' || value [i] == 'G') && (value [i + 1] == 'z' || value [i + 1] == 'Z') && (value [i + 2] == 'i' || value [i + 2] == 'I') && (value [i + 3] == 'p' || value [i + 3] == 'P')) {  	return true;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: response.EndHttpHandlerRequest (skipClose: true' afterBody: r =>  {  	var fileName = request.GetPhysicalPath ();  	var fi = new FileInfo (fileName);  	if (!fi.Exists) {  		if ((fi.Attributes & FileAttributes.Directory) != 0) {  			foreach (var defaultDoc in EndpointHost.Config.DefaultDocuments) {  				var defaultFileName = Path.Combine (fi.FullName' defaultDoc);  				if (!File.Exists (defaultFileName))  					continue;  				r.Redirect (request.GetPathUrl () + '/' + defaultDoc);  				return;  			}  		}  		if (!fi.Exists) {  			var originalFileName = fileName;  			if (Env.IsMono) {  				//Create a case-insensitive file index of all host files  				if (allFiles == null)  					allFiles = CreateFileIndex (request.ApplicationFilePath);  				if (allDirs == null)  					allDirs = CreateDirIndex (request.ApplicationFilePath);  				if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  					fi = new FileInfo (fileName);  				}  			}  			if (!fi.Exists) {  				var msg = "Static File '" + request.PathInfo + "' not found.";  				log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  				throw new HttpException (404' msg);  			}  		}  	}  	TimeSpan maxAge;  	if (r.ContentType != null && EndpointHost.Config.AddMaxAgeForStaticMimeTypes.TryGetValue (r.ContentType' out maxAge)) {  		r.AddHeader (HttpHeaders.CacheControl' "max-age=" + maxAge.TotalSeconds);  	}  	if (request.HasNotModifiedSince (fi.LastWriteTime)) {  		r.ContentType = MimeTypes.GetMimeType (fileName);  		r.StatusCode = 304;  		return;  	}  	try {  		r.AddHeaderLastModified (fi.LastWriteTime);  		r.ContentType = MimeTypes.GetMimeType (fileName);  		if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  			if (fi.LastWriteTime > this.DefaultFileModified)  				SetDefaultFile (this.DefaultFilePath);  			//reload  			r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  			r.Close ();  			return;  		}  		if (EndpointHost.Config.AllowPartialResponses)  			r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  		long contentLength = fi.Length;  		long rangeStart' rangeEnd;  		var rangeHeader = request.Headers [HttpHeaders.Range];  		if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  			rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  			if (rangeEnd > contentLength - 1)  				rangeEnd = contentLength - 1;  			r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  		}  		else {  			rangeStart = 0;  			rangeEnd = contentLength - 1;  			r.SetContentLength (contentLength);  			//throws with ASP.NET webdev server non-IIS pipelined mode  		}  		var outputStream = r.OutputStream;  		using (var fs = fi.OpenRead ()) {  			if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  				fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  			}  			else {  				fs.WriteTo (outputStream);  				outputStream.Flush ();  			}  		}  	}  	catch (System.Net.HttpListenerException ex) {  		if (ex.ErrorCode == 1229)  			return;  		//Error: 1229 is "An operation was attempted on a nonexistent network connection"  		//This exception occures when http stream is terminated by web browser because user  		//seek video forward and new http request will be sent by browser  		//with attribute in header "Range: bytes=newSeekPosition-"  		throw;  	}  	catch (Exception ex) {  		log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  		throw new HttpException (403' "Forbidden.");  	}  });  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: response.EndHttpHandlerRequest (skipClose: true' afterBody: r =>  {  	var fileName = request.GetPhysicalPath ();  	var fi = new FileInfo (fileName);  	if (!fi.Exists) {  		if ((fi.Attributes & FileAttributes.Directory) != 0) {  			foreach (var defaultDoc in EndpointHost.Config.DefaultDocuments) {  				var defaultFileName = Path.Combine (fi.FullName' defaultDoc);  				if (!File.Exists (defaultFileName))  					continue;  				r.Redirect (request.GetPathUrl () + '/' + defaultDoc);  				return;  			}  		}  		if (!fi.Exists) {  			var originalFileName = fileName;  			if (Env.IsMono) {  				//Create a case-insensitive file index of all host files  				if (allFiles == null)  					allFiles = CreateFileIndex (request.ApplicationFilePath);  				if (allDirs == null)  					allDirs = CreateDirIndex (request.ApplicationFilePath);  				if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  					fi = new FileInfo (fileName);  				}  			}  			if (!fi.Exists) {  				var msg = "Static File '" + request.PathInfo + "' not found.";  				log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  				throw new HttpException (404' msg);  			}  		}  	}  	TimeSpan maxAge;  	if (r.ContentType != null && EndpointHost.Config.AddMaxAgeForStaticMimeTypes.TryGetValue (r.ContentType' out maxAge)) {  		r.AddHeader (HttpHeaders.CacheControl' "max-age=" + maxAge.TotalSeconds);  	}  	if (request.HasNotModifiedSince (fi.LastWriteTime)) {  		r.ContentType = MimeTypes.GetMimeType (fileName);  		r.StatusCode = 304;  		return;  	}  	try {  		r.AddHeaderLastModified (fi.LastWriteTime);  		r.ContentType = MimeTypes.GetMimeType (fileName);  		if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  			if (fi.LastWriteTime > this.DefaultFileModified)  				SetDefaultFile (this.DefaultFilePath);  			//reload  			r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  			r.Close ();  			return;  		}  		if (EndpointHost.Config.AllowPartialResponses)  			r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  		long contentLength = fi.Length;  		long rangeStart' rangeEnd;  		var rangeHeader = request.Headers [HttpHeaders.Range];  		if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  			rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  			if (rangeEnd > contentLength - 1)  				rangeEnd = contentLength - 1;  			r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  		}  		else {  			rangeStart = 0;  			rangeEnd = contentLength - 1;  			r.SetContentLength (contentLength);  			//throws with ASP.NET webdev server non-IIS pipelined mode  		}  		var outputStream = r.OutputStream;  		using (var fs = fi.OpenRead ()) {  			if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  				fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  			}  			else {  				fs.WriteTo (outputStream);  				outputStream.Flush ();  			}  		}  	}  	catch (System.Net.HttpListenerException ex) {  		if (ex.ErrorCode == 1229)  			return;  		//Error: 1229 is "An operation was attempted on a nonexistent network connection"  		//This exception occures when http stream is terminated by web browser because user  		//seek video forward and new http request will be sent by browser  		//with attribute in header "Range: bytes=newSeekPosition-"  		throw;  	}  	catch (Exception ex) {  		log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  		throw new HttpException (403' "Forbidden.");  	}  });  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: response.EndHttpHandlerRequest (skipClose: true' afterBody: r =>  {  	var fileName = request.GetPhysicalPath ();  	var fi = new FileInfo (fileName);  	if (!fi.Exists) {  		if ((fi.Attributes & FileAttributes.Directory) != 0) {  			foreach (var defaultDoc in EndpointHost.Config.DefaultDocuments) {  				var defaultFileName = Path.Combine (fi.FullName' defaultDoc);  				if (!File.Exists (defaultFileName))  					continue;  				r.Redirect (request.GetPathUrl () + '/' + defaultDoc);  				return;  			}  		}  		if (!fi.Exists) {  			var originalFileName = fileName;  			if (Env.IsMono) {  				//Create a case-insensitive file index of all host files  				if (allFiles == null)  					allFiles = CreateFileIndex (request.ApplicationFilePath);  				if (allDirs == null)  					allDirs = CreateDirIndex (request.ApplicationFilePath);  				if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  					fi = new FileInfo (fileName);  				}  			}  			if (!fi.Exists) {  				var msg = "Static File '" + request.PathInfo + "' not found.";  				log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  				throw new HttpException (404' msg);  			}  		}  	}  	TimeSpan maxAge;  	if (r.ContentType != null && EndpointHost.Config.AddMaxAgeForStaticMimeTypes.TryGetValue (r.ContentType' out maxAge)) {  		r.AddHeader (HttpHeaders.CacheControl' "max-age=" + maxAge.TotalSeconds);  	}  	if (request.HasNotModifiedSince (fi.LastWriteTime)) {  		r.ContentType = MimeTypes.GetMimeType (fileName);  		r.StatusCode = 304;  		return;  	}  	try {  		r.AddHeaderLastModified (fi.LastWriteTime);  		r.ContentType = MimeTypes.GetMimeType (fileName);  		if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  			if (fi.LastWriteTime > this.DefaultFileModified)  				SetDefaultFile (this.DefaultFilePath);  			//reload  			r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  			r.Close ();  			return;  		}  		if (EndpointHost.Config.AllowPartialResponses)  			r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  		long contentLength = fi.Length;  		long rangeStart' rangeEnd;  		var rangeHeader = request.Headers [HttpHeaders.Range];  		if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  			rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  			if (rangeEnd > contentLength - 1)  				rangeEnd = contentLength - 1;  			r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  		}  		else {  			rangeStart = 0;  			rangeEnd = contentLength - 1;  			r.SetContentLength (contentLength);  			//throws with ASP.NET webdev server non-IIS pipelined mode  		}  		var outputStream = r.OutputStream;  		using (var fs = fi.OpenRead ()) {  			if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  				fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  			}  			else {  				fs.WriteTo (outputStream);  				outputStream.Flush ();  			}  		}  	}  	catch (System.Net.HttpListenerException ex) {  		if (ex.ErrorCode == 1229)  			return;  		//Error: 1229 is "An operation was attempted on a nonexistent network connection"  		//This exception occures when http stream is terminated by web browser because user  		//seek video forward and new http request will be sent by browser  		//with attribute in header "Range: bytes=newSeekPosition-"  		throw;  	}  	catch (Exception ex) {  		log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  		throw new HttpException (403' "Forbidden.");  	}  });  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: response.EndHttpHandlerRequest (skipClose: true' afterBody: r =>  {  	var fileName = request.GetPhysicalPath ();  	var fi = new FileInfo (fileName);  	if (!fi.Exists) {  		if ((fi.Attributes & FileAttributes.Directory) != 0) {  			foreach (var defaultDoc in EndpointHost.Config.DefaultDocuments) {  				var defaultFileName = Path.Combine (fi.FullName' defaultDoc);  				if (!File.Exists (defaultFileName))  					continue;  				r.Redirect (request.GetPathUrl () + '/' + defaultDoc);  				return;  			}  		}  		if (!fi.Exists) {  			var originalFileName = fileName;  			if (Env.IsMono) {  				//Create a case-insensitive file index of all host files  				if (allFiles == null)  					allFiles = CreateFileIndex (request.ApplicationFilePath);  				if (allDirs == null)  					allDirs = CreateDirIndex (request.ApplicationFilePath);  				if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  					fi = new FileInfo (fileName);  				}  			}  			if (!fi.Exists) {  				var msg = "Static File '" + request.PathInfo + "' not found.";  				log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  				throw new HttpException (404' msg);  			}  		}  	}  	TimeSpan maxAge;  	if (r.ContentType != null && EndpointHost.Config.AddMaxAgeForStaticMimeTypes.TryGetValue (r.ContentType' out maxAge)) {  		r.AddHeader (HttpHeaders.CacheControl' "max-age=" + maxAge.TotalSeconds);  	}  	if (request.HasNotModifiedSince (fi.LastWriteTime)) {  		r.ContentType = MimeTypes.GetMimeType (fileName);  		r.StatusCode = 304;  		return;  	}  	try {  		r.AddHeaderLastModified (fi.LastWriteTime);  		r.ContentType = MimeTypes.GetMimeType (fileName);  		if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  			if (fi.LastWriteTime > this.DefaultFileModified)  				SetDefaultFile (this.DefaultFilePath);  			//reload  			r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  			r.Close ();  			return;  		}  		if (EndpointHost.Config.AllowPartialResponses)  			r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  		long contentLength = fi.Length;  		long rangeStart' rangeEnd;  		var rangeHeader = request.Headers [HttpHeaders.Range];  		if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  			rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  			if (rangeEnd > contentLength - 1)  				rangeEnd = contentLength - 1;  			r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  		}  		else {  			rangeStart = 0;  			rangeEnd = contentLength - 1;  			r.SetContentLength (contentLength);  			//throws with ASP.NET webdev server non-IIS pipelined mode  		}  		var outputStream = r.OutputStream;  		using (var fs = fi.OpenRead ()) {  			if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  				fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  			}  			else {  				fs.WriteTo (outputStream);  				outputStream.Flush ();  			}  		}  	}  	catch (System.Net.HttpListenerException ex) {  		if (ex.ErrorCode == 1229)  			return;  		//Error: 1229 is "An operation was attempted on a nonexistent network connection"  		//This exception occures when http stream is terminated by web browser because user  		//seek video forward and new http request will be sent by browser  		//with attribute in header "Range: bytes=newSeekPosition-"  		throw;  	}  	catch (Exception ex) {  		log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  		throw new HttpException (403' "Forbidden.");  	}  });  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (!fi.Exists) {  	if ((fi.Attributes & FileAttributes.Directory) != 0) {  		foreach (var defaultDoc in EndpointHost.Config.DefaultDocuments) {  			var defaultFileName = Path.Combine (fi.FullName' defaultDoc);  			if (!File.Exists (defaultFileName))  				continue;  			r.Redirect (request.GetPathUrl () + '/' + defaultDoc);  			return;  		}  	}  	if (!fi.Exists) {  		var originalFileName = fileName;  		if (Env.IsMono) {  			//Create a case-insensitive file index of all host files  			if (allFiles == null)  				allFiles = CreateFileIndex (request.ApplicationFilePath);  			if (allDirs == null)  				allDirs = CreateDirIndex (request.ApplicationFilePath);  			if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  				fi = new FileInfo (fileName);  			}  		}  		if (!fi.Exists) {  			var msg = "Static File '" + request.PathInfo + "' not found.";  			log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  			throw new HttpException (404' msg);  		}  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (!fi.Exists) {  	var originalFileName = fileName;  	if (Env.IsMono) {  		//Create a case-insensitive file index of all host files  		if (allFiles == null)  			allFiles = CreateFileIndex (request.ApplicationFilePath);  		if (allDirs == null)  			allDirs = CreateDirIndex (request.ApplicationFilePath);  		if (allFiles.TryGetValue (fileName.ToLower ()' out fileName)) {  			fi = new FileInfo (fileName);  		}  	}  	if (!fi.Exists) {  		var msg = "Static File '" + request.PathInfo + "' not found.";  		log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  		throw new HttpException (404' msg);  	}  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (!fi.Exists) {  	var msg = "Static File '" + request.PathInfo + "' not found.";  	log.WarnFormat ("{0} in path: {1}"' msg' originalFileName);  	throw new HttpException (404' msg);  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: throw new HttpException (404' msg);  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (request.HasNotModifiedSince (fi.LastWriteTime)) {  	r.ContentType = MimeTypes.GetMimeType (fileName);  	r.StatusCode = 304;  	return;  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: r.StatusCode = 304;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: try {  	r.AddHeaderLastModified (fi.LastWriteTime);  	r.ContentType = MimeTypes.GetMimeType (fileName);  	if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  		if (fi.LastWriteTime > this.DefaultFileModified)  			SetDefaultFile (this.DefaultFilePath);  		//reload  		r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  		r.Close ();  		return;  	}  	if (EndpointHost.Config.AllowPartialResponses)  		r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  	long contentLength = fi.Length;  	long rangeStart' rangeEnd;  	var rangeHeader = request.Headers [HttpHeaders.Range];  	if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  		rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  		if (rangeEnd > contentLength - 1)  			rangeEnd = contentLength - 1;  		r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  	}  	else {  		rangeStart = 0;  		rangeEnd = contentLength - 1;  		r.SetContentLength (contentLength);  		//throws with ASP.NET webdev server non-IIS pipelined mode  	}  	var outputStream = r.OutputStream;  	using (var fs = fi.OpenRead ()) {  		if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  			fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  		}  		else {  			fs.WriteTo (outputStream);  			outputStream.Flush ();  		}  	}  }  catch (System.Net.HttpListenerException ex) {  	if (ex.ErrorCode == 1229)  		return;  	//Error: 1229 is "An operation was attempted on a nonexistent network connection"  	//This exception occures when http stream is terminated by web browser because user  	//seek video forward and new http request will be sent by browser  	//with attribute in header "Range: bytes=newSeekPosition-"  	throw;  }  catch (Exception ex) {  	log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  	throw new HttpException (403' "Forbidden.");  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: try {  	r.AddHeaderLastModified (fi.LastWriteTime);  	r.ContentType = MimeTypes.GetMimeType (fileName);  	if (fileName.EqualsIgnoreCase (this.DefaultFilePath)) {  		if (fi.LastWriteTime > this.DefaultFileModified)  			SetDefaultFile (this.DefaultFilePath);  		//reload  		r.OutputStream.Write (this.DefaultFileContents' 0' this.DefaultFileContents.Length);  		r.Close ();  		return;  	}  	if (EndpointHost.Config.AllowPartialResponses)  		r.AddHeader (HttpHeaders.AcceptRanges' "bytes");  	long contentLength = fi.Length;  	long rangeStart' rangeEnd;  	var rangeHeader = request.Headers [HttpHeaders.Range];  	if (EndpointHost.Config.AllowPartialResponses && rangeHeader != null) {  		rangeHeader.ExtractHttpRanges (contentLength' out rangeStart' out rangeEnd);  		if (rangeEnd > contentLength - 1)  			rangeEnd = contentLength - 1;  		r.AddHttpRangeResponseHeaders (rangeStart: rangeStart' rangeEnd: rangeEnd' contentLength: contentLength);  	}  	else {  		rangeStart = 0;  		rangeEnd = contentLength - 1;  		r.SetContentLength (contentLength);  		//throws with ASP.NET webdev server non-IIS pipelined mode  	}  	var outputStream = r.OutputStream;  	using (var fs = fi.OpenRead ()) {  		if (rangeStart != 0 || rangeEnd != fi.Length - 1) {  			fs.WritePartialTo (outputStream' rangeStart' rangeEnd);  		}  		else {  			fs.WriteTo (outputStream);  			outputStream.Flush ();  		}  	}  }  catch (System.Net.HttpListenerException ex) {  	if (ex.ErrorCode == 1229)  		return;  	//Error: 1229 is "An operation was attempted on a nonexistent network connection"  	//This exception occures when http stream is terminated by web browser because user  	//seek video forward and new http request will be sent by browser  	//with attribute in header "Range: bytes=newSeekPosition-"  	throw;  }  catch (Exception ex) {  	log.ErrorFormat ("Static file {0} forbidden: {1}"' request.PathInfo' ex.Message);  	throw new HttpException (403' "Forbidden.");  }  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (ex.ErrorCode == 1229)  	return;  
Magic Number,ServiceStack.WebHost.Endpoints.Support,StaticFileHandler,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\StaticFileHandler.cs,ProcessRequest,The following statement contains a magic number: throw new HttpException (403' "Forbidden.");  
Magic Number,ServiceStack.WebHost.Endpoints.Support.Metadata,XsdTypes,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Metadata\XsdTypes.cs,XsdTypes,The following statement contains a magic number: Xsds = new Dictionary<int' string> {  	{  		1'  		"Service Types"  	}'  	{  		0'  		"Wcf Data Types"  	}'  	{  		2'  		"Wcf Collection Types"  	}'  };  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: while (!eof) {  	// Remember if the previous line was blank  	bool bPreviousBlank = PrevBlockType == BlockType.Blank;  	// Get the next block  	var b = EvaluateLine ();  	PrevBlockType = b.blockType;  	// For dd blocks' we need to know if it was preceeded by a blank line  	// so store that fact as the block's data.  	if (b.blockType == BlockType.dd) {  		b.data = bPreviousBlank;  	}  	// SetExt header?  	if (b.blockType == BlockType.post_h1 || b.blockType == BlockType.post_h2) {  		if (lines.Count > 0) {  			// Remove the previous line and collapse the current paragraph  			var prevline = lines.Pop ();  			CollapseLines (blocks' lines);  			// If previous line was blank'   			if (prevline.blockType != BlockType.Blank) {  				// Convert the previous line to a heading and add to block list  				prevline.RevertToPlain ();  				prevline.blockType = b.blockType == BlockType.post_h1 ? BlockType.h1 : BlockType.h2;  				blocks.Add (prevline);  				continue;  			}  		}  		// Couldn't apply setext header to a previous line  		if (b.blockType == BlockType.post_h1) {  			// `===` gets converted to normal paragraph  			b.RevertToPlain ();  			lines.Add (b);  		}  		else {  			// `---` gets converted to hr  			if (b.contentLen >= 3) {  				b.blockType = BlockType.hr;  				blocks.Add (b);  			}  			else {  				b.RevertToPlain ();  				lines.Add (b);  			}  		}  		continue;  	}  	// Work out the current paragraph type  	BlockType currentBlockType = lines.Count > 0 ? lines [0].blockType : BlockType.Blank;  	// Starting a table?  	if (b.blockType == BlockType.table_spec) {  		// Get the table spec' save position  		TableSpec spec = (TableSpec)b.data;  		int savepos = position;  		if (!StartTable (spec' lines)) {  			// Not a table' revert the tablespec row to plain'  			// fast forward back to where we were up to and continue  			// on as if nothing happened  			position = savepos;  			b.RevertToPlain ();  		}  		else {  			blocks.Add (b);  			continue;  		}  	}  	// Process this line  	switch (b.blockType) {  	case BlockType.Blank:  		switch (currentBlockType) {  		case BlockType.Blank:  			FreeBlock (b);  			break;  		case BlockType.p:  			CollapseLines (blocks' lines);  			FreeBlock (b);  			break;  		case BlockType.quote:  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  		case BlockType.indent:  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.p:  		switch (currentBlockType) {  		case BlockType.Blank:  		case BlockType.p:  			lines.Add (b);  			break;  		case BlockType.quote:  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank) {  				CollapseLines (blocks' lines);  				lines.Add (b);  			}  			else {  				lines.Add (b);  			}  			break;  		case BlockType.indent:  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.indent:  		switch (currentBlockType) {  		case BlockType.Blank:  			// Start a code block  			lines.Add (b);  			break;  		case BlockType.p:  		case BlockType.quote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank) {  				// Start a code block after a paragraph  				CollapseLines (blocks' lines);  				lines.Add (b);  			}  			else {  				// indented line in paragraph' just continue it  				b.RevertToPlain ();  				lines.Add (b);  			}  			break;  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  		case BlockType.indent:  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.quote:  		if (currentBlockType != BlockType.quote) {  			CollapseLines (blocks' lines);  		}  		lines.Add (b);  		break;  	case BlockType.ol_li:  	case BlockType.ul_li:  		switch (currentBlockType) {  		case BlockType.Blank:  			lines.Add (b);  			break;  		case BlockType.p:  		case BlockType.quote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) {  				// List starting after blank line after paragraph or quote  				CollapseLines (blocks' lines);  				lines.Add (b);  			}  			else {  				// List's can't start in middle of a paragraph  				b.RevertToPlain ();  				lines.Add (b);  			}  			break;  		case BlockType.ol_li:  		case BlockType.ul_li:  			if (b.blockType != BlockType.ol_li && b.blockType != BlockType.ul_li) {  				CollapseLines (blocks' lines);  			}  			lines.Add (b);  			break;  		case BlockType.dd:  		case BlockType.footnote:  			if (b.blockType != currentBlockType) {  				CollapseLines (blocks' lines);  			}  			lines.Add (b);  			break;  		case BlockType.indent:  			// List after code block  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		}  		break;  	case BlockType.dd:  	case BlockType.footnote:  		switch (currentBlockType) {  		case BlockType.Blank:  		case BlockType.p:  		case BlockType.dd:  		case BlockType.footnote:  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		default:  			b.RevertToPlain ();  			lines.Add (b);  			break;  		}  		break;  	default:  		CollapseLines (blocks' lines);  		blocks.Add (b);  		break;  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.blockType == BlockType.post_h1 || b.blockType == BlockType.post_h2) {  	if (lines.Count > 0) {  		// Remove the previous line and collapse the current paragraph  		var prevline = lines.Pop ();  		CollapseLines (blocks' lines);  		// If previous line was blank'   		if (prevline.blockType != BlockType.Blank) {  			// Convert the previous line to a heading and add to block list  			prevline.RevertToPlain ();  			prevline.blockType = b.blockType == BlockType.post_h1 ? BlockType.h1 : BlockType.h2;  			blocks.Add (prevline);  			continue;  		}  	}  	// Couldn't apply setext header to a previous line  	if (b.blockType == BlockType.post_h1) {  		// `===` gets converted to normal paragraph  		b.RevertToPlain ();  		lines.Add (b);  	}  	else {  		// `---` gets converted to hr  		if (b.contentLen >= 3) {  			b.blockType = BlockType.hr;  			blocks.Add (b);  		}  		else {  			b.RevertToPlain ();  			lines.Add (b);  		}  	}  	continue;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.blockType == BlockType.post_h1) {  	// `===` gets converted to normal paragraph  	b.RevertToPlain ();  	lines.Add (b);  }  else {  	// `---` gets converted to hr  	if (b.contentLen >= 3) {  		b.blockType = BlockType.hr;  		blocks.Add (b);  	}  	else {  		b.RevertToPlain ();  		lines.Add (b);  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.contentLen >= 3) {  	b.blockType = BlockType.hr;  	blocks.Add (b);  }  else {  	b.RevertToPlain ();  	lines.Add (b);  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '#') {  	// Work out heading level  	int level = 1;  	SkipForward (1);  	while (current == '#') {  		level++;  		SkipForward (1);  	}  	// Limit of 6  	if (level > 6)  		level = 6;  	// Skip any whitespace  	SkipLinespace ();  	// Save start position  	b.contentStart = position;  	// Jump to end  	SkipToEol ();  	// In extra mode' check for a trailing HTML ID  	if (m_markdown.ExtraMode && !m_markdown.SafeMode) {  		int end = position;  		string strID = Utils.StripHtmlID (input' b.contentStart' ref end);  		if (strID != null) {  			b.data = strID;  			position = end;  		}  	}  	// Rewind over trailing hashes  	while (position > b.contentStart && CharAtOffset (-1) == '#') {  		SkipForward (-1);  	}  	// Rewind over trailing spaces  	while (position > b.contentStart && char.IsWhiteSpace (CharAtOffset (-1))) {  		SkipForward (-1);  	}  	// Create the heading block  	b.contentEnd = position;  	SkipToEol ();  	return BlockType.h1 + (level - 1);  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '#') {  	// Work out heading level  	int level = 1;  	SkipForward (1);  	while (current == '#') {  		level++;  		SkipForward (1);  	}  	// Limit of 6  	if (level > 6)  		level = 6;  	// Skip any whitespace  	SkipLinespace ();  	// Save start position  	b.contentStart = position;  	// Jump to end  	SkipToEol ();  	// In extra mode' check for a trailing HTML ID  	if (m_markdown.ExtraMode && !m_markdown.SafeMode) {  		int end = position;  		string strID = Utils.StripHtmlID (input' b.contentStart' ref end);  		if (strID != null) {  			b.data = strID;  			position = end;  		}  	}  	// Rewind over trailing hashes  	while (position > b.contentStart && CharAtOffset (-1) == '#') {  		SkipForward (-1);  	}  	// Rewind over trailing spaces  	while (position > b.contentStart && char.IsWhiteSpace (CharAtOffset (-1))) {  		SkipForward (-1);  	}  	// Create the heading block  	b.contentEnd = position;  	SkipToEol ();  	return BlockType.h1 + (level - 1);  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (level > 6)  	level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (level > 6)  	level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (leadingSpaces >= 4) {  	b.contentStart = line_start + 4;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (leadingSpaces >= 4) {  	b.contentStart = line_start + 4;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: b.contentStart = line_start + 4;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (tabPos >= 0 && tabPos - line_start < 4) {  	b.contentStart = tabPos + 1;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '>') {  	// Block quote followed by space  	if (IsLineSpace (CharAtOffset (1))) {  		// Skip it and create quote block  		SkipForward (2);  		b.contentStart = position;  		return BlockType.quote;  	}  	SkipForward (1);  	b.contentStart = position;  	return BlockType.quote;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (IsLineSpace (CharAtOffset (1))) {  	// Skip it and create quote block  	SkipForward (2);  	b.contentStart = position;  	return BlockType.quote;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '-' || ch == '_' || ch == '*') {  	int count = 0;  	while (!eol) {  		char chType = current;  		if (current == ch) {  			count++;  			SkipForward (1);  			continue;  		}  		if (IsLineSpace (current)) {  			SkipForward (1);  			continue;  		}  		break;  	}  	if (eol && count >= 3) {  		if (m_markdown.UserBreaks)  			return BlockType.user_break;  		else  			return BlockType.hr;  	}  	// Rewind  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (eol && count >= 3) {  	if (m_markdown.UserBreaks)  		return BlockType.user_break;  	else  		return BlockType.hr;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && ch == '*' && CharAtOffset (1) == '[') {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	while (!eol && current != ']') {  		SkipForward (1);  	}  	var abbr = Extract ().Trim ();  	if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  		SkipForward (2);  		SkipLinespace ();  		Mark ();  		SkipToEol ();  		var title = Extract ();  		m_markdown.AddAbbreviation (abbr' title);  		return BlockType.Blank;  	}  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && ch == '*' && CharAtOffset (1) == '[') {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	while (!eol && current != ']') {  		SkipForward (1);  	}  	var abbr = Extract ().Trim ();  	if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  		SkipForward (2);  		SkipLinespace ();  		Mark ();  		SkipToEol ();  		var title = Extract ();  		m_markdown.AddAbbreviation (abbr' title);  		return BlockType.Blank;  	}  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	SkipToEol ();  	var title = Extract ();  	m_markdown.AddAbbreviation (abbr' title);  	return BlockType.Blank;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '[') {  	// Footnote definition?  	if (m_markdown.ExtraMode && CharAtOffset (1) == '^') {  		var savepos = position;  		SkipForward (2);  		string id;  		if (SkipFootnoteID (out id) && SkipChar (']') && SkipChar (':')) {  			SkipLinespace ();  			b.contentStart = position;  			b.data = id;  			return BlockType.footnote;  		}  		position = savepos;  	}  	// Parse a link definition  	LinkDefinition l = LinkDefinition.ParseLinkDefinition (this' m_markdown.ExtraMode);  	if (l != null) {  		m_markdown.AddLinkDefinition (l);  		return BlockType.Blank;  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && CharAtOffset (1) == '^') {  	var savepos = position;  	SkipForward (2);  	string id;  	if (SkipFootnoteID (out id) && SkipChar (']') && SkipChar (':')) {  		SkipLinespace ();  		b.contentStart = position;  		b.data = id;  		return BlockType.footnote;  	}  	position = savepos;  }  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (strFence.Length < 3)  	return false;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: endCode -= 2;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: endCode -= 2;  
Magic Number,MarkdownDeep,HtmlTag,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: if (p.SkipString ("!--")) {  	p.Mark ();  	if (p.Find ("-->")) {  		var t = new HtmlTag ("!");  		t.m_attributes.Add ("content"' p.Extract ());  		t.m_closed = true;  		p.SkipForward (3);  		return t;  	}  }  
Magic Number,MarkdownDeep,HtmlTag,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: if (p.Find ("-->")) {  	var t = new HtmlTag ("!");  	t.m_attributes.Add ("content"' p.Extract ());  	t.m_closed = true;  	p.SkipForward (3);  	return t;  }  
Magic Number,MarkdownDeep,HtmlTag,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: p.SkipForward (3);  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: if (url.StartsWith ("/")) {  	if (!string.IsNullOrEmpty (UrlRootLocation)) {  		return UrlRootLocation + url;  	}  	// Need to find domain root  	int pos = UrlBaseLocation.IndexOf ("://");  	if (pos == -1)  		pos = 0;  	else  		pos += 3;  	// Find the first slash after the protocol separator  	pos = UrlBaseLocation.IndexOf ('/'' pos);  	// Get the domain name  	string strDomain = pos < 0 ? UrlBaseLocation : UrlBaseLocation.Substring (0' pos);  	// Join em  	return strDomain + url;  }  else {  	if (!UrlBaseLocation.EndsWith ("/"))  		return UrlBaseLocation + "/" + url;  	else  		return UrlBaseLocation + url;  }  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: if (pos == -1)  	pos = 0;  else  	pos += 3;  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: pos += 3;  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: while (!p.eof) {  	char ch = p.current;  	switch (ch) {  	case '\t':  		dest.Append (' ');  		pos++;  		while ((pos % 4) != 0) {  			dest.Append (' ');  			pos++;  		}  		pos--;  		// Compensate for the pos++ below  		break;  	case '\r':  	case '\n':  		dest.Append ('\n');  		pos = 0;  		p.SkipEol ();  		continue;  	case '&':  		dest.Append ("&amp;");  		break;  	case '<':  		dest.Append ("&lt;");  		break;  	case '>':  		dest.Append ("&gt;");  		break;  	case '\"':  		dest.Append ("&quot;");  		break;  	default:  		dest.Append (ch);  		break;  	}  	p.SkipForward (1);  	pos++;  }  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: switch (ch) {  case '\t':  	dest.Append (' ');  	pos++;  	while ((pos % 4) != 0) {  		dest.Append (' ');  		pos++;  	}  	pos--;  	// Compensate for the pos++ below  	break;  case '\r':  case '\n':  	dest.Append ('\n');  	pos = 0;  	p.SkipEol ();  	continue;  case '&':  	dest.Append ("&amp;");  	break;  case '<':  	dest.Append ("&lt;");  	break;  case '>':  	dest.Append ("&gt;");  	break;  case '\"':  	dest.Append ("&quot;");  	break;  default:  	dest.Append (ch);  	break;  }  
Magic Number,MarkdownDeep,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: while ((pos % 4) != 0) {  	dest.Append (' ');  	pos++;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			}  			else {  				// No' rewrite and encode it  				position = save;  			}  		}  		else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	}  	else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			}  			else {  				// No' rewrite and encode it  				position = save;  			}  		}  		else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	}  	else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			}  			else {  				// No' rewrite and encode it  				position = save;  			}  		}  		else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	}  	else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		}  		else {  			// No' rewrite and encode it  			position = save;  		}  	}  	else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		}  		else {  			// No' rewrite and encode it  			position = save;  		}  	}  	else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		}  		else {  			// No' rewrite and encode it  			position = save;  		}  	}  	else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  	// Yes' skip it  	SkipForward (2);  	// Don't put br's at the end of a paragraph  	if (!eof) {  		SkipEol ();  		token = CreateToken (TokenType.br' end_text_token' 0);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  	// Yes' skip it  	SkipForward (2);  	// Don't put br's at the end of a paragraph  	if (!eof) {  		SkipEol ();  		token = CreateToken (TokenType.br' end_text_token' 0);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  	token = CreateToken (TokenType.Text' position + 1' 1);  	SkipForward (2);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: style = (style % 2) == 1 ? 1 : 2;  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: style = (style % 2) == 1 ? 1 : 2;  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length < 2)  	continue;  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length < 2)  	continue;  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length > 2) {  	SplitMarkToken (tokens' marks' opening_mark' 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length > 2) {  	SplitMarkToken (tokens' marks' opening_mark' 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: SplitMarkToken (tokens' marks' opening_mark' 2);  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length > 2) {  	closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length > 2) {  	closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: while (!eof) {  	char ch = current;  	// No whitespace allowed  	if (char.IsWhiteSpace (ch))  		break;  	// End found?  	if (ch == '>') {  		string url = Utils.UnescapeString (Extract ()' ExtraMode);  		LinkInfo li = null;  		if (Utils.IsEmailAddress (url)) {  			string link_text;  			if (url.StartsWith ("mailto:")) {  				link_text = url.Substring (7);  			}  			else {  				link_text = url;  				url = "mailto:" + url;  			}  			li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  		}  		else if (Utils.IsWebAddress (url)) {  			li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  		}  		if (li != null) {  			SkipForward (1);  			return CreateToken (TokenType.link' li);  		}  		return null;  	}  	this.SkipEscapableChar (ExtraMode);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (ch == '>') {  	string url = Utils.UnescapeString (Extract ()' ExtraMode);  	LinkInfo li = null;  	if (Utils.IsEmailAddress (url)) {  		string link_text;  		if (url.StartsWith ("mailto:")) {  			link_text = url.Substring (7);  		}  		else {  			link_text = url;  			url = "mailto:" + url;  		}  		li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  	}  	else if (Utils.IsWebAddress (url)) {  		li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  	}  	if (li != null) {  		SkipForward (1);  		return CreateToken (TokenType.link' li);  	}  	return null;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (Utils.IsEmailAddress (url)) {  	string link_text;  	if (url.StartsWith ("mailto:")) {  		link_text = url.Substring (7);  	}  	else {  		link_text = url;  		url = "mailto:" + url;  	}  	li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  }  else if (Utils.IsWebAddress (url)) {  	li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (url.StartsWith ("mailto:")) {  	link_text = url.Substring (7);  }  else {  	link_text = url;  	url = "mailto:" + url;  }  
Magic Number,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: link_text = url.Substring (7);  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	}  	else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	}  	else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	}  	else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	}  	else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	}  	else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	}  	else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 90 && ch != '@') {  	dest.Append (ch);  }  else if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  }  else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 90 && ch != '@') {  	dest.Append (ch);  }  else if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  }  else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  }  else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SkipEscapableChar,The following statement contains a magic number: if (p.current == '\\' && IsEscapableChar (p.CharAtOffset (1)' ExtraMode)) {  	p.SkipForward (2);  }  else {  	p.SkipForward (1);  }  
Magic Number,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,SkipEscapableChar,The following statement contains a magic number: p.SkipForward (2);  
Missing Default,ServiceStack.Html,DictionaryHelpers,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelStateDictionary.cs,FindKeysWithPrefix,The following switch statement is missing a default case: switch (charAfterPrefix) {  case '[':  case '.':  	yield return entry;  	break;  }  
Missing Default,ServiceStack.Html,DynamicTypeGenerator,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\DynamicTypeGenerator.cs,GenerateType,The following switch statement is missing a default case: switch (ctor.Attributes & MethodAttributes.MemberAccessMask) {  case MethodAttributes.Family:  case MethodAttributes.Public:  case MethodAttributes.FamORAssem:  	ImplementConstructor (newType' ctor);  	break;  }  
Missing Default,ServiceStack.Html,ModelMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\Html\ModelMetadata.cs,FromLambdaExpression,The following switch statement is missing a default case: switch (expression.Body.NodeType) {  // ArrayIndex always means a single-dimensional indexer; multi-dimensional indexer is a method call to Get()  case ExpressionType.ArrayIndex:  	legalExpression = true;  	break;  // Only legal method call is a single argument indexer/DefaultMember call  case ExpressionType.Call:  	legalExpression = ExpressionHelper.IsSingleArgumentIndexer (expression.Body);  	break;  // Property/field access is always legal  case ExpressionType.MemberAccess:  	var memberExpression = (MemberExpression)expression.Body;  	propertyName = memberExpression.Member is PropertyInfo ? memberExpression.Member.Name : null;  	containerType = memberExpression.Expression.Type;  	legalExpression = true;  	break;  // Parameter expression means "model => model"' so we delegate to FromModel  case ExpressionType.Parameter:  	return FromModel (viewData);  }  
Missing Default,ServiceStack.ServiceHost,ServiceMetadata,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\ServiceHost\ServiceMetadata.cs,ToNewApiAction,The following switch statement is missing a default case: switch (oldApiAction) {  case "Get":  case "OnGet":  	return "GET";  case "Put":  case "OnPut":  	return "PUT";  case "Post":  case "OnPost":  	return "POST";  case "Delete":  case "OnDelete":  	return "DELETE";  case "Patch":  case "OnPatch":  	return "PATCH";  case "Execute":  case "Run":  	return "ANY";  }  
Missing Default,ServiceStack.WebHost.Endpoints,ServiceEndpointsMetadataConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\ServiceEndpointsMetadataConfig.cs,GetEndpointConfig,The following switch statement is missing a default case: switch (contentType) {  case ContentType.Soap11:  	return this.Soap11;  case ContentType.Soap12:  	return this.Soap12;  case ContentType.Xml:  	return this.Xml;  case ContentType.Json:  	return this.Json;  case ContentType.Jsv:  	return this.Jsv;  }  
Missing Default,ServiceStack.WebHost.Endpoints,EndpointHostConfig,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\EndpointHostConfig.cs,GetHandlerForErrorStatus,The following switch statement is missing a default case: switch (errorStatus) {  case HttpStatusCode.Forbidden:  	return httpHandler ?? new ForbiddenHttpHandler ();  case HttpStatusCode.NotFound:  	return httpHandler ?? new NotFoundHttpHandler ();  }  
Missing Default,ServiceStack.WebHost.Endpoints.Extensions,HttpRequestExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Extensions\HttpRequestExtensions.cs,IsInLocalSubnet,The following switch statement is missing a default case: switch (ipAddress.AddressFamily) {  case AddressFamily.InterNetwork:  	foreach (var localIpv4AddressAndMask in EndpointHandlerBase.NetworkInterfaceIpv4Addresses) {  		if (ipAddressBytes.IsInSameIpv4Subnet (localIpv4AddressAndMask.Key' localIpv4AddressAndMask.Value)) {  			return true;  		}  	}  	break;  case AddressFamily.InterNetworkV6:  	foreach (var localIpv6Address in EndpointHandlerBase.NetworkInterfaceIpv6Addresses) {  		if (ipAddressBytes.IsInSameIpv6Subnet (localIpv6Address)) {  			return true;  		}  	}  	break;  }  
Missing Default,ServiceStack.WebHost.Endpoints.Formats,MarkdownFormat,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Formats\MarkdownFormat.cs,AddViewPage,The following switch statement is missing a default case: switch (page.PageType) {  case MarkdownPageType.ViewPage:  	ViewPages.Add (page.Name' page);  	break;  case MarkdownPageType.SharedViewPage:  	ViewSharedPages.Add (page.Name' page);  	break;  case MarkdownPageType.ContentPage:  	ContentPages.Add (page.FilePath.WithoutExtension ().TrimStart (DirSeps)' page);  	break;  }  
Missing Default,MarkdownSharp,Markdown,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\Markdown\Markdown.cs,Markdown,The following switch statement is missing a default case: switch (key) {  case "Markdown.AutoHyperlink":  	_autoHyperlink = Convert.ToBoolean (settings [key]);  	break;  case "Markdown.AutoNewlines":  	_autoNewlines = Convert.ToBoolean (settings [key]);  	break;  case "Markdown.EmptyElementSuffix":  	_emptyElementSuffix = settings [key];  	break;  case "Markdown.EncodeProblemUrlCharacters":  	_encodeProblemUrlCharacters = Convert.ToBoolean (settings [key]);  	break;  case "Markdown.LinkEmails":  	_linkEmails = Convert.ToBoolean (settings [key]);  	break;  case "Markdown.StrictBoldItalic":  	_strictBoldItalic = Convert.ToBoolean (settings [key]);  	break;  }  
Missing Default,MarkdownDeep,Block,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Block.cs,RenderPlain,The following switch statement is missing a default case: switch (blockType) {  case BlockType.Blank:  	return;  case BlockType.p:  case BlockType.span:  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" ");  	break;  case BlockType.h1:  case BlockType.h2:  case BlockType.h3:  case BlockType.h4:  case BlockType.h5:  case BlockType.h6:  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" - ");  	break;  case BlockType.ol_li:  case BlockType.ul_li:  	b.Append ("* ");  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" ");  	break;  case BlockType.dd:  	if (children != null) {  		b.Append ("\n");  		RenderChildrenPlain (m' b);  	}  	else  		m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	break;  case BlockType.dt: {  	if (children == null) {  		foreach (var l in Content.Split ('\n')) {  			var str = l.Trim ();  			m.SpanFormatter.FormatPlain (b' str' 0' str.Length);  		}  	}  	else {  		RenderChildrenPlain (m' b);  	}  	break;  }  case BlockType.dl:  	RenderChildrenPlain (m' b);  	return;  case BlockType.codeblock:  	foreach (var line in children) {  		b.Append (line.buf' line.contentStart' line.contentLen);  		b.Append (" ");  	}  	return;  case BlockType.quote:  case BlockType.li:  case BlockType.ol:  case BlockType.ul:  case BlockType.HtmlTag:  	RenderChildrenPlain (m' b);  	return;  }  
Missing Default,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ScanLines,The following switch statement is missing a default case: switch (currentBlockType) {  case BlockType.Blank:  	lines.Add (b);  	break;  case BlockType.p:  case BlockType.quote:  	var prevline = lines.Last ();  	if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) {  		// List starting after blank line after paragraph or quote  		CollapseLines (blocks' lines);  		lines.Add (b);  	}  	else {  		// List's can't start in middle of a paragraph  		b.RevertToPlain ();  		lines.Add (b);  	}  	break;  case BlockType.ol_li:  case BlockType.ul_li:  	if (b.blockType != BlockType.ol_li && b.blockType != BlockType.ul_li) {  		CollapseLines (blocks' lines);  	}  	lines.Add (b);  	break;  case BlockType.dd:  case BlockType.footnote:  	if (b.blockType != currentBlockType) {  		CollapseLines (blocks' lines);  	}  	lines.Add (b);  	break;  case BlockType.indent:  	// List after code block  	CollapseLines (blocks' lines);  	lines.Add (b);  	break;  }  
Missing Default,MarkdownDeep,BlockProcessor,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\BlockProcessor.cs,ProcessMarkdownEnabledHtml,The following switch statement is missing a default case: switch (mode) {  case MarkdownInHtmlMode.Span: {  	Block span = this.CreateBlock ();  	span.buf = input;  	span.blockType = BlockType.span;  	span.contentStart = inner_pos;  	span.contentLen = tagpos - inner_pos;  	b.children = new List<Block> ();  	b.children.Add (span);  	break;  }  case MarkdownInHtmlMode.Block:  case MarkdownInHtmlMode.Deep: {  	// Scan the internal content  	var bp = new BlockProcessor (m_markdown' mode == MarkdownInHtmlMode.Deep);  	b.children = bp.ScanLines (input' inner_pos' tagpos - inner_pos);  	break;  }  case MarkdownInHtmlMode.Off: {  	if (bHasUnsafeContent) {  		b.blockType = BlockType.unsafe_html;  		b.contentEnd = position;  	}  	else {  		Block span = this.CreateBlock ();  		span.buf = input;  		span.blockType = BlockType.html;  		span.contentStart = inner_pos;  		span.contentLen = tagpos - inner_pos;  		b.children = new List<Block> ();  		b.children.Add (span);  	}  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,MakeID,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.link:  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  
Missing Default,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Render,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	// Append encoded text  	m_Markdown.HtmlEncode (sb' str' t.startOffset' t.length);  	break;  case TokenType.HtmlTag:  	// Append html as is  	Utils.SmartHtmlEncodeAmps (sb' str' t.startOffset' t.length);  	break;  case TokenType.Html:  case TokenType.opening_mark:  case TokenType.closing_mark:  case TokenType.internal_mark:  	// Append html as is  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.br:  	sb.Append ("<br />\n");  	break;  case TokenType.open_em:  	sb.Append ("<em>");  	break;  case TokenType.close_em:  	sb.Append ("</em>");  	break;  case TokenType.open_strong:  	sb.Append ("<strong>");  	break;  case TokenType.close_strong:  	sb.Append ("</strong>");  	break;  case TokenType.code_span:  	sb.Append ("<code>");  	m_Markdown.HtmlEncode (sb' str' t.startOffset' t.length);  	sb.Append ("</code>");  	break;  case TokenType.link: {  	LinkInfo li = (LinkInfo)t.data;  	var sf = new SpanFormatter (m_Markdown);  	sf.DisableLinks = true;  	li.def.RenderLink (m_Markdown' sb' sf.Format (li.link_text));  	break;  }  case TokenType.img: {  	LinkInfo li = (LinkInfo)t.data;  	li.def.RenderImg (m_Markdown' sb' li.link_text);  	break;  }  case TokenType.footnote: {  	FootnoteReference r = (FootnoteReference)t.data;  	sb.Append ("<sup id=\"fnref:");  	sb.Append (r.id);  	sb.Append ("\"><a href=\"#fn:");  	sb.Append (r.id);  	sb.Append ("\" rel=\"footnote\">");  	sb.Append (r.index + 1);  	sb.Append ("</a></sup>");  	break;  }  case TokenType.abbreviation: {  	Abbreviation a = (Abbreviation)t.data;  	sb.Append ("<abbr");  	if (!String.IsNullOrEmpty (a.Title)) {  		sb.Append (" title=\"");  		m_Markdown.HtmlEncode (sb' a.Title' 0' a.Title.Length);  		sb.Append ("\"");  	}  	sb.Append (">");  	m_Markdown.HtmlEncode (sb' a.Abbr' 0' a.Abbr.Length);  	sb.Append ("</abbr>");  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,RenderPlain,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.HtmlTag:  	break;  case TokenType.Html:  case TokenType.opening_mark:  case TokenType.closing_mark:  case TokenType.internal_mark:  	break;  case TokenType.br:  	break;  case TokenType.open_em:  case TokenType.close_em:  case TokenType.open_strong:  case TokenType.close_strong:  	break;  case TokenType.code_span:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.link: {  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  case TokenType.img: {  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  case TokenType.footnote:  case TokenType.abbreviation:  	break;  }  
Missing Default,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following switch statement is missing a default case: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		}  		else {  			// No' rewrite and encode it  			position = save;  		}  	}  	else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 						if (CharAtOffset(1) == '<') 						{ 							// Is it an autolink? 							int savepos = position; 							SkipForward(1); 							bool AutoLink = ProcessAutoLink() != null; 							position = savepos;  							if (AutoLink) 							{ 								token = CreateToken(TokenType.Text' position + 1' 1); 								SkipForward(2); 							} 						} 						else 						 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\SpanFormatter.cs,Tokenize,The following switch statement is missing a default case: switch (token.type) {  case TokenType.internal_mark:  case TokenType.opening_mark:  case TokenType.closing_mark:  	if (emphasis_marks == null) {  		emphasis_marks = new List<Token> ();  	}  	emphasis_marks.Add (token);  	break;  }  
Missing Default,MarkdownDeep,TableSpec,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\TableSpec.cs,RenderRow,The following switch statement is missing a default case: switch (Columns [i]) {  case ColumnAlignment.Left:  	b.Append (" align=\"left\"");  	break;  case ColumnAlignment.Right:  	b.Append (" align=\"right\"");  	break;  case ColumnAlignment.Center:  	b.Append (" align=\"center\"");  	break;  }  
Missing Default,MarkdownDeep,Utils,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack\WebHost.Endpoints\Support\MarkdownDeep\Utils.cs,IsEscapableChar,The following switch statement is missing a default case: switch (ch) {  case '\\':  case '`':  case '*':  case '_':  case '{':  case '}':  case '[':  case ']':  case '(':  case ')':  case '>':  // Not in markdown documentation' but is in markdown.pl  case '#':  case '+':  case '-':  case '.':  case '!':  	return true;  case ':':  case '|':  case '=':  // Added for escaping Setext H1  case '<':  	return ExtraMode;  }  
