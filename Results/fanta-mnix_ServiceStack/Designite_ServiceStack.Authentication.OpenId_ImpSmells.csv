Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceStack.Authentication.OpenId,OpenIdOAuthProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack.Authentication.OpenId\OpenIdOAuthProvider.cs,Authenticate,Cyclomatic complexity of the method is 17
Complex Method,ServiceStack.Authentication.OpenId,OpenIdOAuthProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack.Authentication.OpenId\OpenIdOAuthProvider.cs,LoadUserAuthInfo,Cyclomatic complexity of the method is 15
Complex Method,ServiceStack.Authentication.OpenId,OpenIdOAuthProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack.Authentication.OpenId\OpenIdOAuthProvider.cs,GetAttributeEx,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Authentication.OpenId,OpenIdExtensions,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack.Authentication.OpenId\OpenIdOAuthProvider.cs,ToDictionary,Cyclomatic complexity of the method is 14
Missing Default,ServiceStack.Authentication.OpenId,OpenIdOAuthProvider,C:\repos\fanta-mnix_ServiceStack\src\ServiceStack.Authentication.OpenId\OpenIdOAuthProvider.cs,Authenticate,The following switch statement is missing a default case: switch (response.Status) {  case AuthenticationStatus.Authenticated:  	var authInfo = CreateAuthInfo (response);  	// Use FormsAuthentication to tell ASP.NET that the user is now logged in'  	// with the OpenID Claimed Identifier as their username.  	session.IsAuthenticated = true;  	authService.SaveSession (session' SessionExpiry);  	OnAuthenticated (authService' session' tokens' authInfo);  	//Haz access!  	return authService.Redirect (session.ReferrerUrl.AddHashParam ("s"' "1"));  case AuthenticationStatus.Canceled:  	return authService.Redirect (session.ReferrerUrl.AddHashParam ("f"' "ProviderCancelled"));  case AuthenticationStatus.Failed:  	return authService.Redirect (session.ReferrerUrl.AddHashParam ("f"' "Unknown"));  }  
