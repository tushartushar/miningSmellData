Implementation smell,Namespace,Class,File,Method,Description
Complex Method,srutil,Program,C:\repos\SirCmpwn_srutils\srutil\Program.cs,Main,Cyclomatic complexity of the method is 12
Complex Method,srutil,Reset,C:\repos\SirCmpwn_srutils\srutil\Reset.cs,Execute,Cyclomatic complexity of the method is 9
Magic Number,srutil,Backup,C:\repos\SirCmpwn_srutils\srutil\Backup.cs,Execute,The following statement contains a magic number: if (args.Length != 3)              {                  Console.WriteLine("Invalid usage. See 'srutil help backup' for more information.");                  return;              }
Magic Number,srutil,Backup,C:\repos\SirCmpwn_srutils\srutil\Backup.cs,Execute,The following statement contains a magic number: using (var file = new ZipOutputStream(File.Create(args[2])))              {                  file.SetLevel(5);                  var writer = new StreamWriter(file);                  writer.AutoFlush = true;                  var settings = subreddit.GetSettings();                  var serializer = new JsonSerializer();                  // Save settings                  Console.WriteLine("Saving settings...");                  var entry = new ZipEntry("settings.json");                  entry.DateTime = DateTime.Now;                  file.PutNextEntry(entry);                  serializer.Serialize(writer' settings);                  file.CloseEntry();                  // Save flair                  Console.WriteLine("Saving flair templates...");                  var flair = subreddit.GetUserFlairTemplates();                  entry = new ZipEntry("flair.json");                  file.PutNextEntry(entry);                  serializer.Serialize(writer' flair);                  file.CloseEntry();                  // Save styles                  Console.WriteLine("Saving CSS...");                  var styles = subreddit.GetStylesheet();                  entry = new ZipEntry("stylesheet.css");                  file.PutNextEntry(entry);                  writer.Write(styles.CSS);                  file.CloseEntry();                  // Save images                  Console.WriteLine("Saving images...");                  var webClient = new WebClient();                  var left = Console.CursorLeft; var top = Console.CursorTop;                  int progress = 1;                  foreach (var image in styles.Images)                  {                      var data = webClient.DownloadData(image.Url);                      entry = new ZipEntry("images/" + image.Name + Path.GetExtension(image.Url));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length); file.Flush();                      file.CloseEntry();                      Console.CursorLeft = left; Console.CursorTop = top;                      Console.WriteLine("{0}/{1}"' progress++' styles.Images.Count);                  }                  // Save header                  if (subreddit.HeaderImage != null)                  {                      Console.WriteLine("Saving header image...");                      var data = webClient.DownloadData(subreddit.HeaderImage);                      entry = new ZipEntry("header" + Path.GetExtension(subreddit.HeaderImage));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length);                      file.CloseEntry();                  }                  Console.WriteLine("Done. {0} backed up to {1}."' subreddit.DisplayName' args[2]);              }
Magic Number,srutil,Backup,C:\repos\SirCmpwn_srutils\srutil\Backup.cs,Execute,The following statement contains a magic number: using (var file = new ZipOutputStream(File.Create(args[2])))              {                  file.SetLevel(5);                  var writer = new StreamWriter(file);                  writer.AutoFlush = true;                  var settings = subreddit.GetSettings();                  var serializer = new JsonSerializer();                  // Save settings                  Console.WriteLine("Saving settings...");                  var entry = new ZipEntry("settings.json");                  entry.DateTime = DateTime.Now;                  file.PutNextEntry(entry);                  serializer.Serialize(writer' settings);                  file.CloseEntry();                  // Save flair                  Console.WriteLine("Saving flair templates...");                  var flair = subreddit.GetUserFlairTemplates();                  entry = new ZipEntry("flair.json");                  file.PutNextEntry(entry);                  serializer.Serialize(writer' flair);                  file.CloseEntry();                  // Save styles                  Console.WriteLine("Saving CSS...");                  var styles = subreddit.GetStylesheet();                  entry = new ZipEntry("stylesheet.css");                  file.PutNextEntry(entry);                  writer.Write(styles.CSS);                  file.CloseEntry();                  // Save images                  Console.WriteLine("Saving images...");                  var webClient = new WebClient();                  var left = Console.CursorLeft; var top = Console.CursorTop;                  int progress = 1;                  foreach (var image in styles.Images)                  {                      var data = webClient.DownloadData(image.Url);                      entry = new ZipEntry("images/" + image.Name + Path.GetExtension(image.Url));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length); file.Flush();                      file.CloseEntry();                      Console.CursorLeft = left; Console.CursorTop = top;                      Console.WriteLine("{0}/{1}"' progress++' styles.Images.Count);                  }                  // Save header                  if (subreddit.HeaderImage != null)                  {                      Console.WriteLine("Saving header image...");                      var data = webClient.DownloadData(subreddit.HeaderImage);                      entry = new ZipEntry("header" + Path.GetExtension(subreddit.HeaderImage));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length);                      file.CloseEntry();                  }                  Console.WriteLine("Done. {0} backed up to {1}."' subreddit.DisplayName' args[2]);              }
Magic Number,srutil,Backup,C:\repos\SirCmpwn_srutils\srutil\Backup.cs,Execute,The following statement contains a magic number: using (var file = new ZipOutputStream(File.Create(args[2])))              {                  file.SetLevel(5);                  var writer = new StreamWriter(file);                  writer.AutoFlush = true;                  var settings = subreddit.GetSettings();                  var serializer = new JsonSerializer();                  // Save settings                  Console.WriteLine("Saving settings...");                  var entry = new ZipEntry("settings.json");                  entry.DateTime = DateTime.Now;                  file.PutNextEntry(entry);                  serializer.Serialize(writer' settings);                  file.CloseEntry();                  // Save flair                  Console.WriteLine("Saving flair templates...");                  var flair = subreddit.GetUserFlairTemplates();                  entry = new ZipEntry("flair.json");                  file.PutNextEntry(entry);                  serializer.Serialize(writer' flair);                  file.CloseEntry();                  // Save styles                  Console.WriteLine("Saving CSS...");                  var styles = subreddit.GetStylesheet();                  entry = new ZipEntry("stylesheet.css");                  file.PutNextEntry(entry);                  writer.Write(styles.CSS);                  file.CloseEntry();                  // Save images                  Console.WriteLine("Saving images...");                  var webClient = new WebClient();                  var left = Console.CursorLeft; var top = Console.CursorTop;                  int progress = 1;                  foreach (var image in styles.Images)                  {                      var data = webClient.DownloadData(image.Url);                      entry = new ZipEntry("images/" + image.Name + Path.GetExtension(image.Url));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length); file.Flush();                      file.CloseEntry();                      Console.CursorLeft = left; Console.CursorTop = top;                      Console.WriteLine("{0}/{1}"' progress++' styles.Images.Count);                  }                  // Save header                  if (subreddit.HeaderImage != null)                  {                      Console.WriteLine("Saving header image...");                      var data = webClient.DownloadData(subreddit.HeaderImage);                      entry = new ZipEntry("header" + Path.GetExtension(subreddit.HeaderImage));                      file.PutNextEntry(entry);                      file.Write(data' 0' data.Length);                      file.CloseEntry();                  }                  Console.WriteLine("Done. {0} backed up to {1}."' subreddit.DisplayName' args[2]);              }
Magic Number,srutil,Program,C:\repos\SirCmpwn_srutils\srutil\Program.cs,Main,The following statement contains a magic number: while (args[0].StartsWith("--"))              {                  if (args[0] == "--username")                  {                      username = args[1];                      args = args.Skip(2).ToArray();                  }                  else if (args[0] == "--password")                  {                      password = args[1];                      args = args.Skip(2).ToArray();                  }  				else if (args[0] == "--domain")  				{  					Reddit.RootDomain = args[1];  					args = args.Skip(2).ToArray();  				}              }
Magic Number,srutil,Program,C:\repos\SirCmpwn_srutils\srutil\Program.cs,Main,The following statement contains a magic number: while (args[0].StartsWith("--"))              {                  if (args[0] == "--username")                  {                      username = args[1];                      args = args.Skip(2).ToArray();                  }                  else if (args[0] == "--password")                  {                      password = args[1];                      args = args.Skip(2).ToArray();                  }  				else if (args[0] == "--domain")  				{  					Reddit.RootDomain = args[1];  					args = args.Skip(2).ToArray();  				}              }
Magic Number,srutil,Program,C:\repos\SirCmpwn_srutils\srutil\Program.cs,Main,The following statement contains a magic number: while (args[0].StartsWith("--"))              {                  if (args[0] == "--username")                  {                      username = args[1];                      args = args.Skip(2).ToArray();                  }                  else if (args[0] == "--password")                  {                      password = args[1];                      args = args.Skip(2).ToArray();                  }  				else if (args[0] == "--domain")  				{  					Reddit.RootDomain = args[1];  					args = args.Skip(2).ToArray();  				}              }
Magic Number,srutil,Duplicate,C:\repos\SirCmpwn_srutils\srutil\Duplicate.cs,Execute,The following statement contains a magic number: if (args.Length != 3)              {                  Console.WriteLine("Invalid usage. See 'srutil help dupe' for more information.");                  return;              }
Magic Number,srutil,Duplicate,C:\repos\SirCmpwn_srutils\srutil\Duplicate.cs,Execute,The following statement contains a magic number: var to = reddit.GetSubreddit(args[2]);
Magic Number,srutil,Duplicate,C:\repos\SirCmpwn_srutils\srutil\Duplicate.cs,Execute,The following statement contains a magic number: reset.Execute(new[] { "reset"' args[2]' "all" }' reddit);
Magic Number,srutil,Reset,C:\repos\SirCmpwn_srutils\srutil\Reset.cs,Execute,The following statement contains a magic number: if (args.Length < 3)              {                  Console.WriteLine("Invalid usage. See 'srutil help reset' for more information.");                  return;              }
Magic Number,srutil,Reset,C:\repos\SirCmpwn_srutils\srutil\Reset.cs,Execute,The following statement contains a magic number: var filterStrings = args[2].Split(''');
Magic Number,srutil,Reset,C:\repos\SirCmpwn_srutils\srutil\Reset.cs,Execute,The following statement contains a magic number: if (filter.HasFlag(ResetOperations.Settings))              {                  Console.WriteLine("Resetting settings...");                  settings.AllowAsDefault = true;                  settings.ContentOptions = ContentOptions.All;                  settings.HeaderHoverText = "";                  settings.Language = "en";                  settings.NSFW = false;                  settings.PublicDescription = "";                  settings.ShowThumbnails = true;                  settings.SubredditType = SubredditType.Public;                  settings.Title = subreddit.DisplayName;                  settings.WikiEditAge = 0;                  settings.WikiEditKarma = 100;                  settings.WikiEditMode = WikiEditMode.All;                  settings.UpdateSettings();                  settings.ResetHeaderImage();                  Console.WriteLine("Done.");              }
Magic Number,srutil,Restore,C:\repos\SirCmpwn_srutils\srutil\Restore.cs,Execute,The following statement contains a magic number: if (args.Length != 3)              {                  Console.WriteLine("Invalid usage. See 'srutil help backup' for more information.");                  return;              }
Magic Number,srutil,Restore,C:\repos\SirCmpwn_srutils\srutil\Restore.cs,Execute,The following statement contains a magic number: using (var file = new ZipFile(File.OpenRead(args[2])))              {                  if (file.GetEntry("stylesheet.css") == null ||                      file.GetEntry("settings.json") == null ||                      file.GetEntry("flair.json") == null)                  {                      Console.WriteLine("{0} is not a valid subreddit backup."' args[2]);                      return;                  }                  Console.WriteLine("Resetting {0} to default settings..."' subreddit.DisplayName);                  var reset = new Reset();                  reset.Execute(new[] { "reset"' subreddit.DisplayName' "all" }' reddit);                  foreach (ZipEntry entry in file)                  {                      if (!entry.IsFile)                          continue;                      if (entry.Name == "stylesheet.css")                      {                          var stream = new StreamReader(file.GetInputStream(entry));                          styles.CSS = stream.ReadToEnd();                          // We udpate the CSS last to avoid errors with images                      }                      else if (entry.Name == "settings.json")                      {                          Console.WriteLine("Restoring settings...");                          var stream = new StreamReader(file.GetInputStream(entry));                          serializer.Populate(new JsonTextReader(stream)' settings);                          settings.UpdateSettings();                      }                      else if (entry.Name == "flair.json") // TODO: Link flair templates' selected flair for users                      {                          var stream = new StreamReader(file.GetInputStream(entry));                          var flair = serializer.Deserialize<UserFlairTemplate[]>(new JsonTextReader(stream));                          if (flair.Any())                          {                              Console.WriteLine("Restoring user flair templates...");                              int progress = 1;                              int left = Console.CursorLeft; int top = Console.CursorTop;                              foreach (var item in flair)                              {                                  subreddit.AddFlairTemplate(item.CssClass' FlairType.User' item.Text' true);                                  Console.CursorLeft = left; Console.CursorTop = top;                                  Console.WriteLine("{0}/{1}"' progress++' flair.Length);                              }                          }                      }                      else if (entry.Name == "header.png" || entry.Name == "header.jpg")                      {                          var image = Path.GetFileName(entry.Name);                          Console.WriteLine("Restoring header image...");                          var stream = file.GetInputStream(entry);                          var data = new byte[entry.Size];                          stream.Read(data' 0' (int)entry.Size);                          subreddit.UploadHeaderImage(entry.Name'                              Path.GetExtension(entry.Name) == "png" ? ImageType.PNG : ImageType.JPEG' data);                      }                      else if (entry.Name.StartsWith("images/"))                      {                          var image = Path.GetFileName(entry.Name);                          Console.WriteLine("Restoring image: " + image);                          var stream = file.GetInputStream(entry);                          var data = new byte[entry.Size];                          stream.Read(data' 0' (int)entry.Size);                          styles.UploadImage(Path.GetFileNameWithoutExtension(image)'                              Path.GetExtension(image) == ".png" ? ImageType.PNG : ImageType.JPEG' data);                      }                  }                  Console.WriteLine("Restoring CSS...");                  styles.UpdateCss();                  Console.WriteLine("Finished restoring {0}"' subreddit.DisplayName);              }
Magic Number,srutil,Restore,C:\repos\SirCmpwn_srutils\srutil\Restore.cs,Execute,The following statement contains a magic number: using (var file = new ZipFile(File.OpenRead(args[2])))              {                  if (file.GetEntry("stylesheet.css") == null ||                      file.GetEntry("settings.json") == null ||                      file.GetEntry("flair.json") == null)                  {                      Console.WriteLine("{0} is not a valid subreddit backup."' args[2]);                      return;                  }                  Console.WriteLine("Resetting {0} to default settings..."' subreddit.DisplayName);                  var reset = new Reset();                  reset.Execute(new[] { "reset"' subreddit.DisplayName' "all" }' reddit);                  foreach (ZipEntry entry in file)                  {                      if (!entry.IsFile)                          continue;                      if (entry.Name == "stylesheet.css")                      {                          var stream = new StreamReader(file.GetInputStream(entry));                          styles.CSS = stream.ReadToEnd();                          // We udpate the CSS last to avoid errors with images                      }                      else if (entry.Name == "settings.json")                      {                          Console.WriteLine("Restoring settings...");                          var stream = new StreamReader(file.GetInputStream(entry));                          serializer.Populate(new JsonTextReader(stream)' settings);                          settings.UpdateSettings();                      }                      else if (entry.Name == "flair.json") // TODO: Link flair templates' selected flair for users                      {                          var stream = new StreamReader(file.GetInputStream(entry));                          var flair = serializer.Deserialize<UserFlairTemplate[]>(new JsonTextReader(stream));                          if (flair.Any())                          {                              Console.WriteLine("Restoring user flair templates...");                              int progress = 1;                              int left = Console.CursorLeft; int top = Console.CursorTop;                              foreach (var item in flair)                              {                                  subreddit.AddFlairTemplate(item.CssClass' FlairType.User' item.Text' true);                                  Console.CursorLeft = left; Console.CursorTop = top;                                  Console.WriteLine("{0}/{1}"' progress++' flair.Length);                              }                          }                      }                      else if (entry.Name == "header.png" || entry.Name == "header.jpg")                      {                          var image = Path.GetFileName(entry.Name);                          Console.WriteLine("Restoring header image...");                          var stream = file.GetInputStream(entry);                          var data = new byte[entry.Size];                          stream.Read(data' 0' (int)entry.Size);                          subreddit.UploadHeaderImage(entry.Name'                              Path.GetExtension(entry.Name) == "png" ? ImageType.PNG : ImageType.JPEG' data);                      }                      else if (entry.Name.StartsWith("images/"))                      {                          var image = Path.GetFileName(entry.Name);                          Console.WriteLine("Restoring image: " + image);                          var stream = file.GetInputStream(entry);                          var data = new byte[entry.Size];                          stream.Read(data' 0' (int)entry.Size);                          styles.UploadImage(Path.GetFileNameWithoutExtension(image)'                              Path.GetExtension(image) == ".png" ? ImageType.PNG : ImageType.JPEG' data);                      }                  }                  Console.WriteLine("Restoring CSS...");                  styles.UpdateCss();                  Console.WriteLine("Finished restoring {0}"' subreddit.DisplayName);              }
