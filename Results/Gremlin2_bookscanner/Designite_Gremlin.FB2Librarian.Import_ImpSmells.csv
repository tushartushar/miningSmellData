Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The method has 250 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The method has 124 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The method has 157 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The method has 108 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The method has 108 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The method has 104 lines of code.
Long Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The method has 288 lines of code.
Long Method,Gremlin.FB2Librarian.Import.Mapping,ScalarTypeMapper,C:\repos\Gremlin2_bookscanner\Mapping\ScalarTypeMapper.cs,ScalarTypeMapper,The method has 446 lines of code.
Long Method,Gremlin.FB2Librarian.Import.Mapping,TypeMapper,C:\repos\Gremlin2_bookscanner\Mapping\TypeMapper.cs,TypeMapper,The method has 446 lines of code.
Complex Method,Gremlin.FB2Librarian.Import,OptionPatternElement,C:\repos\Gremlin2_bookscanner\FileNameProvider.cs,ApplyPattern,Cyclomatic complexity of the method is 12
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,Cyclomatic complexity of the method is 16
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,Cyclomatic complexity of the method is 43
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,Cyclomatic complexity of the method is 17
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadGenreList,Cyclomatic complexity of the method is 12
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,Cyclomatic complexity of the method is 27
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,Cyclomatic complexity of the method is 18
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,Cyclomatic complexity of the method is 18
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,Cyclomatic complexity of the method is 18
Complex Method,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,Cyclomatic complexity of the method is 54
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,Cyclomatic complexity of the method is 12
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDirectory,Cyclomatic complexity of the method is 26
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,Cyclomatic complexity of the method is 19
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,SaveFictionBook,Cyclomatic complexity of the method is 9
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDocument,Cyclomatic complexity of the method is 29
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CreateOrReplace,Cyclomatic complexity of the method is 18
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,Process,Cyclomatic complexity of the method is 16
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdRemoveProcessed_ItemClick,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,Cyclomatic complexity of the method is 29
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,FocusedRowChanged,Cyclomatic complexity of the method is 44
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,grvResult_ShowGridMenu,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdReprocessItem_ItemClick,Cyclomatic complexity of the method is 9
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdReplaceBook_ItemClick,Cyclomatic complexity of the method is 10
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdCreateNewBook_ItemClick,Cyclomatic complexity of the method is 10
Complex Method,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ShowBookPreview,Cyclomatic complexity of the method is 18
Complex Method,Gremlin.FB2Librarian.Import,ImportPlugin,C:\repos\Gremlin2_bookscanner\ImportPlugin.cs,RunAction,Cyclomatic complexity of the method is 9
Complex Method,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import.Filtering,FilterEvaluator,C:\repos\Gremlin2_bookscanner\Filtering\FilterEvaluator.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,Store,Cyclomatic complexity of the method is 13
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,DocumentInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\DocumentInfoNode.cs,Store,Cyclomatic complexity of the method is 20
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,DocumentNode,C:\repos\Gremlin2_bookscanner\ObjectModel\DocumentNode.cs,LoadDateElement,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,FictionBook,C:\repos\Gremlin2_bookscanner\ObjectModel\FictionBook.cs,FictionBook,Cyclomatic complexity of the method is 9
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,PublishInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\PublishInfoNode.cs,Store,Cyclomatic complexity of the method is 11
Complex Method,Gremlin.FB2Librarian.Import.ObjectModel,TitleInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\TitleInfoNode.cs,Store,Cyclomatic complexity of the method is 20
Complex Method,Gremlin.FB2Librarian.Import.SevenZip,PropVariant,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipInterface.cs,Clear,Cyclomatic complexity of the method is 30
Complex Method,Gremlin.FB2Librarian.Import.SevenZip,PropVariant,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipInterface.cs,SetObject,Cyclomatic complexity of the method is 52
Complex Method,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,Cyclomatic complexity of the method is 14
Complex Method,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import.Utils,SqlDbCommand,C:\repos\Gremlin2_bookscanner\Utils\SqlDbCommand.cs,ExecuteList,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,Join,Cyclomatic complexity of the method is 12
Complex Method,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,Cyclomatic complexity of the method is 8
Complex Method,Gremlin.FB2Librarian.Import.ObjectMetadata,MetadataCache,C:\repos\Gremlin2_bookscanner\ObjectMetadata\MetadataCache.cs,CreateEntityInfo,Cyclomatic complexity of the method is 10
Long Parameter List,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The method has 5 parameters.
Long Parameter List,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDocument,The method has 5 parameters.
Long Parameter List,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,AuthorInfoNode,The method has 5 parameters.
Long Parameter List,Gremlin.FB2Librarian.Import.Utils,FileUtils,C:\repos\Gremlin2_bookscanner\Utils\FileUtils.cs,GetOutputFileName,The method has 5 parameters.
Long Parameter List,Gremlin.FB2Librarian.Import.Mapping,DataMapper,C:\repos\Gremlin2_bookscanner\Mapping\DataMapper.cs,Map,The method has 6 parameters.
Long Parameter List,Gremlin.FB2Librarian.Import.Mapping,IDataMapper,C:\repos\Gremlin2_bookscanner\Mapping\IDataMapper.cs,Map,The method has 6 parameters.
Long Statement,Gremlin.FB2Librarian.Import,BookPreviewForm,C:\repos\Gremlin2_bookscanner\BookPreviewForm.cs,htmlViewer_ResourceRequested,The length of the statement  "		XmlNode binaryNode = fictionBook.Document.SelectSingleNode ("//fb:binary[@id='" + args.Url + "']"' fictionBook.TitleInfo.NamespaceManager); " is 139.
Long Statement,Gremlin.FB2Librarian.Import,FileNamePattern,C:\repos\Gremlin2_bookscanner\FileNameProvider.cs,Parse,The length of the statement  "				FileNamePatternElement patternElement = (FileNamePatternElement)Activator.CreateInstance (patternType' namePattern.Value); " is 122.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "				IOutArchive archive = this.format.CreateOutArchive (SevenZipFormat.GetClassIdFromKnownFormat (KnownSevenZipFormat.Zip)); " is 120.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "						archive.UpdateItems (archiveStream' 1' new UpdateBookCallback (content' Path.GetFileName (bookFilename)' documentEntry)); " is 121.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "					command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = FileUtils.SplitFilePath (info.MountPoint' outputFilename); " is 121.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "					IOutArchive archive = this.format.CreateOutArchive (SevenZipFormat.GetClassIdFromKnownFormat (KnownSevenZipFormat.Zip)); " is 120.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "		book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant (); " is 165.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "		string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID"; " is 1043.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "		commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)"; " is 127.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The length of the statement  "		commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)"; " is 130.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The length of the statement  "	//IList<Author> test = tree.RangeSearch(info' (x' y) => StringUtils.DamerauLevenshteinDistance(x.DisplayName' y.DisplayName)' 0' 5); " is 132.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The length of the statement  "		int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty); " is 130.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The length of the statement  "		int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty); " is 133.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The length of the statement  "		int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty); " is 127.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The length of the statement  "		double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45; " is 166.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "	//    command.CommandText = "CREATE INDEX IDX_AUTOR_SYNONIMS_FIRSTNAME ON AUTOR_SYNONIMS COMPUTED BY (UPPERCASE(FIRSTNAME))"; " is 125.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "	//    command.CommandText = "CREATE INDEX IDX_AUTOR_SYNONIMS_MIDNAME ON AUTOR_SYNONIMS COMPUTED BY (UPPERCASE(MIDNAME))"; " is 121.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "	//    command.CommandText = "CREATE INDEX IDX_AUTOR_SYNONIMS_LASTNAME ON AUTOR_SYNONIMS COMPUTED BY (UPPERCASE(LASTNAME))"; " is 123.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "	//    command.CommandText = "CREATE INDEX IDX_AUTOR_SYNONIMS_NICKNAME ON AUTOR_SYNONIMS COMPUTED BY (UPPERCASE(NICKNAME))"; " is 123.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "		if (fk.Select ("TABLE_NAME = 'AUTHOR_INFO' AND CONSTRAINT_NAME = 'FK_AUTHOR_INFO_AUTORID' AND DELETE_RULE = 'CASCADE'").Length == 0) { " is 134.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "					command.CommandText = @"ALTER TABLE AUTHOR_INFO ADD CONSTRAINT FK_AUTHOR_INFO_AUTORID FOREIGN KEY (AUTORID) REFERENCES AUTOR(AUTORID) ON DELETE CASCADE"; " is 153.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The length of the statement  "			if (indexColumns.Select (String.Format ("TABLE_NAME = 'BOOK' AND CONSTRAINT_NAME = '{0}'"' dataRow ["CONSTRAINT_NAME"])).Length == 1) { " is 135.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadAuthorList,The length of the statement  "		string commandText = @"SELECT autor.autorid' autor.lastname' autor.firstname' autor.midname' autor.nickname' author_info.id as library_id " is 137.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadAuthorList,The length of the statement  "                      SELECT autor_synonims.autorid' autor_synonims.lastname' autor_synonims.firstname' autor_synonims.midname' autor_synonims.nickname' author_info.id as library_id " is 159.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The length of the statement  "                            ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))"; " is 146.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The length of the statement  "                            ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))"; " is 128.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The length of the statement  "		if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) { " is 125.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The length of the statement  "		commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID"; " is 225.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The length of the statement  "                            ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))"; " is 136.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The length of the statement  "		if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) { " is 125.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The length of the statement  "			commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)"; " is 143.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The length of the statement  "		commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID"; " is 239.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The length of the statement  "                            ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))"; " is 136.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The length of the statement  "		if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) { " is 125.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The length of the statement  "			commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)"; " is 144.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The length of the statement  "		commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID"; " is 241.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The length of the statement  "		commandText = "INSERT INTO SEQUENCES (SEQUENCEID' \"SEQUENCE\") " + "VALUES (GEN_ID(GEN_SEQUENCES_ID' 1)' @sequencename) " + "RETURNING SEQUENCEID"; " is 148.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadBookInfoByBookId,The length of the statement  "		commandText = @"SELECT BOOKID' AUTORLIST' GENRELIST' BOOKNAME' ""SEQUENCE""' SEQNUMBER' OLDID' DI_VERSION' FILENAME' FILEDATE' FILESIZE' DATEIN " is 143.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "				IOutArchive archive = this.format.CreateOutArchive (SevenZipFormat.GetClassIdFromKnownFormat (KnownSevenZipFormat.Zip)); " is 120.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "						archive.UpdateItems (archiveStream' 1' new UpdateBookCallback (content' Path.GetFileName (bookFilename)' documentEntry)); " is 121.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "					command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = FileUtils.SplitFilePath (info.MountPoint' outputFilename); " is 121.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "					IOutArchive archive = this.format.CreateOutArchive (SevenZipFormat.GetClassIdFromKnownFormat (KnownSevenZipFormat.Zip)); " is 120.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "		book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant (); " is 165.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "		string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid "; " is 887.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "		commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)"; " is 127.
Long Statement,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The length of the statement  "		commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)"; " is 130.
Long Statement,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,IsDuplicate,The length of the statement  "	return status == ImportStatus.Duplicate || status == ImportStatus.DuplicateIDsDiffer || status == ImportStatus.DuplicateNewer || status == ImportStatus.DuplicateOlder; " is 167.
Long Statement,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,GetDocumentEncoding,The length of the statement  "		throw new InvalidFictionBookFormatException (String.Format ("The document code page \"{0}\" is not supported by the underlying platform."' encodingName)); " is 154.
Long Statement,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdSelectAll_ItemClick,The length of the statement  "	this.processLegend.SetCounterValue (ImportStatus.ReadyToProcess' processLegend [ImportStatus.ReadyToProcess].Counter + grvSelectedFiles.RowCount); " is 146.
Long Statement,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdUnselectAll_ItemClick,The length of the statement  "	this.processLegend.SetCounterValue (ImportStatus.ReadyToProcess' processLegend [ImportStatus.ReadyToProcess].Counter - grvSelectedFiles.RowCount); " is 146.
Long Statement,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdClearResultList_ItemClick,The length of the statement  "	if (MessageBox.Show (this' "Вы действительно хотите очистить список?"' "Журнал обработки"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) != DialogResult.Yes) { " is 163.
Long Statement,Gremlin.FB2Librarian.Import,XmlResourceResolver,C:\repos\Gremlin2_bookscanner\XmlResourceResolver.cs,GetEntity,The length of the statement  "			return Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Gremlin.FB2Librarian.Import.Resources." + filename); " is 120.
Long Statement,Gremlin.FB2Librarian.Import.ObjectModel,PublishInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\PublishInfoNode.cs,Store,The length of the statement  "		if ((childElement = StoreElement (document' "year"' this.year.Value.ToString (CultureInfo.InvariantCulture))) != null) { " is 120.
Long Statement,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFormat,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFormat.cs,CreateInterface,The length of the statement  "	CreateObjectDelegate createDelegate = (CreateObjectDelegate)Marshal.GetDelegateForFunctionPointer (GetProcAddress (this.libHandle' "CreateObject")' typeof(CreateObjectDelegate)); " is 178.
Long Statement,Gremlin.FB2Librarian.Import.Utils,FileUtils,C:\repos\Gremlin2_bookscanner\Utils\FileUtils.cs,GetOutputFileName,The length of the statement  "			fullFilename = Path.Combine (path' StringUtils.Truncate (filename' maxLength - extension.Length - suffix.Length)) + suffix + extension; " is 135.
Long Statement,Gremlin.FB2Librarian.Import.Utils,SqlDbCommand,C:\repos\Gremlin2_bookscanner\Utils\SqlDbCommand.cs,ExecuteList,The length of the statement  "				mappers [destinationIndex] = TypeMapper.GetMapper (reader.GetFieldType (index)' entityInfo.Fields [destinationIndex].PropertyType); " is 131.
Long Statement,Gremlin.FB2Librarian.Import.ObjectMetadata,DynamicMethodCompiler,C:\repos\Gremlin2_bookscanner\ObjectMetadata\DynamicMethodCompiler.cs,CreateInstantiateObjectHandler,The length of the statement  "	ConstructorInfo constructorInfo = type.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' new Type[0]' null); " is 150.
Long Statement,Gremlin.FB2Librarian.Import.ObjectMetadata,DynamicMethodCompiler,C:\repos\Gremlin2_bookscanner\ObjectMetadata\DynamicMethodCompiler.cs,CreateInstantiateObjectHandler,The length of the statement  "		throw new ApplicationException (string.Format ("The type {0} must declare an empty constructor (the constructor may be private' internal' protected' protected internal' or public)."' type)); " is 190.
Long Statement,Gremlin.FB2Librarian.Import.ObjectMetadata,DynamicMethodCompiler,C:\repos\Gremlin2_bookscanner\ObjectMetadata\DynamicMethodCompiler.cs,CreateInstantiateObjectHandler,The length of the statement  "	DynamicMethod dynamicMethod = new DynamicMethod ("InstantiateObject"' MethodAttributes.Static | MethodAttributes.Public' CallingConventions.Standard' typeof(object)' null' type' true); " is 184.
Complex Conditional,Gremlin.FB2Librarian.Import.SevenZip,InStreamTimedWrapper,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipInterface.cs,Seek,The conditional expression  "(_BaseStream == null) && (_BaseStreamFileName != null) && (offset == 0) && (seekOrigin == 0)"  is complex.
Complex Conditional,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The conditional expression  "(i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])"  is complex.
Virtual Method Call from Constructor,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,The constructor "ImportForm" calls a virtual method "addListener".
Empty Catch Block,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CheckDatabaseSchema,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadGenreList,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,StoreImportState,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,LoadImportState,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,LoadBriefBookInfo,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,LoadBriefBookInfo,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdSaveProcessLog_ItemClick,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import.ObjectModel,DateTimeNode,C:\repos\Gremlin2_bookscanner\ObjectModel\DateTimeNode.cs,Load,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import.ObjectModel,DocumentNode,C:\repos\Gremlin2_bookscanner\ObjectModel\DocumentNode.cs,LoadDateElement,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import.ObjectModel,GenreInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\GenreInfoNode.cs,Load,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import.ObjectModel,PublishInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\PublishInfoNode.cs,Load,The method has an empty catch block.
Empty Catch Block,Gremlin.FB2Librarian.Import.ObjectModel,SequenceInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\SequenceInfoNode.cs,Load,The method has an empty catch block.
Magic Number,Gremlin.FB2Librarian.Import,FileNamePattern,C:\repos\Gremlin2_bookscanner\FileNameProvider.cs,FileNamePattern,The following statement contains a magic number: knownPatterns = new Dictionary<string' Type> (14);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		this.xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateInserted = DateTime.Now;  	book.DateUpdated = null;  	book.Extension = "FB2";  	book.FileDate = documentEntry.FileDate ?? DateTime.Now;  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " INSERT INTO BOOK " + " ( " + "   BOOKID' GENRELIST' ANNOTATION' AUTORLIST' KEYWORDS' BOOKNAME' DATEVALUE' DATEVISIBLE' " + "   LANG' COVERPAGE' SRCLANG' \"SEQUENCE\"' SEQNUMBER' SEQUENCEID' DI_PROGUSED' " + "   DI_DATEVALUE' DI_DATEVISIBLE' DI_SRCURL' DI_SRCOCR' OLDID' DI_VERSION' DI_HISTORY' " + "   PI_BOOKNAME' PI_PUBLISHER' PI_CITY' PI_YEAR' PI_ISBN' CUSTOMINFO' DATEIN' " + "   DATEUPDATED' MYID' EXT' FILESIZE' FILENAME' FILEPATH' FILEDATE' USERID' USERNAME " + " ) " + " VALUES " + " ( " + "   GEN_ID(GEN_BOOK_ID'1)' @genrelist' @annotation' @autorlist' @keywords' @bookname' @datevalue' " + "   @datevisible' @lang' @coverpage' @srclang' @sequencename' @seqnumber' @sequenceid' " + "   @di_progused' @di_datevalue' @di_datevisible' @di_srcurl' @di_srcocr' @oldid' " + "   @di_version' @di_history' @pi_bookname' @pi_publisher' @pi_city' @pi_year' @pi_isbn' " + "   @custominfo' @datein' @dateupdated' @myid' @ext' @filesize' @filename' @filepath' " + "   @filedate' @userid' @username " + " ) RETURNING BOOKID";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@datein"' FbDbType.TimeStamp).Value = book.DateInserted;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@filename"' FbDbType.VarChar).Value = book.FileName;  		command.Parameters.Add ("@filepath"' FbDbType.VarChar).Value = book.FilePath;  		command.Parameters.Add ("@filedate"' FbDbType.TimeStamp).Value = book.FileDate;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		book.BookId = Convert.ToInt32 (command.Parameters ["@bookid"].Value);  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: using (StringWriter writer = new StringWriter ()) {  	XsltArgumentList arguments = new XsltArgumentList ();  	arguments.AddParam ("nodeType"' ""' "annotation");  	this.xslt.Transform (fictionBook.Document' arguments' writer);  	book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.TitleInfo.DateNode != null) {  	book.DateValue = fictionBook.TitleInfo.DateNode.Value;  	book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: foreach (SequenceInfo sequenceInfo in bookSequences) {  	book.SequenceId = sequenceInfo.SequenceId;  	book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  	if (sequenceInfo.SequenceNumber != null) {  		book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  	}  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.DocumentInfo.DateNode != null) {  	book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  	book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  }  else {  	book.DocumentDateValue = null;  	book.DocumentDateText = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo.Year != null) {  	book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  }  else {  	book.Year = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,CreateFictionBook,The following statement contains a magic number: book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: foreach (Author author in searchList) {  	int firstNameDistance = StringUtils.DamerauLevenshteinDistance (info.FirstName ?? String.Empty' author.FirstName ?? String.Empty);  	int middleNameDistance = StringUtils.DamerauLevenshteinDistance (info.MiddleName ?? String.Empty' author.MiddleName ?? String.Empty);  	int lastNameDistance = StringUtils.DamerauLevenshteinDistance (info.LastName ?? String.Empty' author.LastName ?? String.Empty);  	double sourceMetric = (info.FirstName ?? String.Empty).Length * 0.45 + (info.MiddleName ?? String.Empty).Length * 0.1 + (info.LastName ?? String.Empty).Length * 0.45;  	double distanceMetric = firstNameDistance * 0.45 + middleNameDistance * 0.1 + lastNameDistance * 0.45;  	double metric = (sourceMetric > 0) ? (1 - distanceMetric / sourceMetric) * 100 : 0;  	if (metric >= 70.0) {  		result.Add (author);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindSimularAuthors,The following statement contains a magic number: if (metric >= 70.0) {  	result.Add (author);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT autor.* FROM autor                             INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                             WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                                   UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                                   UPPERCASE(autor_synonims.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         INNER JOIN autor_synonims ON autor_synonims.autorid = autor.autorid                         WHERE UPPERCASE(autor_synonims.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor_synonims.firstname) = UPPERCASE(@firstname) AND                               ((autor_synonims.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor_synonims.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT * FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(autor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT autor.* FROM autor                         WHERE UPPERCASE(autor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(autor.firstname) = UPPERCASE(@firstname) AND                               ((autor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (autor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO AUTOR (AUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_AUTOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING AUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  	if (!String.IsNullOrEmpty (author.LibraryId)) {  		commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  		using (FbCommand cmd = this.connection.CreateCommand ()) {  			cmd.CommandType = CommandType.Text;  			cmd.CommandText = commandText;  			cmd.Transaction = transaction as FbTransaction;  			cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  			cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  			cmd.ExecuteNonQuery ();  		}  	}  	List<Author> authors = AuthorList;  	authors.Add (author);  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  	commandText = @"SELECT autor.* FROM autor WHERE UPPERCASE(autor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: if (!String.IsNullOrEmpty (author.LibraryId)) {  	commandText = "INSERT INTO AUTHOR_INFO (AUTORID' ID) VALUES (@autorid' @id)";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  		cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  		cmd.ExecuteNonQuery ();  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@autorid"' FbDbType.Integer).Value = author.Id;  	cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  	cmd.ExecuteNonQuery ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@id"' FbDbType.VarChar' 254).Value = author.LibraryId;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: try {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname) AND                              UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                        WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(docauthor.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor                         WHERE UPPERCASE(docauthor.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(docauthor.firstname) = UPPERCASE(@firstname) AND                               ((docauthor.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (docauthor.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO DOCAUTHOR (DOCAUTORID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_DOCAUTHOR_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING DOCAUTORID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  	commandText = @"SELECT docauthor.docautorid as autorid' docauthor.* FROM docauthor WHERE UPPERCASE(docauthor.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateDocumentAuthor,The following statement contains a magic number: cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: try {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname) AND                              UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                        WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               UPPERCASE(translate.midname) = UPPERCASE(@midname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar).Value = info.MiddleName;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate                         WHERE UPPERCASE(translate.lastname) = UPPERCASE(@lastname) AND                               UPPERCASE(translate.firstname) = UPPERCASE(@firstname) AND                               ((translate.midname = '' AND CAST(@midname AS VARCHAR(40)) <> '') OR (translate.midname <> '' AND CAST(@midname AS VARCHAR(40)) = ''))";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  	command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  	command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  	if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  		commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  		command = this.connection.CreateCommand ();  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  		using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  			author = dbCommand.ExecuteObject<Author> ();  		}  		if (author != null) {  			return author;  		}  	}  	author = new Author ();  	author.FirstName = info.FirstName;  	author.MiddleName = info.MiddleName;  	author.LastName = info.LastName;  	author.NickName = info.NickName;  	author.LibraryId = info.Id;  	author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  	author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  	commandText = "INSERT INTO TRANSLATE (TRANSLATEID' FIRSTNAME' MIDNAME' LASTNAME' NICKNAME' EMAIL' HOMEPAGE) " + "VALUES (GEN_ID(GEN_TRANSLATE_ID' 1)' @firstname' @midname' @lastname' @nickname' @email' @homepage) " + "RETURNING TRANSLATEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  		cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  		cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  		cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  		cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  		cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  		cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: command.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = info.FirstName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: command.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = info.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: command.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = info.LastName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: if (String.IsNullOrEmpty (info.FirstName) && String.IsNullOrEmpty (info.LastName) && !String.IsNullOrEmpty (info.NickName)) {  	commandText = @"SELECT translate.translateid as autorid' translate.* FROM translate WHERE UPPERCASE(translate.nickname) = UPPERCASE(@nickname)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		author = dbCommand.ExecuteObject<Author> ();  	}  	if (author != null) {  		return author;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: command.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = info.NickName;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: author.EMail = StringUtils.Truncate (StringUtils.Join ("' "' info.Email)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: author.Homepage = StringUtils.Truncate (StringUtils.Join ("' "' info.Homepage)' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  	cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  	cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  	cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  	cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  	cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  	cmd.Parameters.Add ("@authorid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	author.Id = Convert.ToInt32 (cmd.Parameters ["@authorid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@firstname"' FbDbType.VarChar' 40).Value = author.FirstName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@midname"' FbDbType.VarChar' 40).Value = author.MiddleName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@lastname"' FbDbType.VarChar' 40).Value = author.LastName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@nickname"' FbDbType.VarChar' 40).Value = author.NickName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@email"' FbDbType.VarChar' 125).Value = author.EMail;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateTranslator,The following statement contains a magic number: cmd.Parameters.Add ("@homepage"' FbDbType.VarChar' 125).Value = author.Homepage;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The following statement contains a magic number: try {  	commandText = @"SELECT sequences.* FROM sequences                         WHERE UPPERCASE(sequences.""SEQUENCE"") = UPPERCASE(@sequencename)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = info.Name;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		sequence = dbCommand.ExecuteObject<SequenceInfo> ();  	}  	if (sequence != null) {  		sequence.SequenceNumber = info.Number;  		return sequence;  	}  	sequence = new SequenceInfo ();  	sequence.SequenceName = StringUtils.Truncate (info.Name' 125);  	commandText = "INSERT INTO SEQUENCES (SEQUENCEID' \"SEQUENCE\") " + "VALUES (GEN_ID(GEN_SEQUENCES_ID' 1)' @sequencename) " + "RETURNING SEQUENCEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@sequencename"' FbDbType.VarChar' 125).Value = sequence.SequenceName ?? String.Empty;  		cmd.Parameters.Add ("@sequenceid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		sequence.SequenceId = Convert.ToInt32 (cmd.Parameters ["@sequenceid"].Value);  	}  	sequence.SequenceNumber = info.Number;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The following statement contains a magic number: try {  	commandText = @"SELECT sequences.* FROM sequences                         WHERE UPPERCASE(sequences.""SEQUENCE"") = UPPERCASE(@sequencename)";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Transaction = transaction as FbTransaction;  	command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = info.Name;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		sequence = dbCommand.ExecuteObject<SequenceInfo> ();  	}  	if (sequence != null) {  		sequence.SequenceNumber = info.Number;  		return sequence;  	}  	sequence = new SequenceInfo ();  	sequence.SequenceName = StringUtils.Truncate (info.Name' 125);  	commandText = "INSERT INTO SEQUENCES (SEQUENCEID' \"SEQUENCE\") " + "VALUES (GEN_ID(GEN_SEQUENCES_ID' 1)' @sequencename) " + "RETURNING SEQUENCEID";  	using (FbCommand cmd = this.connection.CreateCommand ()) {  		cmd.CommandType = CommandType.Text;  		cmd.CommandText = commandText;  		cmd.Transaction = transaction as FbTransaction;  		cmd.Parameters.Add ("@sequencename"' FbDbType.VarChar' 125).Value = sequence.SequenceName ?? String.Empty;  		cmd.Parameters.Add ("@sequenceid"' FbDbType.Integer).Direction = ParameterDirection.Output;  		cmd.ExecuteNonQuery ();  		sequence.SequenceId = Convert.ToInt32 (cmd.Parameters ["@sequenceid"].Value);  	}  	sequence.SequenceNumber = info.Number;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The following statement contains a magic number: sequence.SequenceName = StringUtils.Truncate (info.Name' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The following statement contains a magic number: using (FbCommand cmd = this.connection.CreateCommand ()) {  	cmd.CommandType = CommandType.Text;  	cmd.CommandText = commandText;  	cmd.Transaction = transaction as FbTransaction;  	cmd.Parameters.Add ("@sequencename"' FbDbType.VarChar' 125).Value = sequence.SequenceName ?? String.Empty;  	cmd.Parameters.Add ("@sequenceid"' FbDbType.Integer).Direction = ParameterDirection.Output;  	cmd.ExecuteNonQuery ();  	sequence.SequenceId = Convert.ToInt32 (cmd.Parameters ["@sequenceid"].Value);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,FindOrCreateBookSequence,The following statement contains a magic number: cmd.Parameters.Add ("@sequencename"' FbDbType.VarChar' 125).Value = sequence.SequenceName ?? String.Empty;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadBookInfoByDocumentId,The following statement contains a magic number: try {  	commandText = @"SELECT BOOKID' BOOKNAME' ""SEQUENCE""' SEQNUMBER' OLDID' DI_VERSION' FILENAME' FILEDATE' DATEIN                        FROM BOOK                        WHERE OLDID = @documentid";  	command = this.connection.CreateCommand ();  	command.CommandType = CommandType.Text;  	command.CommandText = commandText;  	command.Parameters.Add ("@documentid"' FbDbType.VarChar' 254).Value = documentId;  	using (SqlDbCommand dbCommand = new SqlDbCommand (command)) {  		return dbCommand.ExecuteList<BookInfo> ();  	}  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,LoadBookInfoByDocumentId,The following statement contains a magic number: command.Parameters.Add ("@documentid"' FbDbType.VarChar' 254).Value = documentId;  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: try {  	DatabaseInfo info = this.DatabaseInfo;  	FileNameProvider provider = NamingProvider;  	List<Author> bookAuthors = new List<Author> (fictionBook.TitleInfo.Authors.Count);  	List<Author> documentAuthors = new List<Author> (fictionBook.DocumentInfo.Authors.Count);  	List<Author> bookTranslators = new List<Author> (fictionBook.TitleInfo.Translators.Count);  	List<SequenceInfo> bookSequences = new List<SequenceInfo> (fictionBook.TitleInfo.Sequences.Count);  	List<Genre> bookGenres = new List<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Authors) {  		Author author = this.FindOrCreateAuthor (authorInfoNode' transaction);  		if (author != null) {  			bookAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.DocumentInfo.Authors) {  		Author author = this.FindOrCreateDocumentAuthor (authorInfoNode' transaction);  		if (author != null) {  			documentAuthors.Add (author);  		}  	}  	foreach (AuthorInfoNode authorInfoNode in fictionBook.TitleInfo.Translators) {  		Author translator = this.FindOrCreateTranslator (authorInfoNode' transaction);  		if (translator != null) {  			bookTranslators.Add (translator);  		}  	}  	foreach (SequenceInfoNode sequenceInfoNode in fictionBook.TitleInfo.Sequences) {  		SequenceInfo sequence = this.FindOrCreateBookSequence (sequenceInfoNode' transaction);  		if (sequence != null) {  			bookSequences.Add (sequence);  		}  	}  	Set<Genre> genres = new Set<Genre> (fictionBook.TitleInfo.Genres.Count);  	foreach (GenreInfoNode genreInfoNode in fictionBook.TitleInfo.Genres) {  		string genreName = genreInfoNode.Genre;  		if (GenreTable.Table.MapTable.ContainsKey (genreName)) {  			genreName = GenreTable.Table.MapTable [genreName];  		}  		Genre bookGenre = GenreTable.Table [genreName];  		if (bookGenre != null) {  			genres.Add (bookGenre);  		}  	}  	bookGenres.AddRange (genres);  	BookInfo book = new BookInfo ();  	book.BookId = bookInfo.BookId;  	book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "annotation");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  	}  	book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  	book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  	book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  	if (fictionBook.TitleInfo.DateNode != null) {  		book.DateValue = fictionBook.TitleInfo.DateNode.Value;  		book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  	}  	book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  	book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  	foreach (SequenceInfo sequenceInfo in bookSequences) {  		book.SequenceId = sequenceInfo.SequenceId;  		book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  		if (sequenceInfo.SequenceNumber != null) {  			book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  	if (fictionBook.DocumentInfo.DateNode != null) {  		book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  		book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  	}  	else {  		book.DocumentDateValue = null;  		book.DocumentDateText = String.Empty;  	}  	book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  	book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  	book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  	book.Version = DocumentInfoNode.FormatVersion (fictionBook.DocumentInfo.Version ?? 0.0f);  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "history");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.History = writer.ToString ();  	}  	if (fictionBook.PublishInfo != null) {  		book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  		book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  		book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  		if (fictionBook.PublishInfo.Year != null) {  			book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  		}  		else {  			book.Year = String.Empty;  		}  		book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  	}  	else {  		book.BookName = String.Empty;  		book.Publisher = String.Empty;  		book.City = String.Empty;  		book.Year = String.Empty;  		book.Isbn = String.Empty;  	}  	using (StringWriter writer = new StringWriter ()) {  		XsltArgumentList arguments = new XsltArgumentList ();  		arguments.AddParam ("nodeType"' ""' "custom-info");  		xslt.Transform (fictionBook.Document' arguments' writer);  		book.CustomInfo = writer.ToString ();  	}  	book.DateUpdated = DateTime.Now;  	book.Extension = "FB2";  	book.FileSize = documentEntry.FileSize;  	book.SurrogateId = Regex.Replace (String.Concat (book.BookTitle' book.AuthorList)' @"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}]"' "").Trim ().ToUpperInvariant ();  	book.Userid = info.CurrentUserId;  	book.Username = info.CurrentUserName;  	string commandText = " UPDATE BOOK " + "   SET GENRELIST = @genrelist' ANNOTATION = @annotation' AUTORLIST = @autorlist' KEYWORDS = @keywords' BOOKNAME = @bookname' DATEVALUE = @datevalue' DATEVISIBLE = @datevisible' " + "   LANG = @lang' COVERPAGE = @coverpage' SRCLANG = @srclang' \"SEQUENCE\" = @sequencename' SEQNUMBER = @seqnumber' SEQUENCEID = @sequenceid' DI_PROGUSED = @di_progused' " + "   DI_DATEVALUE = @di_datevalue' DI_DATEVISIBLE = @di_datevisible' DI_SRCURL = @di_srcurl' DI_SRCOCR = @di_srcocr' OLDID = @oldid' DI_VERSION = @di_version' DI_HISTORY = @di_history' " + "   PI_BOOKNAME = @pi_bookname' PI_PUBLISHER = @pi_publisher' PI_CITY = @pi_city' PI_YEAR = @pi_year' PI_ISBN = @pi_isbn' CUSTOMINFO = @custominfo' " + "   DATEUPDATED = @dateupdated' MYID = @myid' EXT = @ext' FILESIZE = @filesize' USERID = @userid' USERNAME = @username " + "   WHERE BOOKID = @bookid ";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.Parameters.Add ("@genrelist"' FbDbType.VarChar).Value = book.Genrelist;  		command.Parameters.Add ("@annotation"' FbDbType.VarChar).Value = book.Annotation;  		command.Parameters.Add ("@autorlist"' FbDbType.VarChar).Value = book.AuthorList;  		command.Parameters.Add ("@keywords"' FbDbType.VarChar).Value = book.Keywords;  		command.Parameters.Add ("@bookname"' FbDbType.VarChar).Value = book.BookTitle;  		command.Parameters.Add ("@datevalue"' FbDbType.Date).Value = book.DateValue;  		command.Parameters.Add ("@datevisible"' FbDbType.VarChar).Value = book.DateText;  		command.Parameters.Add ("@lang"' FbDbType.VarChar).Value = book.Lang;  		command.Parameters.Add ("@coverpage"' FbDbType.Binary).Value = fictionBook.CoverpageImage;  		command.Parameters.Add ("@srclang"' FbDbType.VarChar).Value = book.SrcLang;  		command.Parameters.Add ("@sequencename"' FbDbType.VarChar).Value = book.Sequence;  		command.Parameters.Add ("@seqnumber"' FbDbType.VarChar).Value = book.SequenceNumber;  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer).Value = book.SequenceId;  		command.Parameters.Add ("@di_progused"' FbDbType.VarChar).Value = book.ProgrammUsed;  		command.Parameters.Add ("@di_datevalue"' FbDbType.Date).Value = book.DocumentDateValue;  		command.Parameters.Add ("@di_datevisible"' FbDbType.VarChar).Value = book.DocumentDateText;  		command.Parameters.Add ("@di_srcurl"' FbDbType.VarChar).Value = book.SrcUrl;  		command.Parameters.Add ("@di_srcocr"' FbDbType.VarChar).Value = book.SrcOcr;  		command.Parameters.Add ("@oldid"' FbDbType.VarChar).Value = book.Id;  		command.Parameters.Add ("@di_version"' FbDbType.VarChar).Value = book.Version;  		command.Parameters.Add ("@di_history"' FbDbType.Text).Value = book.History;  		command.Parameters.Add ("@pi_bookname"' FbDbType.VarChar).Value = book.BookName;  		command.Parameters.Add ("@pi_publisher"' FbDbType.VarChar).Value = book.Publisher;  		command.Parameters.Add ("@pi_city"' FbDbType.VarChar).Value = book.City;  		command.Parameters.Add ("@pi_year"' FbDbType.VarChar).Value = book.Year;  		command.Parameters.Add ("@pi_isbn"' FbDbType.VarChar).Value = book.Isbn;  		command.Parameters.Add ("@custominfo"' FbDbType.Text).Value = book.CustomInfo;  		command.Parameters.Add ("@dateupdated"' FbDbType.TimeStamp).Value = book.DateUpdated;  		command.Parameters.Add ("@myid"' FbDbType.VarChar).Value = book.SurrogateId;  		command.Parameters.Add ("@ext"' FbDbType.VarChar).Value = book.Extension;  		command.Parameters.Add ("@filesize"' FbDbType.Float).Value = book.FileSize;  		command.Parameters.Add ("@userid"' FbDbType.Integer).Value = book.Userid;  		command.Parameters.Add ("@username"' FbDbType.VarChar).Value = book.Username;  		command.ExecuteNonQuery ();  	}  	commandText = "DELETE FROM BOOK_AUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_AUTOR (ID' BOOKID' AUTORID) VALUES (GEN_ID(GEN_BOOK_AUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author bookAuthor in bookAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = bookAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_DOCAUTOR WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_DOCAUTOR (ID' BOOKID' DOCAUTORID) VALUES (GEN_ID(GEN_BOOK_DOCAUTOR_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author documentAuthor in documentAuthors) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = documentAuthor.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_TRANSLATE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_TRANSLATE (ID' BOOKID' TRANSLATEID) VALUES (GEN_ID(GEN_BOOK_TRANSLATE_ID' 1)' @bookid' @autorid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@autorid"' FbDbType.Integer);  		command.Prepare ();  		foreach (Author translator in bookTranslators) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@autorid"].Value = translator.Id;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_SEQUENCE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_SEQUENCE (BOOKID' SEQUENCEID) VALUES (@bookid' @sequenceid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@sequenceid"' FbDbType.Integer);  		command.Prepare ();  		foreach (SequenceInfo sequenceInfo in bookSequences) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@sequenceid"].Value = sequenceInfo.SequenceId;  			command.ExecuteNonQuery ();  		}  	}  	commandText = "DELETE FROM BOOK_GENRE WHERE BOOKID = @bookid";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer).Value = book.BookId;  		command.ExecuteNonQuery ();  	}  	commandText = "INSERT INTO BOOK_GENRE (ID' BOOKID' GENREID) VALUES (GEN_ID(GEN_BOOK_GENRE_ID' 1)' @bookid' @genreid)";  	using (FbCommand command = this.connection.CreateCommand ()) {  		command.CommandType = CommandType.Text;  		command.CommandText = commandText;  		command.Transaction = transaction as FbTransaction;  		command.Parameters.Add ("@bookid"' FbDbType.Integer);  		command.Parameters.Add ("@genreid"' FbDbType.Char);  		command.Prepare ();  		foreach (Genre genre in bookGenres) {  			command.Parameters ["@bookid"].Value = book.BookId;  			command.Parameters ["@genreid"].Value = genre.Name;  			command.ExecuteNonQuery ();  		}  	}  	return book;  }  catch (FbException exp) {  	throw new DatabaseException (exp.Message' exp);  }  finally {  	this.manager.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Genrelist = StringUtils.Truncate (StringUtils.Join ("' "' bookGenres)' 1024);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: using (StringWriter writer = new StringWriter ()) {  	XsltArgumentList arguments = new XsltArgumentList ();  	arguments.AddParam ("nodeType"' ""' "annotation");  	xslt.Transform (fictionBook.Document' arguments' writer);  	book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Annotation = StringUtils.Truncate (writer.ToString ()' 4096);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.AuthorList = StringUtils.Truncate (StringUtils.Join ("; "' bookAuthors)' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Keywords = StringUtils.Truncate (fictionBook.TitleInfo.Keywords' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.BookTitle = StringUtils.Truncate (fictionBook.TitleInfo.BookTitle' 252);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.TitleInfo.DateNode != null) {  	book.DateValue = fictionBook.TitleInfo.DateNode.Value;  	book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.DateText = StringUtils.Truncate (fictionBook.TitleInfo.DateNode.DateString' 25);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Lang = StringUtils.Truncate (fictionBook.TitleInfo.Lang' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.SrcLang = StringUtils.Truncate (fictionBook.TitleInfo.SourceLang' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: foreach (SequenceInfo sequenceInfo in bookSequences) {  	book.SequenceId = sequenceInfo.SequenceId;  	book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  	if (sequenceInfo.SequenceNumber != null) {  		book.SequenceNumber = sequenceInfo.SequenceNumber.Value.ToString ("000"' CultureInfo.InvariantCulture);  	}  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Sequence = StringUtils.Truncate (sequenceInfo.SequenceName' 125);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.ProgrammUsed = StringUtils.Truncate (fictionBook.DocumentInfo.ProgramUsed ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.DocumentInfo.DateNode != null) {  	book.DocumentDateValue = fictionBook.DocumentInfo.DateNode.Value;  	book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  }  else {  	book.DocumentDateValue = null;  	book.DocumentDateText = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.DocumentDateText = StringUtils.Truncate (fictionBook.DocumentInfo.DateNode.DateString ?? String.Empty' 14);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.SrcUrl = StringUtils.Truncate (StringUtils.Join ("' "' fictionBook.DocumentInfo.SourceUrl)' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.SrcOcr = StringUtils.Truncate (fictionBook.DocumentInfo.SourceOCR ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Id = StringUtils.Truncate (fictionBook.DocumentInfo.Id' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo != null) {  	book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  	book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  	book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  	if (fictionBook.PublishInfo.Year != null) {  		book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  	}  	else {  		book.Year = String.Empty;  	}  	book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  }  else {  	book.BookName = String.Empty;  	book.Publisher = String.Empty;  	book.City = String.Empty;  	book.Year = String.Empty;  	book.Isbn = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.BookName = StringUtils.Truncate (fictionBook.PublishInfo.BookName ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Publisher = StringUtils.Truncate (fictionBook.PublishInfo.Publisher ?? String.Empty' 254);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.City = StringUtils.Truncate (fictionBook.PublishInfo.City ?? String.Empty' 50);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: if (fictionBook.PublishInfo.Year != null) {  	book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  }  else {  	book.Year = String.Empty;  }  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Year = StringUtils.Truncate (fictionBook.PublishInfo.Year.ToString ()' 10);  
Magic Number,Gremlin.FB2Librarian.Import,FirebirdDataAccess,C:\repos\Gremlin2_bookscanner\FirebirdDataAccess.cs,UpdateFictionBook,The following statement contains a magic number: book.Isbn = StringUtils.Truncate (fictionBook.PublishInfo.ISBN ?? String.Empty' 125);  
Magic Number,Gremlin.FB2Librarian.Import,Genre,C:\repos\Gremlin2_bookscanner\GenreTable.cs,Genre,The following statement contains a magic number: this.descriptions = new Dictionary<string' string> (2);  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,The following statement contains a magic number: ZipConstants.DefaultCodePage = 866;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,The following statement contains a magic number: SevenZipFormat.DefaultCodePage = 866;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,The following statement contains a magic number: bufferPool = new BufferPool (4' 16384);  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ImportForm,The following statement contains a magic number: bufferPool = new BufferPool (4' 16384);  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (BookInfo book in list) {  	string srcBookTitle = this.titleRegex.Replace (fictionBook.TitleInfo.BookTitle' "");  	string dstBookTitle = this.titleRegex.Replace (book.BookTitle' "");  	if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  			float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  			if (documentVersion > version) {  				checkStatus = ImportStatus.Updated;  				documentEntry.BookId = book.BookId;  				action = BookAction.Update;  				break;  			}  			checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  	else {  		string bookTitle = fictionBook.TitleInfo.BookTitle;  		int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  		double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  		if (metric > 70) {  			metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  			if (metric > 80) {  				continue;  			}  			if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  				string sequence = null;  				string sequenceNumber = null;  				foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  					sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  					if (sequenceInfo.Number != null) {  						sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  					}  					break;  				}  				if (!String.IsNullOrEmpty (sequenceNumber)) {  					if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  						continue;  					}  				}  			}  			if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  				checkStatus = ImportStatus.Duplicate;  			}  			else {  				checkStatus = ImportStatus.DuplicateIDsDiffer;  			}  		}  	}  	if (IsDuplicate (checkStatus)) {  		documentEntry.Status = checkStatus;  		documentEntry.BookId = book.BookId;  		if (checkStatus == ImportStatus.Duplicate) {  			if (documentEntry.FileDate > book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateNewer;  			}  			else if (documentEntry.FileDate < book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateOlder;  			}  		}  		break;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (BookInfo book in list) {  	string srcBookTitle = this.titleRegex.Replace (fictionBook.TitleInfo.BookTitle' "");  	string dstBookTitle = this.titleRegex.Replace (book.BookTitle' "");  	if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  			float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  			if (documentVersion > version) {  				checkStatus = ImportStatus.Updated;  				documentEntry.BookId = book.BookId;  				action = BookAction.Update;  				break;  			}  			checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  	else {  		string bookTitle = fictionBook.TitleInfo.BookTitle;  		int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  		double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  		if (metric > 70) {  			metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  			if (metric > 80) {  				continue;  			}  			if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  				string sequence = null;  				string sequenceNumber = null;  				foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  					sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  					if (sequenceInfo.Number != null) {  						sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  					}  					break;  				}  				if (!String.IsNullOrEmpty (sequenceNumber)) {  					if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  						continue;  					}  				}  			}  			if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  				checkStatus = ImportStatus.Duplicate;  			}  			else {  				checkStatus = ImportStatus.DuplicateIDsDiffer;  			}  		}  	}  	if (IsDuplicate (checkStatus)) {  		documentEntry.Status = checkStatus;  		documentEntry.BookId = book.BookId;  		if (checkStatus == ImportStatus.Duplicate) {  			if (documentEntry.FileDate > book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateNewer;  			}  			else if (documentEntry.FileDate < book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateOlder;  			}  		}  		break;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (BookInfo book in list) {  	string srcBookTitle = this.titleRegex.Replace (fictionBook.TitleInfo.BookTitle' "");  	string dstBookTitle = this.titleRegex.Replace (book.BookTitle' "");  	if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  			float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  			if (documentVersion > version) {  				checkStatus = ImportStatus.Updated;  				documentEntry.BookId = book.BookId;  				action = BookAction.Update;  				break;  			}  			checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  	else {  		string bookTitle = fictionBook.TitleInfo.BookTitle;  		int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  		double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  		if (metric > 70) {  			metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  			if (metric > 80) {  				continue;  			}  			if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  				string sequence = null;  				string sequenceNumber = null;  				foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  					sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  					if (sequenceInfo.Number != null) {  						sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  					}  					break;  				}  				if (!String.IsNullOrEmpty (sequenceNumber)) {  					if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  						continue;  					}  				}  			}  			if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  				checkStatus = ImportStatus.Duplicate;  			}  			else {  				checkStatus = ImportStatus.DuplicateIDsDiffer;  			}  		}  	}  	if (IsDuplicate (checkStatus)) {  		documentEntry.Status = checkStatus;  		documentEntry.BookId = book.BookId;  		if (checkStatus == ImportStatus.Duplicate) {  			if (documentEntry.FileDate > book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateNewer;  			}  			else if (documentEntry.FileDate < book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateOlder;  			}  		}  		break;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (BookInfo book in list) {  	string srcBookTitle = this.titleRegex.Replace (fictionBook.TitleInfo.BookTitle' "");  	string dstBookTitle = this.titleRegex.Replace (book.BookTitle' "");  	if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  			float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  			if (documentVersion > version) {  				checkStatus = ImportStatus.Updated;  				documentEntry.BookId = book.BookId;  				action = BookAction.Update;  				break;  			}  			checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  	else {  		string bookTitle = fictionBook.TitleInfo.BookTitle;  		int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  		double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  		if (metric > 70) {  			metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  			if (metric > 80) {  				continue;  			}  			if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  				string sequence = null;  				string sequenceNumber = null;  				foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  					sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  					if (sequenceInfo.Number != null) {  						sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  					}  					break;  				}  				if (!String.IsNullOrEmpty (sequenceNumber)) {  					if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  						continue;  					}  				}  			}  			if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  				checkStatus = ImportStatus.Duplicate;  			}  			else {  				checkStatus = ImportStatus.DuplicateIDsDiffer;  			}  		}  	}  	if (IsDuplicate (checkStatus)) {  		documentEntry.Status = checkStatus;  		documentEntry.BookId = book.BookId;  		if (checkStatus == ImportStatus.Duplicate) {  			if (documentEntry.FileDate > book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateNewer;  			}  			else if (documentEntry.FileDate < book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateOlder;  			}  		}  		break;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (BookInfo book in list) {  	string srcBookTitle = this.titleRegex.Replace (fictionBook.TitleInfo.BookTitle' "");  	string dstBookTitle = this.titleRegex.Replace (book.BookTitle' "");  	if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  			float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  			if (documentVersion > version) {  				checkStatus = ImportStatus.Updated;  				documentEntry.BookId = book.BookId;  				action = BookAction.Update;  				break;  			}  			checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  	else {  		string bookTitle = fictionBook.TitleInfo.BookTitle;  		int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  		double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  		if (metric > 70) {  			metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  			if (metric > 80) {  				continue;  			}  			if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  				string sequence = null;  				string sequenceNumber = null;  				foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  					sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  					if (sequenceInfo.Number != null) {  						sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  					}  					break;  				}  				if (!String.IsNullOrEmpty (sequenceNumber)) {  					if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  						continue;  					}  				}  			}  			if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  				checkStatus = ImportStatus.Duplicate;  			}  			else {  				checkStatus = ImportStatus.DuplicateIDsDiffer;  			}  		}  	}  	if (IsDuplicate (checkStatus)) {  		documentEntry.Status = checkStatus;  		documentEntry.BookId = book.BookId;  		if (checkStatus == ImportStatus.Duplicate) {  			if (documentEntry.FileDate > book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateNewer;  			}  			else if (documentEntry.FileDate < book.FileDate) {  				documentEntry.Status = ImportStatus.DuplicateOlder;  			}  		}  		break;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  		float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  		if (documentVersion > version) {  			checkStatus = ImportStatus.Updated;  			documentEntry.BookId = book.BookId;  			action = BookAction.Update;  			break;  		}  		checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  else {  	string bookTitle = fictionBook.TitleInfo.BookTitle;  	int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  	double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  	if (metric > 70) {  		metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  		if (metric > 80) {  			continue;  		}  		if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  			string sequence = null;  			string sequenceNumber = null;  			foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  				sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  				if (sequenceInfo.Number != null) {  					sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  				}  				break;  			}  			if (!String.IsNullOrEmpty (sequenceNumber)) {  				if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  					continue;  				}  			}  		}  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			checkStatus = ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  		float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  		if (documentVersion > version) {  			checkStatus = ImportStatus.Updated;  			documentEntry.BookId = book.BookId;  			action = BookAction.Update;  			break;  		}  		checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  else {  	string bookTitle = fictionBook.TitleInfo.BookTitle;  	int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  	double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  	if (metric > 70) {  		metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  		if (metric > 80) {  			continue;  		}  		if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  			string sequence = null;  			string sequenceNumber = null;  			foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  				sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  				if (sequenceInfo.Number != null) {  					sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  				}  				break;  			}  			if (!String.IsNullOrEmpty (sequenceNumber)) {  				if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  					continue;  				}  			}  		}  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			checkStatus = ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  		float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  		if (documentVersion > version) {  			checkStatus = ImportStatus.Updated;  			documentEntry.BookId = book.BookId;  			action = BookAction.Update;  			break;  		}  		checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  else {  	string bookTitle = fictionBook.TitleInfo.BookTitle;  	int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  	double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  	if (metric > 70) {  		metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  		if (metric > 80) {  			continue;  		}  		if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  			string sequence = null;  			string sequenceNumber = null;  			foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  				sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  				if (sequenceInfo.Number != null) {  					sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  				}  				break;  			}  			if (!String.IsNullOrEmpty (sequenceNumber)) {  				if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  					continue;  				}  			}  		}  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			checkStatus = ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  		float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  		if (documentVersion > version) {  			checkStatus = ImportStatus.Updated;  			documentEntry.BookId = book.BookId;  			action = BookAction.Update;  			break;  		}  		checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  else {  	string bookTitle = fictionBook.TitleInfo.BookTitle;  	int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  	double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  	if (metric > 70) {  		metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  		if (metric > 80) {  			continue;  		}  		if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  			string sequence = null;  			string sequenceNumber = null;  			foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  				sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  				if (sequenceInfo.Number != null) {  					sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  				}  				break;  			}  			if (!String.IsNullOrEmpty (sequenceNumber)) {  				if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  					continue;  				}  			}  		}  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			checkStatus = ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (String.Compare (srcBookTitle' dstBookTitle' true) == 0) {  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		float version = float.Parse (book.Version' CultureInfo.InvariantCulture);  		float documentVersion = fictionBook.DocumentInfo.Version ?? 0;  		if (documentVersion > version) {  			checkStatus = ImportStatus.Updated;  			documentEntry.BookId = book.BookId;  			action = BookAction.Update;  			break;  		}  		checkStatus = documentVersion < version ? ImportStatus.DuplicateOlder : ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  else {  	string bookTitle = fictionBook.TitleInfo.BookTitle;  	int distance = StringUtils.DamerauLevenshteinDistance (bookTitle' book.BookTitle);  	double metric = (1 - (double)distance / bookTitle.Length) * 100.0;  	if (metric > 70) {  		metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  		if (metric > 80) {  			continue;  		}  		if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  			string sequence = null;  			string sequenceNumber = null;  			foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  				sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  				if (sequenceInfo.Number != null) {  					sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  				}  				break;  			}  			if (!String.IsNullOrEmpty (sequenceNumber)) {  				if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  					continue;  				}  			}  		}  		if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  			checkStatus = ImportStatus.Duplicate;  		}  		else {  			checkStatus = ImportStatus.DuplicateIDsDiffer;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (metric > 70) {  	metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  	if (metric > 80) {  		continue;  	}  	if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  		string sequence = null;  		string sequenceNumber = null;  		foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  			sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  			if (sequenceInfo.Number != null) {  				sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  			}  			break;  		}  		if (!String.IsNullOrEmpty (sequenceNumber)) {  			if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  				continue;  			}  		}  	}  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		checkStatus = ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (metric > 70) {  	metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  	if (metric > 80) {  		continue;  	}  	if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  		string sequence = null;  		string sequenceNumber = null;  		foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  			sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  			if (sequenceInfo.Number != null) {  				sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  			}  			break;  		}  		if (!String.IsNullOrEmpty (sequenceNumber)) {  			if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  				continue;  			}  		}  	}  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		checkStatus = ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (metric > 70) {  	metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  	if (metric > 80) {  		continue;  	}  	if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  		string sequence = null;  		string sequenceNumber = null;  		foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  			sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  			if (sequenceInfo.Number != null) {  				sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  			}  			break;  		}  		if (!String.IsNullOrEmpty (sequenceNumber)) {  			if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  				continue;  			}  		}  	}  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		checkStatus = ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (metric > 70) {  	metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  	if (metric > 80) {  		continue;  	}  	if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  		string sequence = null;  		string sequenceNumber = null;  		foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  			sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  			if (sequenceInfo.Number != null) {  				sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  			}  			break;  		}  		if (!String.IsNullOrEmpty (sequenceNumber)) {  			if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  				continue;  			}  		}  	}  	if (String.Compare (book.Id' fictionBook.DocumentInfo.Id) == 0) {  		checkStatus = ImportStatus.Duplicate;  	}  	else {  		checkStatus = ImportStatus.DuplicateIDsDiffer;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: metric = StringUtils.LongestCommonSubstring (bookTitle' book.BookTitle) * 100.0 / bookTitle.Length;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (metric > 80) {  	continue;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: if (!String.IsNullOrEmpty (book.Sequence) && !String.IsNullOrEmpty (book.SequenceNumber)) {  	string sequence = null;  	string sequenceNumber = null;  	foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  		sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  		if (sequenceInfo.Number != null) {  			sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  		}  		break;  	}  	if (!String.IsNullOrEmpty (sequenceNumber)) {  		if (String.Compare (book.Sequence' sequence) == 0 && String.Compare (book.SequenceNumber' sequenceNumber) != 0) {  			continue;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: foreach (SequenceInfoNode sequenceInfo in fictionBook.TitleInfo.Sequences) {  	sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  	if (sequenceInfo.Number != null) {  		sequenceNumber = sequenceInfo.Number.Value.ToString ("000"' CultureInfo.InvariantCulture);  	}  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CheckForDuplicate,The following statement contains a magic number: sequence = StringUtils.Truncate (sequenceInfo.Name' 125);  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	try {  		db.BeginConnect ();  		this.processedItems = new Set<string> (this.fileEntries.Count);  		ctlProgressBar.Visibility = BarItemVisibility.Always;  		cmdStop.Visibility = BarItemVisibility.Always;  		Application.DoEvents ();  		bool stop = false;  		ItemClickEventHandler handler = delegate {  			stop = true;  		};  		cmdStop.ItemClick += handler;  		try {  			int index = 0;  			foreach (ImportFileEntry entry in fileEntries) {  				if (stop) {  					break;  				}  				if (!entry.Selected) {  					ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  					Application.DoEvents ();  					continue;  				}  				Process (entry);  				ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  				Application.DoEvents ();  			}  		}  		finally {  			cmdStop.ItemClick -= handler;  			ctlProgressBar.Visibility = BarItemVisibility.Never;  			cmdStop.Visibility = BarItemVisibility.Never;  		}  		grdSelectedFiles.RefreshDataSource ();  		StoreImportState ("FBScanner.xml");  	}  	finally {  		db.EndConnect ();  	}  }  finally {  	Cursor = Cursors.Default;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	try {  		db.BeginConnect ();  		this.processedItems = new Set<string> (this.fileEntries.Count);  		ctlProgressBar.Visibility = BarItemVisibility.Always;  		cmdStop.Visibility = BarItemVisibility.Always;  		Application.DoEvents ();  		bool stop = false;  		ItemClickEventHandler handler = delegate {  			stop = true;  		};  		cmdStop.ItemClick += handler;  		try {  			int index = 0;  			foreach (ImportFileEntry entry in fileEntries) {  				if (stop) {  					break;  				}  				if (!entry.Selected) {  					ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  					Application.DoEvents ();  					continue;  				}  				Process (entry);  				ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  				Application.DoEvents ();  			}  		}  		finally {  			cmdStop.ItemClick -= handler;  			ctlProgressBar.Visibility = BarItemVisibility.Never;  			cmdStop.Visibility = BarItemVisibility.Never;  		}  		grdSelectedFiles.RefreshDataSource ();  		StoreImportState ("FBScanner.xml");  	}  	finally {  		db.EndConnect ();  	}  }  finally {  	Cursor = Cursors.Default;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	db.BeginConnect ();  	this.processedItems = new Set<string> (this.fileEntries.Count);  	ctlProgressBar.Visibility = BarItemVisibility.Always;  	cmdStop.Visibility = BarItemVisibility.Always;  	Application.DoEvents ();  	bool stop = false;  	ItemClickEventHandler handler = delegate {  		stop = true;  	};  	cmdStop.ItemClick += handler;  	try {  		int index = 0;  		foreach (ImportFileEntry entry in fileEntries) {  			if (stop) {  				break;  			}  			if (!entry.Selected) {  				ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  				Application.DoEvents ();  				continue;  			}  			Process (entry);  			ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  			Application.DoEvents ();  		}  	}  	finally {  		cmdStop.ItemClick -= handler;  		ctlProgressBar.Visibility = BarItemVisibility.Never;  		cmdStop.Visibility = BarItemVisibility.Never;  	}  	grdSelectedFiles.RefreshDataSource ();  	StoreImportState ("FBScanner.xml");  }  finally {  	db.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	db.BeginConnect ();  	this.processedItems = new Set<string> (this.fileEntries.Count);  	ctlProgressBar.Visibility = BarItemVisibility.Always;  	cmdStop.Visibility = BarItemVisibility.Always;  	Application.DoEvents ();  	bool stop = false;  	ItemClickEventHandler handler = delegate {  		stop = true;  	};  	cmdStop.ItemClick += handler;  	try {  		int index = 0;  		foreach (ImportFileEntry entry in fileEntries) {  			if (stop) {  				break;  			}  			if (!entry.Selected) {  				ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  				Application.DoEvents ();  				continue;  			}  			Process (entry);  			ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  			Application.DoEvents ();  		}  	}  	finally {  		cmdStop.ItemClick -= handler;  		ctlProgressBar.Visibility = BarItemVisibility.Never;  		cmdStop.Visibility = BarItemVisibility.Never;  	}  	grdSelectedFiles.RefreshDataSource ();  	StoreImportState ("FBScanner.xml");  }  finally {  	db.EndConnect ();  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	int index = 0;  	foreach (ImportFileEntry entry in fileEntries) {  		if (stop) {  			break;  		}  		if (!entry.Selected) {  			ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  			Application.DoEvents ();  			continue;  		}  		Process (entry);  		ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  		Application.DoEvents ();  	}  }  finally {  	cmdStop.ItemClick -= handler;  	ctlProgressBar.Visibility = BarItemVisibility.Never;  	cmdStop.Visibility = BarItemVisibility.Never;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: try {  	int index = 0;  	foreach (ImportFileEntry entry in fileEntries) {  		if (stop) {  			break;  		}  		if (!entry.Selected) {  			ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  			Application.DoEvents ();  			continue;  		}  		Process (entry);  		ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  		Application.DoEvents ();  	}  }  finally {  	cmdStop.ItemClick -= handler;  	ctlProgressBar.Visibility = BarItemVisibility.Never;  	cmdStop.Visibility = BarItemVisibility.Never;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: foreach (ImportFileEntry entry in fileEntries) {  	if (stop) {  		break;  	}  	if (!entry.Selected) {  		ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  		Application.DoEvents ();  		continue;  	}  	Process (entry);  	ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  	Application.DoEvents ();  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: foreach (ImportFileEntry entry in fileEntries) {  	if (stop) {  		break;  	}  	if (!entry.Selected) {  		ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  		Application.DoEvents ();  		continue;  	}  	Process (entry);  	ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  	Application.DoEvents ();  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: if (!entry.Selected) {  	ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  	Application.DoEvents ();  	continue;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdStartImport_Click,The following statement contains a magic number: ctlProgressBar.EditValue = ((double)++index / fileEntries.Count) * 100;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: switch (legendViewMode) {  case LegendViewMode.None:  case LegendViewMode.ErrorInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Never;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.OnlyInRuntime;  	//emptySpaceItem1.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.BookInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.ConflictInfo:  	layoutControl1.BeginUpdate ();  	int width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = width / 2;  	splitterItem2.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Width = width / 2;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: switch (legendViewMode) {  case LegendViewMode.None:  case LegendViewMode.ErrorInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Never;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.OnlyInRuntime;  	//emptySpaceItem1.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.BookInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.ConflictInfo:  	layoutControl1.BeginUpdate ();  	int width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = width / 2;  	splitterItem2.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Width = width / 2;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: switch (legendViewMode) {  case LegendViewMode.None:  case LegendViewMode.ErrorInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Never;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.OnlyInRuntime;  	//emptySpaceItem1.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.BookInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.ConflictInfo:  	layoutControl1.BeginUpdate ();  	int width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = width / 2;  	splitterItem2.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Width = width / 2;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: switch (legendViewMode) {  case LegendViewMode.None:  case LegendViewMode.ErrorInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Never;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.OnlyInRuntime;  	//emptySpaceItem1.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.BookInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.ConflictInfo:  	layoutControl1.BeginUpdate ();  	int width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = width / 2;  	splitterItem2.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Width = width / 2;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  }  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: layoutControlGroup2.Width = width / 2;  
Magic Number,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following statement contains a magic number: layoutControlGroup3.Width = width / 2;  
Magic Number,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (libraryId != null ? libraryId.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (firstName != null ? firstName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (middleName != null ? middleName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (lastName != null ? lastName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.Entities,Author,C:\repos\Gremlin2_bookscanner\Entities\Author.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (nickName != null ? nickName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.Entities,SequenceInfo,C:\repos\Gremlin2_bookscanner\Entities\SequenceInfo.cs,GetHashCode,The following statement contains a magic number: return sequenceId.GetHashCode () + 29 * (sequenceName != null ? sequenceName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (middleName != null ? middleName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (lastName != null ? lastName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (nickName != null ? nickName.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.ObjectModel,AuthorInfoNode,C:\repos\Gremlin2_bookscanner\ObjectModel\AuthorInfoNode.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (id != null ? id.GetHashCode () : 0);  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,SevenZipFileSystem,The following statement contains a magic number: if (parentLayer.FileSystem is LocalFileSystem || parentLayer.Content.Size > 1048576) {  	file = parentLayer.FileSystem.replicateFile (parentLayer' Selectors.SELECT_SELF);  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetArchiveStream,The following statement contains a magic number: using (Stream input = ParentLayer.Content.InputStream) {  	byte[] buffer = new byte[16384];  	bool copying = true;  	while (copying) {  		int bytesRead = input.Read (buffer' 0' buffer.Length);  		if (bytesRead > 0) {  			stream.Write (buffer' 0' bytesRead);  		}  		else {  			stream.Flush ();  			copying = false;  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: try {  	IList strongRef = new ArrayList (100);  	using (Stream stream = GetArchiveStream ()) {  		using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  			using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  				ulong checkPos = 128 * 1024;  				if (archive.Open (wrapper' ref checkPos' callback) != 0) {  					throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  				}  				uint count = archive.GetNumberOfItems ();  				for (uint index = 0; index < count; index++) {  					PropVariant entryName = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  					PropVariant hostSystem = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  					string path = (string)entryName.GetObject ();  					if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  						if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  							path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  						}  					}  					IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  					PropVariant isFolderProperty = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  					SevenZipFileObject fileObj;  					if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  						fileObj = (SevenZipFileObject)getFileFromCache (name);  						fileObj.Index = index;  						continue;  					}  					fileObj = createFileObject (name' index);  					putFileToCache (fileObj);  					strongRef.Add (fileObj);  					fileObj.holdObject (strongRef);  					SevenZipFileObject parent = null;  					for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  						// Locate the parent  						parent = (SevenZipFileObject)getFileFromCache (parentName);  						if (parent == null) {  							parent = createFileObject (parentName' UInt32.MaxValue);  							putFileToCache (parent);  							strongRef.Add (parent);  							parent.holdObject (strongRef);  						}  						// Attach child to parent  						parent.attachChild (fileObj.Name);  					}  				}  			}  		}  	}  }  finally {  	closeCommunicationLink ();  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: try {  	IList strongRef = new ArrayList (100);  	using (Stream stream = GetArchiveStream ()) {  		using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  			using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  				ulong checkPos = 128 * 1024;  				if (archive.Open (wrapper' ref checkPos' callback) != 0) {  					throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  				}  				uint count = archive.GetNumberOfItems ();  				for (uint index = 0; index < count; index++) {  					PropVariant entryName = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  					PropVariant hostSystem = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  					string path = (string)entryName.GetObject ();  					if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  						if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  							path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  						}  					}  					IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  					PropVariant isFolderProperty = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  					SevenZipFileObject fileObj;  					if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  						fileObj = (SevenZipFileObject)getFileFromCache (name);  						fileObj.Index = index;  						continue;  					}  					fileObj = createFileObject (name' index);  					putFileToCache (fileObj);  					strongRef.Add (fileObj);  					fileObj.holdObject (strongRef);  					SevenZipFileObject parent = null;  					for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  						// Locate the parent  						parent = (SevenZipFileObject)getFileFromCache (parentName);  						if (parent == null) {  							parent = createFileObject (parentName' UInt32.MaxValue);  							putFileToCache (parent);  							strongRef.Add (parent);  							parent.holdObject (strongRef);  						}  						// Attach child to parent  						parent.attachChild (fileObj.Name);  					}  				}  			}  		}  	}  }  finally {  	closeCommunicationLink ();  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: try {  	IList strongRef = new ArrayList (100);  	using (Stream stream = GetArchiveStream ()) {  		using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  			using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  				ulong checkPos = 128 * 1024;  				if (archive.Open (wrapper' ref checkPos' callback) != 0) {  					throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  				}  				uint count = archive.GetNumberOfItems ();  				for (uint index = 0; index < count; index++) {  					PropVariant entryName = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  					PropVariant hostSystem = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  					string path = (string)entryName.GetObject ();  					if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  						if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  							path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  						}  					}  					IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  					PropVariant isFolderProperty = new PropVariant ();  					archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  					SevenZipFileObject fileObj;  					if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  						fileObj = (SevenZipFileObject)getFileFromCache (name);  						fileObj.Index = index;  						continue;  					}  					fileObj = createFileObject (name' index);  					putFileToCache (fileObj);  					strongRef.Add (fileObj);  					fileObj.holdObject (strongRef);  					SevenZipFileObject parent = null;  					for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  						// Locate the parent  						parent = (SevenZipFileObject)getFileFromCache (parentName);  						if (parent == null) {  							parent = createFileObject (parentName' UInt32.MaxValue);  							putFileToCache (parent);  							strongRef.Add (parent);  							parent.holdObject (strongRef);  						}  						// Attach child to parent  						parent.attachChild (fileObj.Name);  					}  				}  			}  		}  	}  }  finally {  	closeCommunicationLink ();  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (Stream stream = GetArchiveStream ()) {  	using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  		using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  			ulong checkPos = 128 * 1024;  			if (archive.Open (wrapper' ref checkPos' callback) != 0) {  				throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  			}  			uint count = archive.GetNumberOfItems ();  			for (uint index = 0; index < count; index++) {  				PropVariant entryName = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  				PropVariant hostSystem = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  				string path = (string)entryName.GetObject ();  				if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  					if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  						path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  					}  				}  				IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  				PropVariant isFolderProperty = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  				SevenZipFileObject fileObj;  				if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  					fileObj = (SevenZipFileObject)getFileFromCache (name);  					fileObj.Index = index;  					continue;  				}  				fileObj = createFileObject (name' index);  				putFileToCache (fileObj);  				strongRef.Add (fileObj);  				fileObj.holdObject (strongRef);  				SevenZipFileObject parent = null;  				for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  					// Locate the parent  					parent = (SevenZipFileObject)getFileFromCache (parentName);  					if (parent == null) {  						parent = createFileObject (parentName' UInt32.MaxValue);  						putFileToCache (parent);  						strongRef.Add (parent);  						parent.holdObject (strongRef);  					}  					// Attach child to parent  					parent.attachChild (fileObj.Name);  				}  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (Stream stream = GetArchiveStream ()) {  	using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  		using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  			ulong checkPos = 128 * 1024;  			if (archive.Open (wrapper' ref checkPos' callback) != 0) {  				throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  			}  			uint count = archive.GetNumberOfItems ();  			for (uint index = 0; index < count; index++) {  				PropVariant entryName = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  				PropVariant hostSystem = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  				string path = (string)entryName.GetObject ();  				if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  					if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  						path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  					}  				}  				IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  				PropVariant isFolderProperty = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  				SevenZipFileObject fileObj;  				if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  					fileObj = (SevenZipFileObject)getFileFromCache (name);  					fileObj.Index = index;  					continue;  				}  				fileObj = createFileObject (name' index);  				putFileToCache (fileObj);  				strongRef.Add (fileObj);  				fileObj.holdObject (strongRef);  				SevenZipFileObject parent = null;  				for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  					// Locate the parent  					parent = (SevenZipFileObject)getFileFromCache (parentName);  					if (parent == null) {  						parent = createFileObject (parentName' UInt32.MaxValue);  						putFileToCache (parent);  						strongRef.Add (parent);  						parent.holdObject (strongRef);  					}  					// Attach child to parent  					parent.attachChild (fileObj.Name);  				}  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  	using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  		ulong checkPos = 128 * 1024;  		if (archive.Open (wrapper' ref checkPos' callback) != 0) {  			throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  		}  		uint count = archive.GetNumberOfItems ();  		for (uint index = 0; index < count; index++) {  			PropVariant entryName = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  			PropVariant hostSystem = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  			string path = (string)entryName.GetObject ();  			if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  				if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  					path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  				}  			}  			IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  			PropVariant isFolderProperty = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  			SevenZipFileObject fileObj;  			if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  				fileObj = (SevenZipFileObject)getFileFromCache (name);  				fileObj.Index = index;  				continue;  			}  			fileObj = createFileObject (name' index);  			putFileToCache (fileObj);  			strongRef.Add (fileObj);  			fileObj.holdObject (strongRef);  			SevenZipFileObject parent = null;  			for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  				// Locate the parent  				parent = (SevenZipFileObject)getFileFromCache (parentName);  				if (parent == null) {  					parent = createFileObject (parentName' UInt32.MaxValue);  					putFileToCache (parent);  					strongRef.Add (parent);  					parent.holdObject (strongRef);  				}  				// Attach child to parent  				parent.attachChild (fileObj.Name);  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  	using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  		ulong checkPos = 128 * 1024;  		if (archive.Open (wrapper' ref checkPos' callback) != 0) {  			throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  		}  		uint count = archive.GetNumberOfItems ();  		for (uint index = 0; index < count; index++) {  			PropVariant entryName = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  			PropVariant hostSystem = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  			string path = (string)entryName.GetObject ();  			if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  				if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  					path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  				}  			}  			IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  			PropVariant isFolderProperty = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  			SevenZipFileObject fileObj;  			if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  				fileObj = (SevenZipFileObject)getFileFromCache (name);  				fileObj.Index = index;  				continue;  			}  			fileObj = createFileObject (name' index);  			putFileToCache (fileObj);  			strongRef.Add (fileObj);  			fileObj.holdObject (strongRef);  			SevenZipFileObject parent = null;  			for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  				// Locate the parent  				parent = (SevenZipFileObject)getFileFromCache (parentName);  				if (parent == null) {  					parent = createFileObject (parentName' UInt32.MaxValue);  					putFileToCache (parent);  					strongRef.Add (parent);  					parent.holdObject (strongRef);  				}  				// Attach child to parent  				parent.attachChild (fileObj.Name);  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  	ulong checkPos = 128 * 1024;  	if (archive.Open (wrapper' ref checkPos' callback) != 0) {  		throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  	}  	uint count = archive.GetNumberOfItems ();  	for (uint index = 0; index < count; index++) {  		PropVariant entryName = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  		PropVariant hostSystem = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  		string path = (string)entryName.GetObject ();  		if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  			if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  				path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  			}  		}  		IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  		PropVariant isFolderProperty = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  		SevenZipFileObject fileObj;  		if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  			fileObj = (SevenZipFileObject)getFileFromCache (name);  			fileObj.Index = index;  			continue;  		}  		fileObj = createFileObject (name' index);  		putFileToCache (fileObj);  		strongRef.Add (fileObj);  		fileObj.holdObject (strongRef);  		SevenZipFileObject parent = null;  		for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  			// Locate the parent  			parent = (SevenZipFileObject)getFileFromCache (parentName);  			if (parent == null) {  				parent = createFileObject (parentName' UInt32.MaxValue);  				putFileToCache (parent);  				strongRef.Add (parent);  				parent.holdObject (strongRef);  			}  			// Attach child to parent  			parent.attachChild (fileObj.Name);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,init,The following statement contains a magic number: using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  	ulong checkPos = 128 * 1024;  	if (archive.Open (wrapper' ref checkPos' callback) != 0) {  		throw new FileSystemException (String.Format ("Could not open Zip file \"{0}\"."' ParentLayer));  	}  	uint count = archive.GetNumberOfItems ();  	for (uint index = 0; index < count; index++) {  		PropVariant entryName = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidPath' ref entryName);  		PropVariant hostSystem = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidHostOS' ref hostSystem);  		string path = (string)entryName.GetObject ();  		if (String.Compare ((string)hostSystem.GetObject ()' "FAT"' 0) == 0) {  			if (SevenZipFormat.SystemCodePage != SevenZipFormat.DefaultCodePage) {  				path = SevenZipFormat.DefaultEncoding.GetString (SevenZipFormat.SystemEncoding.GetBytes (path));  			}  		}  		IFileName name = FileSystemManager.resolveName (RootName' VirtualFileSystem.Provider.UriParser.encode (path));  		PropVariant isFolderProperty = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidIsFolder' ref isFolderProperty);  		SevenZipFileObject fileObj;  		if ((bool)isFolderProperty.GetObject () && getFileFromCache (name) != null) {  			fileObj = (SevenZipFileObject)getFileFromCache (name);  			fileObj.Index = index;  			continue;  		}  		fileObj = createFileObject (name' index);  		putFileToCache (fileObj);  		strongRef.Add (fileObj);  		fileObj.holdObject (strongRef);  		SevenZipFileObject parent = null;  		for (IFileName parentName = name.Parent; parentName != null; fileObj = parent' parentName = parentName.Parent) {  			// Locate the parent  			parent = (SevenZipFileObject)getFileFromCache (parentName);  			if (parent == null) {  				parent = createFileObject (parentName' UInt32.MaxValue);  				putFileToCache (parent);  				strongRef.Add (parent);  				parent.holdObject (strongRef);  			}  			// Attach child to parent  			parent.attachChild (fileObj.Name);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (Stream stream = GetArchiveStream ()) {  	using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  		using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  			ulong checkPos = 128 * 1024;  			if (archive.Open (wrapper' ref checkPos' callback) != 0) {  				throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  			}  			try {  				PropVariant sizeProperty = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  				// TODO: Limit memory usage.  				MemoryStream ms = new MemoryStream (sizeProperty.intValue);  				archive.Extract (new[] {  					index  				}' 1' 0' new ArchiveExtractCallback (ms));  				ms.Seek (0' SeekOrigin.Begin);  				return ms;  			}  			finally {  				closeCommunicationLink ();  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (Stream stream = GetArchiveStream ()) {  	using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  		using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  			ulong checkPos = 128 * 1024;  			if (archive.Open (wrapper' ref checkPos' callback) != 0) {  				throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  			}  			try {  				PropVariant sizeProperty = new PropVariant ();  				archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  				// TODO: Limit memory usage.  				MemoryStream ms = new MemoryStream (sizeProperty.intValue);  				archive.Extract (new[] {  					index  				}' 1' 0' new ArchiveExtractCallback (ms));  				ms.Seek (0' SeekOrigin.Begin);  				return ms;  			}  			finally {  				closeCommunicationLink ();  			}  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  	using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  		ulong checkPos = 128 * 1024;  		if (archive.Open (wrapper' ref checkPos' callback) != 0) {  			throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  		}  		try {  			PropVariant sizeProperty = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  			// TODO: Limit memory usage.  			MemoryStream ms = new MemoryStream (sizeProperty.intValue);  			archive.Extract (new[] {  				index  			}' 1' 0' new ArchiveExtractCallback (ms));  			ms.Seek (0' SeekOrigin.Begin);  			return ms;  		}  		finally {  			closeCommunicationLink ();  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (InStreamWrapper wrapper = new InStreamWrapper (stream)) {  	using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  		ulong checkPos = 128 * 1024;  		if (archive.Open (wrapper' ref checkPos' callback) != 0) {  			throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  		}  		try {  			PropVariant sizeProperty = new PropVariant ();  			archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  			// TODO: Limit memory usage.  			MemoryStream ms = new MemoryStream (sizeProperty.intValue);  			archive.Extract (new[] {  				index  			}' 1' 0' new ArchiveExtractCallback (ms));  			ms.Seek (0' SeekOrigin.Begin);  			return ms;  		}  		finally {  			closeCommunicationLink ();  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  	ulong checkPos = 128 * 1024;  	if (archive.Open (wrapper' ref checkPos' callback) != 0) {  		throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  	}  	try {  		PropVariant sizeProperty = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  		// TODO: Limit memory usage.  		MemoryStream ms = new MemoryStream (sizeProperty.intValue);  		archive.Extract (new[] {  			index  		}' 1' 0' new ArchiveExtractCallback (ms));  		ms.Seek (0' SeekOrigin.Begin);  		return ms;  	}  	finally {  		closeCommunicationLink ();  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.SevenZip,SevenZipFileSystem,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipFileSystem.cs,GetInputStream,The following statement contains a magic number: using (ArchiveOpenCallback callback = new ArchiveOpenCallback (this' ParentLayer.Parent' file)) {  	ulong checkPos = 128 * 1024;  	if (archive.Open (wrapper' ref checkPos' callback) != 0) {  		throw new FileSystemException (String.Format ("Could not open archive file \"{0}\"."' ParentLayer));  	}  	try {  		PropVariant sizeProperty = new PropVariant ();  		archive.GetProperty (index' ItemPropId.kpidSize' ref sizeProperty);  		// TODO: Limit memory usage.  		MemoryStream ms = new MemoryStream (sizeProperty.intValue);  		archive.Extract (new[] {  			index  		}' 1' 0' new ArchiveExtractCallback (ms));  		ms.Seek (0' SeekOrigin.Begin);  		return ms;  	}  	finally {  		closeCommunicationLink ();  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,StringUtils,The following statement contains a magic number: table = new Dictionary<char' string> (75);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (i = 1; i <= src.Length; i++) {  	for (j = 1; j <= dest.Length; j++) {  		int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  		d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  		Math.Min (d [i' j - 1] + 1' // Insertion  		d [i - 1' j - 1] + cost));  		// Substitution  		if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  			d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (i = 1; i <= src.Length; i++) {  	for (j = 1; j <= dest.Length; j++) {  		int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  		d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  		Math.Min (d [i' j - 1] + 1' // Insertion  		d [i - 1' j - 1] + cost));  		// Substitution  		if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  			d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (i = 1; i <= src.Length; i++) {  	for (j = 1; j <= dest.Length; j++) {  		int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  		d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  		Math.Min (d [i' j - 1] + 1' // Insertion  		d [i - 1' j - 1] + cost));  		// Substitution  		if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  			d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (i = 1; i <= src.Length; i++) {  	for (j = 1; j <= dest.Length; j++) {  		int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  		d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  		Math.Min (d [i' j - 1] + 1' // Insertion  		d [i - 1' j - 1] + cost));  		// Substitution  		if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  			d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  		}  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (j = 1; j <= dest.Length; j++) {  	int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  	d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  	Math.Min (d [i' j - 1] + 1' // Insertion  	d [i - 1' j - 1] + cost));  	// Substitution  	if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  		d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (j = 1; j <= dest.Length; j++) {  	int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  	d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  	Math.Min (d [i' j - 1] + 1' // Insertion  	d [i - 1' j - 1] + cost));  	// Substitution  	if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  		d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (j = 1; j <= dest.Length; j++) {  	int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  	d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  	Math.Min (d [i' j - 1] + 1' // Insertion  	d [i - 1' j - 1] + cost));  	// Substitution  	if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  		d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: for (j = 1; j <= dest.Length; j++) {  	int cost = (src [i - 1] == dest [j - 1]) ? 0 : 1;  	d [i' j] = Math.Min (d [i - 1' j] + 1' // Deletion  	Math.Min (d [i' j - 1] + 1' // Insertion  	d [i - 1' j - 1] + cost));  	// Substitution  	if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  		d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  	d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  	d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  	d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: if ((i > 1) && (j > 1) && (src [i - 1] == dest [j - 2]) && (src [i - 2] == dest [j - 1])) {  	d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,DamerauLevenshteinDistance,The following statement contains a magic number: d [i' j] = Math.Min (d [i' j]' d [i - 2' j - 2] + cost);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: if (length > 2 && s [length - 2] == '=') {  	padding = 2;  }  else if (length > 1 && s [length - 1] == '=') {  	padding = 1;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: if (length > 2 && s [length - 2] == '=') {  	padding = 2;  }  else if (length > 1 && s [length - 1] == '=') {  	padding = 1;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: if (length > 2 && s [length - 2] == '=') {  	padding = 2;  }  else if (length > 1 && s [length - 1] == '=') {  	padding = 1;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: padding = 2;  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	bool finalBlock = i == blocks - 1;  	bool pad2 = false;  	bool pad1 = false;  	if (finalBlock) {  		pad2 = padding == 2;  		pad1 = padding > 0;  	}  	int index = i * 4;  	byte temp1 = CharToSixBit (s [index]);  	byte temp2 = CharToSixBit (s [index + 1]);  	byte temp3 = CharToSixBit (s [index + 2]);  	byte temp4 = CharToSixBit (s [index + 3]);  	byte b = (byte)(temp1 << 2);  	byte b1 = (byte)((temp2 & 0x30) >> 4);  	b1 += b;  	b = (byte)((temp2 & 0x0F) << 4);  	byte b2 = (byte)((temp3 & 0x3C) >> 2);  	b2 += b;  	b = (byte)((temp3 & 0x03) << 6);  	byte b3 = temp4;  	b3 += b;  	index = i * 3;  	data [index] = b1;  	if (!pad2) {  		data [index + 1] = b2;  	}  	if (!pad1) {  		data [index + 2] = b3;  	}  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: if (finalBlock) {  	pad2 = padding == 2;  	pad1 = padding > 0;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: pad2 = padding == 2;  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: b = (byte)((temp2 & 0x0F) << 4);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: b = (byte)((temp3 & 0x03) << 6);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: index = i * 3;  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: if (!pad1) {  	data [index + 2] = b3;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,FromBase64,The following statement contains a magic number: data [index + 2] = b3;  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	return (byte)(c - 'A');  }  else if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	return (byte)(c - 'A');  }  else if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	return (byte)(c - 'A');  }  else if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'A' && c <= 'Z') {  	return (byte)(c - 'A');  }  else if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= 'a' && c <= 'z') {  	return (byte)(c - 'a' + 26);  }  else if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: return (byte)(c - 'a' + 26);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	return (byte)(c - '0' + 52);  }  else if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: return (byte)(c - '0' + 52);  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c == '+') {  	return 62;  }  else if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: return 62;  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: if (c == '/') {  	return 63;  }  
Magic Number,Gremlin.FB2Librarian.Import.Utils,StringUtils,C:\repos\Gremlin2_bookscanner\Utils\StringUtils.cs,CharToSixBit,The following statement contains a magic number: return 63;  
Magic Number,Gremlin.FB2Librarian.Import.Mapping,ScalarTypeMapper,C:\repos\Gremlin2_bookscanner\Mapping\ScalarTypeMapper.cs,ScalarTypeMapper,The following statement contains a magic number: typeMap = new Dictionary<TypeMap' object> (445);  
Magic Number,Gremlin.FB2Librarian.Import.Mapping,TypeMap,C:\repos\Gremlin2_bookscanner\Mapping\TypeMap.cs,GetHashCode,The following statement contains a magic number: return fromType.GetHashCode () + 29 * toType.GetHashCode ();  
Magic Number,Gremlin.FB2Librarian.Import.Mapping,TypeMapper,C:\repos\Gremlin2_bookscanner\Mapping\TypeMapper.cs,TypeMapper,The following statement contains a magic number: typeMap = new Dictionary<TypeMap' DataMapper> (445);  
Magic Number,Gremlin.FB2Librarian.Import.ObjectMetadata,MetadataCache,C:\repos\Gremlin2_bookscanner\ObjectMetadata\MetadataCache.cs,MetadataCache,The following statement contains a magic number: this.cache = new Dictionary<Type' EntityInfo> (10);  
Missing Default,Gremlin.FB2Librarian.Import,GenreDescriptionElement,C:\repos\Gremlin2_bookscanner\FileNameProvider.cs,GenreDescriptionElement,The following switch statement is missing a default case: switch (template) {  case "*GNR*":  	lang = "ru";  	break;  case "*GNE*":  	lang = "en";  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,GenreTable,C:\repos\Gremlin2_bookscanner\GenreTable.cs,ReadGenreList,The following switch statement is missing a default case: switch (childElement.LocalName) {  case "genre-descr":  	XmlAttribute langAttribute = childElement.Attributes ["lang"];  	XmlAttribute titleAttribute = childElement.Attributes ["title"];  	if (langAttribute != null && !String.IsNullOrEmpty (langAttribute.Value)) {  		genre.AddDescription (langAttribute.Value' titleAttribute == null ? String.Empty : titleAttribute.Value);  	}  	break;  case "genre-alt":  	XmlAttribute valueAttribute = childElement.Attributes ["value"];  	if (valueAttribute != null && !String.IsNullOrEmpty (valueAttribute.Value)) {  		instance.genreMap [valueAttribute.Value] = genreName.Value;  	}  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDirectory,The following switch statement is missing a default case: switch (extension) {  case "fb2":  	ImportFileEntry entry = new ImportFileEntry (chkSelectFoundFiles.Checked' name.BaseName' name.URI);  	entry.Status = ImportStatus.ReadyToProcess;  	if (entry.Selected) {  		this.processLegend.IncrementCounter (ImportStatus.ReadyToProcess);  		this.grdLegend.RefreshDataSource ();  	}  	this.fileEntries.Add (entry);  	this.excludeList.Add (file.Name.URI' entry);  	break;  case "zip":  	String url = "zip:" + name.URI + "!/";  	//string filename = Path.ChangeExtension(name.BaseName' null);  	//if(String.Compare(Path.GetExtension(filename)' ".fb2"' true) == 0)  	//{  	//    if (this.excludeList.ContainsKey(url + filename))  	//    {  	//        continue;  	//    }  	//    entry = new ImportFileEntry(chkSelectFoundFiles.Checked' filename' url + filename);  	//    entry.Status = ImportStatus.ReadyToProcess;  	//    if (entry.Selected)  	//    {  	//        this.processLegend.IncrementCounter(ImportStatus.ReadyToProcess);  	//        this.grdLegend.RefreshDataSource();  	//    }  	//    this.fileEntries.Add(entry);  	//    this.excludeList.Add(entry.Uri' entry);  	//    break;  	//}  	IFileObject zipFile = manager.resolveFile (url);  	ProcessDirectory (zipFile' true);  	break;  case "7z":  	IFileObject sevenZipFile = manager.resolveFile ("sevenzip:" + name.URI + "!/");  	ProcessDirectory (sevenZipFile' true);  	break;  case "rar":  	IFileObject rarFile = manager.resolveFile ("rar:" + name.URI + "!/");  	ProcessDirectory (rarFile' true);  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDocument,The following switch statement is missing a default case: switch (action) {  case BookAction.Add:  	importResult = ImportStatus.Added;  	bookInfo = this.database.CreateFictionBook (fictionBook' stream' documentEntry);  	documentEntry.BookId = bookInfo.BookId;  	documentEntry.Status = ImportStatus.Added;  	break;  case BookAction.Update:  	importResult = ImportStatus.Updated;  	bookInfo = this.database.LoadBookInfoByBookId (documentEntry.BookId ?? -1);  	this.database.UpdateFictionBook (bookInfo' fictionBook' stream' documentEntry);  	documentEntry.BookId = bookInfo.BookId;  	documentEntry.Status = ImportStatus.Updated;  	break;  case BookAction.None:  	importResult = documentEntry.Status;  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,ProcessDocument,The following switch statement is missing a default case: switch (documentEntry.Status) {  case ImportStatus.Added:  case ImportStatus.Updated:  case ImportStatus.Duplicate:  case ImportStatus.DuplicateIDsDiffer:  case ImportStatus.DuplicateNewer:  case ImportStatus.DuplicateOlder:  	this.processLegend.IncrementCounter (documentEntry.Status);  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,CreateOrReplace,The following switch statement is missing a default case: switch (action) {  case BookAction.Add:  	BookInfo bookInfo = this.database.CreateFictionBook (fictionBook' memoryStream' documentEntry);  	documentEntry.BookId = bookInfo.BookId;  	importResult = ImportStatus.Added;  	break;  case BookAction.Update:  	bookInfo = database.LoadBookInfoByBookId (documentEntry.BookId ?? -1);  	this.database.UpdateFictionBook (bookInfo' fictionBook' memoryStream' documentEntry);  	importResult = ImportStatus.Updated;  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,Process,The following switch statement is missing a default case: switch (documentEntry.Status) {  case ImportStatus.Added:  case ImportStatus.FilteredOut:  case ImportStatus.Updated:  case ImportStatus.Duplicate:  	entry.Selected = false;  	this.processLegend.DecrementCounter (ImportStatus.ReadyToProcess);  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,Process,The following switch statement is missing a default case: switch (documentEntry.Status) {  case ImportStatus.Added:  case ImportStatus.FilteredOut:  case ImportStatus.Updated:  case ImportStatus.Duplicate:  	if (entry.Selected) {  		this.processLegend.DecrementCounter (ImportStatus.ReadyToProcess);  		entry.Selected = false;  	}  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdRemoveProcessed_ItemClick,The following switch statement is missing a default case: switch (entry.Status) {  case ImportStatus.Added:  case ImportStatus.Updated:  	if (excludeList.ContainsKey (entry.Uri)) {  		excludeList.Remove (entry.Uri);  	}  	fileEntries.RemoveAt (index);  	continue;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,OnLegendViewModeChanged,The following switch statement is missing a default case: switch (legendViewMode) {  case LegendViewMode.None:  case LegendViewMode.ErrorInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Never;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.OnlyInRuntime;  	//emptySpaceItem1.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.BookInfo:  	layoutControl1.BeginUpdate ();  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	splitterItem2.Visibility = LayoutVisibility.Never;  	layoutControlGroup3.Visibility = LayoutVisibility.Never;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  case LegendViewMode.ConflictInfo:  	layoutControl1.BeginUpdate ();  	int width = layoutControl1.Width - layoutControlGroup1.Width - splitterItem1.Width * 2;  	layoutControlGroup2.Visibility = LayoutVisibility.Always;  	layoutControlGroup2.Width = width / 2;  	splitterItem2.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Visibility = LayoutVisibility.Always;  	layoutControlGroup3.Width = width / 2;  	emptySpaceItem1.Visibility = LayoutVisibility.Never;  	layoutControl1.EndUpdate ();  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,grvSelectedFiles_ShowGridMenu,The following switch statement is missing a default case: switch (e.MenuType) {  case GridMenuType.Row:  	grvSelectedFiles.FocusedRowHandle = hitInfo.RowHandle;  	mnuSelectedFiles.ShowPopup (this.ctlCommandManager' grdSelectedFiles.PointToScreen (e.Point));  	break;  case GridMenuType.User:  	mnuSelectedFiles.ShowPopup (this.ctlCommandManager' grdSelectedFiles.PointToScreen (e.Point));  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,grvResult_ShowGridMenu,The following switch statement is missing a default case: switch (e.MenuType) {  case GridMenuType.Row:  	view.FocusedRowHandle = hitInfo.RowHandle;  	goto case GridMenuType.User;  case GridMenuType.User:  	FocusedRowChanged (view.FocusedRowHandle);  	mnuResult.ShowPopup (this.ctlCommandManager' this.grdResult.PointToScreen (e.Point));  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdReprocessItem_ItemClick,The following switch statement is missing a default case: switch (entry.Status) {  case ImportStatus.None:  case ImportStatus.Added:  case ImportStatus.Updated:  case ImportStatus.NeedDescription:  	continue;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdReplaceBook_ItemClick,The following switch statement is missing a default case: switch (entry.Status) {  case ImportStatus.Duplicate:  case ImportStatus.DuplicateIDsDiffer:  case ImportStatus.DuplicateNewer:  case ImportStatus.DuplicateOlder:  	toReplace.Add (entry);  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportForm,C:\repos\Gremlin2_bookscanner\ImportForm.cs,cmdCreateNewBook_ItemClick,The following switch statement is missing a default case: switch (entry.Status) {  case ImportStatus.Duplicate:  case ImportStatus.DuplicateIDsDiffer:  case ImportStatus.DuplicateNewer:  case ImportStatus.DuplicateOlder:  	toCreate.Add (entry);  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import,ImportPlugin,C:\repos\Gremlin2_bookscanner\ImportPlugin.cs,RunAction,The following switch statement is missing a default case: switch (action) {  case "Import":  	ImportForm form = new ImportForm (aParams' settings);  	form.ShowDialog ();  	break;  }  
Missing Default,Gremlin.FB2Librarian.Import.Filtering,FilterEvaluator,C:\repos\Gremlin2_bookscanner\Filtering\FilterEvaluator.cs,Visit,The following switch statement is missing a default case: switch (theOperator.OperatorType) {  case BinaryOperatorType.Equal:  	return (Compare (left' right' true) == 0);  case BinaryOperatorType.NotEqual:  	return (Compare (left' right' true) != 0);  case BinaryOperatorType.Like:  	if (left != null && right != null) {  		IList leftList = left as IList;  		if (leftList != null) {  			foreach (object leftItem in leftList) {  				if (this.likeDataCache [right.ToString ()].Fit (leftItem.ToString ())) {  					return true;  				}  			}  		}  		return this.likeDataCache [right.ToString ()].Fit (left.ToString ());  	}  	return false;  }  
Missing Default,Gremlin.FB2Librarian.Import.SevenZip,PropVariant,C:\repos\Gremlin2_bookscanner\SevenZip\SevenZipInterface.cs,SetObject,The following switch statement is missing a default case: switch (Type.GetTypeCode (value.GetType ())) {  case TypeCode.DBNull:  	vt = (ushort)VarEnum.VT_NULL;  	break;  case TypeCode.Boolean:  	shortValue = Convert.ToInt16 (value);  	vt = (ushort)VarEnum.VT_BOOL;  	break;  //TypeCode.Char = 4'  case TypeCode.SByte:  	sbyteValue = (sbyte)value;  	vt = (ushort)VarEnum.VT_I1;  	break;  case TypeCode.Byte:  	byteValue = (byte)value;  	vt = (ushort)VarEnum.VT_UI1;  	break;  case TypeCode.Int16:  	shortValue = (short)value;  	vt = (ushort)VarEnum.VT_I2;  	break;  case TypeCode.UInt16:  	ushortValue = (ushort)value;  	vt = (ushort)VarEnum.VT_UI2;  	break;  case TypeCode.Int32:  	intValue = (int)value;  	vt = (ushort)VarEnum.VT_I4;  	break;  case TypeCode.UInt32:  	uintValue = (uint)value;  	vt = (ushort)VarEnum.VT_UI4;  	break;  case TypeCode.Int64:  	longValue = (long)value;  	vt = (ushort)VarEnum.VT_I8;  	break;  case TypeCode.UInt64:  	ulongValue = (ulong)value;  	vt = (ushort)VarEnum.VT_UI8;  	break;  case TypeCode.Single:  	floatValue = (float)value;  	vt = (ushort)VarEnum.VT_R4;  	break;  case TypeCode.Double:  	doubleValue = (double)value;  	vt = (ushort)VarEnum.VT_R8;  	break;  //TypeCode.Decimal:  //TypeCode.DateTime'  case TypeCode.String:  	pointerValue = Marshal.StringToBSTR ((string)value);  	vt = (ushort)VarEnum.VT_BSTR;  	break;  }  
