Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,BackgroundTasks,StepTriggerTask,C:\repos\Microsoft_steps\BackgroundTasks\OEMTask.cs,Run,The method has an empty catch block.
Empty Catch Block,BackgroundTasks,StepTriggerTask,C:\repos\Microsoft_steps\BackgroundTasks\OEMTask.cs,GetStepsAsync,The method has an empty catch block.
Magic Number,BackgroundTasks.Converters,StepCountData,C:\repos\Microsoft_steps\BackgroundTasks\Converters.cs,FromPedometerReadings,The following statement contains a magic number: for (int i = 0; i < readings.Count && i < 3; i++)              {                  var reading = readings[readings.Count - i - 1];                  switch (reading.StepKind)                  {                      case PedometerStepKind.Running:                          steps.RunningCount = (uint)reading.CumulativeSteps;                          break;                      case PedometerStepKind.Walking:                          steps.WalkingCount = (uint)reading.CumulativeSteps;                          break;                      case PedometerStepKind.Unknown:                          steps.UnknownCount = (uint)reading.CumulativeSteps;                          break;                      default:                          break;                  }              }
Magic Number,BackgroundTasks.Converters,StepCountData,C:\repos\Microsoft_steps\BackgroundTasks\Converters.cs,FromPedometerReadings,The following statement contains a magic number: for (int i = 0; i < readings.Count && i < 3; i++)              {                  var reading = readings[i];                  switch (reading.StepKind)                  {                      case PedometerStepKind.Running:                          steps.RunningCount -= (uint)reading.CumulativeSteps;                          break;                      case PedometerStepKind.Walking:                          steps.WalkingCount -= (uint)reading.CumulativeSteps;                          break;                      case PedometerStepKind.Unknown:                          steps.UnknownCount -= (uint)reading.CumulativeSteps;                          break;                      default:                          break;                  }              }
Magic Number,BackgroundTasks,StepTriggerTask,C:\repos\Microsoft_steps\BackgroundTasks\OEMTask.cs,UpdateTile,The following statement contains a magic number: tileTextAttributes[2].AppendChild(SquareTile.CreateTextNode(_steps.WalkingCount.ToString() + " walking steps"));
