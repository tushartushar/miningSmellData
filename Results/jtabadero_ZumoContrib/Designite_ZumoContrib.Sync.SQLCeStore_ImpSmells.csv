Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,Cyclomatic complexity of the method is 11
Complex Method,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,DeserializeValue,Cyclomatic complexity of the method is 9
Complex Method,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,SerializeValue,Cyclomatic complexity of the method is 9
Complex Method,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,GetColumnType,Cyclomatic complexity of the method is 8
Complex Method,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,GetColumnType,Cyclomatic complexity of the method is 23
Complex Method,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,Visit,Cyclomatic complexity of the method is 46
Complex Method,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,Visit,Cyclomatic complexity of the method is 20
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,DefineTable,The length of the statement  "	select new ColumnDefinition (property.Name' property.Value.Type' storeType)).ToDictionary (p => p.Name' StringComparer.OrdinalIgnoreCase); " is 138.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,The length of the statement  "			throw new InvalidOperationException (string.Format (Properties.Resources.SqlCeStore_ColumnNotDefined' prop.Name' tableName)); " is 125.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,The length of the statement  "	var insertSqlBase = String.Format ("INSERT INTO {0} ({1}) VALUES "' SqlHelpers.FormatTableName (tableName)' String.Join ("' "' columns.Select (c => c.Name).Select (SqlHelpers.FormatMember))); " is 191.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,The length of the statement  "		throw new InvalidOperationException (string.Format (Properties.Resources.SqlCeStore_TooManyColumns' MaxParametersPerUpsertQuery)); " is 130.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,The length of the statement  "			if (!RowExists (SqlHelpers.FormatTableName (tableName)' item.GetValue (MobileServiceSystemColumns.Id' StringComparison.OrdinalIgnoreCase).ToString ())) { " is 153.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,UpsertAsyncInternal,The length of the statement  "				string updateCondition = string.Format (" WHERE {0} = '{1}'"' MobileServiceSystemColumns.Id' item.GetValue (MobileServiceSystemColumns.Id' StringComparison.OrdinalIgnoreCase).ToString ()); " is 188.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,DeleteAsync,The length of the statement  "	string sql = string.Format ("DELETE FROM {0} WHERE {1} IN ({2})"' SqlHelpers.FormatTableName (tableName)' MobileServiceSystemColumns.Id' idRange); " is 146.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,LookupAsync,The length of the statement  "	string sql = string.Format ("SELECT * FROM {0} WHERE {1} = @id"' SqlHelpers.FormatTableName (tableName)' MobileServiceSystemColumns.Id); " is 136.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,CreateTableFromObject,The length of the statement  "		String tblSql = string.Format ("CREATE TABLE {0} ({1} nvarchar(255) PRIMARY KEY)"' SqlHelpers.FormatTableName (tableName)' SqlHelpers.FormatMember (MobileServiceSystemColumns.Id)); " is 180.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,CreateTableFromObject,The length of the statement  "	IDictionary<string' JObject> existingColumns = this.ExecuteQuery ((TableDefinition)null' sql' parameters: null).ToDictionary (c => c.Value<string> ("COLUMN_NAME")' StringComparer.OrdinalIgnoreCase); " is 198.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStore,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStore.cs,CreateTableFromObject,The length of the statement  "		string createSql = string.Format ("ALTER TABLE {0} ADD {1} {2}"' SqlHelpers.FormatTableName (tableName)' SqlHelpers.FormatMember (column.Name)' column.StoreType); " is 162.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStoreExtensions,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStoreExtensions.cs,SetNullDefault,The length of the statement  "		else if (contractProperty.PropertyType.GetTypeInfo ().IsGenericType && contractProperty.PropertyType.GetGenericTypeDefinition () == typeof(Nullable<>)) { " is 153.
Long Statement,ZumoContrib.Sync.SQLCeStore,MobileServiceSqlCeStoreExtensions,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\MobileServiceSQLCEStoreExtensions.cs,SetNullDefault,The length of the statement  "			item [itemProperty.Name] = new JValue (Activator.CreateInstance (contractProperty.PropertyType.GenericTypeArguments [0])); " is 122.
Long Statement,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,GetColumnType,The length of the statement  "	throw new NotSupportedException (string.Format (CultureInfo.InvariantCulture' Properties.Resources.SqlCeStore_ValueTypeNotSupported' type.Name)); " is 145.
Long Statement,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,GetColumnType,The length of the statement  "		throw new NotSupportedException (string.Format (CultureInfo.InvariantCulture' Properties.Resources.SqlCeStore_JTokenNotSupported' type)); " is 137.
Long Statement,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,GetColumnType,The length of the statement  "		throw new NotSupportedException (string.Format (CultureInfo.InvariantCulture' Properties.Resources.SqlCeStore_JTokenNotSupported' type)); " is 137.
Long Statement,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,ValidateIdentifier,The length of the statement  "		throw new ArgumentException (string.Format (Properties.Resources.SqlCeStore_InvalidIdentifier' identifier)' "identifier"); " is 122.
Complex Conditional,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatQuery,The conditional expression  "this.query.Skip.HasValue && query.Skip.Value > 0 && this.query.Top.HasValue && query.Top.Value > 0"  is complex.
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlHelpers,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlHelpers.cs,IsValidIdentifier,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (identifier) || identifier.Length > 128) {  	return false;  }  
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 1) {  	this.sql.Append ("' ");  	var constantParam = (ConstantNode)nodeIn.Arguments [1];  	nodeIn.Arguments [1] = new ConstantNode (Convert.ToInt32 (constantParam.Value) + 1);  	//workaround for SQLCe firing exception when simply appending +1 to the query parameter  	nodeIn.Arguments [1].Accept (this);  	if (nodeIn.Arguments.Count > 2) {  		this.sql.Append ("' ");  		nodeIn.Arguments [2].Accept (this);  	}  	else// SQL Substring requires the length' if nothing passed' we grab till the end of string  	 {  		this.sql.Append ("' ");  		this.sql.AppendFormat ("LEN(");  		nodeIn.Arguments [0].Accept (this);  		this.sql.Append (")");  	}  }  
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 1) {  	this.sql.Append ("' ");  	var constantParam = (ConstantNode)nodeIn.Arguments [1];  	nodeIn.Arguments [1] = new ConstantNode (Convert.ToInt32 (constantParam.Value) + 1);  	//workaround for SQLCe firing exception when simply appending +1 to the query parameter  	nodeIn.Arguments [1].Accept (this);  	if (nodeIn.Arguments.Count > 2) {  		this.sql.Append ("' ");  		nodeIn.Arguments [2].Accept (this);  	}  	else// SQL Substring requires the length' if nothing passed' we grab till the end of string  	 {  		this.sql.Append ("' ");  		this.sql.AppendFormat ("LEN(");  		nodeIn.Arguments [0].Accept (this);  		this.sql.Append (")");  	}  }  
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 2) {  	this.sql.Append ("' ");  	nodeIn.Arguments [2].Accept (this);  }  else// SQL Substring requires the length' if nothing passed' we grab till the end of string   {  	this.sql.Append ("' ");  	this.sql.AppendFormat ("LEN(");  	nodeIn.Arguments [0].Accept (this);  	this.sql.Append (")");  }  
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 2) {  	this.sql.Append ("' ");  	nodeIn.Arguments [2].Accept (this);  }  else// SQL Substring requires the length' if nothing passed' we grab till the end of string   {  	this.sql.Append ("' ");  	this.sql.AppendFormat ("LEN(");  	nodeIn.Arguments [0].Accept (this);  	this.sql.Append (")");  }  
Magic Number,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: nodeIn.Arguments [2].Accept (this);  
Missing Default,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,Visit,The following switch statement is missing a default case: switch (nodeIn.OperatorKind) {  case BinaryOperatorKind.Equal:  	this.sql.Append (" = ");  	break;  case BinaryOperatorKind.NotEqual:  	this.sql.Append (" <> ");  	break;  case BinaryOperatorKind.LessThan:  	this.sql.Append (" < ");  	break;  case BinaryOperatorKind.LessThanOrEqual:  	this.sql.Append (" <= ");  	break;  case BinaryOperatorKind.GreaterThan:  	this.sql.Append (" > ");  	break;  case BinaryOperatorKind.GreaterThanOrEqual:  	this.sql.Append (" >= ");  	break;  case BinaryOperatorKind.And:  	this.sql.Append (" AND ");  	break;  case BinaryOperatorKind.Or:  	this.sql.Append (" OR ");  	break;  case BinaryOperatorKind.Add:  	this.sql.Append (" + ");  	break;  case BinaryOperatorKind.Subtract:  	this.sql.Append (" - ");  	break;  case BinaryOperatorKind.Multiply:  	this.sql.Append (" * ");  	break;  case BinaryOperatorKind.Divide:  	this.sql.Append (" / ");  	break;  case BinaryOperatorKind.Modulo:  	this.sql.Append (" % ");  	break;  }  
Missing Default,ZumoContrib.Sync.SQLCeStore,SqlQueryFormatter,C:\repos\jtabadero_ZumoContrib\ZumoContrib.Sync.SQLCeStore\SqlQueryFormatter.cs,Visit,The following switch statement is missing a default case: switch (nodeIn.Name) {  case "day":  	return this.FormatDateFunction ("dd"' nodeIn);  case "month":  	return this.FormatDateFunction ("mm"' nodeIn);  case "year":  	return this.FormatDateFunction ("yyyy"' nodeIn);  case "hour":  	return this.FormatDateFunction ("hh"' nodeIn);  case "minute":  	return this.FormatDateFunction ("mi"' nodeIn);  case "second":  	return this.FormatDateFunction ("ss"' nodeIn);  case "floor":  	return this.FormatFloorFunction (nodeIn);  case "ceiling":  	return this.FormatCeilingFunction (nodeIn);  case "round":  	return this.FormatRoundFunction (nodeIn);  case "tolower":  	return this.FormatStringFunction ("LOWER"' nodeIn);  case "toupper":  	return this.FormatStringFunction ("UPPER"' nodeIn);  case "length":  	return this.FormatStringFunction ("LEN"' nodeIn);  case "trim":  	return this.FormatStringFunction ("TRIM"' nodeIn);  case "substringof":  	return this.FormatLikeFunction (true' nodeIn' true);  case "startswith":  	return this.FormatLikeFunction (false' nodeIn' true);  case "endswith":  	return this.FormatLikeFunction (true' nodeIn' false);  case "concat":  	return this.FormatConcatFunction (nodeIn);  case "indexof":  	return this.FormatIndexOfFunction (nodeIn);  case "replace":  	return this.FormatStringFunction ("REPLACE"' nodeIn);  case "substring":  	return FormatSubstringFunction (nodeIn);  }  
