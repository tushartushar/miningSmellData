Implementation smell,Namespace,Class,File,Method,Description
Long Method,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,SerializeMember,The method has 132 lines of code.
Long Method,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The method has 223 lines of code.
Complex Method,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,SerializeMember,Cyclomatic complexity of the method is 9
Complex Method,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,Cyclomatic complexity of the method is 25
Long Parameter List,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,GetContext,The method has 5 parameters. Parameters: model' modelType' stream' contextMode' configuration
Long Parameter List,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,GetContext,The method has 8 parameters. Parameters: model' modelType' jsonReader' jsonWriter' contextMode' jsonProperties' jsonArray' configuration
Long Identifier,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the parameter shouldValueTypeBeHandledByExternalSerializer is 44.
Long Identifier,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the parameter shouldBeHandledByExternalSerializer is 35.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,Serialize,The length of the statement  "                using (var context = GetContext(model' model.GetType()' null' jsonWriter' SerializationContextMode.Serialization' null' null' configuration)) " is 141.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,Deserialize,The length of the statement  "                    throw Log.ErrorAndCreateException<SerializationException>($"'{modelType.GetSafeFullName(false)}' implements ICustomJsonSerializable but could not be instantiated"); " is 164.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,Deserialize,The length of the statement  "                        Log.Warning("Object was serialized as '{0}'' but the type is not available. Using original type '{1}'"' modelTypeOverrideValue' modelType.GetSafeFullName(false)); " is 162.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,SerializeMember,The length of the statement  "                            var idPropertyName = string.Format("${0}_{1}"' memberValue.NameForSerialization' referenceInfo.IsFirstUsage ? GraphId : GraphRefId); " is 132.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,BeforeDeserialization,The length of the statement  "                                Log.Warning("Trying to register custom object in graph with graph id '{0}'' but it seems it is already registered"' graphId); " is 125.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                            Log.Error("Expected to find graph object with id '{0}' in ReferenceManager' but it was not found. Defaulting value for member '{1}' to null"' graphId' memberValue.Name); " is 169.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                        return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' referenceInfo.Instance); " is 136.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                    return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' dictionary); " is 124.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                                        finalMemberValue = Deserialize(valueType' jsonProperty.Value.CreateReader(context.Configuration)' context.Configuration); " is 121.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                            return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' finalMemberValue); " is 130.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The length of the statement  "                return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' collection); " is 124.
Long Statement,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,GetContext,The length of the statement  "            var context = new SerializationContext<JsonSerializationContextInfo>(model' modelType' contextInfo' contextMode' configuration); " is 128.
Magic Number,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The following statement contains a magic number: if (jsonProperties != null)              {                  if (PreserveReferences)                  {                      var graphRefIdPropertyName = string.Format("${0}_{1}"' memberValue.NameForSerialization' GraphRefId);                      if (jsonProperties.ContainsKey(graphRefIdPropertyName))                      {                          var graphId = (int)jsonProperties[graphRefIdPropertyName].Value;                          var referenceManager = context.ReferenceManager;                          var referenceInfo = referenceManager.GetInfoById(graphId);                          if (referenceInfo == null)                          {                              Log.Error("Expected to find graph object with id '{0}' in ReferenceManager' but it was not found. Defaulting value for member '{1}' to null"' graphId' memberValue.Name);                              return null;                          }                            return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' referenceInfo.Instance);                      }                  }                    if (memberValue.MemberGroup == SerializationMemberGroup.Dictionary)                  {                      var dictionary = CreateModelInstance(memberValue.MemberType) as IDictionary;                        var keyType = typeof(object);                      var valueType = typeof(object);                        if (memberValue.MemberType.IsGenericTypeEx())                      {                          var genericArguments = memberValue.MemberType.GetGenericArgumentsEx();                          if (genericArguments.Length == 2)                          {                              keyType = genericArguments[0];                              valueType = genericArguments[1];                          }                      }                        foreach (var jsonPropertyKeyValuePair in jsonProperties)                      {                          var jsonProperty = jsonPropertyKeyValuePair.Value;                            object deserializedItem = null;                            object key = jsonProperty.Name;                          if (keyType != typeof(object))                          {                              key = StringToObjectHelper.ToRightType(keyType' jsonProperty.Name);                          }                            var typeToDeserialize = valueType;                          if (jsonProperty.Value != null)                          {                              if (jsonProperty.Value.Type != JTokenType.Object)                              {                                  switch (jsonProperty.Value.Type)                                  {                                      case JTokenType.Integer:                                          typeToDeserialize = typeof(int);                                          break;                                        case JTokenType.Float:                                          typeToDeserialize = typeof(float);                                          break;                                        case JTokenType.String:                                          typeToDeserialize = typeof(string);                                          break;                                        case JTokenType.Boolean:                                          typeToDeserialize = typeof(bool);                                          break;                                        case JTokenType.Date:                                          typeToDeserialize = typeof(DateTime);                                          break;                                        case JTokenType.Guid:                                          typeToDeserialize = typeof(Guid);                                          break;                                        case JTokenType.Uri:                                          typeToDeserialize = typeof(Uri);                                          break;                                        case JTokenType.TimeSpan:                                          typeToDeserialize = typeof(TimeSpan);                                          break;                                  }                              }                          }                            var shouldValueTypeBeHandledByExternalSerializer = ShouldExternalSerializerHandleMember(typeToDeserialize);                          if (shouldValueTypeBeHandledByExternalSerializer)                          {                              deserializedItem = jsonProperty.Value.ToObject(valueType' serializationContext.JsonSerializer);                          }                          else                          {                              var reader = jsonProperty.Value.CreateReader(context.Configuration);                              reader.Culture = context.Configuration.Culture;                                deserializedItem = Deserialize(valueType' reader' context.Configuration);                          }                            dictionary[key] = deserializedItem;                      }                        return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' dictionary);                  }                    if (jsonProperties.ContainsKey(memberValue.NameForSerialization))                  {                      var jsonProperty = jsonProperties[memberValue.NameForSerialization];                      var jsonValue = jsonProperty.Value;                      if (jsonValue != null)                      {                          object finalMemberValue = null;                          var valueType = memberValue.GetBestMemberType();                          if (valueType.IsEnumEx())                          {                              var valueToConvert = string.Empty;                                if (ShouldSerializeEnumAsString(memberValue' false))                              {                                  valueToConvert = (string)jsonValue;                                }                              else                              {                                  var enumName = Enum.GetName(valueType' (int)jsonValue);                                  if (!string.IsNullOrWhiteSpace(enumName))                                  {                                      valueToConvert = enumName;                                  }                              }                                finalMemberValue = Enum.Parse(valueType' valueToConvert' false);                          }                          else                          {                              try                              {                                  var isDeserialized = false;                                  if (jsonValue.Type == JTokenType.String && ShouldSerializeUsingParseAndToString(memberValue' false))                                  {                                      var tempValue = memberValue.Value;                                      memberValue.Value = (string)jsonValue;                                        var parsedValue = DeserializeUsingObjectParse(context' memberValue);                                      if (parsedValue != null)                                      {                                          finalMemberValue = parsedValue;                                            isDeserialized = true;                                      }                                      else                                      {                                          memberValue.Value = tempValue;                                      }                                  }                                    if (!isDeserialized)                                  {                                      if (ShouldExternalSerializerHandleMember(memberValue))                                      {                                          finalMemberValue = jsonValue.ToObject(valueType' serializationContext.JsonSerializer);                                      }                                      else if (ShouldSerializeAsCollection(memberValue))                                      {                                          finalMemberValue = Deserialize(valueType' jsonProperty.Value.CreateReader(context.Configuration)' context.Configuration);                                      }                                      else                                      {                                          if (jsonValue.HasValues)                                          {                                              var finalValueType = valueType;                                                var typeNameValue = jsonValue.Value<string>(TypeName);                                              if (!string.IsNullOrWhiteSpace(typeNameValue))                                              {                                                  finalValueType = TypeCache.GetType(typeNameValue'                                                      allowInitialization: false);                                              }                                                // Serialize ourselves                                              var reader = jsonValue.CreateReader(context.Configuration);                                              finalMemberValue = Deserialize(finalValueType' reader' context.Configuration);                                          }                                          else                                          {                                              // CTL-890 Fix for serializer modifiers that are deserialized as string                                               finalMemberValue = jsonValue;                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  Log.Debug(ex' "Failed to parse json value for '{0}'' treating value as string"' memberValue.Name);                                    // As a fallback' interpret as a string (might be a modifier)                                  finalMemberValue = (string)jsonValue;                              }                          }                            if (finalMemberValue != null)                          {                              if (PreserveReferences && finalMemberValue.GetType().IsClassType())                              {                                  var graphIdPropertyName = $"${memberValue.NameForSerialization}_{GraphId}";                                  if (jsonProperties.ContainsKey(graphIdPropertyName))                                  {                                      var graphId = (int)jsonProperties[graphIdPropertyName].Value;                                        var referenceManager = context.ReferenceManager;                                      referenceManager.RegisterManually(graphId' finalMemberValue);                                  }                              }                                return SerializationObject.SucceededToDeserialize(context.ModelType' memberValue.MemberGroup' memberValue.Name' finalMemberValue);                          }                      }                  }              }
Missing Default,Catel.Runtime.Serialization.Json,JsonSerializer,C:\repos\Catel_Catel\src\Catel.Serialization.Json\Catel.Serialization.Json.Shared\Runtime\Serialization\JsonSerialization\JsonSerializer.cs,DeserializeMember,The following switch statement is missing a default case: switch (jsonProperty.Value.Type)                                  {                                      case JTokenType.Integer:                                          typeToDeserialize = typeof(int);                                          break;                                        case JTokenType.Float:                                          typeToDeserialize = typeof(float);                                          break;                                        case JTokenType.String:                                          typeToDeserialize = typeof(string);                                          break;                                        case JTokenType.Boolean:                                          typeToDeserialize = typeof(bool);                                          break;                                        case JTokenType.Date:                                          typeToDeserialize = typeof(DateTime);                                          break;                                        case JTokenType.Guid:                                          typeToDeserialize = typeof(Guid);                                          break;                                        case JTokenType.Uri:                                          typeToDeserialize = typeof(Uri);                                          break;                                        case JTokenType.TimeSpan:                                          typeToDeserialize = typeof(TimeSpan);                                          break;                                  }
