Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,Cyclomatic complexity of the method is 14
Long Parameter List,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,ClientFramework,The method has 10 parameters.
Long Parameter List,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,AdjustForCollisions,The method has 5 parameters.
Long Parameter List,DevChallenge.Server.Scenarios.MineSweeper,Scenario,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Scenario.cs,Execute,The method has 7 parameters.
Long Statement,DevChallenge.Server.Scenarios.MineSweeper,Scenario,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Scenario.cs,Execute,The length of the statement  "		connection.SendNotification (new XElement ("init"' new XAttribute ("sweeperid"' sweeper.Id)' new XAttribute ("worldwidth"' engine.Width)' new XAttribute ("worldheight"' engine.Height)' new XAttribute ("maxminecount"' engine.MaxMineCount)' new XAttribute ("mineregenerationtime"' engine.MineRegenerationTime))); " is 310.
Complex Conditional,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,AdjustForCollisions,The conditional expression  "item.NewPosition.X < 0 || item.NewPosition.X >= Width || item.NewPosition.Y < 0 || item.NewPosition.Y >= Width"  is complex.
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: using (var g = Graphics.FromImage (bm)) {  	g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  	int squarewidth = (bm.Width - 1) / Width;  	int squareheight = (bm.Height - 1) / Height;  	Action<ClientFramework.Position' Color> DrawSquare = (p' c) =>  {  		g.FillRectangle (new SolidBrush (c)' p.X * squarewidth' p.Y * squareheight' squarewidth' squareheight);  	};  	if (minepositions != null)  		foreach (var mine in minepositions)  			DrawSquare (mine' Color.FromArgb (0' 0' 0));  	if (othersweeperpositions != null)  		foreach (var sweeper in othersweeperpositions)  			DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  	if (myposition != null)  		DrawSquare (myposition' Color.FromArgb (0' 0' 255));  	for (int num = 0; num <= Width; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' num * squarewidth' 0' num * squarewidth' squareheight * Height);  	for (int num = 0; num <= Height; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' 0' num * squareheight' squarewidth * Width' num * squareheight);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: using (var g = Graphics.FromImage (bm)) {  	g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  	int squarewidth = (bm.Width - 1) / Width;  	int squareheight = (bm.Height - 1) / Height;  	Action<ClientFramework.Position' Color> DrawSquare = (p' c) =>  {  		g.FillRectangle (new SolidBrush (c)' p.X * squarewidth' p.Y * squareheight' squarewidth' squareheight);  	};  	if (minepositions != null)  		foreach (var mine in minepositions)  			DrawSquare (mine' Color.FromArgb (0' 0' 0));  	if (othersweeperpositions != null)  		foreach (var sweeper in othersweeperpositions)  			DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  	if (myposition != null)  		DrawSquare (myposition' Color.FromArgb (0' 0' 255));  	for (int num = 0; num <= Width; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' num * squarewidth' 0' num * squarewidth' squareheight * Height);  	for (int num = 0; num <= Height; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' 0' num * squareheight' squarewidth * Width' num * squareheight);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: using (var g = Graphics.FromImage (bm)) {  	g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  	int squarewidth = (bm.Width - 1) / Width;  	int squareheight = (bm.Height - 1) / Height;  	Action<ClientFramework.Position' Color> DrawSquare = (p' c) =>  {  		g.FillRectangle (new SolidBrush (c)' p.X * squarewidth' p.Y * squareheight' squarewidth' squareheight);  	};  	if (minepositions != null)  		foreach (var mine in minepositions)  			DrawSquare (mine' Color.FromArgb (0' 0' 0));  	if (othersweeperpositions != null)  		foreach (var sweeper in othersweeperpositions)  			DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  	if (myposition != null)  		DrawSquare (myposition' Color.FromArgb (0' 0' 255));  	for (int num = 0; num <= Width; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' num * squarewidth' 0' num * squarewidth' squareheight * Height);  	for (int num = 0; num <= Height; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' 0' num * squareheight' squarewidth * Width' num * squareheight);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: using (var g = Graphics.FromImage (bm)) {  	g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  	int squarewidth = (bm.Width - 1) / Width;  	int squareheight = (bm.Height - 1) / Height;  	Action<ClientFramework.Position' Color> DrawSquare = (p' c) =>  {  		g.FillRectangle (new SolidBrush (c)' p.X * squarewidth' p.Y * squareheight' squarewidth' squareheight);  	};  	if (minepositions != null)  		foreach (var mine in minepositions)  			DrawSquare (mine' Color.FromArgb (0' 0' 0));  	if (othersweeperpositions != null)  		foreach (var sweeper in othersweeperpositions)  			DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  	if (myposition != null)  		DrawSquare (myposition' Color.FromArgb (0' 0' 255));  	for (int num = 0; num <= Width; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' num * squarewidth' 0' num * squarewidth' squareheight * Height);  	for (int num = 0; num <= Height; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' 0' num * squareheight' squarewidth * Width' num * squareheight);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: using (var g = Graphics.FromImage (bm)) {  	g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  	int squarewidth = (bm.Width - 1) / Width;  	int squareheight = (bm.Height - 1) / Height;  	Action<ClientFramework.Position' Color> DrawSquare = (p' c) =>  {  		g.FillRectangle (new SolidBrush (c)' p.X * squarewidth' p.Y * squareheight' squarewidth' squareheight);  	};  	if (minepositions != null)  		foreach (var mine in minepositions)  			DrawSquare (mine' Color.FromArgb (0' 0' 0));  	if (othersweeperpositions != null)  		foreach (var sweeper in othersweeperpositions)  			DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  	if (myposition != null)  		DrawSquare (myposition' Color.FromArgb (0' 0' 255));  	for (int num = 0; num <= Width; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' num * squarewidth' 0' num * squarewidth' squareheight * Height);  	for (int num = 0; num <= Height; ++num)  		g.DrawLine (new Pen (Color.FromArgb (0' 0' 0)' 1)' 0' num * squareheight' squarewidth * Width' num * squareheight);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (255' 255' 255))' 0' 0' bm.Width' bm.Height);  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: if (othersweeperpositions != null)  	foreach (var sweeper in othersweeperpositions)  		DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: foreach (var sweeper in othersweeperpositions)  	DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: DrawSquare (sweeper' Color.FromArgb (255' 0' 0));  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: if (myposition != null)  	DrawSquare (myposition' Color.FromArgb (0' 0' 255));  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,ClientFramework,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\ClientFramework.cs,DrawCurrentState,The following statement contains a magic number: DrawSquare (myposition' Color.FromArgb (0' 0' 255));  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: await Task.Run (() =>  {  	long iteration = 0;  	while (true) {  		try {  			lock (sweepers) {  				while (sweepers.Count == 0) {  					Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  				}  				var sw = System.Diagnostics.Stopwatch.StartNew ();  				List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  				ExecuteCommands (AdjustForCollisions (commandlist));  				CollectMines ();  				if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  				 {  					var newmine = CreateMine ();  					foreach (var sweeper in sweepers) {  						if (sweeper.NewMineAddedDelegate != null)  							sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  					}  				}  				TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  				if (timeleft > TimeSpan.Zero)  					System.Threading.Thread.Sleep (timeleft);  			}  			iteration++;  		}  		catch (Exception e) {  			System.Console.WriteLine (e.Message);  			System.Console.WriteLine (e.StackTrace);  		}  	}  });  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: await Task.Run (() =>  {  	long iteration = 0;  	while (true) {  		try {  			lock (sweepers) {  				while (sweepers.Count == 0) {  					Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  				}  				var sw = System.Diagnostics.Stopwatch.StartNew ();  				List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  				ExecuteCommands (AdjustForCollisions (commandlist));  				CollectMines ();  				if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  				 {  					var newmine = CreateMine ();  					foreach (var sweeper in sweepers) {  						if (sweeper.NewMineAddedDelegate != null)  							sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  					}  				}  				TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  				if (timeleft > TimeSpan.Zero)  					System.Threading.Thread.Sleep (timeleft);  			}  			iteration++;  		}  		catch (Exception e) {  			System.Console.WriteLine (e.Message);  			System.Console.WriteLine (e.StackTrace);  		}  	}  });  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: while (true) {  	try {  		lock (sweepers) {  			while (sweepers.Count == 0) {  				Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  			}  			var sw = System.Diagnostics.Stopwatch.StartNew ();  			List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  			ExecuteCommands (AdjustForCollisions (commandlist));  			CollectMines ();  			if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  			 {  				var newmine = CreateMine ();  				foreach (var sweeper in sweepers) {  					if (sweeper.NewMineAddedDelegate != null)  						sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  				}  			}  			TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  			if (timeleft > TimeSpan.Zero)  				System.Threading.Thread.Sleep (timeleft);  		}  		iteration++;  	}  	catch (Exception e) {  		System.Console.WriteLine (e.Message);  		System.Console.WriteLine (e.StackTrace);  	}  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: while (true) {  	try {  		lock (sweepers) {  			while (sweepers.Count == 0) {  				Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  			}  			var sw = System.Diagnostics.Stopwatch.StartNew ();  			List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  			ExecuteCommands (AdjustForCollisions (commandlist));  			CollectMines ();  			if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  			 {  				var newmine = CreateMine ();  				foreach (var sweeper in sweepers) {  					if (sweeper.NewMineAddedDelegate != null)  						sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  				}  			}  			TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  			if (timeleft > TimeSpan.Zero)  				System.Threading.Thread.Sleep (timeleft);  		}  		iteration++;  	}  	catch (Exception e) {  		System.Console.WriteLine (e.Message);  		System.Console.WriteLine (e.StackTrace);  	}  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: try {  	lock (sweepers) {  		while (sweepers.Count == 0) {  			Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  		}  		var sw = System.Diagnostics.Stopwatch.StartNew ();  		List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  		ExecuteCommands (AdjustForCollisions (commandlist));  		CollectMines ();  		if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  		 {  			var newmine = CreateMine ();  			foreach (var sweeper in sweepers) {  				if (sweeper.NewMineAddedDelegate != null)  					sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  			}  		}  		TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  		if (timeleft > TimeSpan.Zero)  			System.Threading.Thread.Sleep (timeleft);  	}  	iteration++;  }  catch (Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.WriteLine (e.StackTrace);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: try {  	lock (sweepers) {  		while (sweepers.Count == 0) {  			Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  		}  		var sw = System.Diagnostics.Stopwatch.StartNew ();  		List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  		ExecuteCommands (AdjustForCollisions (commandlist));  		CollectMines ();  		if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  		 {  			var newmine = CreateMine ();  			foreach (var sweeper in sweepers) {  				if (sweeper.NewMineAddedDelegate != null)  					sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  			}  		}  		TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  		if (timeleft > TimeSpan.Zero)  			System.Threading.Thread.Sleep (timeleft);  	}  	iteration++;  }  catch (Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.WriteLine (e.StackTrace);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: lock (sweepers) {  	while (sweepers.Count == 0) {  		Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  	}  	var sw = System.Diagnostics.Stopwatch.StartNew ();  	List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  	ExecuteCommands (AdjustForCollisions (commandlist));  	CollectMines ();  	if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  	 {  		var newmine = CreateMine ();  		foreach (var sweeper in sweepers) {  			if (sweeper.NewMineAddedDelegate != null)  				sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  		}  	}  	TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  	if (timeleft > TimeSpan.Zero)  		System.Threading.Thread.Sleep (timeleft);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: lock (sweepers) {  	while (sweepers.Count == 0) {  		Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  	}  	var sw = System.Diagnostics.Stopwatch.StartNew ();  	List<Tuple<Sweeper' Direction>> commandlist = GetSweeperCommands ().ToList ();  	ExecuteCommands (AdjustForCollisions (commandlist));  	CollectMines ();  	if (iteration % MineRegenerationTime == 0 && mines.Count < MaxMineCount)//respawn mine every n:th tick if needed  	 {  		var newmine = CreateMine ();  		foreach (var sweeper in sweepers) {  			if (sweeper.NewMineAddedDelegate != null)  				sweeper.NewMineAddedDelegate (newmine.Position.X' newmine.Position.Y);  		}  	}  	TimeSpan timeleft = TimeSpan.FromMilliseconds (100) - sw.Elapsed;  	if (timeleft > TimeSpan.Zero)  		System.Threading.Thread.Sleep (timeleft);  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: while (sweepers.Count == 0) {  	Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  }  
Magic Number,DevChallenge.Server.Scenarios.MineSweeper,Simulation,C:\repos\MicaelBelin_devchallenge\Challenges\MineSweeper\Simulation.cs,Start,The following statement contains a magic number: Monitor.Wait (sweepers' TimeSpan.FromMilliseconds (500));  
