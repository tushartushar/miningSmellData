Implementation smell,Namespace,Class,File,Method,Description
Long Method,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ViewModel_PropertyChanged,The method has 128 lines of code.
Long Method,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The method has 137 lines of code.
Complex Method,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,ApplicationSettings,Cyclomatic complexity of the method is 18
Complex Method,LightNovel.Common,ListCollectionView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ListCollectionView.cs,_sourceCollectionChanged,Cyclomatic complexity of the method is 16
Complex Method,LightNovel.Common,ListCollectionView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ListCollectionView.cs,HandleItemAdded,Cyclomatic complexity of the method is 9
Complex Method,LightNovel.Common,ListCollectionView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ListCollectionView.cs,HandleItemChanged,Cyclomatic complexity of the method is 9
Complex Method,LightNovel.Controls,ExpanderView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\ExpanderView.cs,UpdateVisualState,Cyclomatic complexity of the method is 8
Complex Method,LightNovel.Controls,RichTextColumns,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 16
Complex Method,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ItemClick,Cyclomatic complexity of the method is 8
Complex Method,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,Cyclomatic complexity of the method is 14
Complex Method,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ViewModel_PropertyChanged,Cyclomatic complexity of the method is 54
Complex Method,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,Cyclomatic complexity of the method is 18
Complex Method,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,PullBookmarkFromUserFavoriteAsync,Cyclomatic complexity of the method is 9
Complex Method,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,Cyclomatic complexity of the method is 34
Complex Method,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CacheIllustrationAsync,Cyclomatic complexity of the method is 11
Complex Method,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,ScanAsync,Cyclomatic complexity of the method is 13
Complex Method,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,Cyclomatic complexity of the method is 15
Complex Method,NotificationsExtensions,NotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\Common.cs,SerializeProperties,Cyclomatic complexity of the method is 9
Complex Method,NotificationsExtensions.TileContent,TileSquare150x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,Cyclomatic complexity of the method is 8
Complex Method,NotificationsExtensions.TileContent,TileSquare150x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,SerializeBinding,Cyclomatic complexity of the method is 9
Complex Method,NotificationsExtensions.TileContent,TileWide310x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,Cyclomatic complexity of the method is 9
Complex Method,NotificationsExtensions.TileContent,TileWide310x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,SerializeBindings,Cyclomatic complexity of the method is 9
Complex Method,NotificationsExtensions.TileContent,TileSquare310x310Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,Cyclomatic complexity of the method is 11
Complex Method,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,AppendAudioTag,Cyclomatic complexity of the method is 76
Complex Method,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,Cyclomatic complexity of the method is 8
Complex Method,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,GetContent,Cyclomatic complexity of the method is 8
Complex Method,LightNovel.ViewModels,FavoriteSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LoadAsync,Cyclomatic complexity of the method is 11
Complex Method,LightNovel.ViewModels,FavoriteSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,FavoriteList_CollectionChanged,Cyclomatic complexity of the method is 22
Complex Method,LightNovel.ViewModels,RecentSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LoadLocalAsync,Cyclomatic complexity of the method is 11
Complex Method,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,ReadingPageViewModel_PropertyChanged,Cyclomatic complexity of the method is 22
Complex Method,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,Cyclomatic complexity of the method is 15
Complex Method,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,Cyclomatic complexity of the method is 13
Complex Method,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadCommentsAsync,Cyclomatic complexity of the method is 9
Long Parameter List,LightNovel.Data,SampleDataItem,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\DataModel\SampleDataSource.cs,SampleDataItem,The method has 6 parameters.
Long Parameter List,LightNovel.Data,SampleDataGroup,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\DataModel\SampleDataSource.cs,SampleDataGroup,The method has 5 parameters.
Long Parameter List,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The method has 5 parameters.
Long Parameter List,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetAsync,The method has 5 parameters.
Long Parameter List,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataAsync,The method has 5 parameters.
Long Parameter List,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The method has 6 parameters.
Long Statement,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,UpdateSavedAppVersion,The length of the statement  "	SavedAppVersion = String.Format ("{0}.{1}.{2}.{3}"' CurrentVersion.Major.ToString ("D2")' CurrentVersion.Minor.ToString ("D2")' CurrentVersion.Revision.ToString ("D2")' CurrentVersion.Build.ToString ("D2")); " is 207.
Long Statement,LightNovel.Common,ViewLifetimeControl,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ViewLifetimeControl.cs,RegisterForEvents,The length of the statement  "	// A view is consolidated with other views hen there's no way for the user to get to it (it's not in the list of recently used apps' cannot be " is 142.
Long Statement,LightNovel.Common,ViewLifetimeControl,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ViewLifetimeControl.cs,RegisterForEvents,The length of the statement  "	// launched from Start' etc.) A view stops being consolidated when it's visible--at that point the user can interact with it' move it on or off screen' etc.  " is 156.
Long Statement,LightNovel.Common,ViewLifetimeControl,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ViewLifetimeControl.cs,VisibilityChanged,The length of the statement  "		// A view is consolidated with other views hen there's no way for the user to get to it (it's not in the list of recently used apps' cannot be " is 142.
Long Statement,LightNovel.Common,ViewLifetimeControl,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ViewLifetimeControl.cs,VisibilityChanged,The length of the statement  "		// launched from Start' etc.) A view stops being consolidated when it's visible--at that point the user can interact with it' move it on or off screen' etc.  " is 156.
Long Statement,LightNovel.Common,SuspensionManager,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "		StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync (sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 141.
Long Statement,LightNovel.Common,SuspensionManager,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "			if (weakFrameReference.TryGetTarget (out frame) && (string)frame.GetValue (FrameSessionBaseKeyProperty) == sessionBaseKey) { " is 124.
Long Statement,LightNovel.Common,SuspensionManager,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "		throw new InvalidOperationException ("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 139.
Long Statement,LightNovel.Common,ObservableDictionary,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ObservableDictionary.cs,Remove,The length of the statement  "	if (this._dictionary.TryGetValue (item.Key' out currentValue) && Object.Equals (item.Value' currentValue) && this._dictionary.Remove (item.Key)) { " is 146.
Long Statement,LightNovel.Controls,SearchBox,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\Controls\SearchBox.xaml.cs,TextBox_KeyDown,The length of the statement  "	if ((e.Key == Windows.System.VirtualKey.Accept || e.Key == Windows.System.VirtualKey.Enter) && !String.IsNullOrEmpty (QueryText) && QuerySubmitted != null) { " is 157.
Long Statement,LightNovel.Controls,RichTextColumns,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\RichTextColumns.cs,NotifySnapPointsChanged,The length of the statement  "	if (target.Orientation == Windows.UI.Xaml.Controls.Orientation.Horizontal && target.HorizontalSnapPointsChanged != null) " is 120.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,NavigationHelper_LoadState,The length of the statement  "			Description = "机巧魔术──那是由内藏魔术回路的自动人偶与人偶使所使用的魔术。在英国最高学府的华尔普吉斯皇家机巧学院里，正举行着一场选出顶尖人偶使「魔王」的战斗「夜会」。来自日本的留学生雷真和他的搭档──少女型态的人偶夜夜，为了参加「夜会」，打算挑战其他入选者，夺取对方的资格。他们锁定的目标是下届魔王呼声极高的候选人，别名「暴龙」的美少女夏琳！然而就在雷真向她挑战时，突然出现意外的伏兵……？ 交响曲式学园战斗动作剧，第一集登场！"' " is 225.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,RootHub_SectionsInViewChanged,The length of the statement  "	//if (e.AddedSections.Contains(RecommandSection) && !ViewModel.RecommandSection.IsLoading && !ViewModel.RecommandSection.IsLoaded) " is 130.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The length of the statement  "		var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas> (RootHub).FirstOrDefault (elem => elem.Name == "Logo"); " is 122.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The length of the statement  "		var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas> (RootHub).FirstOrDefault (elem => elem.Name == "Logo"); " is 122.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The length of the statement  "                var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas>(RootHub).FirstOrDefault(elem => elem.Name == "Logo");" is 120.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The length of the statement  "                var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas>(RootHub).FirstOrDefault(elem => elem.Name == "Logo");" is 120.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,RecommandSectionItem_ItemClick,The length of the statement  "		//this.Frame.Navigate(typeof(ReadingPage)' new NovelPositionIdentifier { SeriesId = book.Id' VolumeNo = -1' ChapterNo = -1 }.ToString()); " is 137.
Long Statement,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,LoginButton_Click,The length of the statement  "		MessageDialog diag = new MessageDialog (resourceLoader.GetString ("LoginFailedMessageDialogDetail")' resourceLoader.GetString ("LoginFailedMessageDialogTitle")); " is 161.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,SyncIndexSelection,The length of the statement  "	if (ViewModel.VolumeNo < 0 || ViewModel.ChapterNo < 0 || ViewModel.Index.Count <= ViewModel.VolumeNo || ViewModel.Index [ViewModel.VolumeNo].Count <= ViewModel.ChapterNo) " is 170.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,NavigationHelper_SaveState,The length of the statement  "	//this.BottomAppBar.Visibility = Windows.UI.Xaml.Visibility.Collapsed; // Request to hide the bottom appbar when navigating from " is 128.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,PinButton_Click,The length of the statement  "		var tile = new SecondaryTile (ViewModel.SeriesId.ToString ()' ViewModel.SeriesData.Title' args' imageUri' TileSize.Default); " is 124.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,PinButton_Click,The length of the statement  "		//var tile = new SecondaryTile(ViewModel.SeriesId.ToString()' "LightNovel"' ViewModel.SeriesData.Title' args' TileOptions.ShowNameOnLogo' imageUri); " is 148.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RegisterForShare,The length of the statement  "	dataTransferManager.DataRequested += new TypedEventHandler<DataTransferManager' DataRequestedEventArgs> (this.ShareHtmlHandler); " is 128.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ShareHtmlHandler,The length of the statement  "	string html = "<h3>" + ViewModel.VolumeData.Title + "</h3><p><img src=\"" + ViewModel.VolumeData.CoverImageUri + "\"></p><p>" + ViewModel.VolumeData.Description + "</p><p>Read full article at <a href=\"" + lkLink.AbsoluteUri + "\">here</a></p>" + "<p>Download the best client for read at <a href=\"" + wpLink.AbsoluteUri + "\">Windows Phone Store</a></p>"; " is 356.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,IllustrationSaveButton_Click,The length of the statement  "	MessageDialog diag = new MessageDialog (resourceLoader.GetString ("ImageSaveSuccessMessage")' resourceLoader.GetString ("ImageSaveMessageTitle")); " is 146.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,DownloadButton_Click,The length of the statement  "		MessageDialog dialog = new MessageDialog (resourceLoader.GetString ("DownloadingStartDescriptioin")' resourceLoader.GetString ("DownloadingStartDescriptioinTtile")); " is 165.
Long Statement,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ViewInBrowserButton_Click,The length of the statement  "		await Windows.System.Launcher.LaunchUriAsync (new Uri ("http://www.linovel.com/main/view/" + ViewModel.ChapterData.Id + ".html")); " is 130.
Long Statement,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,LerpColor,The length of the statement  "	return Color.FromArgb ((byte)(a.A * rt + b.A * t)' (byte)(a.R * rt + b.R * t)' (byte)(a.G * rt + b.G * t)' (byte)(a.B * rt + b.B * t)); " is 135.
Long Statement,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The length of the statement  "            //var succ = await client.CreateCommentAsync("dmzj/1984/7240/53216"' Data.Convert.MD5Hash("人类全都是混帐。")' "testing_comment");" is 122.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveToLocalFolderAsync,The length of the statement  "	var file = await Windows.Storage.ApplicationData.Current.LocalFolder.CreateFileAsync (path' Windows.Storage.CreationCollisionOption.OpenIfExists); " is 146.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveToRoamingFolderAsync,The length of the statement  "		var file = await Windows.Storage.ApplicationData.Current.RoamingFolder.CreateFileAsync (path' Windows.Storage.CreationCollisionOption.OpenIfExists); " is 148.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,IsConnectedToInternet,The length of the statement  "	return (connectionProfile != null && connectionProfile.GetNetworkConnectivityLevel () == NetworkConnectivityLevel.InternetAccess); " is 130.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,GetCurrentNetworkState,The length of the statement  "	if (connectionProfile == null || connectionProfile.GetNetworkConnectivityLevel () != NetworkConnectivityLevel.InternetAccess) " is 125.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The length of the statement  "		IllustrationFolder = await ApplicationData.Current.LocalFolder.CreateFolderAsync ("illustration"' CreationCollisionOption.OpenIfExists); " is 136.
Long Statement,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CacheIllustrationAsync,The length of the statement  "		IllustrationFolder = await ApplicationData.Current.LocalFolder.CreateFolderAsync ("illustration"' CreationCollisionOption.OpenIfExists); " is 136.
Long Statement,LightNovel,AuthPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AuthPage.xaml.cs,webView_NavigationCompleted,The length of the statement  "			MessageDialog dialog = new MessageDialog (resourceLoader.GetString ("AuthSucceedDialogContent")' resourceLoader.GetString ("AuthSucceedDialogTitle")); " is 150.
Long Statement,LightNovel,ExtendedSplash,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ExtendedSplash.xaml.cs,ExtendedSplash_OnResize,The length of the statement  "	// Safely update the extended splash screen image coordinates. This function will be fired in response to snapping' unsnapping' rotation' etc... " is 144.
Long Statement,LightNovel,SearchResultsPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\SearchResultsPage.xaml.cs,Filter_Checked,The length of the statement  "		if (this.DefaultViewModel.TryGetValue ("Results"' out results) && (resultsCollection = results as ICollection) != null && resultsCollection.Count != 0) { " is 153.
Long Statement,LightNovel,SearchResultsPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\SearchResultsPage.xaml.cs,QueryTextBox_KeyDown,The length of the statement  "	if ((e.Key == Windows.System.VirtualKey.Accept || e.Key == Windows.System.VirtualKey.Search || e.Key == Windows.System.VirtualKey.Enter)) " is 137.
Long Statement,LightNovel.Data,SampleDataSource,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\DataModel\SampleDataSource.cs,GetItemAsync,The length of the statement  "	var matches = _sampleDataSource.Groups.SelectMany (group => group.Items).Where (item => item.UniqueId.Equals (uniqueId)); " is 121.
Long Statement,LightNovel.Data,SampleDataSource,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\DataModel\SampleDataSource.cs,GetSampleDataAsync,The length of the statement  "		SampleDataGroup group = new SampleDataGroup (groupObject ["UniqueId"].GetString ()' groupObject ["Title"].GetString ()' groupObject ["Subtitle"].GetString ()' groupObject ["ImagePath"].GetString ()' groupObject ["Description"].GetString ()); " is 241.
Long Statement,LightNovel.Data,SampleDataSource,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\DataModel\SampleDataSource.cs,GetSampleDataAsync,The length of the statement  "			group.Items.Add (new SampleDataItem (itemObject ["UniqueId"].GetString ()' itemObject ["Title"].GetString ()' itemObject ["Subtitle"].GetString ()' itemObject ["ImagePath"].GetString ()' itemObject ["Description"].GetString ()' itemObject ["Content"].GetString ())); " is 266.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetIllustrationAsync,The length of the statement  "	return AsyncInfo.Run<IRandomAccessStream' int> ((c' p) => Task.Run (() => LoadIllustrationAsyncInternal (c' p' img_url' expectedSize' forceRefresh))); " is 150.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The length of the statement  "								StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists); " is 120.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetIndexAsync,The length of the statement  "		_indexUpdateTask = GetAsync (BookFolder' SeriesMetaFileName' () => DmzjDocSecBase.GetSeriesAsync (_seriesId)' TimeSpan.FromDays (7)' forceRefresh).ContinueWith (ts => { " is 168.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetChapterAsync,The length of the statement  "	var task = GetAsync<Chapter> (ChaptersFolder' string.Format (ChapterFileName' chptId)' () => DmzjDocSecBase.GetChapterAsync (chptId' vol)' null' forceRefresh); " is 159.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetSeriesIndexAsync,The length of the statement  "	var index = await GetAsync (CacheFolder' "series_index.json"' () => LightKindomHtmlClient.GetSeriesIndexAsync ()' TimeSpan.FromDays (1)); " is 137.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetSeriesIndexAsync,The length of the statement  "		index = await GetAsync (CacheFolder' "series_index.json"' () => LightKindomHtmlClient.GetSeriesIndexAsync ()' TimeSpan.FromDays (1)' true); " is 139.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetRecommandedBookLists,The length of the statement  "	return GetAsync (CacheFolder' "popular_series.json"' DmzjDocSecBase.GetFeaturedBooks' TimeSpan.FromDays (1)' forceRefresh); " is 123.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetUserFavoriteVolumesAsync,The length of the statement  "		var fav = await GetAsync (CacheFolder' "user_fav"' LightKindomHtmlClient.GetUserFavoriteVolumesAsync' TimeSpan.FromDays (1)' foreceRefresh); " is 140.
Long Statement,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetUserFavoriteVolumesAsync,The length of the statement  "			return await GetAsync (CacheFolder' "user_fav.json"' LightKindomHtmlClient.GetUserFavoriteVolumesAsync' TimeSpan.FromDays (1)' true); " is 133.
Long Statement,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,GetChapterAsync,The length of the statement  "			DmzjFolder = await ApplicationData.Current.LocalCacheFolder.CreateFolderAsync (DomainId' CreationCollisionOption.OpenIfExists); " is 127.
Long Statement,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,IsImageUri,The length of the statement  "	return Uri.IsWellFormedUriString (uri' UriKind.Absolute) && uri.EndsWith (".jpg") || uri.EndsWith (".jepg") || uri.EndsWith (".png") || uri.EndsWith (".gif"); " is 158.
Long Statement,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,ParseVolumnText,The length of the statement  "		for (string line = reader.ReadLine (); !reader.EndOfStream && (nxtTitle == null || !line.StartsWith (nxtTitle)); line = reader.ReadLine ()) { " is 141.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,LoginAsync,The length of the statement  "		//var begin = raw.IndexOf("ci_session="' raw.IndexOf("ci_session="' 11) + 11); // find the forth occurence of "ci_session=" " is 123.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,LoginAsync,The length of the statement  "		//Credential = new Session { Key = validCookie' Expries = DateTime.Now.AddDays(1) /*_cookieContainer.GetCookies(SeverBaseUri)[CiSession].Expires*/ }; " is 149.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetCommentsAsync,The length of the statement  "			var reuslt = comments.GetObject ().ToDictionary (pair => int.Parse (pair.Key)' pair => pair.Value.GetArray ().Select (token => new Comment { " is 140.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetVolumeAsync,The length of the statement  "	//series.Illustrator = details.First(node => node.Name == "td" && node.InnerText.StartsWith("插画")).NextSibling.InnerText; " is 121.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ParseChapterAlter,The length of the statement  "		var navi = nodes.First (node => node.Attributes ["class"] != null && node.Attributes ["class"].Value.StartsWith ("lk-m-view-pager")); " is 133.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ParseChapterAlter,The length of the statement  "	var canvas = nodes.First (node => node.Attributes ["class"] != null && node.Attributes ["class"].Value.StartsWith ("lk-m-view-can")); " is 133.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ParseChapterAlter,The length of the statement  "	where line.Name == "div" && line.Attributes ["class"] != null && line.Attributes ["class"].Value.StartsWith ("lk-view-line") " is 124.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetSeriesAsync,The length of the statement  "	//series.Illustrator = details.First(node => node.Name == "td" && node.InnerText.StartsWith("插画")).NextSibling.InnerText; " is 121.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ParseBookItemNode,The length of the statement  "	vol.Chapters = (from chaptersNode in volNode.ChildNodes.First (node => node.HasClass ("linovel-chapter-list")).Descendants ("a") " is 128.
Long Statement,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ParseBookItemsBlock,The length of the statement  "	return block.Descendants ("a").Where (a => a.Attributes.Contains ("href") && a.GetAttributeValue ("href"' null).StartsWith ("/book/detail")).Select (a => ParseBookItem (a)); " is 173.
Long Statement,NotificationsExtensions,Util,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\Common.cs,HttpEncode,The length of the statement  "	return value.Replace ("&"' "&amp;").Replace ("<"' "&lt;").Replace (">"' "&gt;").Replace ("\""' "&quot;").Replace ("'"' "&apos;"); " is 129.
Long Statement,NotificationsExtensions,NotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\Common.cs,SerializeProperties,The length of the statement  "					builder.AppendFormat ("<image addImageQuery='{0}' id='{1}' src='{2}' alt='{3}'/>"' m_Images [i].AddImageQuery.ToString ().ToLowerInvariant ()' i + 1' escapedSrc' escapedAlt); " is 174.
Long Statement,NotificationsExtensions,NotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\Common.cs,SerializeProperties,The length of the statement  "					builder.AppendFormat ("<image addImageQuery='{0}' id='{1}' src='{2}'/>"' m_Images [i].AddImageQuery.ToString ().ToLowerInvariant ()' i + 1' escapedSrc); " is 152.
Long Statement,NotificationsExtensions.TileContent,TileSquare150x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,The length of the statement  "		throw new NotificationContentValidationException ("Square71x71 tile content should be included with each medium tile. " + "If this behavior is undesired' use the RequireSquare71x71Content property."); " is 200.
Long Statement,NotificationsExtensions.TileContent,TileWide310x150Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,The length of the statement  "		throw new NotificationContentValidationException ("Square150x150 tile content should be included with each wide tile. " + "If this behavior is undesired' use the RequireSquare150x150Content property."); " is 202.
Long Statement,NotificationsExtensions.TileContent,TileSquare310x310Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,The length of the statement  "		throw new NotificationContentValidationException ("Wide310x150 tile content should be included with each large tile. " + "If this behavior is undesired' use the RequireWide310x150Content property."); " is 199.
Long Statement,NotificationsExtensions.TileContent,TileSquare310x310Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,The length of the statement  "	if (Wide310x150Content != null && Wide310x150Content.RequireSquare150x150Content && Wide310x150Content.Square150x150Content == null) { " is 134.
Long Statement,NotificationsExtensions.TileContent,TileSquare310x310Base,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\TileContent.cs,GetContent,The length of the statement  "		throw new NotificationContentValidationException ("This tile's wide content requires square content. " + "If this behavior is undesired' use the Wide310x150Content.RequireSquare150x150Content property."); " is 204.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,AudioSrcIsLooping,The length of the statement  "	return (Audio.Content == ToastAudioContent.LoopingAlarm) || (Audio.Content == ToastAudioContent.LoopingAlarm2) || (Audio.Content == ToastAudioContent.LoopingAlarm3) || (Audio.Content == ToastAudioContent.LoopingAlarm4) || (Audio.Content == ToastAudioContent.LoopingAlarm5) || (Audio.Content == ToastAudioContent.LoopingAlarm6) || (Audio.Content == ToastAudioContent.LoopingAlarm7) || (Audio.Content == ToastAudioContent.LoopingAlarm8) || (Audio.Content == ToastAudioContent.LoopingAlarm9) || (Audio.Content == ToastAudioContent.LoopingAlarm10) || (Audio.Content == ToastAudioContent.LoopingCall) || (Audio.Content == ToastAudioContent.LoopingCall2) || (Audio.Content == ToastAudioContent.LoopingCall3) || (Audio.Content == ToastAudioContent.LoopingCall4) || (Audio.Content == ToastAudioContent.LoopingCall5) || (Audio.Content == ToastAudioContent.LoopingCall6) || (Audio.Content == ToastAudioContent.LoopingCall7) || (Audio.Content == ToastAudioContent.LoopingCall8) || (Audio.Content == ToastAudioContent.LoopingCall9) || (Audio.Content == ToastAudioContent.LoopingCall10); " is 1074.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateAudio,The length of the statement  "			throw new NotificationContentValidationException ("A looping audio src must be chosen if the looping audio property is set."); " is 126.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateAudio,The length of the statement  "			throw new NotificationContentValidationException ("The looping audio property needs to be set if a looping audio src is chosen."); " is 130.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,IsIncomingCallToast,The length of the statement  "	return (IncomingCallCommands.ShowVideoCommand || IncomingCallCommands.ShowVoiceCommand || IncomingCallCommands.ShowDeclineCommand); " is 131.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("IncomingCall and Alarm properties cannot be included on a single toast."); " is 125.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("Video argument should not be set if the Video button is not shown."); " is 120.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("Voice argument should not be set if the Voice button is not shown."); " is 120.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("Decline argument should not be set if the Video button is not shown."); " is 122.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("Snooze argument should not be set if the Snooze button is not shown."); " is 122.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,ValidateCommands,The length of the statement  "			throw new NotificationContentValidationException ("Dismiss argument should not be set if the Dismiss button is not shown."); " is 124.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,GetContent,The length of the statement  "	builder.AppendFormat ("<binding template='{0}'>{1}</binding>"' TemplateName' SerializeProperties (Lang' BaseUri' AddImageQuery)); " is 129.
Long Statement,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,CreateNotification,The length of the statement  "			throw new NotificationContentValidationException ("The ToastNotification object should not be used for alarms." + "Use the results of GetContent() to construct a ScheduledToastNotification object."); " is 199.
Long Statement,LightNovel.ViewModels,FavoriteSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LoadAsync,The length of the statement  "	//	var item = new HistoryItemViewModel() { SeriesTitle = vol.SeriesTitle' VolumeTitle = vol.VolumeTitle' UpdateTime = vol.FavTime}; " is 131.
Long Statement,LightNovel.ViewModels,FavoriteSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LoadAsync,The length of the statement  "	//	item.Position = new NovelPositionIdentifier { SeriesId = volume.ParentSeriesId' VolumeId = volume.Id' VolumeNo = -1 }; " is 121.
Long Statement,LightNovel.ViewModels,RecentSectionViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LoadLocalAsync,The length of the statement  "		if (bookmark == null || (SkipLatest && bookmark == historyList [historyList.Count - 1]))//Thus we should remove this item from our collection " is 141.
Long Statement,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,AddOrUpdateBookmark,The length of the statement  "	AppGlobal.BookmarkList.RemoveAll (bk => bk.Position.SeriesId == bookmark.Position.SeriesId || bookmark.SeriesTitle == bk.SeriesTitle); " is 134.
Long Statement,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadCommentsAsync,The length of the statement  "				Contents [cln.Key - 1].Comments = new ObservableCollection<CommentViewModel> (cln.Value.Select (d => new CommentViewModel (d))); " is 128.
Complex Conditional,LightNovel.Controls,SearchBox,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\Controls\SearchBox.xaml.cs,TextBox_KeyDown,The conditional expression  "(e.Key == Windows.System.VirtualKey.Accept || e.Key == Windows.System.VirtualKey.Enter) && !String.IsNullOrEmpty (QueryText) && QuerySubmitted != null"  is complex.
Complex Conditional,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_SizeChanged,The conditional expression  "index >= 0 && e.NewSize.Height > 10 && ContentListView.Items.Count > 0 && index < ContentListView.Items.Count"  is complex.
Complex Conditional,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,SyncIndexSelection,The conditional expression  "ViewModel.VolumeNo < 0 || ViewModel.ChapterNo < 0 || ViewModel.Index.Count <= ViewModel.VolumeNo || ViewModel.Index [ViewModel.VolumeNo].Count <= ViewModel.ChapterNo"  is complex.
Empty Catch Block,LightNovel.Common,ViewLifetimeControl,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ViewLifetimeControl.cs,ShowAsync,The method has an empty catch block.
Empty Catch Block,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,LoginButton_Click,The method has an empty catch block.
Empty Catch Block,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UserAccount_Click,The method has an empty catch block.
Empty Catch Block,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,RecentItem_RightTapped,The method has an empty catch block.
Empty Catch Block,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,BookmarkItem_RightTapped,The method has an empty catch block.
Empty Catch Block,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,PinButton_Click,The method has an empty catch block.
Empty Catch Block,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The method has an empty catch block.
Empty Catch Block,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The method has an empty catch block.
Empty Catch Block,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The method has an empty catch block.
Empty Catch Block,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CacheIllustrationAsync,The method has an empty catch block.
Empty Catch Block,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CacheIllustrationAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,DeleteIllustationAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.ViewModels,MainViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\MainViewModel.cs,LogOutAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CancelCachingRequestAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CachingRestChaptersAsync,The method has an empty catch block.
Empty Catch Block,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CachingRestChaptersAsync,The method has an empty catch block.
Magic Number,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,ApplicationSettings,The following statement contains a magic number: if (!_localSettings.ContainsKey (CredentialKey))  	_localSettings.Add (CredentialKey' JsonConvert.SerializeObject (new Session {  		Expries = DateTime.Now.AddYears (-100)'  		Key = ""  	}));  
Magic Number,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,ApplicationSettings,The following statement contains a magic number: _localSettings.Add (CredentialKey' JsonConvert.SerializeObject (new Session {  	Expries = DateTime.Now.AddYears (-100)'  	Key = ""  }));  
Magic Number,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,ApplicationSettings,The following statement contains a magic number: if (!_roamingSettings.ContainsKey (FontSizeKey))  	_roamingSettings.Add (FontSizeKey' 19.0);  
Magic Number,LightNovel.Common,ApplicationSettings,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\ApplicationSettings.cs,ApplicationSettings,The following statement contains a magic number: _roamingSettings.Add (FontSizeKey' 19.0);  
Magic Number,LightNovel.Common,UserInfo,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Common\UserInfo.cs,AddUserFavriteAsync,The following statement contains a magic number: try {  	var result = await LightKindomHtmlClient.AddUserFavoriteVolume (vol.Id);  	if (!result)  		return false;  	FavourVolume favol = new FavourVolume {  		VolumeId = vol.Id'  		FavId = null'  		VolumeNo = vol.VolumeNo.ToString ()'  		CoverImageUri = vol.CoverImageUri'  		Description = vol.Description'  		VolumeTitle = vol.Title'  		SeriesTitle = seriesTitle'  		FavTime = DateTime.Now.AddSeconds (-5)  	};  	FavoriteList.Add (favol);  	CachedClient.UpdateCachedUserFavoriteVolumes (FavoriteList);  	return true;  } catch (Exception exception) {  	Debug.WriteLine ("Error : Failed to Add User Favorite : " + exception.Message);  }  
Magic Number,LightNovel.Controls,ExpanderView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\ExpanderView.cs,AnimateContainerDropDown,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++) {  	FrameworkElement container = this.ContainerFromIndex (i) as FrameworkElement;  	if (container == null) {  		break;  	}  	Storyboard itemDropDown = new Storyboard ();  	EasingFunctionBase quadraticEase = new QuadraticEase {  		EasingMode = EasingMode.EaseOut  	};  	int initialKeyTime = InitialKeyTime + (KeyTimeStep * i);  	int finalKeyTime = FinalKeyTime + (KeyTimeStep * i);  	TranslateTransform translation = new TranslateTransform ();  	container.RenderTransform = translation;  	DoubleAnimationUsingKeyFrames transAnimation = new DoubleAnimationUsingKeyFrames ();  	EasingDoubleKeyFrame transKeyFrame_1 = new EasingDoubleKeyFrame ();  	transKeyFrame_1.EasingFunction = quadraticEase;  	transKeyFrame_1.KeyTime = TimeSpan.FromMilliseconds (0.0);  	transKeyFrame_1.Value = -150.0;  	EasingDoubleKeyFrame transKeyFrame_2 = new EasingDoubleKeyFrame ();  	transKeyFrame_2.EasingFunction = quadraticEase;  	transKeyFrame_2.KeyTime = TimeSpan.FromMilliseconds (initialKeyTime);  	transKeyFrame_2.Value = 0.0;  	EasingDoubleKeyFrame transKeyFrame_3 = new EasingDoubleKeyFrame ();  	transKeyFrame_3.EasingFunction = quadraticEase;  	transKeyFrame_3.KeyTime = TimeSpan.FromMilliseconds (finalKeyTime);  	transKeyFrame_3.Value = 0.0;  	transAnimation.KeyFrames.Add (transKeyFrame_1);  	transAnimation.KeyFrames.Add (transKeyFrame_2);  	transAnimation.KeyFrames.Add (transKeyFrame_3);  	Storyboard.SetTarget (transAnimation' translation);  	Storyboard.SetTargetProperty (transAnimation' "(TranslateTransform.Y)");  	itemDropDown.Children.Add (transAnimation);  	DoubleAnimationUsingKeyFrames opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	EasingDoubleKeyFrame opacityKeyFrame_1 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_1.EasingFunction = quadraticEase;  	opacityKeyFrame_1.KeyTime = TimeSpan.FromMilliseconds (0.0);  	opacityKeyFrame_1.Value = 0.0;  	EasingDoubleKeyFrame opacityKeyFrame_2 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_2.EasingFunction = quadraticEase;  	opacityKeyFrame_2.KeyTime = TimeSpan.FromMilliseconds (initialKeyTime - 150);  	opacityKeyFrame_2.Value = 0.0;  	EasingDoubleKeyFrame opacityKeyFrame_3 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_3.EasingFunction = quadraticEase;  	opacityKeyFrame_3.KeyTime = TimeSpan.FromMilliseconds (finalKeyTime);  	opacityKeyFrame_3.Value = 1.0;  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_1);  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_2);  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_3);  	Storyboard.SetTarget (opacityAnimation' container);  	Storyboard.SetTargetProperty (opacityAnimation' "(FrameworkElement.Opacity)");  	itemDropDown.Children.Add (opacityAnimation);  	itemDropDown.Begin ();  }  
Magic Number,LightNovel.Controls,ExpanderView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\ExpanderView.cs,AnimateContainerDropDown,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++) {  	FrameworkElement container = this.ContainerFromIndex (i) as FrameworkElement;  	if (container == null) {  		break;  	}  	Storyboard itemDropDown = new Storyboard ();  	EasingFunctionBase quadraticEase = new QuadraticEase {  		EasingMode = EasingMode.EaseOut  	};  	int initialKeyTime = InitialKeyTime + (KeyTimeStep * i);  	int finalKeyTime = FinalKeyTime + (KeyTimeStep * i);  	TranslateTransform translation = new TranslateTransform ();  	container.RenderTransform = translation;  	DoubleAnimationUsingKeyFrames transAnimation = new DoubleAnimationUsingKeyFrames ();  	EasingDoubleKeyFrame transKeyFrame_1 = new EasingDoubleKeyFrame ();  	transKeyFrame_1.EasingFunction = quadraticEase;  	transKeyFrame_1.KeyTime = TimeSpan.FromMilliseconds (0.0);  	transKeyFrame_1.Value = -150.0;  	EasingDoubleKeyFrame transKeyFrame_2 = new EasingDoubleKeyFrame ();  	transKeyFrame_2.EasingFunction = quadraticEase;  	transKeyFrame_2.KeyTime = TimeSpan.FromMilliseconds (initialKeyTime);  	transKeyFrame_2.Value = 0.0;  	EasingDoubleKeyFrame transKeyFrame_3 = new EasingDoubleKeyFrame ();  	transKeyFrame_3.EasingFunction = quadraticEase;  	transKeyFrame_3.KeyTime = TimeSpan.FromMilliseconds (finalKeyTime);  	transKeyFrame_3.Value = 0.0;  	transAnimation.KeyFrames.Add (transKeyFrame_1);  	transAnimation.KeyFrames.Add (transKeyFrame_2);  	transAnimation.KeyFrames.Add (transKeyFrame_3);  	Storyboard.SetTarget (transAnimation' translation);  	Storyboard.SetTargetProperty (transAnimation' "(TranslateTransform.Y)");  	itemDropDown.Children.Add (transAnimation);  	DoubleAnimationUsingKeyFrames opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	EasingDoubleKeyFrame opacityKeyFrame_1 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_1.EasingFunction = quadraticEase;  	opacityKeyFrame_1.KeyTime = TimeSpan.FromMilliseconds (0.0);  	opacityKeyFrame_1.Value = 0.0;  	EasingDoubleKeyFrame opacityKeyFrame_2 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_2.EasingFunction = quadraticEase;  	opacityKeyFrame_2.KeyTime = TimeSpan.FromMilliseconds (initialKeyTime - 150);  	opacityKeyFrame_2.Value = 0.0;  	EasingDoubleKeyFrame opacityKeyFrame_3 = new EasingDoubleKeyFrame ();  	opacityKeyFrame_3.EasingFunction = quadraticEase;  	opacityKeyFrame_3.KeyTime = TimeSpan.FromMilliseconds (finalKeyTime);  	opacityKeyFrame_3.Value = 1.0;  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_1);  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_2);  	opacityAnimation.KeyFrames.Add (opacityKeyFrame_3);  	Storyboard.SetTarget (opacityAnimation' container);  	Storyboard.SetTargetProperty (opacityAnimation' "(FrameworkElement.Opacity)");  	itemDropDown.Children.Add (opacityAnimation);  	itemDropDown.Begin ();  }  
Magic Number,LightNovel.Controls,ExpanderView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\ExpanderView.cs,AnimateContainerDropDown,The following statement contains a magic number: transKeyFrame_1.Value = -150.0;  
Magic Number,LightNovel.Controls,ExpanderView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Controls\ExpanderView.cs,AnimateContainerDropDown,The following statement contains a magic number: opacityKeyFrame_2.KeyTime = TimeSpan.FromMilliseconds (initialKeyTime - 150);  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,NavigationHelper_LoadState,The following statement contains a magic number: await ViewModel.RecommandSection.LoadAsync (false' 20);  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The following statement contains a magic number: if (appView.Orientation == ApplicationViewOrientation.Landscape) {  	BottomAppBar.Closed += BottomAppBar_IsOpenChanged;  	BottomAppBar.Opened += BottomAppBar_IsOpenChanged;  	BottomAppBar.Opacity = 0;  	BottomAppBar.Visibility = Visibility.Collapsed;  	AppBarHint.Visibility = Visibility.Visible;  	LastReadSection.Margin = new Thickness (0' -60' 0' 0);  	var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas> (RootHub).FirstOrDefault (elem => elem.Name == "Logo");  	if (logo != null) {  		(logo.RenderTransform as TranslateTransform).X = LastReadSection.ActualWidth;  	}  } else {  	BottomAppBar.Closed -= BottomAppBar_IsOpenChanged;  	BottomAppBar.Opened -= BottomAppBar_IsOpenChanged;  	BottomAppBar.Opacity = 1;  	BottomAppBar.Visibility = Visibility.Visible;  	AppBarHint.Visibility = Visibility.Collapsed;  	LastReadSection.Margin = new Thickness (0' 0' 0' 0);  	var logo = VisualTreeHelperExtensions.GetDescendantsOfType<Canvas> (RootHub).FirstOrDefault (elem => elem.Name == "Logo");  	if (logo != null) {  		(logo.RenderTransform as TranslateTransform).X = 0;  	}  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,SyncViewWithOrientation,The following statement contains a magic number: LastReadSection.Margin = new Thickness (0' -60' 0' 0);  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: try {  	var imgs = ViewModel.RecommandSection.First (g => g.Key.Contains ("更新")).Take (6).ToArray ();  	var tileContent = TileContentFactory.CreateTileSquare310x310ImageCollectionAndText01 ();  	tileContent.AddImageQuery = true;  	tileContent.ImageMain.Src = imgs [0].CoverImageUri;  	tileContent.ImageMain.Alt = imgs [0].Title;  	tileContent.ImageSmall1.Src = imgs [1].CoverImageUri;  	tileContent.ImageSmall1.Alt = imgs [1].Title;  	tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  	tileContent.ImageSmall2.Alt = imgs [2].Title;  	tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  	tileContent.ImageSmall3.Alt = imgs [3].Title;  	tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  	tileContent.ImageSmall4.Alt = imgs [4].Title;  	tileContent.TextCaptionWrap.Text = imgs [0].Description;  	// Create a notification for the Wide310x150 tile using one of the available templates for the size.  	//var wide310x150Content = TileContentFactory.CreateTileWide310x150ImageAndText01();  	//wide310x150Content.TextCaptionWrap.Text = "This tile notification uses web images";  	//wide310x150Content.Image.Src = ImgUri;  	//wide310x150Content.Image.Alt = "Web image";  	var wide310x150Content = TileContentFactory.CreateTileWide310x150PeekImageCollection05 ();  	wide310x150Content.AddImageQuery = true;  	//wide310x150Content.Lang = "zh-Hans";  	wide310x150Content.ImageMain.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageMain.Alt = imgs [0].Title;  	wide310x150Content.ImageSecondary.Src = imgs [0].CoverImageUri;  	wide310x150Content.ImageSecondary.Alt = imgs [0].Title;  	wide310x150Content.ImageSmallColumn1Row1.Src = imgs [1].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row1.Alt = imgs [1].Title;  	wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  	wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  	wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  	wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  	wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  	wide310x150Content.TextHeading.Text = imgs [0].Title;  	wide310x150Content.TextBodyWrap.Text = imgs [0].Description;  	// Create a notification for the Square150x150 tile using one of the available templates for the size.  	var square150x150Content = TileContentFactory.CreateTileSquare150x150PeekImageAndText02 ();  	//square150x150Content.Lang = "zh-Hans";  	square150x150Content.Image.Src = imgs [0].CoverImageUri;  	square150x150Content.Image.Alt = imgs [0].Title;  	square150x150Content.TextHeading.Text = imgs [0].Title;  	square150x150Content.TextBodyWrap.Text = imgs [0].Description;  	//var square150x150Content = TileContentFactory.CreateTileSquare150x150Image();  	//square150x150Content.Image.Src = ImgUri;  	//square150x150Content.Image.Alt = "Web image";  	var square71x71Content = TileContentFactory.CreateTileSquare71x71Image ();  	square71x71Content.Image.Src = imgs [0].CoverImageUri;  	;  	square71x71Content.Image.Alt = imgs [0].Title;  	// Attached the Square71x71 template to the Square150x150 template.  	square150x150Content.Square71x71Content = square71x71Content;  	// Attach the Square150x150 template to the Wide310x150 template.  	wide310x150Content.Square150x150Content = square150x150Content;  	// Attach the Wide310x150 template to the Square310x310 template.  	tileContent.Wide310x150Content = wide310x150Content;  	// Send the notification to the application’s tile.  	TileUpdateManager.CreateTileUpdaterForApplication ().Update (tileContent.CreateNotification ());  } catch (Exception exception) {  	Debug.WriteLine (exception.Message);  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall2.Src = imgs [2].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall2.Alt = imgs [2].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall3.Src = imgs [3].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall3.Alt = imgs [3].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall4.Src = imgs [4].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: tileContent.ImageSmall4.Alt = imgs [4].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn1Row2.Src = imgs [2].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn1Row2.Alt = imgs [2].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn2Row1.Src = imgs [3].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn2Row1.Alt = imgs [3].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn2Row2.Src = imgs [4].CoverImageUri;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UpdateTile,The following statement contains a magic number: wide310x150Content.ImageSmallColumn2Row2.Alt = imgs [4].Title;  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UserAccount_Click,The following statement contains a magic number: if (ViewModel.IsSignedIn) {  	var menu = new PopupMenu ();  	menu.Commands.Add (new UICommand (ViewModel.UserName));  	menu.Commands.Add (new UICommandSeparator ());  	var syncLabel = resourceLoader.GetString ("RefreshFavortite_Merge_Label");  	menu.Commands.Add (new UICommand (syncLabel' async command => {  		ViewModel.IsLoading = true;  		await ViewModel.FavoriteSection.LoadAsync (true);  		ViewModel.IsLoading = false;  	}));  	var pullLabel = resourceLoader.GetString ("RefreshFavortite_Pull_Label");  	menu.Commands.Add (new UICommand (pullLabel' async command => {  		ViewModel.IsLoading = true;  		await ViewModel.FavoriteSection.LoadAsync (true' 9' true);  		ViewModel.IsLoading = false;  	}));  	menu.Commands.Add (new UICommandSeparator ());  	var logoutLabel = resourceLoader.GetString ("LogoutLabel");  	menu.Commands.Add (new UICommand (logoutLabel));  	//var elem = (FrameworkElement)sender;  	//GeneralTransform buttonTransform = elem.TransformToVisual(null);  	//Point point = buttonTransform.TransformPoint(new Point());  	//await menu.ShowAsync(point);  	var chosenCommand = await menu.ShowForSelectionAsync (GetElementRect ((FrameworkElement)sender));  	if (chosenCommand != null && chosenCommand.Label == logoutLabel) {  		try {  			ViewModel.UserName = resourceLoader.GetString ("LogoutIndicator");  			await ViewModel.LogOutAsync ();  			ViewModel.UserName = resourceLoader.GetString ("LoginLabel");  		} catch (Exception excpection) {  		}  	}  } else {  	if (ViewModel.UserName == resourceLoader.GetString ("LoginLabel"))  		ViewModel.UserName = "";  	#if WINDOWS_UWP  	                SigninPopup.ShowAt(AccountButton); #else  	SigninPopup.Visibility = Windows.UI.Xaml.Visibility.Visible;  	SigninPopup.IsOpen = true;  	#endif  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UserAccount_Click,The following statement contains a magic number: menu.Commands.Add (new UICommand (pullLabel' async command => {  	ViewModel.IsLoading = true;  	await ViewModel.FavoriteSection.LoadAsync (true' 9' true);  	ViewModel.IsLoading = false;  }));  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,UserAccount_Click,The following statement contains a magic number: await ViewModel.FavoriteSection.LoadAsync (true' 9' true);  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,RefreshButton_Click,The following statement contains a magic number: if (ViewModel.IsLoading) {  } else {  	ViewModel.IsLoading = true;  	await ViewModel.RecommandSection.LoadAsync (true' 20);  	ViewModel.IsLoading = false;  }  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,RefreshButton_Click,The following statement contains a magic number: await ViewModel.RecommandSection.LoadAsync (true' 20);  
Magic Number,LightNovel,HubPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\HubPage.xaml.cs,AppBarHintButton_ManipulationDelta,The following statement contains a magic number: if (e.Cumulative.Translation.Y < -25) {  	e.Complete ();  	AppBarHint_Click (sender' null);  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_SizeChanged,The following statement contains a magic number: if (index >= 0 && e.NewSize.Height > 10 && ContentListView.Items.Count > 0 && index < ContentListView.Items.Count) {  	ContentListView.UpdateLayout ();  	ContentListView.ScrollIntoView (ViewModel.Contents [index]' ScrollIntoViewAlignment.Leading);  	index = -1;  	ContentListView.SizeChanged -= ContentListView_SizeChanged;  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,SyncIndexSelection,The following statement contains a magic number: if (scrollViewer != null)  	scrollViewer.ChangeView (null' scrollViewer.VerticalOffset + 100' null' true);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,SyncIndexSelection,The following statement contains a magic number: scrollViewer.ChangeView (null' scrollViewer.VerticalOffset + 100' null' true);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 0) {  	var imageContent = iv.FindName ("ImageContent") as Image;  	var textContent = iv.FindName ("TextContent") as TextBlock;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  	if (!Double.IsNaN (sender.ActualWidth) && sender.ActualWidth > 0)  		iv.MaxWidth = sender.ActualWidth;  	var imagePlaceHolder = iv.FindName ("ImagePlaceHolder") as Windows.UI.Xaml.Shapes.Path;  	var line = (LineViewModel)args.Item;  	iv.Height = double.NaN;  	imageContent.Opacity = 0;  	imageContent.Height = double.NaN;  	commentIndicator.Opacity = 0;  	progressIndicator.Opacity = 0;  	textContent.Opacity = 1;  	if (imageContent.Source != null) {  		var bitmap = imageContent.Source as BitmapImage;  		bitmap.DownloadProgress -= Image_DownloadProgress;  		imageContent.ClearValue (Image.SourceProperty);  	}  	if (line.IsImage) {  		if (!AppGlobal.ShouldAutoLoadImage) {  			textContent.Text = ImageTapToLoadPlaceholder;  			//imageContent.MinHeight = 440;  			progressIndicator.Visibility = Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		} else {  			textContent.Text = ImageLoadingTextPlaceholder;  			//imageContent.MinHeight = 440;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		}  	} else {  		textContent.Text = line.Content;  		//textContent.Height = double.NaN;  		textContent.TextAlignment = TextAlignment.Left;  		imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.DataContext = null;  	}  	args.RegisterUpdateCallback (ContentListView_ContainerContentChanging);  	//} else if (args.Phase == 1)  	//{  	//	//var textContent = iv.FindName("TextContent") as TextBlock;  	//	//textContent.Opacity = 1;  	//	//args.RegisterUpdateCallback(ContentListView_ContainerContentChanging);   } else if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 0) {  	var imageContent = iv.FindName ("ImageContent") as Image;  	var textContent = iv.FindName ("TextContent") as TextBlock;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  	if (!Double.IsNaN (sender.ActualWidth) && sender.ActualWidth > 0)  		iv.MaxWidth = sender.ActualWidth;  	var imagePlaceHolder = iv.FindName ("ImagePlaceHolder") as Windows.UI.Xaml.Shapes.Path;  	var line = (LineViewModel)args.Item;  	iv.Height = double.NaN;  	imageContent.Opacity = 0;  	imageContent.Height = double.NaN;  	commentIndicator.Opacity = 0;  	progressIndicator.Opacity = 0;  	textContent.Opacity = 1;  	if (imageContent.Source != null) {  		var bitmap = imageContent.Source as BitmapImage;  		bitmap.DownloadProgress -= Image_DownloadProgress;  		imageContent.ClearValue (Image.SourceProperty);  	}  	if (line.IsImage) {  		if (!AppGlobal.ShouldAutoLoadImage) {  			textContent.Text = ImageTapToLoadPlaceholder;  			//imageContent.MinHeight = 440;  			progressIndicator.Visibility = Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		} else {  			textContent.Text = ImageLoadingTextPlaceholder;  			//imageContent.MinHeight = 440;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		}  	} else {  		textContent.Text = line.Content;  		//textContent.Height = double.NaN;  		textContent.TextAlignment = TextAlignment.Left;  		imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.DataContext = null;  	}  	args.RegisterUpdateCallback (ContentListView_ContainerContentChanging);  	//} else if (args.Phase == 1)  	//{  	//	//var textContent = iv.FindName("TextContent") as TextBlock;  	//	//textContent.Opacity = 1;  	//	//args.RegisterUpdateCallback(ContentListView_ContainerContentChanging);   } else if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 0) {  	var imageContent = iv.FindName ("ImageContent") as Image;  	var textContent = iv.FindName ("TextContent") as TextBlock;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  	if (!Double.IsNaN (sender.ActualWidth) && sender.ActualWidth > 0)  		iv.MaxWidth = sender.ActualWidth;  	var imagePlaceHolder = iv.FindName ("ImagePlaceHolder") as Windows.UI.Xaml.Shapes.Path;  	var line = (LineViewModel)args.Item;  	iv.Height = double.NaN;  	imageContent.Opacity = 0;  	imageContent.Height = double.NaN;  	commentIndicator.Opacity = 0;  	progressIndicator.Opacity = 0;  	textContent.Opacity = 1;  	if (imageContent.Source != null) {  		var bitmap = imageContent.Source as BitmapImage;  		bitmap.DownloadProgress -= Image_DownloadProgress;  		imageContent.ClearValue (Image.SourceProperty);  	}  	if (line.IsImage) {  		if (!AppGlobal.ShouldAutoLoadImage) {  			textContent.Text = ImageTapToLoadPlaceholder;  			//imageContent.MinHeight = 440;  			progressIndicator.Visibility = Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		} else {  			textContent.Text = ImageLoadingTextPlaceholder;  			//imageContent.MinHeight = 440;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		}  	} else {  		textContent.Text = line.Content;  		//textContent.Height = double.NaN;  		textContent.TextAlignment = TextAlignment.Left;  		imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.DataContext = null;  	}  	args.RegisterUpdateCallback (ContentListView_ContainerContentChanging);  	//} else if (args.Phase == 1)  	//{  	//	//var textContent = iv.FindName("TextContent") as TextBlock;  	//	//textContent.Opacity = 1;  	//	//args.RegisterUpdateCallback(ContentListView_ContainerContentChanging);   } else if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 0) {  	var imageContent = iv.FindName ("ImageContent") as Image;  	var textContent = iv.FindName ("TextContent") as TextBlock;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  	if (!Double.IsNaN (sender.ActualWidth) && sender.ActualWidth > 0)  		iv.MaxWidth = sender.ActualWidth;  	var imagePlaceHolder = iv.FindName ("ImagePlaceHolder") as Windows.UI.Xaml.Shapes.Path;  	var line = (LineViewModel)args.Item;  	iv.Height = double.NaN;  	imageContent.Opacity = 0;  	imageContent.Height = double.NaN;  	commentIndicator.Opacity = 0;  	progressIndicator.Opacity = 0;  	textContent.Opacity = 1;  	if (imageContent.Source != null) {  		var bitmap = imageContent.Source as BitmapImage;  		bitmap.DownloadProgress -= Image_DownloadProgress;  		imageContent.ClearValue (Image.SourceProperty);  	}  	if (line.IsImage) {  		if (!AppGlobal.ShouldAutoLoadImage) {  			textContent.Text = ImageTapToLoadPlaceholder;  			//imageContent.MinHeight = 440;  			progressIndicator.Visibility = Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		} else {  			textContent.Text = ImageLoadingTextPlaceholder;  			//imageContent.MinHeight = 440;  			imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Visible;  			imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  			textContent.TextAlignment = TextAlignment.Center;  		}  	} else {  		textContent.Text = line.Content;  		//textContent.Height = double.NaN;  		textContent.TextAlignment = TextAlignment.Left;  		imagePlaceHolder.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.Visibility = Windows.UI.Xaml.Visibility.Collapsed;  		imageContent.DataContext = null;  	}  	args.RegisterUpdateCallback (ContentListView_ContainerContentChanging);  	//} else if (args.Phase == 1)  	//{  	//	//var textContent = iv.FindName("TextContent") as TextBlock;  	//	//textContent.Opacity = 1;  	//	//args.RegisterUpdateCallback(ContentListView_ContainerContentChanging);   } else if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 1)// Show comment indicator rectangle / progress bar   {  	var line = (LineViewModel)args.Item;  	var commentIndicator = iv.FindName ("CommentIndicator") as Rectangle;  	if (line.HasComments) {  		commentIndicator.Opacity = 1;  		args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  	}  	if (line.IsImage) {  		var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  		progressIndicator.Value = 0;  		progressIndicator.Opacity = 1;  		if (AppGlobal.ShouldAutoLoadImage)  			args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  	}  } else if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (line.HasComments) {  	commentIndicator.Opacity = 1;  	args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: args.RegisterUpdateCallback (3' ContentListView_ContainerContentChanging);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (line.IsImage) {  	var progressIndicator = iv.FindName ("ProgressBar") as ProgressBar;  	progressIndicator.Value = 0;  	progressIndicator.Opacity = 1;  	if (AppGlobal.ShouldAutoLoadImage)  		args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (AppGlobal.ShouldAutoLoadImage)  	args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: args.RegisterUpdateCallback (2' ContentListView_ContainerContentChanging);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 2) {  	var line = (LineViewModel)args.Item;  	LoadItemIllustation (iv' line);  } else if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,ContentListView_ContainerContentChanging,The following statement contains a magic number: if (args.Phase == 3) {  	var line = (LineViewModel)args.Item;  	line.LoadCommentsAsync ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,imageContent_ImageOpened,The following statement contains a magic number: await image.FadeInCustom (new TimeSpan (0' 0' 0' 0' 500)' null' 1);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,Image_DownloadProgress,The following statement contains a magic number: if (e.Progress == 100) {  	var iv = progressBar.GetVisualParent ();  	if (iv == null)  		return;  	var textContent = iv.FindName ("TextContent") as TextBlock;  	var imageContent = iv.FindName ("ImageContent") as Image;  	textContent.Opacity = 0;  	progressBar.Opacity = 0;  	//imageContent.Visibility = Windows.UI.Xaml.Visibility.Visible;  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,SlideHandle_ManipulationDelta,The following statement contains a magic number: if (e.Cumulative.Translation.X >= 25) {  	e.Complete ();  	IsIndexPanelOpen = !IsIndexPanelOpen;  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,IndexPanel_ManipulationDelta,The following statement contains a magic number: if (e.Cumulative.Translation.X <= -25) {  	e.Complete ();  	IsIndexPanelOpen = false;  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.R = (byte)(0.3 * bgColor.R + 0.7 * fgColor.R);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.R = (byte)(0.3 * bgColor.R + 0.7 * fgColor.R);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.G = (byte)(0.3 * bgColor.G + 0.7 * fgColor.G);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.G = (byte)(0.3 * bgColor.G + 0.7 * fgColor.G);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.B = (byte)(0.3 * bgColor.B + 0.7 * fgColor.B);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: bgColor.B = (byte)(0.3 * bgColor.B + 0.7 * fgColor.B);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.R = (byte)(0.7 * accentColor.R + 0.3 * fgColor.R);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.R = (byte)(0.7 * accentColor.R + 0.3 * fgColor.R);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.G = (byte)(0.7 * accentColor.G + 0.3 * fgColor.G);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.G = (byte)(0.7 * accentColor.G + 0.3 * fgColor.G);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.B = (byte)(0.7 * accentColor.B + 0.3 * fgColor.B);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,RefreshThemeColor,The following statement contains a magic number: fgColor.B = (byte)(0.7 * accentColor.B + 0.3 * fgColor.B);  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,PinButton_Click,The following statement contains a magic number: if (!SecondaryTile.Exists (ViewModel.SeriesId.ToString ())) {  	Size size = new Size (150' 150);  	var bookmark = ViewModel.CreateBookmark ();  	//ViewModel.IsLoading = true;  	var imageUri = await AppGlobal.CreateTileImageAsync (new Uri (bookmark.DescriptionImageUri));  	//ViewModel.IsLoading = false;  	string args = bookmark.Position.ToString ();  	var tile = new SecondaryTile (ViewModel.SeriesId.ToString ()' ViewModel.SeriesData.Title' args' imageUri' TileSize.Default);  	//var tile = new SecondaryTile(ViewModel.SeriesId.ToString()' "LightNovel"' ViewModel.SeriesData.Title' args' TileOptions.ShowNameOnLogo' imageUri);  	try {  		button.IsChecked = await tile.RequestCreateAsync (location);  	} catch (Exception) {  	}  	SyncPinButtonView ();  } else {  	var tile = new SecondaryTile (ViewModel.SeriesId.ToString ());  	button.IsChecked = !await tile.RequestDeleteAsync (location);  	SyncPinButtonView ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,PinButton_Click,The following statement contains a magic number: if (!SecondaryTile.Exists (ViewModel.SeriesId.ToString ())) {  	Size size = new Size (150' 150);  	var bookmark = ViewModel.CreateBookmark ();  	//ViewModel.IsLoading = true;  	var imageUri = await AppGlobal.CreateTileImageAsync (new Uri (bookmark.DescriptionImageUri));  	//ViewModel.IsLoading = false;  	string args = bookmark.Position.ToString ();  	var tile = new SecondaryTile (ViewModel.SeriesId.ToString ()' ViewModel.SeriesData.Title' args' imageUri' TileSize.Default);  	//var tile = new SecondaryTile(ViewModel.SeriesId.ToString()' "LightNovel"' ViewModel.SeriesData.Title' args' TileOptions.ShowNameOnLogo' imageUri);  	try {  		button.IsChecked = await tile.RequestCreateAsync (location);  	} catch (Exception) {  	}  	SyncPinButtonView ();  } else {  	var tile = new SecondaryTile (ViewModel.SeriesId.ToString ());  	button.IsChecked = !await tile.RequestDeleteAsync (location);  	SyncPinButtonView ();  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,Illustration_DownloadProgress,The following statement contains a magic number: if (e.Progress == 100) {  	var container = progressBar;  	//.Ge.GetVisualParent();  	if (container != null)  		container.Visibility = Visibility.Collapsed;  }  
Magic Number,LightNovel,ReadingPage,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.WindowsPhone\ReadingPage.xaml.cs,AppBarHintButton_ManipulationDelta,The following statement contains a magic number: if (e.Cumulative.Translation.Y < -25) {  	e.Complete ();  	AppBarHint_Click (sender' null);  }  
Magic Number,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The following statement contains a magic number: if (rootFrame == null) {  	ExtendedSplash extendedSplash;  	if (Window.Current.Content == null) {  		extendedSplash = new ExtendedSplash (e.SplashScreen);  	} else {  		extendedSplash = Window.Current.Content as ExtendedSplash;  	}  	extendedSplash.RegisterFrameArriveDimmsion ();  	// Create a Frame to act as the navigation context and navigate to the first page  	rootFrame = extendedSplash.RootFrame;  	// TODO: change this value to a cache size that is appropriate for your application  	rootFrame.CacheSize = 3;  	//Associate the frame with a SuspensionManager key   	try {  		SuspensionManager.RegisterFrame (rootFrame' "AppFrame");  	} catch (Exception) {  	}  	Window.Current.Content = extendedSplash;  	Window.Current.Activate ();  	// Place the frame in the current Window  	// Window.Current.Content = rootFrame;  } else {  	Window.Current.Activate ();  }  
Magic Number,LightNovel,App,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\App.xaml.cs,OnLaunched,The following statement contains a magic number: rootFrame.CacheSize = 3;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveHistoryDataAsync,The following statement contains a magic number: if (RecentList.Count > 30)  	RecentList.RemoveRange (0' RecentList.Count - 30);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveHistoryDataAsync,The following statement contains a magic number: if (RecentList.Count > 30)  	RecentList.RemoveRange (0' RecentList.Count - 30);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveHistoryDataAsync,The following statement contains a magic number: RecentList.RemoveRange (0' RecentList.Count - 30);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveBookmarkDataAsync,The following statement contains a magic number: if (BookmarkList.Count > 100)  	BookmarkList.RemoveRange (0' BookmarkList.Count - 100);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveBookmarkDataAsync,The following statement contains a magic number: if (BookmarkList.Count > 100)  	BookmarkList.RemoveRange (0' BookmarkList.Count - 100);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,SaveBookmarkDataAsync,The following statement contains a magic number: BookmarkList.RemoveRange (0' BookmarkList.Count - 100);  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (wScale > hScale) {  	if (vAlign == VerticalAlignment.Bottom)  		bound.Y = transform.ScaledHeight - bound.Height;  	else if (vAlign == VerticalAlignment.Center)  		bound.Y = (transform.ScaledHeight - bound.Height) / 2;  } else {  	if (hAlign == HorizontalAlignment.Right)  		bound.Y = transform.ScaledWidth - bound.Width;  	else if (hAlign == HorizontalAlignment.Center)  		bound.Y = (transform.ScaledWidth - bound.Width) / 2;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (wScale > hScale) {  	if (vAlign == VerticalAlignment.Bottom)  		bound.Y = transform.ScaledHeight - bound.Height;  	else if (vAlign == VerticalAlignment.Center)  		bound.Y = (transform.ScaledHeight - bound.Height) / 2;  } else {  	if (hAlign == HorizontalAlignment.Right)  		bound.Y = transform.ScaledWidth - bound.Width;  	else if (hAlign == HorizontalAlignment.Center)  		bound.Y = (transform.ScaledWidth - bound.Width) / 2;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (vAlign == VerticalAlignment.Bottom)  	bound.Y = transform.ScaledHeight - bound.Height;  else if (vAlign == VerticalAlignment.Center)  	bound.Y = (transform.ScaledHeight - bound.Height) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (vAlign == VerticalAlignment.Center)  	bound.Y = (transform.ScaledHeight - bound.Height) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: bound.Y = (transform.ScaledHeight - bound.Height) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (hAlign == HorizontalAlignment.Right)  	bound.Y = transform.ScaledWidth - bound.Width;  else if (hAlign == HorizontalAlignment.Center)  	bound.Y = (transform.ScaledWidth - bound.Width) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: if (hAlign == HorizontalAlignment.Center)  	bound.Y = (transform.ScaledWidth - bound.Width) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateUniformToFillTransform,The following statement contains a magic number: bound.Y = (transform.ScaledWidth - bound.Width) / 2;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: if (string.IsNullOrEmpty (fileName)) {  	fileName = imageUri.LocalPath;  	fileName = Path.GetFileName (fileName);  	string sizeSuffix = "-150";  	switch (tileSize) {  	default:  	case TileSize.Default:  	case TileSize.Square150x150:  		sizeSuffix = "-150";  		imgSize.Height = 150;  		imgSize.Width = 150;  		break;  	case TileSize.Square30x30:  		sizeSuffix = "-30";  		imgSize.Width = 30;  		imgSize.Height = 30;  		break;  	case TileSize.Square310x310:  		sizeSuffix = "-310";  		imgSize.Width = 310;  		imgSize.Height = 310;  		break;  	case TileSize.Wide310x150:  		sizeSuffix = "-310x150";  		imgSize.Width = 310;  		imgSize.Height = 150;  		break;  	}  	fileName = Path.GetFileNameWithoutExtension (fileName) + sizeSuffix + Path.GetExtension (fileName);  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: switch (tileSize) {  default:  case TileSize.Default:  case TileSize.Square150x150:  	sizeSuffix = "-150";  	imgSize.Height = 150;  	imgSize.Width = 150;  	break;  case TileSize.Square30x30:  	sizeSuffix = "-30";  	imgSize.Width = 30;  	imgSize.Height = 30;  	break;  case TileSize.Square310x310:  	sizeSuffix = "-310";  	imgSize.Width = 310;  	imgSize.Height = 310;  	break;  case TileSize.Wide310x150:  	sizeSuffix = "-310x150";  	imgSize.Width = 310;  	imgSize.Height = 150;  	break;  }  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Height = 150;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Width = 150;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Width = 30;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Height = 30;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Width = 310;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Height = 310;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Width = 310;  
Magic Number,LightNovel,AppGlobal,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\AppGlobal.cs,CreateTileImageAsync,The following statement contains a magic number: imgSize.Height = 150;  
Magic Number,LightNovel,ExtendedSplash,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ExtendedSplash.xaml.cs,PositionImage,The following statement contains a magic number: Logo.Height = splashImageRect.Height / 3;  
Magic Number,LightNovel,ExtendedSplash,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ExtendedSplash.xaml.cs,PositionImage,The following statement contains a magic number: Logo.Width = splashImageRect.Width * 0.62;  
Magic Number,LightNovel,IllustrationView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\IllustrationView.xaml.cs,ImageContent_ImageOpened,The following statement contains a magic number: if (lvm != null && lvm.IsImage) {  	TextContent.Opacity = 0;  	ProgressBar.Opacity = 0;  	//ProgressBar.Visibility = Visibility.Collapsed;  	ImagePlaceHolder.Visibility = Visibility.Collapsed;  	await ImageContent.FadeInCustomAsync (new TimeSpan (0' 0' 0' 0' 500)' null' 1);  }  
Magic Number,LightNovel,IllustrationView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\IllustrationView.xaml.cs,ImageContent_ImageOpened,The following statement contains a magic number: await ImageContent.FadeInCustomAsync (new TimeSpan (0' 0' 0' 0' 500)' null' 1);  
Magic Number,LightNovel,IllustrationView,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\IllustrationView.xaml.cs,SetDownloadProgress,The following statement contains a magic number: if (progress == 100) {  	//var iv = ProgressBar.GetVisualParent();  	//if (iv == null) return;  	TextContent.Opacity = 0;  	ProgressBar.Opacity = 0;  	//imageContent.Visibility = Visibility.Visible;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if ((file == null || forceRefresh) && AppGlobal.NetworkState != AppGlobal.AppNetworkState.Unconnected) {  	try {  		using (var client = new HttpClient ()) {  			if (c.IsCancellationRequested)  				return null;  			progress.Report (5);  			var rmuri = new Uri (img_url);  			var download = client.GetAsync (rmuri);  			download.Progress = (info' p) => {  				double percentage = 0;  				if (p.TotalBytesToReceive.HasValue)  					expectedSize = p.TotalBytesToReceive.Value;  				if (expectedSize > 0)  					percentage = (double)p.BytesReceived / (double)expectedSize;  				progress.Report (5 + (int)(percentage * 80));  				if (c.IsCancellationRequested)  					info.Cancel ();  			};  			if (c.IsCancellationRequested)  				return null;  			progress.Report (85);  			await download;  			if (download.Status != AsyncStatus.Completed) {  				Debug.WriteLine ("Failed to Download the image ...");  				return null;  			}  			var result = download.GetResults ();  			ulong recieved = 0;  			bool succ = result.Content.TryComputeLength (out recieved);  			bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  			if (corrupted)  				Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  			// recheck if the file existed and if its corrupted  			file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  			IRandomAccessStream fileStream = null;  			try {  				if (file != null) {  					var prop = await file.GetBasicPropertiesAsync ();  					if (prop.Size < expectedSize)  						file = null;  				}  				if (file == null)  					file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  				if (file != null)  					fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  			} finally {  				fileStream = null;  			}  			if (fileStream == null)  				Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  			var memeryStream = new InMemoryRandomAccessStream ();  			await result.Content.WriteToStreamAsync (memeryStream);  			progress.Report (90);  			memeryStream.Seek (0);  			if (fileStream != null && !corrupted) {  				await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  				await fileStream.FlushAsync ();  				progress.Report (95);  				memeryStream.Seek (0);  			}  			imageStream = memeryStream;  		}  	} catch (Exception excp) {  		Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  		throw excp;  	}  } else {  	imageStream = await file.OpenAsync (FileAccessMode.Read);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: try {  	using (var client = new HttpClient ()) {  		if (c.IsCancellationRequested)  			return null;  		progress.Report (5);  		var rmuri = new Uri (img_url);  		var download = client.GetAsync (rmuri);  		download.Progress = (info' p) => {  			double percentage = 0;  			if (p.TotalBytesToReceive.HasValue)  				expectedSize = p.TotalBytesToReceive.Value;  			if (expectedSize > 0)  				percentage = (double)p.BytesReceived / (double)expectedSize;  			progress.Report (5 + (int)(percentage * 80));  			if (c.IsCancellationRequested)  				info.Cancel ();  		};  		if (c.IsCancellationRequested)  			return null;  		progress.Report (85);  		await download;  		if (download.Status != AsyncStatus.Completed) {  			Debug.WriteLine ("Failed to Download the image ...");  			return null;  		}  		var result = download.GetResults ();  		ulong recieved = 0;  		bool succ = result.Content.TryComputeLength (out recieved);  		bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  		if (corrupted)  			Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  		// recheck if the file existed and if its corrupted  		file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  		IRandomAccessStream fileStream = null;  		try {  			if (file != null) {  				var prop = await file.GetBasicPropertiesAsync ();  				if (prop.Size < expectedSize)  					file = null;  			}  			if (file == null)  				file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  			if (file != null)  				fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  		} finally {  			fileStream = null;  		}  		if (fileStream == null)  			Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  		var memeryStream = new InMemoryRandomAccessStream ();  		await result.Content.WriteToStreamAsync (memeryStream);  		progress.Report (90);  		memeryStream.Seek (0);  		if (fileStream != null && !corrupted) {  			await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  			await fileStream.FlushAsync ();  			progress.Report (95);  			memeryStream.Seek (0);  		}  		imageStream = memeryStream;  	}  } catch (Exception excp) {  	Debug.WriteLine ("Unrecoverale exception in caching image' detail : " + excp.Message);  	throw excp;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: using (var client = new HttpClient ()) {  	if (c.IsCancellationRequested)  		return null;  	progress.Report (5);  	var rmuri = new Uri (img_url);  	var download = client.GetAsync (rmuri);  	download.Progress = (info' p) => {  		double percentage = 0;  		if (p.TotalBytesToReceive.HasValue)  			expectedSize = p.TotalBytesToReceive.Value;  		if (expectedSize > 0)  			percentage = (double)p.BytesReceived / (double)expectedSize;  		progress.Report (5 + (int)(percentage * 80));  		if (c.IsCancellationRequested)  			info.Cancel ();  	};  	if (c.IsCancellationRequested)  		return null;  	progress.Report (85);  	await download;  	if (download.Status != AsyncStatus.Completed) {  		Debug.WriteLine ("Failed to Download the image ...");  		return null;  	}  	var result = download.GetResults ();  	ulong recieved = 0;  	bool succ = result.Content.TryComputeLength (out recieved);  	bool corrupted = !succ || recieved < expectedSize && expectedSize != 0;  	if (corrupted)  		Debug.WriteLine ("Image Downloading is Imcomplete (Corrupted)...");  	// recheck if the file existed and if its corrupted  	file = await IllustrationFolder.TryGetItemAsync (localName) as StorageFile;  	IRandomAccessStream fileStream = null;  	try {  		if (file != null) {  			var prop = await file.GetBasicPropertiesAsync ();  			if (prop.Size < expectedSize)  				file = null;  		}  		if (file == null)  			file = await IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.ReplaceExisting);  		if (file != null)  			fileStream = await file.OpenAsync (FileAccessMode.ReadWrite);  	} finally {  		fileStream = null;  	}  	if (fileStream == null)  		Debug.WriteLine ("Illustration file <" + localName + "> is in use.");  	var memeryStream = new InMemoryRandomAccessStream ();  	await result.Content.WriteToStreamAsync (memeryStream);  	progress.Report (90);  	memeryStream.Seek (0);  	if (fileStream != null && !corrupted) {  		await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  		await fileStream.FlushAsync ();  		progress.Report (95);  		memeryStream.Seek (0);  	}  	imageStream = memeryStream;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (5);  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: download.Progress = (info' p) => {  	double percentage = 0;  	if (p.TotalBytesToReceive.HasValue)  		expectedSize = p.TotalBytesToReceive.Value;  	if (expectedSize > 0)  		percentage = (double)p.BytesReceived / (double)expectedSize;  	progress.Report (5 + (int)(percentage * 80));  	if (c.IsCancellationRequested)  		info.Cancel ();  };  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: download.Progress = (info' p) => {  	double percentage = 0;  	if (p.TotalBytesToReceive.HasValue)  		expectedSize = p.TotalBytesToReceive.Value;  	if (expectedSize > 0)  		percentage = (double)p.BytesReceived / (double)expectedSize;  	progress.Report (5 + (int)(percentage * 80));  	if (c.IsCancellationRequested)  		info.Cancel ();  };  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (5 + (int)(percentage * 80));  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (5 + (int)(percentage * 80));  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (85);  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (90);  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: if (fileStream != null && !corrupted) {  	await memeryStream.AsStreamForRead ().CopyToAsync (fileStream.AsStreamForWrite ());  	await fileStream.FlushAsync ();  	progress.Report (95);  	memeryStream.Seek (0);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,LoadIllustrationAsyncInternal,The following statement contains a magic number: progress.Report (95);  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: return Task.Run (async () => {  	//var downloader = new BackgroundDownloader();  	foreach (var cid in chapters) {  		if (c.IsCancellationRequested)  			break;  		if (!CachedChapterSet.Contains (cid.ChapterId)) {  			if (c.IsCancellationRequested)  				break;  			try {  				var chapter = await GetChapterAsync (cid.ChapterId' cid.VolumeId' cid.SeriesId);  				if (cache_images) {  					var images = from line in chapter.Lines  					where line.ContentType == LineContentType.ImageContent  					select line.Content;  					//var bitmaps = (from img in images select (new BitmapImage(new Uri(img)))).ToArray();  					//Task.WaitAll(bitmaps.Select(bitmap => bitmap.WaitForLoadedAsync()).ToArray());  					Parallel.ForEach (images' new ParallelOptions {  						CancellationToken = c'  						MaxDegreeOfParallelism = 4  					}' async img => {  						if (c.IsCancellationRequested)  							return;  						// Cache the image  						//BitmapImage image = new BitmapImage(new Uri(img));  						//await image.WaitForLoadedAsync();  						var localName = System.IO.Path.GetFileName (img);  						if (CachedIllustrationSet.Contains (localName))  							return;  						try {  							//using (var client = new HttpClient())  							//{  							StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  							if (c.IsCancellationRequested)  								return;  							//var stream = await client.GetInputStreamAsync(new Uri(img));  							//if (c.IsCancellationRequested)  							//	return;  							//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  							//if (c.IsCancellationRequested)  							//	return;  							//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  							bool succ = false;  							try {  								var downloader = new BackgroundDownloader ();  								var task = downloader.CreateDownload (new Uri (img)' file);  								if (c.IsCancellationRequested)  									return;  								await task.StartAsync ();  								CachedIllustrationSet.Add (localName);  								succ = true;  							} catch (Exception) {  								succ = false;  							}  							if (!succ) {  								await file.DeleteAsync ();  								// Remove the file as it may mislead the system  							}  							//}  						} catch (Exception exc) {  							Debug.WriteLine (exc.Message);  						}  					});  				}  				progress.Report (cid.ChapterId);  			} catch (Exception exc) {  				Debug.WriteLine (exc.Message);  				return;  			}  		} else {  			progress.Report (cid.ChapterId);  		}  	}  });  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: foreach (var cid in chapters) {  	if (c.IsCancellationRequested)  		break;  	if (!CachedChapterSet.Contains (cid.ChapterId)) {  		if (c.IsCancellationRequested)  			break;  		try {  			var chapter = await GetChapterAsync (cid.ChapterId' cid.VolumeId' cid.SeriesId);  			if (cache_images) {  				var images = from line in chapter.Lines  				where line.ContentType == LineContentType.ImageContent  				select line.Content;  				//var bitmaps = (from img in images select (new BitmapImage(new Uri(img)))).ToArray();  				//Task.WaitAll(bitmaps.Select(bitmap => bitmap.WaitForLoadedAsync()).ToArray());  				Parallel.ForEach (images' new ParallelOptions {  					CancellationToken = c'  					MaxDegreeOfParallelism = 4  				}' async img => {  					if (c.IsCancellationRequested)  						return;  					// Cache the image  					//BitmapImage image = new BitmapImage(new Uri(img));  					//await image.WaitForLoadedAsync();  					var localName = System.IO.Path.GetFileName (img);  					if (CachedIllustrationSet.Contains (localName))  						return;  					try {  						//using (var client = new HttpClient())  						//{  						StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  						if (c.IsCancellationRequested)  							return;  						//var stream = await client.GetInputStreamAsync(new Uri(img));  						//if (c.IsCancellationRequested)  						//	return;  						//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  						//if (c.IsCancellationRequested)  						//	return;  						//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  						bool succ = false;  						try {  							var downloader = new BackgroundDownloader ();  							var task = downloader.CreateDownload (new Uri (img)' file);  							if (c.IsCancellationRequested)  								return;  							await task.StartAsync ();  							CachedIllustrationSet.Add (localName);  							succ = true;  						} catch (Exception) {  							succ = false;  						}  						if (!succ) {  							await file.DeleteAsync ();  							// Remove the file as it may mislead the system  						}  						//}  					} catch (Exception exc) {  						Debug.WriteLine (exc.Message);  					}  				});  			}  			progress.Report (cid.ChapterId);  		} catch (Exception exc) {  			Debug.WriteLine (exc.Message);  			return;  		}  	} else {  		progress.Report (cid.ChapterId);  	}  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: if (!CachedChapterSet.Contains (cid.ChapterId)) {  	if (c.IsCancellationRequested)  		break;  	try {  		var chapter = await GetChapterAsync (cid.ChapterId' cid.VolumeId' cid.SeriesId);  		if (cache_images) {  			var images = from line in chapter.Lines  			where line.ContentType == LineContentType.ImageContent  			select line.Content;  			//var bitmaps = (from img in images select (new BitmapImage(new Uri(img)))).ToArray();  			//Task.WaitAll(bitmaps.Select(bitmap => bitmap.WaitForLoadedAsync()).ToArray());  			Parallel.ForEach (images' new ParallelOptions {  				CancellationToken = c'  				MaxDegreeOfParallelism = 4  			}' async img => {  				if (c.IsCancellationRequested)  					return;  				// Cache the image  				//BitmapImage image = new BitmapImage(new Uri(img));  				//await image.WaitForLoadedAsync();  				var localName = System.IO.Path.GetFileName (img);  				if (CachedIllustrationSet.Contains (localName))  					return;  				try {  					//using (var client = new HttpClient())  					//{  					StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  					if (c.IsCancellationRequested)  						return;  					//var stream = await client.GetInputStreamAsync(new Uri(img));  					//if (c.IsCancellationRequested)  					//	return;  					//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  					//if (c.IsCancellationRequested)  					//	return;  					//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  					bool succ = false;  					try {  						var downloader = new BackgroundDownloader ();  						var task = downloader.CreateDownload (new Uri (img)' file);  						if (c.IsCancellationRequested)  							return;  						await task.StartAsync ();  						CachedIllustrationSet.Add (localName);  						succ = true;  					} catch (Exception) {  						succ = false;  					}  					if (!succ) {  						await file.DeleteAsync ();  						// Remove the file as it may mislead the system  					}  					//}  				} catch (Exception exc) {  					Debug.WriteLine (exc.Message);  				}  			});  		}  		progress.Report (cid.ChapterId);  	} catch (Exception exc) {  		Debug.WriteLine (exc.Message);  		return;  	}  } else {  	progress.Report (cid.ChapterId);  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: try {  	var chapter = await GetChapterAsync (cid.ChapterId' cid.VolumeId' cid.SeriesId);  	if (cache_images) {  		var images = from line in chapter.Lines  		where line.ContentType == LineContentType.ImageContent  		select line.Content;  		//var bitmaps = (from img in images select (new BitmapImage(new Uri(img)))).ToArray();  		//Task.WaitAll(bitmaps.Select(bitmap => bitmap.WaitForLoadedAsync()).ToArray());  		Parallel.ForEach (images' new ParallelOptions {  			CancellationToken = c'  			MaxDegreeOfParallelism = 4  		}' async img => {  			if (c.IsCancellationRequested)  				return;  			// Cache the image  			//BitmapImage image = new BitmapImage(new Uri(img));  			//await image.WaitForLoadedAsync();  			var localName = System.IO.Path.GetFileName (img);  			if (CachedIllustrationSet.Contains (localName))  				return;  			try {  				//using (var client = new HttpClient())  				//{  				StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  				if (c.IsCancellationRequested)  					return;  				//var stream = await client.GetInputStreamAsync(new Uri(img));  				//if (c.IsCancellationRequested)  				//	return;  				//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  				//if (c.IsCancellationRequested)  				//	return;  				//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  				bool succ = false;  				try {  					var downloader = new BackgroundDownloader ();  					var task = downloader.CreateDownload (new Uri (img)' file);  					if (c.IsCancellationRequested)  						return;  					await task.StartAsync ();  					CachedIllustrationSet.Add (localName);  					succ = true;  				} catch (Exception) {  					succ = false;  				}  				if (!succ) {  					await file.DeleteAsync ();  					// Remove the file as it may mislead the system  				}  				//}  			} catch (Exception exc) {  				Debug.WriteLine (exc.Message);  			}  		});  	}  	progress.Report (cid.ChapterId);  } catch (Exception exc) {  	Debug.WriteLine (exc.Message);  	return;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: if (cache_images) {  	var images = from line in chapter.Lines  	where line.ContentType == LineContentType.ImageContent  	select line.Content;  	//var bitmaps = (from img in images select (new BitmapImage(new Uri(img)))).ToArray();  	//Task.WaitAll(bitmaps.Select(bitmap => bitmap.WaitForLoadedAsync()).ToArray());  	Parallel.ForEach (images' new ParallelOptions {  		CancellationToken = c'  		MaxDegreeOfParallelism = 4  	}' async img => {  		if (c.IsCancellationRequested)  			return;  		// Cache the image  		//BitmapImage image = new BitmapImage(new Uri(img));  		//await image.WaitForLoadedAsync();  		var localName = System.IO.Path.GetFileName (img);  		if (CachedIllustrationSet.Contains (localName))  			return;  		try {  			//using (var client = new HttpClient())  			//{  			StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  			if (c.IsCancellationRequested)  				return;  			//var stream = await client.GetInputStreamAsync(new Uri(img));  			//if (c.IsCancellationRequested)  			//	return;  			//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  			//if (c.IsCancellationRequested)  			//	return;  			//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  			bool succ = false;  			try {  				var downloader = new BackgroundDownloader ();  				var task = downloader.CreateDownload (new Uri (img)' file);  				if (c.IsCancellationRequested)  					return;  				await task.StartAsync ();  				CachedIllustrationSet.Add (localName);  				succ = true;  			} catch (Exception) {  				succ = false;  			}  			if (!succ) {  				await file.DeleteAsync ();  				// Remove the file as it may mislead the system  			}  			//}  		} catch (Exception exc) {  			Debug.WriteLine (exc.Message);  		}  	});  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,CacheChaptersAsync,The following statement contains a magic number: Parallel.ForEach (images' new ParallelOptions {  	CancellationToken = c'  	MaxDegreeOfParallelism = 4  }' async img => {  	if (c.IsCancellationRequested)  		return;  	// Cache the image  	//BitmapImage image = new BitmapImage(new Uri(img));  	//await image.WaitForLoadedAsync();  	var localName = System.IO.Path.GetFileName (img);  	if (CachedIllustrationSet.Contains (localName))  		return;  	try {  		//using (var client = new HttpClient())  		//{  		StorageFile file = await AppGlobal.IllustrationFolder.CreateFileAsync (localName' CreationCollisionOption.FailIfExists);  		if (c.IsCancellationRequested)  			return;  		//var stream = await client.GetInputStreamAsync(new Uri(img));  		//if (c.IsCancellationRequested)  		//	return;  		//var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);  		//if (c.IsCancellationRequested)  		//	return;  		//await stream.AsStreamForRead().CopyToAsync(fileStream.AsStreamForWrite());  		bool succ = false;  		try {  			var downloader = new BackgroundDownloader ();  			var task = downloader.CreateDownload (new Uri (img)' file);  			if (c.IsCancellationRequested)  				return;  			await task.StartAsync ();  			CachedIllustrationSet.Add (localName);  			succ = true;  		} catch (Exception) {  			succ = false;  		}  		if (!succ) {  			await file.DeleteAsync ();  			// Remove the file as it may mislead the system  		}  		//}  	} catch (Exception exc) {  		Debug.WriteLine (exc.Message);  	}  });  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetIndexAsync,The following statement contains a magic number: if (Index == null || forceRefresh) {  	_indexUpdateTask = GetAsync (BookFolder' SeriesMetaFileName' () => DmzjDocSecBase.GetSeriesAsync (_seriesId)' TimeSpan.FromDays (7)' forceRefresh).ContinueWith (ts => {  		Index = ts.Result;  		_indexUpdateTask = null;  		return ts.Result;  	});  	await _indexUpdateTask;  }  
Magic Number,LightNovel.Data,CachedClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\CachedClient.cs,GetIndexAsync,The following statement contains a magic number: _indexUpdateTask = GetAsync (BookFolder' SeriesMetaFileName' () => DmzjDocSecBase.GetSeriesAsync (_seriesId)' TimeSpan.FromDays (7)' forceRefresh).ContinueWith (ts => {  	Index = ts.Result;  	_indexUpdateTask = null;  	return ts.Result;  });  
Magic Number,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,ParseRecentBookItems,The following statement contains a magic number: return newests.Select (li => {  	var a = li.Element ("a");  	var da = li.Descendants ("a").Last ();  	var did = da.GetAttributeValue ("href"' "").Split (new char[] {  		'/''  		'\\''  		'.'  	}' StringSplitOptions.RemoveEmptyEntries);  	return new BookItem {  		Source = Domain'  		SeriesId = did [0]'  		VolumeId = did [1]'  		Id = did [2]'  		Subtitle = da.GetAttributeValue ("title"' "")'  		Title = a.GetAttributeValue ("title"' "#")'  		CoverImageUri = a.Element ("img").GetAttributeValue ("src"' "")'  	};  });  
Magic Number,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,ParseRecentBookItems,The following statement contains a magic number: return new BookItem {  	Source = Domain'  	SeriesId = did [0]'  	VolumeId = did [1]'  	Id = did [2]'  	Subtitle = da.GetAttributeValue ("title"' "")'  	Title = a.GetAttributeValue ("title"' "#")'  	CoverImageUri = a.Element ("img").GetAttributeValue ("src"' "")'  };  
Magic Number,LightNovel.Data,DmzjDocSecBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\DmzjClient.cs,SearchBookAsync,The following statement contains a magic number: return JsonArray.Parse (srtext).Select (jo => {  	var jojo = jo.GetObject ();  	var paths = jojo ["last_chapter_url"].GetString ().Split (new char[] {  		'/''  		'.'  	}' StringSplitOptions.RemoveEmptyEntries);  	var book = new ExtendedBookItem {  		Source = "dmzj"'  		SeriesId = paths [0]'  		VolumeId = paths [1]'  		Id = paths [2]'  		Title = jojo ["full_name"].GetString ()'  		Subtitle = jojo ["fullc_name"].GetString ()'  		CoverImageUri = jojo ["image_url"].GetString ()'  		Author = jojo ["author"].GetString ()'  		Description = jojo ["description"].GetString ()'  		Catalogs = ParseCatalogs (jojo ["types"].GetString ())  	};  	return book;  }).ToList ();  
Magic Number,LightNovel.Data,Session,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,Session,The following statement contains a magic number: Expries = DateTime.Now.AddYears (-100);  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetVolumeAsync,The following statement contains a magic number: if (!String.IsNullOrEmpty (descriptNode.InnerText))  	volume.Description = WebUtility.HtmlDecode (descriptNode.InnerText);  else// If the description have some invalid characters... = =|||   {  	StringBuilder builder = new StringBuilder (200' 400);  	while (descriptNode != null) {  		builder.Append (descriptNode.InnerText);  		descriptNode = descriptNode.NextSibling;  	}  	volume.Description = builder.ToString ();  }  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetVolumeAsync,The following statement contains a magic number: if (!String.IsNullOrEmpty (descriptNode.InnerText))  	volume.Description = WebUtility.HtmlDecode (descriptNode.InnerText);  else// If the description have some invalid characters... = =|||   {  	StringBuilder builder = new StringBuilder (200' 400);  	while (descriptNode != null) {  		builder.Append (descriptNode.InnerText);  		descriptNode = descriptNode.NextSibling;  	}  	volume.Description = builder.ToString ();  }  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ExtractLabel,The following statement contains a magic number: if (s.StartsWith ("第"))  	return s.Substring (1' s.Length - 2);  else  	return s;  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,ExtractLabel,The following statement contains a magic number: return s.Substring (1' s.Length - 2);  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetFeaturedBooks,The following statement contains a magic number: foreach (var ranker in ranks) {  	var titleNode = ranker.PreviousSiblingElement ("h4");  	var booksNodes = ranker.Descendants ("a");  	if (booksNodes != null) {  		var header = CleanText (titleNode.InnerText);  		if (string.IsNullOrEmpty (header) && rankIdx <= 2) {  			header = rankNames [rankIdx++];  		}  		var books = (from bookNode in booksNodes  		select ParseBookItem (bookNode)).Where (book => !BlackList.Contains (book.Id)).ToList ();  		bookLists.Add (header' books);  	}  }  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetFeaturedBooks,The following statement contains a magic number: if (booksNodes != null) {  	var header = CleanText (titleNode.InnerText);  	if (string.IsNullOrEmpty (header) && rankIdx <= 2) {  		header = rankNames [rankIdx++];  	}  	var books = (from bookNode in booksNodes  	select ParseBookItem (bookNode)).Where (book => !BlackList.Contains (book.Id)).ToList ();  	bookLists.Add (header' books);  }  
Magic Number,LightNovel.Data,LightKindomHtmlClient,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightKindomHtmlClient.cs,GetFeaturedBooks,The following statement contains a magic number: if (string.IsNullOrEmpty (header) && rankIdx <= 2) {  	header = rankNames [rankIdx++];  }  
Magic Number,LightNovel.Data,Convert,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightNovelDataModel.cs,FromBase64UrlEncoding,The following statement contains a magic number: switch (encoded.Length % 4) {  case 2:  	incoming += "==";  	break;  case 3:  	incoming += "=";  	break;  }  
Magic Number,LightNovel.Data,Convert,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightNovelDataModel.cs,FromBase64UrlEncoding,The following statement contains a magic number: switch (encoded.Length % 4) {  case 2:  	incoming += "==";  	break;  case 3:  	incoming += "=";  	break;  }  
Magic Number,LightNovel.Data,Convert,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightNovelDataModel.cs,FromBase64UrlEncoding,The following statement contains a magic number: switch (encoded.Length % 4) {  case 2:  	incoming += "==";  	break;  case 3:  	incoming += "=";  	break;  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: try {  	if (nav.ChapterId != null && nav.VolumeId == null && nav.SeriesId == null) {  		if (nav.SeriesId == null) {  			throw new Exception ("Cannot navigate to reading page without Volume and Series ID");  			var chapter = await _client.GetChapterAsync (nav.ChapterId' "-1"' "-1");  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  			nav.SeriesId = chapter.ParentSeriesId;  			nav.VolumeId = chapter.ParentVolumeId;  		}  		_client = await CachedClient.GetForSeriesAsync (nav.SeriesId);  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		var volume = series.Volumes.First (vol => vol.Id == nav.VolumeId);  		nav.VolumeNo = series.Volumes.IndexOf (volume);  		nav.ChapterNo = volume.Chapters.IndexOf (volume.Chapters.First (cpt => cpt.Id == nav.ChapterId));  	} else if (nav.VolumeId != null) {  		if (nav.SeriesId == null) {  			throw new Exception ("Cannot navigate to reading page without Volume and Series ID");  		}  		_client = await CachedClient.GetForSeriesAsync (nav.SeriesId);  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		SeriesData = series;  		VolumeData = SeriesData.Volumes.FirstOrDefault (vol => vol.Id == nav.VolumeId);  		if (VolumeData != null) {  			nav.VolumeNo = SeriesData.Volumes.IndexOf (VolumeData);  			VolumeNo = nav.VolumeNo;  		} else {  			series = await _client.GetIndexAsync (true);  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  			SeriesData = series;  			VolumeData = SeriesData.Volumes.FirstOrDefault (vol => vol.Id == nav.VolumeId);  			nav.VolumeNo = SeriesData.Volumes.IndexOf (VolumeData);  			VolumeNo = nav.VolumeNo;  		}  	}  } catch (Exception ex) {  	Debug.WriteLine ("Error in converting navigator data : {0}"' ex.Message);  	if (c.IsCancellationRequested) {  		IsLoading = false;  		return;  	}  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentNetworkIssue)'  		new LineViewModel (3' "Navigator Resolve Exception : " + ex.Message)  	};  	IsLoading = false;  	LineNo = 0;  	return;  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: try {  	if (nav.ChapterId != null && nav.VolumeId == null && nav.SeriesId == null) {  		if (nav.SeriesId == null) {  			throw new Exception ("Cannot navigate to reading page without Volume and Series ID");  			var chapter = await _client.GetChapterAsync (nav.ChapterId' "-1"' "-1");  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  			nav.SeriesId = chapter.ParentSeriesId;  			nav.VolumeId = chapter.ParentVolumeId;  		}  		_client = await CachedClient.GetForSeriesAsync (nav.SeriesId);  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		var volume = series.Volumes.First (vol => vol.Id == nav.VolumeId);  		nav.VolumeNo = series.Volumes.IndexOf (volume);  		nav.ChapterNo = volume.Chapters.IndexOf (volume.Chapters.First (cpt => cpt.Id == nav.ChapterId));  	} else if (nav.VolumeId != null) {  		if (nav.SeriesId == null) {  			throw new Exception ("Cannot navigate to reading page without Volume and Series ID");  		}  		_client = await CachedClient.GetForSeriesAsync (nav.SeriesId);  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		SeriesData = series;  		VolumeData = SeriesData.Volumes.FirstOrDefault (vol => vol.Id == nav.VolumeId);  		if (VolumeData != null) {  			nav.VolumeNo = SeriesData.Volumes.IndexOf (VolumeData);  			VolumeNo = nav.VolumeNo;  		} else {  			series = await _client.GetIndexAsync (true);  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  			SeriesData = series;  			VolumeData = SeriesData.Volumes.FirstOrDefault (vol => vol.Id == nav.VolumeId);  			nav.VolumeNo = SeriesData.Volumes.IndexOf (VolumeData);  			VolumeNo = nav.VolumeNo;  		}  	}  } catch (Exception ex) {  	Debug.WriteLine ("Error in converting navigator data : {0}"' ex.Message);  	if (c.IsCancellationRequested) {  		IsLoading = false;  		return;  	}  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentNetworkIssue)'  		new LineViewModel (3' "Navigator Resolve Exception : " + ex.Message)  	};  	IsLoading = false;  	LineNo = 0;  	return;  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentNetworkIssue)'  	new LineViewModel (3' "Navigator Resolve Exception : " + ex.Message)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentNetworkIssue)'  	new LineViewModel (3' "Navigator Resolve Exception : " + ex.Message)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: try {  	if (seriesId > 0 && (SeriesData == null || seriesId != int.Parse (SeriesData.Id))) {  		if (DownloadingTask != null) {  			DownloadingTask.Cancel ();  			try {  				await DownloadingTask;  			} catch (Exception) {  			}  			DownloadingTask = null;  			NotifyPropertyChanged ("IsDownloading");  		}  		_client = await CachedClient.GetForSeriesAsync (seriesId.ToString ());  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		SeriesData = series;  	}  	TryLoadVolumnData (volumeNo);  	if (chapterNo >= 0 && (ChapterData == null || ChapterData.Id != VolumeData.Chapters [chapterNo].Id)) {  		var chapter = await _client.GetChapterAsync (VolumeData.Chapters [chapterNo].Position);  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		if (chapter.Lines.Count == 0) {  			chapter = await _client.GetChapterAsync (VolumeData.Chapters [chapterNo].Position' true);  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  		}  		chapter.Title = VolumeData.Chapters [chapterNo].Title;  		ChapterData = chapter;  		ChapterNo = chapterNo;  		LoadNextChapterCommand.RaiseCanExecuteChanged ();  		LoadPrevChapterCommand.RaiseCanExecuteChanged ();  		PreCachingNextChapter (chapterNo' preCachePolicy);  		SetupContents ();  	}  } catch (Exception ex) {  	Debug.WriteLine (ex.Message);  	if (c.IsCancellationRequested) {  		IsLoading = false;  		return;  	}  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentNetworkIssue)'  		new LineViewModel (3' "Detail : " + ex.Message)  	};  	IsLoading = false;  	LineNo = 0;  	return;  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: try {  	if (seriesId > 0 && (SeriesData == null || seriesId != int.Parse (SeriesData.Id))) {  		if (DownloadingTask != null) {  			DownloadingTask.Cancel ();  			try {  				await DownloadingTask;  			} catch (Exception) {  			}  			DownloadingTask = null;  			NotifyPropertyChanged ("IsDownloading");  		}  		_client = await CachedClient.GetForSeriesAsync (seriesId.ToString ());  		var series = _client.Index;  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		SeriesData = series;  	}  	TryLoadVolumnData (volumeNo);  	if (chapterNo >= 0 && (ChapterData == null || ChapterData.Id != VolumeData.Chapters [chapterNo].Id)) {  		var chapter = await _client.GetChapterAsync (VolumeData.Chapters [chapterNo].Position);  		if (c.IsCancellationRequested) {  			IsLoading = false;  			return;  		}  		if (chapter.Lines.Count == 0) {  			chapter = await _client.GetChapterAsync (VolumeData.Chapters [chapterNo].Position' true);  			if (c.IsCancellationRequested) {  				IsLoading = false;  				return;  			}  		}  		chapter.Title = VolumeData.Chapters [chapterNo].Title;  		ChapterData = chapter;  		ChapterNo = chapterNo;  		LoadNextChapterCommand.RaiseCanExecuteChanged ();  		LoadPrevChapterCommand.RaiseCanExecuteChanged ();  		PreCachingNextChapter (chapterNo' preCachePolicy);  		SetupContents ();  	}  } catch (Exception ex) {  	Debug.WriteLine (ex.Message);  	if (c.IsCancellationRequested) {  		IsLoading = false;  		return;  	}  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentNetworkIssue)'  		new LineViewModel (3' "Detail : " + ex.Message)  	};  	IsLoading = false;  	LineNo = 0;  	return;  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentNetworkIssue)'  	new LineViewModel (3' "Detail : " + ex.Message)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,LoadDataInternalAsync,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentNetworkIssue)'  	new LineViewModel (3' "Detail : " + ex.Message)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,SetupContents,The following statement contains a magic number: if (Contents.Count == 0) {  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentSeviceIssue)'  		new LineViewModel (3' "Detail : " + _ChapterData.ErrorMessage)  	};  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,SetupContents,The following statement contains a magic number: if (Contents.Count == 0) {  	Contents = new LineViewModel[] {  		new LineViewModel (1' LoadingFailedContentOverallLabel)'  		new LineViewModel (2' LoadingFailedContentSeviceIssue)'  		new LineViewModel (3' "Detail : " + _ChapterData.ErrorMessage)  	};  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,SetupContents,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentSeviceIssue)'  	new LineViewModel (3' "Detail : " + _ChapterData.ErrorMessage)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,SetupContents,The following statement contains a magic number: Contents = new LineViewModel[] {  	new LineViewModel (1' LoadingFailedContentOverallLabel)'  	new LineViewModel (2' LoadingFailedContentSeviceIssue)'  	new LineViewModel (3' "Detail : " + _ChapterData.ErrorMessage)  };  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CachingRestChaptersAsync,The following statement contains a magic number: for (int i = ChapterNo + 2; i < VolumeData.Chapters.Count; i++) {  	chapters.Add (VolumeData.Chapters [i].Position);  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CachingRestChaptersAsync,The following statement contains a magic number: try {  	await DownloadingTask;  	if (DownloadingTask.AsTask ().IsCanceled)  		return null;  	result = DownloadingProgress > 0.99;  } catch (Exception) {  }  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CachingRestChaptersAsync,The following statement contains a magic number: result = DownloadingProgress > 0.99;  
Magic Number,LightNovel.ViewModels,ReadingPageViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,CreateBookmark,The following statement contains a magic number: if (IsDataLoaded) {  	bookmark.ChapterTitle = ChapterData.Title;  	bookmark.VolumeTitle = VolumeData.Title;  	bookmark.SeriesTitle = SeriesData.Title;  	bookmark.DescriptionThumbnailUri = VolumeData.CoverImageUri;  	bookmark.DescriptionImageUri = VolumeData.CoverImageUri;  	var ic = VolumeData.Chapters.FirstOrDefault (c => DmzjDocSecBase.IsIllustrationChapter (c));  	string icid = ic != null ? ic.Id : VolumeData.Chapters [0].Id;  	var ccache = _client.ChapterCache;  	if (ccache.ContainsKey (icid) && ccache [icid].IsCompleted && !ccache [icid].IsFaulted) {  		var imageLine = ccache [icid].Result.Lines.FirstOrDefault (line => line.ContentType == LineContentType.ImageContent);  		if (imageLine != null)  			bookmark.DescriptionImageUri = imageLine.Content;  	}  	if (bookmark.DescriptionImageUri == VolumeData.CoverImageUri) {  		var imageLine = Contents.Cast<LineViewModel> ().FirstOrDefault (line => line.IsImage);  		if (imageLine != null)  			bookmark.DescriptionImageUri = imageLine.Content;  	}  	var textLines = from line in Contents.Cast<LineViewModel> ()  	where !line.IsImage && line.No >= LineNo && line.No <= LineNo + 5  	select line.Content;  	var builder = new StringBuilder ();  	bookmark.ContentDescription = textLines.Aggregate (builder' (b' s) => {  		b.AppendLine (s);  		return b;  	}).ToString ();  } else {  	bookmark.ContentDescription = "Failed to load data' please try again when you connected";  }  
Magic Number,LightNovel.ViewModels,LineViewModel,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\ViewModels\ViewModels.cs,AddCommentAsync,The following statement contains a magic number: if (!string.IsNullOrEmpty (commentText) && commentText.Length < 300 && !String.IsNullOrEmpty (ChapterFullPath)) {  	if (HasNoComment)  		MarkAsCommented ();  	Comments.Add (new CommentViewModel (commentText));  	try {  		var client = new CommentsClient (0' null);  		var result = await client.CreateCommentAsync (ChapterFullPath' UniqueIdentifier' commentText);  		if (!result) {  		}  		return result;  	} catch {  		return false;  	}  }  
Missing Default,LightNovel.Data,Convert,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Data\LightNovelDataModel.cs,FromBase64UrlEncoding,The following switch statement is missing a default case: switch (encoded.Length % 4) {  case 2:  	incoming += "==";  	break;  case 3:  	incoming += "=";  	break;  }  
Missing Default,NotificationsExtensions.ToastContent,ToastNotificationBase,F:\newReposMay17\ArcEarth_LightNovelClientWindows\LightNovelClient\LightNovelClient.Shared\Notifaction\ToastContent.cs,AppendAudioTag,The following switch statement is missing a default case: switch (Audio.Content) {  case ToastAudioContent.IM:  	audioSrc = "ms-winsoundevent:Notification.IM";  	break;  case ToastAudioContent.Mail:  	audioSrc = "ms-winsoundevent:Notification.Mail";  	break;  case ToastAudioContent.Reminder:  	audioSrc = "ms-winsoundevent:Notification.Reminder";  	break;  case ToastAudioContent.SMS:  	audioSrc = "ms-winsoundevent:Notification.SMS";  	break;  case ToastAudioContent.LoopingAlarm:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm";  	break;  case ToastAudioContent.LoopingAlarm2:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm2";  	break;  case ToastAudioContent.LoopingAlarm3:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm3";  	break;  case ToastAudioContent.LoopingAlarm4:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm4";  	break;  case ToastAudioContent.LoopingAlarm5:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm5";  	break;  case ToastAudioContent.LoopingAlarm6:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm6";  	break;  case ToastAudioContent.LoopingAlarm7:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm7";  	break;  case ToastAudioContent.LoopingAlarm8:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm8";  	break;  case ToastAudioContent.LoopingAlarm9:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm9";  	break;  case ToastAudioContent.LoopingAlarm10:  	audioSrc = "ms-winsoundevent:Notification.Looping.Alarm10";  	break;  case ToastAudioContent.LoopingCall:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call";  	break;  case ToastAudioContent.LoopingCall2:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call2";  	break;  case ToastAudioContent.LoopingCall3:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call3";  	break;  case ToastAudioContent.LoopingCall4:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call4";  	break;  case ToastAudioContent.LoopingCall5:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call5";  	break;  case ToastAudioContent.LoopingCall6:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call6";  	break;  case ToastAudioContent.LoopingCall7:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call7";  	break;  case ToastAudioContent.LoopingCall8:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call8";  	break;  case ToastAudioContent.LoopingCall9:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call9";  	break;  case ToastAudioContent.LoopingCall10:  	audioSrc = "ms-winsoundevent:Notification.Looping.Call10";  	break;  }  
