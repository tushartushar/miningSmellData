Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Oatc.OpenMI.Sdk.Wrapper,LinkableEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableEngine.cs,GetOutputExchangeItem,Cyclomatic complexity of the method is 11
Complex Method,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,Cyclomatic complexity of the method is 10
Complex Method,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,Cyclomatic complexity of the method is 9
Complex Method,Oatc.OpenMI.Sdk.Wrapper,SmartOutputLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartOutputLink.cs,Initialize,Cyclomatic complexity of the method is 13
Long Identifier,Oatc.OpenMI.Sdk.Wrapper,LinkableEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableEngine.cs,GetOutputExchangeItem,The length of the parameter linearConversionDataOperationExists is 35.
Long Identifier,Oatc.OpenMI.Sdk.Wrapper,LinkableEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableEngine.cs,GetOutputExchangeItem,The length of the parameter smartBufferDataOperationExists is 30.
Long Identifier,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,Prepare,The length of the parameter argumentRelaxationFactorWasFound is 32.
Long Identifier,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,Prepare,The length of the parameter argumentDoExtendedValidationWasFound is 36.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,AddLink,The length of the statement  "			throw new System.Exception ("AddLink method in the SmartWrapper cannot be invoked before the Initialize method has been invoked"); " is 130.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,AddLink,The length of the statement  "			throw new System.Exception ("AddLink method in the SmartWrapper cannot be invoked after the PrepareForComputation method has been invoked"); " is 140.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,AddLink,The length of the statement  "			throw new System.Exception ("SourceComponent.ID or TargetComponent.ID in Link does not match the Component ID for the component to which the Link was added"); " is 158.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,Initialize,The length of the statement  "		throw new System.Exception ("The Initialize method in the SmartWrapper cannot be invoked before the EngineApiAccess is assigned"); " is 130.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,Prepare,The length of the statement  "			throw new System.Exception ("PrepareForComputation method in SmartWrapper cannot be invoked before the EngineApiAccess has been assigned"); " is 139.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,Prepare,The length of the statement  "			throw new System.Exception ("PrepareForComputation method in SmartWrapper cannot be invoked before the Initialize method has been invoked"); " is 140.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,ITimeToString,The length of the statement  "		timeString = "[" + (CalendarConverter.ModifiedJulian2Gregorian (((ITimeSpan)time).Start.ModifiedJulianDay)).ToString () + "' " + (CalendarConverter.ModifiedJulian2Gregorian (((ITimeSpan)time).End.ModifiedJulianDay)).ToString () + "]"; " is 234.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,ITimeToString,The length of the statement  "		throw new System.Exception ("Illigal type used for time' must be OpenMI.Standard.ITimeStamp or OpenMI.Standard.TimeSpan"); " is 122.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,The length of the statement  "				throw new Exception ("GetValues method was invoked using a time argument that representes a time before the allowed time horizon"); " is 131.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,The length of the statement  "				throw new Exception ("GetValues method was invoked using a time argument that representes a time that is after the allowed time horizon"); " is 138.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,The length of the statement  "				throw new Exception ("GetValues method was invoked using a time argument that representes a time before the allowed time horizon"); " is 131.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,The length of the statement  "				throw new Exception ("GetValues method was invoked using a time argument that representes a time that is after the allowed time horizon"); " is 138.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,CheckTimeArgumentInGetvaluesMethod,The length of the statement  "		throw new Exception ("Illegal data type for time was used in argument to GetValues method. Type must be OpenMI.Standard.ITimeStamp or ITimeSpan"); " is 146.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,SendSourceAfterGetValuesCallEvent,The length of the statement  "	//TODO: QS = " + _smartOutputLinkSet.GetLink(LinkID).SourceQuantity.ID + " 'QT = " + _smartOutputLinkSet.GetLink(LinkID).TargetQuantity.ID; " is 139.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartLink.cs,GetErrors,The length of the statement  "	if (link.SourceQuantity.ValueType != global::OpenMI.Standard.ValueType.Scalar || link.TargetQuantity.ValueType != global::OpenMI.Standard.ValueType.Scalar) { " is 157.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartLink.cs,GetErrors,The length of the statement  "		messages.Add ("Unit  equals null in link from " + link.SourceComponent.ModelID + " to " + link.TargetComponent.ModelID); " is 120.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartLink.cs,GetErrors,The length of the statement  "		messages.Add ("Unit conversion factor equals zero in link from " + link.SourceComponent.ModelID + " to " + link.TargetComponent.ModelID); " is 137.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartLink.cs,GetWarnings,The length of the statement  "		messages.Add ("Different dimensions used in link from " + link.SourceComponent.ModelID + " to " + link.TargetComponent.ModelID); " is 128.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartOutputLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartOutputLink.cs,Initialize,The length of the statement  "			if (link.GetDataOperation (i).GetArgument (n).Key == "Type" && link.GetDataOperation (i).GetArgument (n).Value == "SpatialMapping") { " is 133.
Long Statement,Oatc.OpenMI.Sdk.Wrapper,SmartOutputLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartOutputLink.cs,UpdateBuffer,The length of the statement  "			TimeValueSet timeValueSet = ((IAdvancedEngine)this.Engine).GetValues (link.SourceQuantity.ID' link.SourceElementSet.ID); " is 120.
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments = new Oatc.OpenMI.Sdk.Backbone.Argument[3];  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments [2] = new Oatc.OpenMI.Sdk.Backbone.Argument ();  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments [2].Description = "Parameter B. Used in conversion: A*x + B";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments [2].Key = "B";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments [2].Value = "0.0";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinearConversionDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinearConversionDataOperation.cs,LinearConversionDataOperation,The following statement contains a magic number: _arguments [2].ReadOnly = false;  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,LinkableRunEngine,The following statement contains a magic number: _timeEpsilon = 0.10 * 1.0 / (3600.0 * 24.0);  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,LinkableRunEngine,The following statement contains a magic number: _timeEpsilon = 0.10 * 1.0 / (3600.0 * 24.0);  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,LinkableRunEngine,The following statement contains a magic number: _timeEpsilon = 0.10 * 1.0 / (3600.0 * 24.0);  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,GetValues,The following statement contains a magic number: lock (syncLock) {  	try {  		CheckTimeArgumentInGetvaluesMethod (time);  		SendSourceAfterGetValuesCallEvent (time' LinkID);  		IValueSet engineResult = new ScalarSet ();  		int outputLinkIndex = -999;  		for (int i = 0; i < _smartOutputLinks.Count; i++) {  			if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  				outputLinkIndex = i;  				break;  			}  		}  		if (_isBusy == false) {  			//while(IsLater(time'_engineApiAccess.GetCurrentTime()))  			while (IsLater (time' ((SmartOutputLink)_smartOutputLinks [outputLinkIndex]).GetLastBufferedTime ())) {  				_isBusy = true;  				//Update input links  				// new parallel code  				var threadList = new ArrayList ();  				foreach (SmartInputLink smartInputLink in _smartInputLinks) {  					var thread = new Thread (delegate () {  						smartInputLink.UpdateInput ();  					});  					thread.IsBackground = true;  					threadList.Add (thread);  					thread.Start ();  				}  				foreach (Thread thread in threadList) {  					thread.Join ();  				}  				// original serial code  				//foreach(SmartInputLink smartInputLink in _smartInputLinks)  				//{  				//    smartInputLink.UpdateInput();  				//}  				_isBusy = false;  				//Perform Timestep  				if (_engineApiAccess.PerformTimeStep ()) {  					//Update buffer with engine values' Time is timestamp  					foreach (SmartOutputLink smartOutputLink in _smartOutputLinks) {  						smartOutputLink.UpdateBuffer ();  					}  					SendEvent (EventType.DataChanged);  				}  			}  		}  		engineResult = ((SmartOutputLink)_smartOutputLinks [outputLinkIndex]).GetValue (time);  		SendEvent (EventType.SourceBeforeGetValuesReturn);  		return engineResult;  	}  	catch (System.Exception e) {  		string message = "Exception in LinkableComponent. ComponentID: ";  		message += this.ComponentID;  		throw new System.Exception (message' e);  	}  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,GetValues,The following statement contains a magic number: try {  	CheckTimeArgumentInGetvaluesMethod (time);  	SendSourceAfterGetValuesCallEvent (time' LinkID);  	IValueSet engineResult = new ScalarSet ();  	int outputLinkIndex = -999;  	for (int i = 0; i < _smartOutputLinks.Count; i++) {  		if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  			outputLinkIndex = i;  			break;  		}  	}  	if (_isBusy == false) {  		//while(IsLater(time'_engineApiAccess.GetCurrentTime()))  		while (IsLater (time' ((SmartOutputLink)_smartOutputLinks [outputLinkIndex]).GetLastBufferedTime ())) {  			_isBusy = true;  			//Update input links  			// new parallel code  			var threadList = new ArrayList ();  			foreach (SmartInputLink smartInputLink in _smartInputLinks) {  				var thread = new Thread (delegate () {  					smartInputLink.UpdateInput ();  				});  				thread.IsBackground = true;  				threadList.Add (thread);  				thread.Start ();  			}  			foreach (Thread thread in threadList) {  				thread.Join ();  			}  			// original serial code  			//foreach(SmartInputLink smartInputLink in _smartInputLinks)  			//{  			//    smartInputLink.UpdateInput();  			//}  			_isBusy = false;  			//Perform Timestep  			if (_engineApiAccess.PerformTimeStep ()) {  				//Update buffer with engine values' Time is timestamp  				foreach (SmartOutputLink smartOutputLink in _smartOutputLinks) {  					smartOutputLink.UpdateBuffer ();  				}  				SendEvent (EventType.DataChanged);  			}  		}  	}  	engineResult = ((SmartOutputLink)_smartOutputLinks [outputLinkIndex]).GetValue (time);  	SendEvent (EventType.SourceBeforeGetValuesReturn);  	return engineResult;  }  catch (System.Exception e) {  	string message = "Exception in LinkableComponent. ComponentID: ";  	message += this.ComponentID;  	throw new System.Exception (message' e);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,The following statement contains a magic number: try {  	if (!_initializeWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method before invocation of Initialize method");  	}  	if (_prepareForCompotationWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method after invocation of Prepare method");  	}  	int index = -999;  	for (int i = 0; i < _smartInputLinks.Count; i++) {  		if (((SmartInputLink)_smartInputLinks [i]).link.ID == LinkID) {  			index = i;  			break;  		}  	}  	if (index != -999) {  		_smartInputLinks.RemoveAt (index);  	}  	else {  		for (int i = 0; i < _smartOutputLinks.Count; i++) {  			if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  				index = i;  				break;  			}  		}  		_smartOutputLinks.RemoveAt (index);  	}  	if (index == -999) {  		throw new Exception ("Failed to find link.ID in internal link lists in method RemoveLink()");  	}  }  catch (System.Exception e) {  	string message = "Exception in LinkableComponent. ";  	message += "ComponentID: " + this.ComponentID + "\n";  	throw new System.Exception (message' e);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,The following statement contains a magic number: try {  	if (!_initializeWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method before invocation of Initialize method");  	}  	if (_prepareForCompotationWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method after invocation of Prepare method");  	}  	int index = -999;  	for (int i = 0; i < _smartInputLinks.Count; i++) {  		if (((SmartInputLink)_smartInputLinks [i]).link.ID == LinkID) {  			index = i;  			break;  		}  	}  	if (index != -999) {  		_smartInputLinks.RemoveAt (index);  	}  	else {  		for (int i = 0; i < _smartOutputLinks.Count; i++) {  			if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  				index = i;  				break;  			}  		}  		_smartOutputLinks.RemoveAt (index);  	}  	if (index == -999) {  		throw new Exception ("Failed to find link.ID in internal link lists in method RemoveLink()");  	}  }  catch (System.Exception e) {  	string message = "Exception in LinkableComponent. ";  	message += "ComponentID: " + this.ComponentID + "\n";  	throw new System.Exception (message' e);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,The following statement contains a magic number: try {  	if (!_initializeWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method before invocation of Initialize method");  	}  	if (_prepareForCompotationWasInvoked) {  		throw new Exception ("Illegal invocation of RemoveLink method after invocation of Prepare method");  	}  	int index = -999;  	for (int i = 0; i < _smartInputLinks.Count; i++) {  		if (((SmartInputLink)_smartInputLinks [i]).link.ID == LinkID) {  			index = i;  			break;  		}  	}  	if (index != -999) {  		_smartInputLinks.RemoveAt (index);  	}  	else {  		for (int i = 0; i < _smartOutputLinks.Count; i++) {  			if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  				index = i;  				break;  			}  		}  		_smartOutputLinks.RemoveAt (index);  	}  	if (index == -999) {  		throw new Exception ("Failed to find link.ID in internal link lists in method RemoveLink()");  	}  }  catch (System.Exception e) {  	string message = "Exception in LinkableComponent. ";  	message += "ComponentID: " + this.ComponentID + "\n";  	throw new System.Exception (message' e);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,The following statement contains a magic number: if (index != -999) {  	_smartInputLinks.RemoveAt (index);  }  else {  	for (int i = 0; i < _smartOutputLinks.Count; i++) {  		if (((SmartOutputLink)_smartOutputLinks [i]).link.ID == LinkID) {  			index = i;  			break;  		}  	}  	_smartOutputLinks.RemoveAt (index);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,LinkableRunEngine,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\LinkableRunEngine.cs,RemoveLink,The following statement contains a magic number: if (index == -999) {  	throw new Exception ("Failed to find link.ID in internal link lists in method RemoveLink()");  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments = new Oatc.OpenMI.Sdk.Backbone.Argument[3];  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments [2] = new Oatc.OpenMI.Sdk.Backbone.Argument ();  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments [2].Description = "Do extended validation. Must be \"true\" or \"false\"";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments [2].Key = "Do Extended Data Validation";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments [2].Value = "true";  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,SmartBufferDataOperation,The following statement contains a magic number: _arguments [2].ReadOnly = false;  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,Prepare,The following statement contains a magic number: for (int i = 0; i < this._arguments.Length; i++) {  	if (_arguments [i].Key == _arguments [1].Key)//Relaxation Factor  	 {  		_relaxationFactor = Convert.ToDouble (_arguments [i].Value);  		argumentRelaxationFactorWasFound = true;  	}  	if (_arguments [i].Key == _arguments [2].Key)//Do extended validation  	 {  		_doExtendedValidation = Convert.ToBoolean (_arguments [i].Value);  		argumentDoExtendedValidationWasFound = true;  	}  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartBufferDataOperation,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartBufferDataOperation.cs,Prepare,The following statement contains a magic number: if (_arguments [i].Key == _arguments [2].Key)//Do extended validation   {  	_doExtendedValidation = Convert.ToBoolean (_arguments [i].Value);  	argumentDoExtendedValidationWasFound = true;  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartInputLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartInputLink.cs,UpdateInput,The following statement contains a magic number: if (inputTime != null) {  	SendEvent (EventType.TargetBeforeGetValuesCall' this.link.TargetComponent);  	IScalarSet sourceValueSet = (IScalarSet)link.SourceComponent.GetValues (inputTime' link.ID);  	//The input values set is copied in ordet to avoid the risk that it is changed be the provider.  	double targetMissValDef = this._engine.GetMissingValueDefinition ();  	ScalarSet targetValueSet = new ScalarSet (sourceValueSet);  	for (int i = 0; i < sourceValueSet.Count; i++) {  		if (!sourceValueSet.IsValid (i)) {  			targetValueSet.data [i] = targetMissValDef;  		}  	}  	targetValueSet.MissingValueDefinition = targetMissValDef;  	targetValueSet.CompareDoublesEpsilon = targetMissValDef / 1.0e+10;  	SendEvent (EventType.TargetAfterGetValuesReturn' this.link.TargetComponent);  	this.Engine.SetValues (link.TargetQuantity.ID' link.TargetElementSet.ID' targetValueSet);  }  
Magic Number,Oatc.OpenMI.Sdk.Wrapper,SmartInputLink,C:\repos\CNH-Hyper-Extractive_parallel-sdk\OpenMI_1.4\Oatc.OpenMI.Sdk.Wrapper\SmartInputLink.cs,UpdateInput,The following statement contains a magic number: targetValueSet.CompareDoublesEpsilon = targetMissValDef / 1.0e+10;  
