Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MobileDB.Common.ExpressiveAnnotations,Lexer,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Lexer.cs,Analyze,The length of the statement  "            // once we've reached the end of the string' EOF token is returned - thus' parser's lookahead does not have to worry about running out of tokens " is 144.
Long Statement,MobileDB.Common.ExpressiveAnnotations,Lexer,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Lexer.cs,ConvertTokenValue,The length of the statement  "                    // by default' treat real numeric literals as 64-bit floating binary point values (as C# does' gives better precision than float) " is 129.
Long Statement,MobileDB.Common.ExpressiveAnnotations,Toolchain,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Toolchain.cs,RegisterMethods,The length of the statement  "                        @"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0'61}[a-zA-Z0-9])?)*$")); " is 138.
Long Statement,MobileDB.Common.ExpressiveAnnotations,Toolchain,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Toolchain.cs,RegisterMethods,The length of the statement  "                        @"^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1'3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1'3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1'3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1'2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2'})))(?::\d{2'5})?(?:\/\S*)?$"' " is 449.
Long Statement,MobileDB.Common.ExpressiveAnnotations,Helper,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Helper.cs,MakeTypesCompatible,The length of the statement  "            // promote numeric values to double - do all computations with higher precision (to be compatible with javascript' e.g. notation 1/2' should give 0.5 double not 0 int) " is 167.
Long Statement,MobileDB.Common.ExpressiveAnnotations,Helper,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Helper.cs,MakeTypesCompatible,The length of the statement  "            // non-nullable operand is converted to nullable if necessary' and the lifted-to-nullable form of the comparison is used (C# rule' which is currently not followed by expression trees) " is 183.
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: var nMod100 = number%100;
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13)              {                  return numberString + "th";              }
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13)              {                  return numberString + "th";              }
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,MobileDB.Common.Utilities,Inflector,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\Utilities\Inflector.cs,Ordanize,The following statement contains a magic number: switch (number%10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,MobileDB.Common.ExpressiveAnnotations,Lexer,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Common\ExpressiveAnnotations\Lexer.cs,ConvertTokenValue,The following statement contains a magic number: switch (type)              {                  case TokenType.NULL:                      return null;                  case TokenType.INT:                      return int.Parse(value);                  case TokenType.FLOAT:                      return double.Parse(value);                      // by default' treat real numeric literals as 64-bit floating binary point values (as C# does' gives better precision than float)                  case TokenType.BOOL:                      return bool.Parse(value);                  case TokenType.STRING:                      return value.Substring(1' value.Length - 2);                  default:                      return value;              }
Missing Default,MobileDB.Stores,BsonStore,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Stores\BsonStore.cs,ApplyChangeAsync,The following switch statement is missing a default case: switch (entityState)              {                  case EntityState.Deleted:                      await AsyncFileSystem.DeleteAsync(targetPath);                      break;                    case EntityState.Added:                      var metadata = EntityMetadata(key' entity' EntityState.Added' null);                      using (var stream = await AsyncFileSystem.CreateFileAsync(targetPath))                          Serialize(stream' metadata);                      break;                    case EntityState.Updated:                      var updatedMetadata = EntityMetadata(key' entity' EntityState.Updated'                          await FindByIdInternalAsync(key));                      using (var stream = await AsyncFileSystem.CreateFileAsync(targetPath))                          Serialize(stream' updatedMetadata);                      break;              }
Missing Default,MobileDB.Stores,BsonStore,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Stores\BsonStore.cs,ApplyChange,The following switch statement is missing a default case: switch (entityState)              {                  case EntityState.Deleted:                      FileSystem.Delete(targetPath);                      break;                    case EntityState.Added:                      var metadata = EntityMetadata(key' entity' EntityState.Added' null);                      using (var stream = FileSystem.CreateFile(targetPath))                          Serialize(stream' metadata);                      break;                    case EntityState.Updated:                      var updatedMetadata = EntityMetadata(key' entity' EntityState.Updated' FindByIdInternal(key));                      using (var stream = FileSystem.CreateFile(targetPath))                          Serialize(stream' updatedMetadata);                      break;              }
Missing Default,MobileDB.Stores.Json,JsonStore,C:\repos\flumbee_mobiledb\src\MobileDB.Core\Stores\Json\JsonStore.cs,ApplyChange,The following switch statement is missing a default case: switch (entityState)              {                  case EntityState.Deleted:                      _entities.Remove(key);                      break;                    case EntityState.Added:                      var metadata = EntityMetadata(key' entity' EntityState.Added' null);                      _entities.Add(key' new Tuple<object' MetadataEntity>(entity' metadata));                      break;                    case EntityState.Updated:                      var updatedMetadata = EntityMetadata(key' entity' EntityState.Updated' existing.Item2);                      _entities[key] = new Tuple<object' MetadataEntity>(entity' updatedMetadata);                      break;              }
