Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,Cyclomatic complexity of the method is 15
Long Parameter List,PS2PDF,DistillingService,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingService.cs,Start,The method has 5 parameters.
Long Parameter List,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The method has 7 parameters.
Long Statement,PS2PDF,DistillingService,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingService.cs,Start,The length of the statement  "		serviceHost = new ServiceHost (typeof(DistillingServiceControl)' new Uri (DistillingServiceControlConstants.NamedPipesUri)); " is 124.
Long Statement,PS2PDF,DistillingService,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingService.cs,Start,The length of the statement  "		serviceHost.AddServiceEndpoint (typeof(IDistillingServiceControl)' new NetNamedPipeBinding ()' DistillingServiceControlConstants.NamedPipesAddress); " is 148.
Long Statement,PS2PDF,DistillingService,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingService.cs,Start,The length of the statement  "		log.Info (string.Format ("ServiceControlHost listening on: {0}"' DistillingServiceControlConstants.NamedPipesUriAndAddress)); " is 125.
Long Statement,PS2PDF,DistillingService,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingService.cs,Start,The length of the statement  "		fsWatcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName; " is 131.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,Register,The length of the statement  "	IDistillingServiceControlCallback callbackChannel = OperationContext.Current.GetCallbackChannel<IDistillingServiceControlCallback> (); " is 134.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,SetConfig,The length of the statement  "	IDistillingServiceControlCallback callbackChannel = OperationContext.Current.GetCallbackChannel<IDistillingServiceControlCallback> (); " is 134.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,SetConfig,The length of the statement  "		BroadcastLogLine (string.Format ("Konfiguration aktualisiert von {0}.\n - Eingangsverzeichnis: {1}\n - Ausgangsverzeichnis: {2}\n - Job Protokollierung: {3}\n - Quelldateien behalten: {4}"' callerName' config.InputDirectory' config.OutputDirectory' config.WriteJobLogFiles ? "aktiviert" : "deaktiviert."' config.KeepSourceFiles ? "aktiviert" : "deaktiviert.")' DistillingServiceControlConstants.LogSeverity.Warning); " is 416.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,BroadcastLogLine,The length of the statement  "	foreach (IDistillingServiceControlCallback callback in callbackList.Keys.ToList ())// clone list to remove inactive clients " is 123.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,BroadcastConfig,The length of the statement  "	foreach (IDistillingServiceControlCallback callback in callbackList.Keys.ToList ())// clone list to remove inactive clients " is 123.
Long Statement,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,DisconnectClients,The length of the statement  "	foreach (IDistillingServiceControlCallback callback in callbackList.Keys.ToList ())// clone list to remove inactive clients " is 123.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## MOVE INPUT FILE TO WORK DIR ################################################################################ " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## ANALYSE INPUT FILE ######################################################################################### " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		.Select (s => s.TrimStart ('(').Replace (") prun"' "").Replace ("/"' "\\"))// remove "(" .. ") prun" and turn slashes to backslashes " is 132.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## WRITE PDFMARKS FILE ######################################################################################## " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## GENERATE OUTPUT FILE PATH ################################################################################## " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		string outfilePath = Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' ".pdf.tmp")); " is 124.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## START GHOSTSCRIPT ########################################################################################## " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		gsProcess.StartInfo.Arguments = string.Format (" -sDEVICE=\"pdfwrite\" -q -dQUIET -dNOPAUSE -dSAFER -dBATCH -dPDFSETTINGS=/ebook -sOUTPUTFILE=\"{0}\" {1}"' outfilePath' string.Join (" "' filesToConcat.Select (s => "\"" + s + "\""))); " is 233.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## RENAME OUTPUT FILE FROM TMP TO PDF ######################################################################### " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## REMOVIE INPUT FILE FROM WORK DIR ########################################################################### " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "		// ########## WRITE JOB LOG IF CONFIGURED ################################################################################ " is 122.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The length of the statement  "			File.WriteAllLines (Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' "_log.txt"))' JobLog.Select (kvp => kvp.Key).ToArray ()); " is 167.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,logInfo,The length of the statement  "	JobLog.Add (new KeyValuePair<string' DistillingServiceControlConstants.LogSeverity> (string.Format ("{0}\t{1}"' DateTime.Now' logString)' DistillingServiceControlConstants.LogSeverity.Info)); " is 191.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,logWarning,The length of the statement  "	JobLog.Add (new KeyValuePair<string' DistillingServiceControlConstants.LogSeverity> (string.Format ("{0}\t{1}"' DateTime.Now' logString)' DistillingServiceControlConstants.LogSeverity.Warning)); " is 194.
Long Statement,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,logError,The length of the statement  "	JobLog.Add (new KeyValuePair<string' DistillingServiceControlConstants.LogSeverity> (string.Format ("{0}\t{1} - {2}"' DateTime.Now' logString' ex.Message)' DistillingServiceControlConstants.LogSeverity.Error)); " is 210.
Empty Catch Block,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,BroadcastLogLine,The method has an empty catch block.
Empty Catch Block,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,BroadcastConfig,The method has an empty catch block.
Empty Catch Block,PS2PDF,DistillingServiceControl,C:\repos\atsoftware_ps2pdf\PS2PDF\DistillingServiceControl.cs,DisconnectClients,The method has an empty catch block.
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: try {  	// ########## MOVE INPUT FILE TO WORK DIR ################################################################################  	if (!Directory.Exists (Properties.Settings.Default.WorkingFolderPath))  		Directory.CreateDirectory (Properties.Settings.Default.WorkingFolderPath);  	string workingFilePath = Path.Combine (Properties.Settings.Default.WorkingFolderPath' InputFileName);  	if (File.Exists (workingFilePath))  		File.Delete (workingFilePath);  	while (isFileLocked (new FileInfo (inputFilePath)))  		Thread.Sleep (1000);  	File.Move (inputFilePath' workingFilePath);  	logInfo ("Input file moved to working directory.");  	// ########## ANALYSE INPUT FILE #########################################################################################  	string encoding = Properties.Settings.Default.InputFileEncoding;  	var allLines = File.ReadAllLines (workingFilePath' Encoding.GetEncoding (encoding));  	List<string> filesToConcat = allLines.Skip (8)// skip first 8 lines  	.Select (s => s.TrimStart ('(').Replace (") prun"' "").Replace ("/"' "\\"))// remove "(" .. ") prun" and turn slashes to backslashes  	.Where (s => !string.IsNullOrWhiteSpace (s))// skip empty lines (eof)  	.ToList ();  	foreach (string filePath in filesToConcat.ToList ())// clone collection to modify the original one.  	 {  		if (File.Exists (filePath))  			continue;  		filesToConcat.Remove (filePath);  		logWarning (string.Format ("File {0} doesn't exist. Removed from list!"' filePath));  	}  	if (!filesToConcat.Any ()) {  		logWarning ("No Files to concatenate found' exit!");  		return;  	}  	logInfo (string.Format ("Found {0} files to concatenate."' filesToConcat.Count));  	// ########## WRITE PDFMARKS FILE ########################################################################################  	string pdfmarksFilePath = workingFilePath.Replace (".ps"' "_pdfmarks.ps");  	File.WriteAllLines (pdfmarksFilePath' allLines.Take (2));  	filesToConcat.Add (pdfmarksFilePath);  	logInfo ("PDFMarks file written.");  	// ########## GENERATE OUTPUT FILE PATH ##################################################################################  	string outfilePath = Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' ".pdf.tmp"));  	logInfo (string.Format ("Writing to: {0}"' outfilePath));  	// ########## START GHOSTSCRIPT ##########################################################################################  	Process gsProcess = new Process ();  	gsProcess.StartInfo.CreateNoWindow = true;  	gsProcess.StartInfo.UseShellExecute = false;  	gsProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  	gsProcess.StartInfo.FileName = string.Format ("gswin{0}.exe"' (IntPtr.Size == 8 ? "64" : "32"));  	// choose 64bit exe if we're running as a 64bit process.  	gsProcess.StartInfo.Arguments = string.Format (" -sDEVICE=\"pdfwrite\" -q -dQUIET -dNOPAUSE -dSAFER -dBATCH -dPDFSETTINGS=/ebook -sOUTPUTFILE=\"{0}\" {1}"' outfilePath' string.Join (" "' filesToConcat.Select (s => "\"" + s + "\"")));  	gsProcess.StartInfo.RedirectStandardOutput = true;  	gsProcess.OutputDataReceived += (sender' args) =>  {  		if (!string.IsNullOrWhiteSpace (args.Data))  			logWarning (string.Format ("GS: {0}"' args.Data));  	};  	gsProcess.Start ();  	gsProcess.BeginOutputReadLine ();  	gsProcess.WaitForExit ();  	if (gsProcess.ExitCode != 0)  		logWarning (string.Format ("GS: Exit Code {0}."' gsProcess.ExitCode));  	else  		logInfo ("GS exited.");  	State = JobState.Successful;  	// ########## RENAME OUTPUT FILE FROM TMP TO PDF #########################################################################  	string finalOutputPath = outfilePath.Replace (".pdf.tmp"' ".pdf");  	if (File.Exists (finalOutputPath))  		File.Delete (finalOutputPath);  	File.Move (outfilePath' finalOutputPath);  	logInfo ("Output file renamed.");  	// ########## REMOVIE INPUT FILE FROM WORK DIR ###########################################################################  	File.Delete (workingFilePath);  	File.Delete (pdfmarksFilePath);  	if (!Properties.Settings.Default.KeepSourceFiles) {  		logInfo ("Source files deleted.");  		foreach (string file in filesToConcat)  			File.Delete (file);  	}  	logInfo ("Temp files deleted. Job succeeded.");  	// ########## WRITE JOB LOG IF CONFIGURED ################################################################################  	if (Properties.Settings.Default.WriteJobLogFiles) {  		File.WriteAllLines (Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' "_log.txt"))' JobLog.Select (kvp => kvp.Key).ToArray ());  	}  }  catch (Exception e) {  	State = JobState.Failed;  	logError ("Exception while processing job."' e);  }  finally {  	if (JobEnd != null)  		JobEnd.Invoke (State);  }  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: try {  	// ########## MOVE INPUT FILE TO WORK DIR ################################################################################  	if (!Directory.Exists (Properties.Settings.Default.WorkingFolderPath))  		Directory.CreateDirectory (Properties.Settings.Default.WorkingFolderPath);  	string workingFilePath = Path.Combine (Properties.Settings.Default.WorkingFolderPath' InputFileName);  	if (File.Exists (workingFilePath))  		File.Delete (workingFilePath);  	while (isFileLocked (new FileInfo (inputFilePath)))  		Thread.Sleep (1000);  	File.Move (inputFilePath' workingFilePath);  	logInfo ("Input file moved to working directory.");  	// ########## ANALYSE INPUT FILE #########################################################################################  	string encoding = Properties.Settings.Default.InputFileEncoding;  	var allLines = File.ReadAllLines (workingFilePath' Encoding.GetEncoding (encoding));  	List<string> filesToConcat = allLines.Skip (8)// skip first 8 lines  	.Select (s => s.TrimStart ('(').Replace (") prun"' "").Replace ("/"' "\\"))// remove "(" .. ") prun" and turn slashes to backslashes  	.Where (s => !string.IsNullOrWhiteSpace (s))// skip empty lines (eof)  	.ToList ();  	foreach (string filePath in filesToConcat.ToList ())// clone collection to modify the original one.  	 {  		if (File.Exists (filePath))  			continue;  		filesToConcat.Remove (filePath);  		logWarning (string.Format ("File {0} doesn't exist. Removed from list!"' filePath));  	}  	if (!filesToConcat.Any ()) {  		logWarning ("No Files to concatenate found' exit!");  		return;  	}  	logInfo (string.Format ("Found {0} files to concatenate."' filesToConcat.Count));  	// ########## WRITE PDFMARKS FILE ########################################################################################  	string pdfmarksFilePath = workingFilePath.Replace (".ps"' "_pdfmarks.ps");  	File.WriteAllLines (pdfmarksFilePath' allLines.Take (2));  	filesToConcat.Add (pdfmarksFilePath);  	logInfo ("PDFMarks file written.");  	// ########## GENERATE OUTPUT FILE PATH ##################################################################################  	string outfilePath = Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' ".pdf.tmp"));  	logInfo (string.Format ("Writing to: {0}"' outfilePath));  	// ########## START GHOSTSCRIPT ##########################################################################################  	Process gsProcess = new Process ();  	gsProcess.StartInfo.CreateNoWindow = true;  	gsProcess.StartInfo.UseShellExecute = false;  	gsProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  	gsProcess.StartInfo.FileName = string.Format ("gswin{0}.exe"' (IntPtr.Size == 8 ? "64" : "32"));  	// choose 64bit exe if we're running as a 64bit process.  	gsProcess.StartInfo.Arguments = string.Format (" -sDEVICE=\"pdfwrite\" -q -dQUIET -dNOPAUSE -dSAFER -dBATCH -dPDFSETTINGS=/ebook -sOUTPUTFILE=\"{0}\" {1}"' outfilePath' string.Join (" "' filesToConcat.Select (s => "\"" + s + "\"")));  	gsProcess.StartInfo.RedirectStandardOutput = true;  	gsProcess.OutputDataReceived += (sender' args) =>  {  		if (!string.IsNullOrWhiteSpace (args.Data))  			logWarning (string.Format ("GS: {0}"' args.Data));  	};  	gsProcess.Start ();  	gsProcess.BeginOutputReadLine ();  	gsProcess.WaitForExit ();  	if (gsProcess.ExitCode != 0)  		logWarning (string.Format ("GS: Exit Code {0}."' gsProcess.ExitCode));  	else  		logInfo ("GS exited.");  	State = JobState.Successful;  	// ########## RENAME OUTPUT FILE FROM TMP TO PDF #########################################################################  	string finalOutputPath = outfilePath.Replace (".pdf.tmp"' ".pdf");  	if (File.Exists (finalOutputPath))  		File.Delete (finalOutputPath);  	File.Move (outfilePath' finalOutputPath);  	logInfo ("Output file renamed.");  	// ########## REMOVIE INPUT FILE FROM WORK DIR ###########################################################################  	File.Delete (workingFilePath);  	File.Delete (pdfmarksFilePath);  	if (!Properties.Settings.Default.KeepSourceFiles) {  		logInfo ("Source files deleted.");  		foreach (string file in filesToConcat)  			File.Delete (file);  	}  	logInfo ("Temp files deleted. Job succeeded.");  	// ########## WRITE JOB LOG IF CONFIGURED ################################################################################  	if (Properties.Settings.Default.WriteJobLogFiles) {  		File.WriteAllLines (Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' "_log.txt"))' JobLog.Select (kvp => kvp.Key).ToArray ());  	}  }  catch (Exception e) {  	State = JobState.Failed;  	logError ("Exception while processing job."' e);  }  finally {  	if (JobEnd != null)  		JobEnd.Invoke (State);  }  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: try {  	// ########## MOVE INPUT FILE TO WORK DIR ################################################################################  	if (!Directory.Exists (Properties.Settings.Default.WorkingFolderPath))  		Directory.CreateDirectory (Properties.Settings.Default.WorkingFolderPath);  	string workingFilePath = Path.Combine (Properties.Settings.Default.WorkingFolderPath' InputFileName);  	if (File.Exists (workingFilePath))  		File.Delete (workingFilePath);  	while (isFileLocked (new FileInfo (inputFilePath)))  		Thread.Sleep (1000);  	File.Move (inputFilePath' workingFilePath);  	logInfo ("Input file moved to working directory.");  	// ########## ANALYSE INPUT FILE #########################################################################################  	string encoding = Properties.Settings.Default.InputFileEncoding;  	var allLines = File.ReadAllLines (workingFilePath' Encoding.GetEncoding (encoding));  	List<string> filesToConcat = allLines.Skip (8)// skip first 8 lines  	.Select (s => s.TrimStart ('(').Replace (") prun"' "").Replace ("/"' "\\"))// remove "(" .. ") prun" and turn slashes to backslashes  	.Where (s => !string.IsNullOrWhiteSpace (s))// skip empty lines (eof)  	.ToList ();  	foreach (string filePath in filesToConcat.ToList ())// clone collection to modify the original one.  	 {  		if (File.Exists (filePath))  			continue;  		filesToConcat.Remove (filePath);  		logWarning (string.Format ("File {0} doesn't exist. Removed from list!"' filePath));  	}  	if (!filesToConcat.Any ()) {  		logWarning ("No Files to concatenate found' exit!");  		return;  	}  	logInfo (string.Format ("Found {0} files to concatenate."' filesToConcat.Count));  	// ########## WRITE PDFMARKS FILE ########################################################################################  	string pdfmarksFilePath = workingFilePath.Replace (".ps"' "_pdfmarks.ps");  	File.WriteAllLines (pdfmarksFilePath' allLines.Take (2));  	filesToConcat.Add (pdfmarksFilePath);  	logInfo ("PDFMarks file written.");  	// ########## GENERATE OUTPUT FILE PATH ##################################################################################  	string outfilePath = Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' ".pdf.tmp"));  	logInfo (string.Format ("Writing to: {0}"' outfilePath));  	// ########## START GHOSTSCRIPT ##########################################################################################  	Process gsProcess = new Process ();  	gsProcess.StartInfo.CreateNoWindow = true;  	gsProcess.StartInfo.UseShellExecute = false;  	gsProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  	gsProcess.StartInfo.FileName = string.Format ("gswin{0}.exe"' (IntPtr.Size == 8 ? "64" : "32"));  	// choose 64bit exe if we're running as a 64bit process.  	gsProcess.StartInfo.Arguments = string.Format (" -sDEVICE=\"pdfwrite\" -q -dQUIET -dNOPAUSE -dSAFER -dBATCH -dPDFSETTINGS=/ebook -sOUTPUTFILE=\"{0}\" {1}"' outfilePath' string.Join (" "' filesToConcat.Select (s => "\"" + s + "\"")));  	gsProcess.StartInfo.RedirectStandardOutput = true;  	gsProcess.OutputDataReceived += (sender' args) =>  {  		if (!string.IsNullOrWhiteSpace (args.Data))  			logWarning (string.Format ("GS: {0}"' args.Data));  	};  	gsProcess.Start ();  	gsProcess.BeginOutputReadLine ();  	gsProcess.WaitForExit ();  	if (gsProcess.ExitCode != 0)  		logWarning (string.Format ("GS: Exit Code {0}."' gsProcess.ExitCode));  	else  		logInfo ("GS exited.");  	State = JobState.Successful;  	// ########## RENAME OUTPUT FILE FROM TMP TO PDF #########################################################################  	string finalOutputPath = outfilePath.Replace (".pdf.tmp"' ".pdf");  	if (File.Exists (finalOutputPath))  		File.Delete (finalOutputPath);  	File.Move (outfilePath' finalOutputPath);  	logInfo ("Output file renamed.");  	// ########## REMOVIE INPUT FILE FROM WORK DIR ###########################################################################  	File.Delete (workingFilePath);  	File.Delete (pdfmarksFilePath);  	if (!Properties.Settings.Default.KeepSourceFiles) {  		logInfo ("Source files deleted.");  		foreach (string file in filesToConcat)  			File.Delete (file);  	}  	logInfo ("Temp files deleted. Job succeeded.");  	// ########## WRITE JOB LOG IF CONFIGURED ################################################################################  	if (Properties.Settings.Default.WriteJobLogFiles) {  		File.WriteAllLines (Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' "_log.txt"))' JobLog.Select (kvp => kvp.Key).ToArray ());  	}  }  catch (Exception e) {  	State = JobState.Failed;  	logError ("Exception while processing job."' e);  }  finally {  	if (JobEnd != null)  		JobEnd.Invoke (State);  }  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: try {  	// ########## MOVE INPUT FILE TO WORK DIR ################################################################################  	if (!Directory.Exists (Properties.Settings.Default.WorkingFolderPath))  		Directory.CreateDirectory (Properties.Settings.Default.WorkingFolderPath);  	string workingFilePath = Path.Combine (Properties.Settings.Default.WorkingFolderPath' InputFileName);  	if (File.Exists (workingFilePath))  		File.Delete (workingFilePath);  	while (isFileLocked (new FileInfo (inputFilePath)))  		Thread.Sleep (1000);  	File.Move (inputFilePath' workingFilePath);  	logInfo ("Input file moved to working directory.");  	// ########## ANALYSE INPUT FILE #########################################################################################  	string encoding = Properties.Settings.Default.InputFileEncoding;  	var allLines = File.ReadAllLines (workingFilePath' Encoding.GetEncoding (encoding));  	List<string> filesToConcat = allLines.Skip (8)// skip first 8 lines  	.Select (s => s.TrimStart ('(').Replace (") prun"' "").Replace ("/"' "\\"))// remove "(" .. ") prun" and turn slashes to backslashes  	.Where (s => !string.IsNullOrWhiteSpace (s))// skip empty lines (eof)  	.ToList ();  	foreach (string filePath in filesToConcat.ToList ())// clone collection to modify the original one.  	 {  		if (File.Exists (filePath))  			continue;  		filesToConcat.Remove (filePath);  		logWarning (string.Format ("File {0} doesn't exist. Removed from list!"' filePath));  	}  	if (!filesToConcat.Any ()) {  		logWarning ("No Files to concatenate found' exit!");  		return;  	}  	logInfo (string.Format ("Found {0} files to concatenate."' filesToConcat.Count));  	// ########## WRITE PDFMARKS FILE ########################################################################################  	string pdfmarksFilePath = workingFilePath.Replace (".ps"' "_pdfmarks.ps");  	File.WriteAllLines (pdfmarksFilePath' allLines.Take (2));  	filesToConcat.Add (pdfmarksFilePath);  	logInfo ("PDFMarks file written.");  	// ########## GENERATE OUTPUT FILE PATH ##################################################################################  	string outfilePath = Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' ".pdf.tmp"));  	logInfo (string.Format ("Writing to: {0}"' outfilePath));  	// ########## START GHOSTSCRIPT ##########################################################################################  	Process gsProcess = new Process ();  	gsProcess.StartInfo.CreateNoWindow = true;  	gsProcess.StartInfo.UseShellExecute = false;  	gsProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  	gsProcess.StartInfo.FileName = string.Format ("gswin{0}.exe"' (IntPtr.Size == 8 ? "64" : "32"));  	// choose 64bit exe if we're running as a 64bit process.  	gsProcess.StartInfo.Arguments = string.Format (" -sDEVICE=\"pdfwrite\" -q -dQUIET -dNOPAUSE -dSAFER -dBATCH -dPDFSETTINGS=/ebook -sOUTPUTFILE=\"{0}\" {1}"' outfilePath' string.Join (" "' filesToConcat.Select (s => "\"" + s + "\"")));  	gsProcess.StartInfo.RedirectStandardOutput = true;  	gsProcess.OutputDataReceived += (sender' args) =>  {  		if (!string.IsNullOrWhiteSpace (args.Data))  			logWarning (string.Format ("GS: {0}"' args.Data));  	};  	gsProcess.Start ();  	gsProcess.BeginOutputReadLine ();  	gsProcess.WaitForExit ();  	if (gsProcess.ExitCode != 0)  		logWarning (string.Format ("GS: Exit Code {0}."' gsProcess.ExitCode));  	else  		logInfo ("GS exited.");  	State = JobState.Successful;  	// ########## RENAME OUTPUT FILE FROM TMP TO PDF #########################################################################  	string finalOutputPath = outfilePath.Replace (".pdf.tmp"' ".pdf");  	if (File.Exists (finalOutputPath))  		File.Delete (finalOutputPath);  	File.Move (outfilePath' finalOutputPath);  	logInfo ("Output file renamed.");  	// ########## REMOVIE INPUT FILE FROM WORK DIR ###########################################################################  	File.Delete (workingFilePath);  	File.Delete (pdfmarksFilePath);  	if (!Properties.Settings.Default.KeepSourceFiles) {  		logInfo ("Source files deleted.");  		foreach (string file in filesToConcat)  			File.Delete (file);  	}  	logInfo ("Temp files deleted. Job succeeded.");  	// ########## WRITE JOB LOG IF CONFIGURED ################################################################################  	if (Properties.Settings.Default.WriteJobLogFiles) {  		File.WriteAllLines (Path.Combine (Properties.Settings.Default.OutputFolderPath' InputFileName.Replace (".ps"' "_log.txt"))' JobLog.Select (kvp => kvp.Key).ToArray ());  	}  }  catch (Exception e) {  	State = JobState.Failed;  	logError ("Exception while processing job."' e);  }  finally {  	if (JobEnd != null)  		JobEnd.Invoke (State);  }  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: while (isFileLocked (new FileInfo (inputFilePath)))  	Thread.Sleep (1000);  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: File.WriteAllLines (pdfmarksFilePath' allLines.Take (2));  
Magic Number,PS2PDF,ProcessJob,C:\repos\atsoftware_ps2pdf\PS2PDF\ProcessJob.cs,ProcessFile,The following statement contains a magic number: gsProcess.StartInfo.FileName = string.Format ("gswin{0}.exe"' (IntPtr.Size == 8 ? "64" : "32"));  
