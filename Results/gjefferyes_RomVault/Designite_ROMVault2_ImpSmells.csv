Implementation smell,Namespace,Class,File,Method,Description
Long Method,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The method has 138 lines of code.
Long Method,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The method has 226 lines of code.
Long Method,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The method has 146 lines of code.
Long Method,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The method has 417 lines of code.
Long Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFilePreCheckFixFile,The method has 108 lines of code.
Long Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCanBeFixed,The method has 124 lines of code.
Long Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The method has 624 lines of code.
Long Method,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The method has 233 lines of code.
Long Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,MergeInDat,The method has 132 lines of code.
Long Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,CheckADir,The method has 245 lines of code.
Long Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,The method has 155 lines of code.
Long Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,FullCompare,The method has 131 lines of code.
Long Method,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The method has 110 lines of code.
Long Method,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The method has 172 lines of code.
Long Method,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The method has 193 lines of code.
Long Method,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The method has 231 lines of code.
Long Method,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The method has 139 lines of code.
Long Method,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The method has 141 lines of code.
Long Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,The method has 141 lines of code.
Long Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The method has 162 lines of code.
Long Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateRomGrid,The method has 165 lines of code.
Long Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,AddRom,The method has 157 lines of code.
Long Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The method has 1000 lines of code.
Long Method,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The method has 115 lines of code.
Long Method,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The method has 159 lines of code.
Long Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadGameFromDat,The method has 193 lines of code.
Long Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadGameFromDat,The method has 114 lines of code.
Complex Method,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,PlainProcessDir,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,Cyclomatic complexity of the method is 15
Complex Method,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,scrub,Cyclomatic complexity of the method is 12
Complex Method,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,Cyclomatic complexity of the method is 27
Complex Method,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,FindAllDats,Cyclomatic complexity of the method is 16
Complex Method,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportMissingFindSizes,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ScanFiles,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,Cyclomatic complexity of the method is 43
Complex Method,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,Cyclomatic complexity of the method is 27
Complex Method,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,Cyclomatic complexity of the method is 50
Complex Method,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,RawCopy,Cyclomatic complexity of the method is 10
Complex Method,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenInputStream,Cyclomatic complexity of the method is 14
Complex Method,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenOutputStream,Cyclomatic complexity of the method is 14
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,PerformFixes,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,CountFixDir,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixDir,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixBase,Cyclomatic complexity of the method is 18
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFile,Cyclomatic complexity of the method is 15
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFilePreCheckFixFile,Cyclomatic complexity of the method is 17
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCanBeFixed,Cyclomatic complexity of the method is 14
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,Cyclomatic complexity of the method is 66
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,DoubleCheckDelete,Cyclomatic complexity of the method is 13
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,CheckDeleteObject,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,CheckReprocess,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,RecursiveDatTree,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,RemoveOldDats,Cyclomatic complexity of the method is 15
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,RemoveOldDatsCleanUpFiles,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,AddNewDats,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,MergeInDat,Cyclomatic complexity of the method is 25
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,FullCompare,Cyclomatic complexity of the method is 16
Complex Method,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,UpdateDirs,Cyclomatic complexity of the method is 12
Complex Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,CheckADir,Cyclomatic complexity of the method is 26
Complex Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,Cyclomatic complexity of the method is 28
Complex Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,MatchFound,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,NewFileFound,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,FullCompare,Cyclomatic complexity of the method is 28
Complex Method,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,Cyclomatic complexity of the method is 15
Complex Method,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,Cyclomatic complexity of the method is 17
Complex Method,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,UpdateGrid,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,Cyclomatic complexity of the method is 27
Complex Method,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,CheckMouseDown,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,Cyclomatic complexity of the method is 21
Complex Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,Cyclomatic complexity of the method is 17
Complex Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,Cyclomatic complexity of the method is 25
Complex Method,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,AddRom,Cyclomatic complexity of the method is 32
Complex Method,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,TrrntZipStringCompare,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSortCRCSize,Cyclomatic complexity of the method is 10
Complex Method,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSortSHA1CHD,Cyclomatic complexity of the method is 10
Complex Method,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,Cyclomatic complexity of the method is 18
Complex Method,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CHDOutputHandler,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CHDErrorHandler,Cyclomatic complexity of the method is 12
Complex Method,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,ReadDat,Cyclomatic complexity of the method is 17
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadHeaderFromDat,Cyclomatic complexity of the method is 19
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDirFromDat,Cyclomatic complexity of the method is 13
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadGameFromDat,Cyclomatic complexity of the method is 36
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,Cyclomatic complexity of the method is 19
Complex Method,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDiskFromDat,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2.DatReaders,DatMessXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatMessXMLReader.cs,LoadHeaderFromDat,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.DatReaders,DatMessXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatMessXMLReader.cs,LoadGameFromDat,Cyclomatic complexity of the method is 16
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,ReadInDatFile,Cyclomatic complexity of the method is 12
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetRemoveUnneededDirs,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetCheckParentSets,Cyclomatic complexity of the method is 15
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetMergeSets,Cyclomatic complexity of the method is 13
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetCheckCollect,Cyclomatic complexity of the method is 16
Complex Method,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetCreateSubDirs,Cyclomatic complexity of the method is 12
Complex Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,ReadDat,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,ReadMameDat,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadHeaderFromDat,Cyclomatic complexity of the method is 13
Complex Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadDirFromDat,Cyclomatic complexity of the method is 9
Complex Method,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadGameFromDat,Cyclomatic complexity of the method is 13
Complex Method,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,DirDatSearch,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,ChildNameSearch,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,Write,Cyclomatic complexity of the method is 23
Complex Method,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,DatAdd,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileRemove,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileAdd,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.SupportedFiles.Files,UnCompFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\Files\UnCompFiles.cs,CheckSumRead,Cyclomatic complexity of the method is 8
Complex Method,ROMVault2.Utils,RelativePath,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\RelativePath.cs,MakeRelative,Cyclomatic complexity of the method is 11
Complex Method,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,Cyclomatic complexity of the method is 8
Long Parameter List,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The method has 7 parameters. Parameters: fileIn' zipFileOut' zipFilenameOut' fileOut' forceRaw' error' foundFile
Long Parameter List,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenInputStream,The method has 8 parameters. Parameters: fileIn' rawCopy' zipFileIn' sourceTrrntzip' readStream' streamSize' compressionMethod' error
Long Parameter List,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenOutputStream,The method has 9 parameters. Parameters: fileOut' fileIn' zipFileOut' zipFilenameOut' compressionMethod' rawCopy' sourceTrrntzip' writeStream' error
Long Parameter List,ROMVault2,bgwShowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\BackGroundWorkerInterface.cs,bgwShowFix,The method has 8 parameters. Parameters: fixDir' fixZip' fixFile' size' dir' sourceDir' sourceZip' sourceFile
Long Parameter List,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,FullCompare,The method has 5 parameters. Parameters: dbFile' testFile' secondPass' fullDir' sLevel
Long Parameter List,ROMVault2.SupportedFiles.Files,UnCompFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\Files\UnCompFiles.cs,CheckSumRead,The method has 5 parameters. Parameters: filename' testDeep' crc' bMD5' bSHA1
Long Identifier,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,,The length of the parameter aboutRomVaultToolStripMenuItem is 30.
Long Statement,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,PlainProcessDir,The length of the statement  "                    WriteLine(indent + "\t<description>" + clean(item.Game == null ? item.Name : item.Game.GetData(RvGame.GameData.Description)) + "</description>"); " is 145.
Long Statement,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,PlainProcessDir,The length of the statement  "                            WriteLine(indent + "\t<rom name=\"" + clean(file.Name) + "\" size=\"" + file.Size + "\" crc=\"" + ArrByte.ToString(file.CRC) + "\" md5=\"" + ArrByte.ToString(file.MD5) + "\" sha1=\"" + ArrByte.ToString(file.SHA1) + "\"/>"); " is 223.
Long Statement,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,PlainProcessDir,The length of the statement  "                                WriteLine(indent + "\t<rom name=\"" + dName + "\\" + clean(subFile.Name) + "\" size=\"" + subFile.Size + "\" crc=\"" + ArrByte.ToString(subFile.CRC) + "\" md5=\"" + ArrByte.ToString(subFile.MD5) + "\" sha1=\"" + ArrByte.ToString(subFile.SHA1) + "\"/>"); " is 253.
Long Statement,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,The length of the statement  "                                disks.Add(indent + "\t<disk name=\"" + clean(chd.Name).Replace(".chd"' "") + "\" sha1=\"" + ArrByte.ToString(chd.SHA1CHD) + "\"/>"); " is 132.
Long Statement,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,The length of the statement  "                            WriteLine(indent + "\t<rom name=\"" + clean(file.Name) + "\" size=\"" + file.Size + "\" crc=\"" + ArrByte.ToString(file.CRC) + "\" md5=\"" + ArrByte.ToString(file.MD5) + "\" sha1=\"" + ArrByte.ToString(file.SHA1) + "\"/>"); " is 223.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,scrub,The length of the statement  "                            res.Insert(res.Count - 1' "\t\t<comment>Excludes " + rc + " item" + (rc == 0 ? "" : "s") + " that could be fixed</comment>"); " is 125.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFiles,The length of the statement  "                Description = @"Please select fixdat files destination. NOTE: " + (scrubIt ? @"reports will include Red items only (omitting any Yellow that may be present)" : @"reports will include both Red and Yellow items")' " is 211.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The length of the statement  "                            string datFilename = Path.Combine(_outdir' "fixDat_" + Path.GetFileNameWithoutExtension(_tDat.GetData(RvDat.DatData.DatFullName)) + ".dat"); " is 140.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The length of the statement  "                                datFilename = Path.Combine(_outdir' "fixDat_" + Path.GetFileNameWithoutExtension(_tDat.GetData(RvDat.DatData.DatFullName)) + "(" + test + ").dat"); " is 147.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The length of the statement  "                                "<!DOCTYPE datafile PUBLIC \"-//Logiqx//DTD ROM Management Datafile//EN\" \"http://www.logiqx.com/Dats/datafile.dtd\">"); " is 121.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The length of the statement  "                        if ((tRom.DatStatus == DatStatus.InDatCollect) && (tRom.GotStatus != GotStatus.Got) && !((tRom.RepStatus == RepStatus.CanBeFixed) || (tRom.RepStatus == RepStatus.CorruptCanBeFixed))) " is 182.
Long Statement,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportDrawBars,The length of the statement  "            _ts.WriteLine("+" + new string('-'' _fileNameLength + 2) + "+" + new string('-'' _fileSizeLength + 2) + "+----------+" + new string('-'' _repStatusLength + 2) + "+"); " is 166.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ScanFiles,The length of the statement  "                    if (!ArrByte.bCompare(lstRomTableSortedCRCSize[romIndex0].CRC' lstRomTableSortedCRCSize[romIndex1].CRC) || (lstRomTableSortedCRCSize[romIndex0].Size != lstRomTableSortedCRCSize[romIndex1].Size)) " is 194.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "            List<RvFile> corruptFiles = new List<RvFile>(); // corrupt files that we do not need' a corrupt file is missing if it is needed " is 127.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                            missingFiles.Add(tFile); // corrupt files that are also InDatcollect are treated as missing files' and a fix should be found. " is 125.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                        ReportError.SendAndShow(Resources.FindFixes_ListCheck_Unknown_test_status + tFile.DatFullName + Resources.Comma + tFile.DatStatus + Resources.Comma + tFile.RepStatus); " is 167.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                    missingFile.RepStatus = missingFile.RepStatus == RepStatus.Corrupt ? RepStatus.CorruptCanBeFixed : RepStatus.CanBeFixed; " is 120.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                    missingFile.RepStatus = missingFile.RepStatus == RepStatus.Corrupt ? RepStatus.CorruptCanBeFixed : RepStatus.CanBeFixed; " is 120.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "            // we can only check corrupt files using the CRC from the ZIP header' as it is corrupt so we cannot get a correct SHA1 / MD5 to check with " is 138.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                // now that we know this file is not needed for a fix do a CRC only find against correct files to see if this file can be deleted. " is 130.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheck,The length of the statement  "                // now that we know this file is not needed for a fix do a CRC only find against correct files to see if this file can be deleted. " is 130.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,CheckIfMissingFileCanBeFixedByGotFile,The length of the statement  "            if (missingFile.FileStatusIs(FileStatus.SHA1FromDAT) && gotFile.FileStatusIs(FileStatus.SHA1Verified) && !ArrByte.bCompare(missingFile.SHA1' gotFile.SHA1)) " is 155.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,CheckIfMissingFileCanBeFixedByGotFile,The length of the statement  "            if (missingFile.FileStatusIs(FileStatus.MD5FromDAT) && gotFile.FileStatusIs(FileStatus.MD5Verified) && !ArrByte.bCompare(missingFile.MD5' gotFile.MD5)) " is 151.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,CheckIfGotfileAndMatchingFileAreFullMatches,The length of the statement  "            if (gotFile.FileStatusIs(FileStatus.SHA1Verified) && matchingFile.FileStatusIs(FileStatus.SHA1Verified) && !ArrByte.bCompare(gotFile.SHA1' matchingFile.SHA1)) " is 158.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,CheckIfGotfileAndMatchingFileAreFullMatches,The length of the statement  "            if (gotFile.FileStatusIs(FileStatus.MD5Verified) && matchingFile.FileStatusIs(FileStatus.MD5Verified) && !ArrByte.bCompare(gotFile.MD5' matchingFile.MD5)) " is 154.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "            List<RvFile> corruptFiles = new List<RvFile>(); // corrupt files that we do not need' a corrupt file is missing if it is needed " is 127.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "                            missingFiles.Add(tFile); // corrupt files that are also InDatcollect are treated as missing files' and a fix should be found. " is 125.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "                        ReportError.SendAndShow(Resources.FindFixes_ListCheck_Unknown_test_status + tFile.DatFullName + Resources.Comma + tFile.DatStatus + Resources.Comma + tFile.RepStatus); " is 167.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "                    missingFile.RepStatus = (missingFile.RepStatus == RepStatus.Corrupt) || (missingFile.RepStatus == RepStatus.MoveToCorrupt) ? RepStatus.CorruptCanBeFixed : RepStatus.CanBeFixed; " is 176.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "            // we can only check corrupt files using the CRC from the ZIP header' as it is corrupt so we cannot get a correct SHA1 / MD5 to check with " is 138.
Long Statement,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ListCheckSHA1CHD,The length of the statement  "                // now that we know this file is not needed for a fix do a CRC only find against correct files to see if this file can be deleted. " is 130.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "                retC = OpenInputStream(fileIn' rawCopy' out zipFileIn' out sourceTrrntzip' out readStream' out streamSize' out compressionMethod' out error); " is 141.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "            if (!rawCopy && ((Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel1) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel2) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel3))) " is 198.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "            retC = OpenOutputStream(fileOut' fileIn' ref zipFileOut' zipFilenameOut' compressionMethod' rawCopy' sourceTrrntzip' out writeStream' out error); " is 145.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "                            error = "The SHA1 found does not match a previously scanned SHA1' this should not happen' unless something got corrupt."; " is 121.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "                        foundFile.FileStatusSet(FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.MD5Verified | FileStatus.SHA1Verified); " is 125.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The length of the statement  "            fileOut.FileStatusSet(FileStatus.SHA1CHDFromHeader | FileStatus.MD5CHDFromHeader | FileStatus.SHA1CHDVerified | FileStatus.MD5CHDVerified' fileIn); " is 147.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenInputStream,The length of the statement  "                        ((ZipFile) zipFileIn).ZipFileOpenReadStreamQuick((ulong) fileIn.ZipFileHeaderPosition' rawCopy' out readStream' out streamSize' out compressionMethod); " is 151.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenInputStream,The length of the statement  "                        ((ZipFile) zipFileIn).ZipFileOpenReadStream(fileIn.ZipFileIndex' rawCopy' out readStream' out streamSize' out compressionMethod); " is 129.
Long Statement,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,OpenOutputStream,The length of the statement  "                ZipReturn zr = zipFileOut.ZipFileOpenWriteStream(rawCopy' sourceTrrntzip' fileOut.Name' (ulong) fileIn.Size' compressionMethod' out writeStream); " is 145.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFile,The length of the statement  "                    ReportError.UnhandledExceptionHandler(Resources.FixFiles_FixFile_Unknown_fix_file_type + fixFile.RepStatus + " Dat Status = " + fixFile.DatStatus + " GotStatus " + fixFile.GotStatus); " is 183.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCheckName,The length of the statement  "                    ReportProgress(new bgwShowError(sourceFullName' "Error Setting File Attributes to Normal. Before Case correction Rename. Code " + error)); " is 138.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToSort,The length of the statement  "            ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixFileFullName)' ""' Path.GetFileName(fixFileFullName)' fixFile.Size' "-->"' "ToSort"' ""' fixFile.Name)); " is 159.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToSort,The length of the statement  "            ReturnCode returnCode = FixFileCopy.CopyFile(fixFile' ref tempZipOut' toSortFullName' toSortRom' false' out _error' out foundFile); " is 131.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToSort,The length of the statement  "                ReportProgress(new bgwShowError(fixFilePath' "Error Setting File Attributes to Normal. Before Delete Moving ToSort. Code " + error)); " is 133.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToCorrupt,The length of the statement  "            _bgw.ReportProgress(0' new bgwShowFix(Path.GetDirectoryName(fixFileFullName)' ""' Path.GetFileName(fixFileFullName)' fixFile.Size' "-->"' "Corrupt"' ""' fixFile.Name)); " is 168.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToCorrupt,The length of the statement  "            ReturnCode returnCode = FixFileCopy.CopyFile(fixFile' ref tempZipOut' toSortCorruptFullName' toSortCorruptRom' false' out _error' out foundFile); " is 145.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileMoveToCorrupt,The length of the statement  "                _bgw.ReportProgress(0' new bgwShowError(fixFilePath' "Error Setting File Attributes to Normal. Before Delete Moving ToSort. Code " + error)); " is 141.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFilePreCheckFixFile,The length of the statement  "            // start by finding the first file in the DB. (This should always work' as it will at least find the current file that CanBeFixed " is 129.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFilePreCheckFixFile,The length of the statement  "                            // so now we have found the file with the same case insensative name and can rename it to something else to get it out of the way for now. " is 138.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCanBeFixed,The length of the statement  "            ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixFileFullName)' ""' Path.GetFileName(fixFileFullName)' fixFile.Size' "<--"' Path.GetDirectoryName(fts)' Path.GetFileName(fts)' fixingFile.Name)); " is 199.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCanBeFixed,The length of the statement  "            returnCode = FixFileCopy.CopyFile(fixingFile' ref tempZipOut' fixFile.FullName' fixFile' false' out _error' out foundFile); " is 123.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixFileCanBeFixed,The length of the statement  "            // Check the files that we found that where used to fix this file' and if they not listed as correct files' they can be set to be deleted. " is 138.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "            bool needsTrrntzipped = (fixZip.ZipStatus != ZipStatus.TrrntZip) && (fixZip.GotStatus == GotStatus.Got) && (fixZip.DatStatus == DatStatus.InDatCollect) && ((Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel1) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel2) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel3)); " is 337.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "            else if ((fixZip.GotStatus == GotStatus.Got) && (fixZip.GotStatus != GotStatus.Corrupt) && !fixZip.DirStatus.HasAnyFiles()) " is 123.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixZipFullName)' Path.GetFileName(fixZipFullName)' ""' 0' "TrrntZipping"' ""' ""' "")); " is 139.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportError.SendAndShow(Resources.FixFiles_FixZip_Error_in_Fix_Rom_Status + zipFileFixing.RepStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.DatStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.GotStatus); " is 221.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportError.SendAndShow(Resources.FixFiles_FixZip_Error_in_Fix_Rom_Status + zipFileFixing.RepStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.DatStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.GotStatus); " is 221.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        if (!((zipFileFixing.DatStatus == DatStatus.InDatCollect) && ((zipFileFixing.GotStatus == GotStatus.NotGot) || (zipFileFixing.GotStatus == GotStatus.Corrupt)))) " is 160.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportError.SendAndShow(Resources.FixFiles_FixZip_Error_in_Fix_Rom_Status + zipFileFixing.RepStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.DatStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.GotStatus); " is 221.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            returnCode = FixFileCopy.CopyFile(fileIn' ref tempZipOut' tempZipFilename' zipFileFixing' false' out _error' out foundFile); " is 124.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixZipFullName)' Path.GetFileName(fixZipFullName)' zipFileFixing.Name' zipFileFixing.Size' "<--"' sourceDir' sourceFile' lstFixRomTable[0].Name)); " is 198.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            returnCode = FixFileCopy.CopyFile(lstFixRomTable[0]' ref tempZipOut' tempZipFilename' zipFileFixing' false' out _error' out foundFile); " is 135.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportError.SendAndShow(Resources.FixFiles_FixZip_Error_in_Fix_Rom_Status + zipFileFixing.RepStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.DatStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.GotStatus); " is 221.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixZipFullName)' Path.GetFileName(fixZipFullName)' zipFileFixing.Name' zipFileFixing.Size' "-->"' "ToSort"' Path.GetFileName(destination)' toSortRom.Name)); " is 208.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        returnCode = FixFileCopy.CopyFile((RvFile) fixZip.Child(iRom)' ref toSortZipOut' destination' toSortRom' true' out _error' out foundFile); " is 138.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        if (!(((zipFileFixing.DatStatus == DatStatus.InDatCollect) || (zipFileFixing.DatStatus == DatStatus.NotInDat)) && (zipFileFixing.GotStatus == GotStatus.Corrupt))) " is 162.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                            ReportError.SendAndShow(Resources.FixFiles_FixZip_Error_in_Fix_Rom_Status + zipFileFixing.RepStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.DatStatus + Resources.FixFiles_FixZip_Colon + zipFileFixing.GotStatus); " is 221.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        ReportProgress(new bgwShowFix(Path.GetDirectoryName(fixZipFullName)' Path.GetFileName(fixZipFullName)' zipFileFixing.Name' zipFileFixing.Size' "-->"' "Corrupt"' Path.GetFileName(toSortFullName)' zipFileFixing.Name)); " is 216.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        returnCode = FixFileCopy.CopyFile((RvFile) fixZip.Child(iRom)' ref toSortCorruptOut' toSortFullName' toSortCorruptRom' true' out _error' out foundFile); " is 152.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                        ReportError.UnhandledExceptionHandler("Unknown file status found " + zipFileFixing.RepStatus + " while fixing file " + fixZip.Name + " Dat Status = " + zipFileFixing.DatStatus + " GotStatus " + zipFileFixing.GotStatus); " is 219.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The length of the statement  "                    ReportProgress(new bgwShowError(filename' "Error Setting File Attributes to Normal. Deleting Original Fix File. Code " + error)); " is 129.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,DoubleCheckDelete,The length of the statement  "                        ReportError.LogOut("Double Check Delete Error Unknown " + lstFixRomTable[i].FullName + " " + lstFixRomTable[i].RepStatus); " is 122.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,DoubleCheckDelete,The length of the statement  "                ReportError.UnhandledExceptionHandler("Double Check Delete could not find the correct file. (" + fileDeleting.FullName + ")"); " is 126.
Long Statement,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,MoveZiptoCorrupt,The length of the statement  "                ReportProgress(new bgwShowError(fixZipFullName' "Error Setting File Attributes to Normal. Before Moving To Corrupt. Code " + error)); " is 133.
Long Statement,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,BgwProgressChanged,The length of the statement  "                dgrq.CreateCells(dataGridView1' bgwSf.FixDir' bgwSf.FixZip' bgwSf.FixFile' bgwSf.Size' bgwSf.Dir' bgwSf.SourceDir' bgwSf.SourceZip' bgwSf.SourceFile); " is 150.
Long Statement,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmProgressWindowFix)); " is 140.
Long Statement,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The length of the statement  "            this.dataGridView1.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 133.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,AddNewDats,The length of the statement  "                    Debug.WriteLine("Checking " + dbDat.GetData(RvDat.DatData.DatFullName) + " : and " + fileDat.GetData(RvDat.DatData.DatFullName) + " : " + res); " is 143.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,AddNewDats,The length of the statement  "                        _bgw.ReportProgress(0' new bgwText("Dat : " + Path.GetFileNameWithoutExtension(fileDat.GetData(RvDat.DatData.DatFullName)))); " is 125.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,AddNewDats,The length of the statement  "                        _bgw.ReportProgress(0' new bgwText("Scanning New Dat : " + Path.GetFileNameWithoutExtension(fileDat.GetData(RvDat.DatData.DatFullName)))); " is 138.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,UpdateDatFile,The length of the statement  "            if ((autoAddDirectory || !string.IsNullOrEmpty(newDatFile.Dat.GetData(RvDat.DatData.RootDir))) && (newDatFile.Dat.GetData(RvDat.DatData.DirSetup) != "noautodir")) " is 162.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,UpdateDatFile,The length of the statement  "                ReportError.Show("Dat Merge conflict occured Cache contains " + conflictDat.GetData(RvDat.DatData.DatFullName) + " new dat " + newDatFile.Dat.GetData(RvDat.DatData.DatFullName) + " is trying to use the same dirctory and so will be ignored."); " is 242.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,MergeInDat,The length of the statement  "                    while ((dbIndex + dbDatsCount < dbDat.ChildCount) && (DBHelper.CompareName(dbChild' dbDat.Child(dbIndex + dbDatsCount)) == 0)) " is 126.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,MergeInDat,The length of the statement  "                    while ((newIndex + newDatsCount < newDat.ChildCount) && (DBHelper.CompareName(newDatChild' newDat.Child(newIndex + newDatsCount)) == 0)) " is 136.
Long Statement,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,UpdateDirs,The length of the statement  "                            if (dbChild.Name != fileChild.Name) // check if the case of the Item in the DB is different from the Dat Root Actual filename " is 125.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,CheckADir,The length of the statement  "                                    tFile.FileStatusSet(FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.SHA1Verified | FileStatus.MD5Verified); " is 121.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,The length of the statement  "                        while ((dbIndex + dbsCount < dbDir.ChildCount) && (DBHelper.CompareName(dbChild' dbDir.Child(dbIndex + dbsCount)) == 0)) " is 120.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,The length of the statement  "                        while ((fileIndex + filesCount < fileDir.ChildCount) && (DBHelper.CompareName(fileChild' fileDir.Child(fileIndex + filesCount)) == 0)) " is 134.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,MatchFound,The length of the statement  "                    if (tDir.Tree == null) // do not recurse into directories that are in the tree' as they are processed by the top level code. " is 124.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,IsDeepScanned,The length of the statement  "                    (!zFile.FileStatusIs(FileStatus.SizeVerified) || !zFile.FileStatusIs(FileStatus.CRCVerified) || !zFile.FileStatusIs(FileStatus.SHA1Verified) || !zFile.FileStatusIs(FileStatus.MD5Verified))) " is 189.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,FullCompare,The length of the statement  "            // and the file we are scanning has not already been deep scanned' then we need to do a deep scan' and check the deep scan values " is 129.
Long Statement,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,DeepScanFile,The length of the statement  "            tFile.FileStatusSet(FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.SHA1Verified | FileStatus.MD5Verified); " is 121.
Long Statement,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmHelpAbout)); " is 132.
Long Statement,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The length of the statement  "            this.lblVersion.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline)))' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 222.
Long Statement,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmKey)); " is 126.
Long Statement,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmProgressWindow)); " is 137.
Long Statement,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The length of the statement  "            this.ErrorGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 129.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,BtnDeleteSelectedClick,The length of the statement  "                    ReportError.Show(Resources.FrmSetDir_BtnDeleteSelectedClick_You_cannot_delete_the + datLocation + Resources.FrmSetDir_BtnDeleteSelectedClick_Directory_Settings' " is 160.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmSetDir)); " is 129.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.DataGridGames.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 133.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.grpBoxAddNew.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.btnSetRomLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.txtROMLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.lblROMLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.txtDATLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.lblDATLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The length of the statement  "            this.lblDelete.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmShowError)); " is 132.
Long Statement,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmSplashScreen)); " is 135.
Long Statement,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The length of the statement  "            this.lblVersion.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,UnhandledExceptionHandler,The length of the statement  "                string message = string.Format("An Application Error has occurred.\r\n\r\nEXCEPTION:\r\nSource: {0}\r\nMessage: {1}\r\n"' e.Exception.Source' e.Exception.Message); " is 163.
Long Statement,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,UnhandledExceptionHandler,The length of the statement  "                    message += string.Format("\r\nINNER EXCEPTION:\r\nSource: {0}\r\nMessage: {1}\r\n"' e.Exception.InnerException.Source' e.Exception.InnerException.Message); " is 155.
Long Statement,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,UnhandledExceptionHandler,The length of the statement  "                string message = string.Format("An Application Error has occurred.\r\n\r\nEXCEPTION:\r\nSource: {0}\r\nMessage: {1}\r\n"' e.Source' e.Message); " is 143.
Long Statement,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,UnhandledExceptionHandler,The length of the statement  "                    message += string.Format("\r\nINNER EXCEPTION:\r\nSource: {0}\r\nMessage: {1}\r\n"' e.InnerException.Source' e.InnerException.Message); " is 135.
Long Statement,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,ReportFile,The length of the statement  "            sw.WriteLine(f.ReportIndex.ToString("D8") + " " + ArrByte.ToString(f.CRC) + " " + f.GotStatus.ToString().PadRight(10) + " " + f.RepStatus.ToString().PadRight(15) + " " + f.TreeFullName); " is 186.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,OnPaint,The length of the statement  "            Rectangle t = new Rectangle(e.ClipRectangle.Left + _hScroll' e.ClipRectangle.Top + _vScroll' e.ClipRectangle.Width' e.ClipRectangle.Height); " is 140.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    g.DrawImage(pTree.Tree.TreeExpanded ? rvImages.ExpandBoxMinus : rvImages.ExpandBoxPlus' RSub(pTree.Tree.RExpand' _hScroll' _vScroll)); " is 134.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "            Rectangle recBackGround = new Rectangle(pTree.Tree.RText.X' pTree.Tree.RText.Y' Width - pTree.Tree.RText.X + _hScroll' pTree.Tree.RText.Height); " is 144.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    thistxt = pTree.Name + ": " + pTree.DirDat(0).GetData(RvDat.DatData.Description) + " ( Have:" + pTree.DirStatus.CountCorrect() + " \\ Missing: " + pTree.DirStatus.CountMissing() + " )"; " is 185.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    thistxt = pTree.Name + ": " + pTree.Dat.GetData(RvDat.DatData.Description) + " ( Have:" + pTree.DirStatus.CountCorrect() + " \\ Missing: " + pTree.DirStatus.CountMissing() + " )"; " is 179.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    thistxt = pTree.Name + " ( Have:" + pTree.DirStatus.CountCorrect() + " \\ Missing: " + pTree.DirStatus.CountMissing() + " )"; " is 125.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    g.DrawString(thistxt' new Font("Microsoft Sans Serif"' 8)' Brushes.White' pTree.Tree.RText.Left - _hScroll' pTree.Tree.RText.Top + 1 - _vScroll); " is 145.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The length of the statement  "                    g.DrawString(thistxt' new Font("Microsoft Sans Serif"' 8)' Brushes.Black' pTree.Tree.RText.Left - _hScroll' pTree.Tree.RText.Top + 1 - _vScroll); " is 145.
Long Statement,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,CheckMouseDown,The length of the statement  "                SetChecked(pTree' pTree.Tree.Checked == RvTreeRow.TreeSelect.Selected ? RvTreeRow.TreeSelect.UnSelected : RvTreeRow.TreeSelect.Selected); " is 137.
Long Statement,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The length of the statement  "                FileStream fs = new FileStream(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "RomVault2.cfg")' FileMode.Open' FileAccess.Read); " is 133.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIName = new Label { Location = SPoint(6' 15)' Size = SSize(76' 13)' Text = "Name :"' TextAlign = ContentAlignment.TopRight }; " is 129.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIDescription = new Label { Location = SPoint(6' 31)' Size = SSize(76' 13)' Text = "Description :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 160.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITDescription = new Label { Location = SPoint(84' 30)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 139.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIManufacturer = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Manufacturer :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 162.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITManufacturer = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 140.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSICloneOf = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Clone of :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 153.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITCloneOf = new Label { Location = SPoint(84' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 135.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIYear = new Label { Location = SPoint(206' 63)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 148.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITYear = new Label { Location = SPoint(284' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 133.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIRomOf = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "ROM of :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 149.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITRomOf = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 133.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITotalRoms = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Total ROMs :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 159.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITTotalRoms = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 138.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIPublisher = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Publisher :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 156.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITPublisher = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 137.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIDeveloper = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Developer :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 156.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITDeveloper = new Label { Location = SPoint(84' 62)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 137.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIEdition = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "Edition :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 152.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITEdition = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 135.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIVersion = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Version :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 154.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITVersion = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 136.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIType = new Label { Location = SPoint(406' 79)' Size = SSize(76' 13)' Text = "Type :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 148.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITType = new Label { Location = SPoint(484' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 133.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIMedia = new Label { Location = SPoint(6' 95)' Size = SSize(76' 13)' Text = "Media :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 148.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITMedia = new Label { Location = SPoint(84' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 133.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSILanguage = new Label { Location = SPoint(206' 95)' Size = SSize(76' 13)' Text = "Language :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 156.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITLanguage = new Label { Location = SPoint(284' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 137.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIPlayers = new Label { Location = SPoint(406' 95)' Size = SSize(76' 13)' Text = "Players :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 154.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITPlayers = new Label { Location = SPoint(484' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 136.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIRatings = new Label { Location = SPoint(6' 111)' Size = SSize(76' 13)' Text = "Ratings :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 153.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITRatings = new Label { Location = SPoint(84' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 136.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIGenre = new Label { Location = SPoint(206' 111)' Size = SSize(76' 13)' Text = "Genre :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 151.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITGenre = new Label { Location = SPoint(284' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 135.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIPeripheral = new Label { Location = SPoint(406' 111)' Size = SSize(76' 13)' Text = "Peripheral :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 161.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITPeripheral = new Label { Location = SPoint(484' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 140.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIBarCode = new Label { Location = SPoint(6' 127)' Size = SSize(76' 13)' Text = "Barcode :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 153.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITBarCode = new Label { Location = SPoint(84' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 136.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSTYear = new Label { Location = SPoint(206' 127)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 149.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSTTYear = new Label { Location = SPoint(284' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 134.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSIMediaCatalogNumber = new Label { Location = SPoint(406' 127)' Size = SSize(76' 13)' Text = "Cat. No. :"' TextAlign = ContentAlignment.TopRight' Visible = false }; " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The length of the statement  "            lblSITMediaCatalogNumber = new Label { Location = SPoint(484' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false }; " is 148.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGrid_SortCompare,The length of the statement  "                e.SortResult = int.Parse(e.CellValue1.ToString().Split(' ')[0]).CompareTo(int.Parse(e.CellValue2.ToString().Split(' ')[0])); " is 124.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,The length of the statement  "            lblDITRomsUnknown.Text = (tDir.DirStatus.CountUnknown() + tDir.DirStatus.CountInToSort()).ToString(CultureInfo.InvariantCulture); " is 129.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The length of the statement  "                        g.DrawString(tRvDir.DirStatus.Get(RepairStatus.DisplayOrder[l]).ToString(CultureInfo.InvariantCulture)' drawFont' drawBrushBlack' new PointF(gOff + 20' 3)); " is 156.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,AddRom,The length of the statement  "            if ((tRomTable.DatStatus != DatStatus.InDatMerged) || (tRomTable.RepStatus != RepStatus.NotCollected) || chkBoxShowMerged.Checked) " is 130.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,AddRom,The length of the statement  "                    RomGrid.Rows[row].Cells["ZipIndex"].Value = tRomTable.ZipFileIndex == -1 ? "" : tRomTable.ZipFileIndex.ToString(CultureInfo.InvariantCulture); " is 142.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,AddRom,The length of the statement  "                    RomGrid.Rows[row].Cells["ZipHeader"].Value = tRomTable.ZipFileHeaderPosition == null ? "" : tRomTable.ZipFileHeaderPosition.ToString(); " is 135.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmMain)); " is 127.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            this.GameGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 128.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            this.GameGrid.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.GameGrid_CellFormatting); " is 126.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            this.GameGrid.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.GameGridColumnHeaderMouseClick); " is 136.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle4.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle5.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            this.RomGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 127.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle6.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The length of the statement  "            this.RomGrid.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.RomGrid_CellFormatting); " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirCorrect}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.DirMissing}; " is 131.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirInToSort}; " is 125.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirUnknown}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Dir' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirCorrect}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InDatCollect' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 132.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InDatCollect' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 134.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.DirMissing}; " is 131.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirInToSort}; " is 125.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InToSort' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InToSort' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 130.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirUnknown}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.NotInDat' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.NotInDat' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 130.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.Zip' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 124.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirCorrect}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InDatCollect' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 137.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InDatCollect' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 139.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.DirMissing}; " is 136.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirInToSort}; " is 130.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InToSort' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InToSort' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 135.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 129.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.DirUnknown}; " is 129.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.NotInDat' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.DirCorrupt}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.NotInDat' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 135.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZip' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 129.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatBad' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 131.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatBad' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 130.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatCollect' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.CorruptCanBeFixed}; " is 184.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatCollect' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 135.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Correct}; " is 126.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Missing' RepStatus.CanBeFixed}; " is 151.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatMerged' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.Delete}; " is 172.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatMerged' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 134.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatMerged' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.UnNeeded' RepStatus.Delete' RepStatus.NeededForFix}; " is 168.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InDatMerged' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InToSort' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.Delete}; " is 144.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InToSort' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 131.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.InToSort' RepStatus.Ignore' RepStatus.NeededForFix' RepStatus.Delete}; " is 183.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 125.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.NotInDat' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.Delete}; " is 169.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Unknown' RepStatus.Ignore' RepStatus.Delete' RepStatus.MoveToSort' RepStatus.NeededForFix' RepStatus.Rename}; " is 222.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.NotInDat' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 131.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.File' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 125.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatBad' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatBad' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Correct}; " is 125.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.CorruptCanBeFixed}; " is 187.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Correct}; " is 129.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 138.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Missing' RepStatus.CanBeFixed}; " is 154.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatMerged' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.UnNeeded' RepStatus.Delete' RepStatus.NeededForFix' RepStatus.Rename}; " is 189.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InDatMerged' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 136.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InToSort' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.Delete}; " is 147.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.InToSort' RepStatus.NeededForFix' RepStatus.Delete}; " is 168.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.NotInDat' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.Delete}; " is 172.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Unknown' RepStatus.Delete' RepStatus.MoveToSort' RepStatus.NeededForFix' RepStatus.Rename}; " is 207.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.ZipFile' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 128.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatBad' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 138.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatBad' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Correct}; " is 130.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.CorruptCanBeFixed}; " is 192.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Correct}; " is 134.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.FileLocked] = new List<RepStatus> {RepStatus.UnScanned}; " is 143.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatCollect' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Missing' RepStatus.CanBeFixed}; " is 159.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatMerged' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.UnNeeded' RepStatus.Delete' RepStatus.NeededForFix' RepStatus.Rename}; " is 194.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InDatMerged' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.NotCollected}; " is 141.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InToSort' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.Delete}; " is 152.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InToSort' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.InToSort' RepStatus.NeededForFix' RepStatus.Delete}; " is 173.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.InToSort' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 133.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.NotInDat' (int) GotStatus.Corrupt] = new List<RepStatus> {RepStatus.Corrupt' RepStatus.MoveToCorrupt' RepStatus.Delete}; " is 177.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.NotInDat' (int) GotStatus.Got] = new List<RepStatus> {RepStatus.Unknown' RepStatus.Delete' RepStatus.MoveToSort' RepStatus.NeededForFix' RepStatus.Rename}; " is 212.
Long Statement,ROMVault2,RepairStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,InitStatusCheck,The length of the statement  "            StatusCheck[(int) FileType.SevenZipFile' (int) DatStatus.NotInDat' (int) GotStatus.NotGot] = new List<RepStatus> {RepStatus.Deleted}; " is 133.
Long Statement,ROMVault2,ReportStatus,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RepairStatus.cs,CountAnyFiles,The length of the statement  "            // this list include probably more status's than are needed' but all are here to double check I don't delete something I should not. " is 132.
Long Statement,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,DatCompare,The length of the statement  "            int retv = Math.Sign(string.Compare(var1.GetData(RvDat.DatData.DatFullName)' var2.GetData(RvDat.DatData.DatFullName)' StringComparison.CurrentCultureIgnoreCase)); " is 162.
Long Statement,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSearchFindFixes,The length of the statement  "                if ((lstFiles[intIndex].GotStatus == GotStatus.Got) && FindFixes.CheckIfMissingFileCanBeFixedByGotFile(tRom' lstFiles[intIndex])) " is 129.
Long Statement,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,ReadDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_ReadDat_not_known' DatFileLoader.Filename); " is 159.
Long Statement,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,The length of the statement  "                    tDat.AddData(RvDat.DatData.DatName' VarFix.CleanFileName(DatFileLoader.Next.Substring(5) + " " + DatFileLoader.GnRest()).Trim()); " is 129.
Long Statement,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,The length of the statement  "                            DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadHeaderFromDat_not_known_in_clrmamepro' DatFileLoader.Filename); " is 183.
Long Statement,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The length of the statement  "                DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadGameFromDat_Name_not_found_as_first_object_in' DatFileLoader.Filename); " is 123.
Long Statement,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadGameFromDat_not_known_in_game' DatFileLoader.Filename); " is 175.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,ReadDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_ReadDat_not_known' DatFileLoader.Filename); " is 159.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadHeaderFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadHeaderFromDat_not_known_in_clrmamepro' DatFileLoader.Filename); " is 183.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadHeaderFromDat,The length of the statement  "            thisFileType = (forceZipping.ToLower() != "no") && (forceZipping.ToLower() != "unzip") ? FileType.ZipFile : FileType.File; " is 122.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDirFromDat,The length of the statement  "                DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadGameFromDat_Name_not_found_as_first_object_in' DatFileLoader.Filename); " is 123.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDirFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadDirFromDat_Error_Keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadDirFromDat_not_know_in_dir' DatFileLoader.Filename); " is 179.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadGameFromDat,The length of the statement  "                DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadGameFromDat_Name_not_found_as_first_object_in' DatFileLoader.Filename); " is 123.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadGameFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadGameFromDat_not_known_in_game' DatFileLoader.Filename); " is 175.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,The length of the statement  "                DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadGameFromDat_Name_not_found_as_first_object_in' DatFileLoader.Filename); " is 123.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename); " is 173.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDiskFromDat,The length of the statement  "                DatUpdate.SendAndShowDat(Resources.DatCmpReader_LoadGameFromDat_Name_not_found_as_first_object_in' DatFileLoader.Filename); " is 123.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDiskFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename); " is 173.
Long Statement,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadArchiveFromDat,The length of the statement  "                        DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + " not know in Archive"' DatFileLoader.Filename); " is 141.
Long Statement,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,ReadInDatFile,The length of the statement  "            else if ((strLine.ToLower().IndexOf("clrmamepro"' StringComparison.Ordinal) >= 0) || (strLine.ToLower().IndexOf("romvault"' StringComparison.Ordinal) >= 0) || (strLine.ToLower().IndexOf("game"' StringComparison.Ordinal) >= 0)) " is 226.
Long Statement,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,ReadXMLDat,The length of the statement  "                _bgw.ReportProgress(0' new bgwShowError(strFilename' string.Format("Error Occured Reading Dat:\r\n{0}\r\n"' e.Message))); " is 121.
Long Statement,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetCheckParentSets,The length of the statement  "                                if ((mGame.Child(r).Name != romofGame.Child(r1).Name) || (((RvFile)mGame.Child(r)).Size != ((RvFile)romofGame.Child(r1)).Size)) " is 127.
Long Statement,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetMergeSets,The length of the statement  "                while ((lstParentGames.Count > 0) && (lstParentGames[lstParentGames.Count - 1].Game.GetData(RvGame.GameData.IsBios).ToLower() == "yes")) " is 136.
Long Statement,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetMergeSets,The length of the statement  "                        if (((name == romofGame.Child(r1).Name.ToLower()) || (mergename == romofGame.Child(r1).Name.ToLower())) && (ArrByte.iCompare(((RvFile)mGame.Child(r)).CRC' ((RvFile)romofGame.Child(r1)).CRC) == 0) && (((RvFile)mGame.Child(r)).Size == ((RvFile)romofGame.Child(r1)).Size)) " is 269.
Long Statement,ROMVault2.RvDB,RvBase,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvBase.cs,RepStatusReset,The length of the statement  "            if (((RepStatus == RepStatus.UnSet) || (RepStatus == RepStatus.Unknown) || (RepStatus == RepStatus.Ignore)) && (FileType == FileType.File) && (GotStatus == GotStatus.Got) && (DatStatus == DatStatus.NotInDat)) " is 208.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,DatRemove,The length of the statement  "            FileStatusClear(FileStatus.SizeFromDAT | FileStatus.CRCFromDAT | FileStatus.SHA1FromDAT | FileStatus.MD5FromDAT | FileStatus.SHA1CHDFromDAT | FileStatus.MD5CHDFromDAT); " is 168.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,DatAdd,The length of the statement  "                FileStatus.SizeFromDAT | FileStatus.CRCFromDAT | FileStatus.SHA1FromDAT | FileStatus.MD5FromDAT | FileStatus.SHA1CHDFromDAT | FileStatus.MD5CHDFromDAT' " is 151.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileRemove,The length of the statement  "                FileStatus.SizeFromHeader | FileStatus.CRCFromHeader | FileStatus.SHA1FromHeader | FileStatus.MD5FromHeader | FileStatus.SHA1CHDFromHeader | FileStatus.MD5CHDFromHeader | " is 170.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileRemove,The length of the statement  "                FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.SHA1Verified | FileStatus.MD5Verified | FileStatus.SHA1CHDVerified | FileStatus.MD5CHDVerified); " is 158.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileAdd,The length of the statement  "                FileStatus.SizeFromHeader | FileStatus.CRCFromHeader | FileStatus.SHA1FromHeader | FileStatus.MD5FromHeader | FileStatus.SHA1CHDFromHeader | FileStatus.MD5CHDFromHeader | " is 170.
Long Statement,ROMVault2.RvDB,RvFile,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvFile.cs,FileAdd,The length of the statement  "                FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.SHA1Verified | FileStatus.MD5Verified | FileStatus.SHA1CHDVerified | FileStatus.MD5CHDVerified' " is 157.
Long Statement,ROMVault2.RvDB,DB,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\DB.cs,Read,The length of the statement  "                ReportError.Show(Resources.DB_Read_Data_Cache_version_is_out_of_date_you_should_now_rescan_your_dat_directory_and_roms_directory_); " is 131.
Long Statement,ROMVault2.Utils,RelativePath,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\RelativePath.cs,MakeRelative,The length of the statement  "                bool isDifferentRoot = string.Compare(Path.GetPathRoot(fromDirectory)' Path.GetPathRoot(toPath)' StringComparison.OrdinalIgnoreCase) != 0; " is 138.
Long Statement,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanFileName,The length of the statement  "                if ((c == ':') || (c == '*') || (c == '?') || (c == '<') || (c == '>') || (c == '|') || (c == '\\') || (c == '/') || (c < 32)) " is 126.
Complex Conditional,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,MakeFixFilesRecurse,The conditional expression  "(tRom.DatStatus == DatStatus.InDatCollect) && (tRom.GotStatus != GotStatus.Got) && !((tRom.RepStatus == RepStatus.CanBeFixed) || (tRom.RepStatus == RepStatus.CorruptCanBeFixed))"  is complex.
Complex Conditional,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportMissingFindSizes,The conditional expression  "((rt == ReportType.PartialMissing) && Partial.Contains(f.RepStatus)) ||                          ((rt == ReportType.Fixing) && Fixing.Contains(f.RepStatus))"  is complex.
Complex Conditional,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportMissing,The conditional expression  "((rt == ReportType.PartialMissing) && Partial.Contains(f.RepStatus)) ||                          ((rt == ReportType.Fixing) && Fixing.Contains(f.RepStatus))"  is complex.
Complex Conditional,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The conditional expression  "!rawCopy && ((Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel1) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel2) || (Program.rvSettings.FixLevel == eFixLevel.TrrntZipLevel3))"  is complex.
Complex Conditional,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The conditional expression  "!                              (                                  // got the file in the original zip but will be deleting it                                  ((zipFileFixing.DatStatus == DatStatus.NotInDat) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.NotInDat) && (zipFileFixing.GotStatus == GotStatus.Corrupt)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InDatMerged) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InToSort) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InToSort) && (zipFileFixing.GotStatus == GotStatus.Corrupt)) ||                                    // do not have this file and cannot fix it here                                  ((zipFileFixing.DatStatus == DatStatus.InDatCollect) && (zipFileFixing.GotStatus == GotStatus.NotGot)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InDatBad) && (zipFileFixing.GotStatus == GotStatus.NotGot)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InDatMerged) && (zipFileFixing.GotStatus == GotStatus.NotGot))                              )"  is complex.
Complex Conditional,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The conditional expression  "!                              (                                  ((zipFileFixing.DatStatus == DatStatus.InDatCollect) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InDatMerged) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.NotInDat) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InToSort) && (zipFileFixing.GotStatus == GotStatus.Got)) ||                                  ((zipFileFixing.DatStatus == DatStatus.InToSort) && (zipFileFixing.GotStatus == GotStatus.Corrupt))                              )"  is complex.
Complex Conditional,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,MatchFound,The conditional expression  "(dbChild.TimeStamp != fileChild.TimeStamp) || (EScanLevel == eScanLevel.Level3) ||                          ((EScanLevel == eScanLevel.Level2) && !IsDeepScanned((RvDir) dbChild))"  is complex.
Complex Conditional,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,IsDeepScanned,The conditional expression  "(zFile != null) && (zFile.GotStatus == GotStatus.Got) &&                      (!zFile.FileStatusIs(FileStatus.SizeVerified) || !zFile.FileStatusIs(FileStatus.CRCVerified) || !zFile.FileStatusIs(FileStatus.SHA1Verified) || !zFile.FileStatusIs(FileStatus.MD5Verified))"  is complex.
Complex Conditional,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The conditional expression  "(compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0)"  is complex.
Complex Conditional,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The conditional expression  "(posName < 0) || (posSize < 0) || (posDate < 0) || (posCrc < 0) || (posEnd < 0)"  is complex.
Complex Conditional,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetMergeSets,The conditional expression  "((name == romofGame.Child(r1).Name.ToLower()) || (mergename == romofGame.Child(r1).Name.ToLower())) &&                              ((ArrByte.iCompare(((RvFile)mGame.Child(r)).CRC' ((RvFile)romofGame.Child(r1)).CRC) != 0) ||                               (((RvFile)mGame.Child(r)).Size != ((RvFile)romofGame.Child(r1)).Size))"  is complex.
Complex Conditional,ROMVault2.DatReaders,DatReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatReader.cs,DatSetMergeSets,The conditional expression  "((name == romofGame.Child(r1).Name.ToLower()) || (mergename == romofGame.Child(r1).Name.ToLower())) && (ArrByte.iCompare(((RvFile)mGame.Child(r)).CRC' ((RvFile)romofGame.Child(r1)).CRC) == 0) && (((RvFile)mGame.Child(r)).Size == ((RvFile)romofGame.Child(r1)).Size)"  is complex.
Complex Conditional,ROMVault2.RvDB,RvBase,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvBase.cs,RepStatusReset,The conditional expression  "((RepStatus == RepStatus.UnSet) || (RepStatus == RepStatus.Unknown) || (RepStatus == RepStatus.Ignore)) && (FileType == FileType.File) && (GotStatus == GotStatus.Got) && (DatStatus == DatStatus.NotInDat)"  is complex.
Complex Conditional,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,ChildAdd,The conditional expression  "((FileType == FileType.Dir) && (child.FileType == FileType.ZipFile)) ||                  ((FileType == FileType.Zip) && (child.FileType != FileType.ZipFile))"  is complex.
Complex Conditional,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanFullFileName,The conditional expression  "(c == ':') || (c == '*') || (c == '?') || (c == '<') || (c == '>') || (c == '|') || (c < 32)"  is complex.
Complex Conditional,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanFileName,The conditional expression  "(c == ':') || (c == '*') || (c == '?') || (c == '<') || (c == '>') || (c == '|') || (c == '\\') || (c == '/') || (c < 32)"  is complex.
Empty Catch Block,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,label2_Click,The method has an empty catch block.
Empty Catch Block,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,UnhandledExceptionHandler,The method has an empty catch block.
Empty Catch Block,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The method has an empty catch block.
Empty Catch Block,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_MouseUp,The method has an empty catch block.
Empty Catch Block,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGrid_SortCompare,The method has an empty catch block.
Magic Number,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,The following statement contains a magic number: (disks.Count > 2) && (item.Name != disks[0])
Magic Number,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,The following statement contains a magic number: disks.Count > 2
Magic Number,ROMVault2,DatMaker,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatMaker.cs,ProcessDir,The following statement contains a magic number: disks.Count > 2
Magic Number,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportDrawBars,The following statement contains a magic number: _ts.WriteLine("+" + new string('-'' _fileNameLength + 2) + "+" + new string('-'' _fileSizeLength + 2) + "+----------+" + new string('-'' _repStatusLength + 2) + "+");
Magic Number,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportDrawBars,The following statement contains a magic number: _ts.WriteLine("+" + new string('-'' _fileNameLength + 2) + "+" + new string('-'' _fileSizeLength + 2) + "+----------+" + new string('-'' _repStatusLength + 2) + "+");
Magic Number,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportDrawBars,The following statement contains a magic number: _ts.WriteLine("+" + new string('-'' _fileNameLength + 2) + "+" + new string('-'' _fileSizeLength + 2) + "+----------+" + new string('-'' _repStatusLength + 2) + "+");
Magic Number,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,ReportMissing,The following statement contains a magic number: _ts.WriteLine("| " + filename + new string(' '' _fileNameLength + 1 - filename.Length) + "| "                                        + f.Size + new string(' '' _fileSizeLength + 1 - f.Size.ToString().Length) + "| "                                        + crc + new string(' '' 9 - crc.Length) + "| "                                        + f.RepStatus + new string(' '' _repStatusLength + 1 - f.RepStatus.ToString().Length) + "|");
Magic Number,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ScanFiles,The following statement contains a magic number: romIndex1%100 == 0
Magic Number,ROMVault2,FindFixes,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FindFixes.cs,ScanFiles,The following statement contains a magic number: romIndex1%100 == 0
Magic Number,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The following statement contains a magic number: ushort compressionMethod = 8;
Magic Number,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,CopyFile,The following statement contains a magic number: compressionMethod = 8;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,FrmProgressWindowFix,The following statement contains a magic number: timer1.Interval = 100;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,BgwProgressChanged,The following statement contains a magic number: dataGridView1.Rows[iRow].Cells[4].Style.BackColor = Color.Red;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,BgwProgressChanged,The following statement contains a magic number: dataGridView1.Rows[iRow].Cells[4].Style.ForeColor = Color.Black;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,BgwProgressChanged,The following statement contains a magic number: dataGridView1.Rows[iRow].Cells[4].Value = bgwSFE.FixError;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,UpdateStatusText,The following statement contains a magic number: int percent = range > 0 ? progressBar.Value*100/range : 0;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(1027' 500);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(1027' 500);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 64;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 7;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(759' 32);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(759' 32);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 9;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(12' 32);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(12' 32);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(741' 23);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(741' 23);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.TabIndex = 8;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(13' 9);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(13' 9);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(480' 20);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(480' 20);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.label.TabIndex = 4;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.RowTemplate.Height = 17;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size(1027' 432);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size(1027' 432);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.TabIndex = 7;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.DatTo.Width = 250;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.GameTo.Width = 200;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.RomTo.Width = 200;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.DatFrom.Width = 150;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn1.Width = 150;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn5.Width = 150;
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1027' 500);
Magic Number,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1027' 500);
Magic Number,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,CheckADir,The following statement contains a magic number: switch (ft)              {                  case FileType.Zip:                  case FileType.SevenZip:                  {                      fileDir = new RvDir(ft);                        // open the zip file                      ICompress checkZ;                      if (ft == FileType.Zip)                      {                          checkZ = new ZipFile();                      }                      else                      {                          checkZ = new SevenZ();                      }                        ZipReturn zr = checkZ.ZipFileOpen(fullDir' dbDir.TimeStamp' true);                        if (zr == ZipReturn.ZipGood)                      {                          dbDir.ZipStatus = checkZ.ZipStatus;                            // to be Scanning a ZIP file means it is either new or has changed.                          // as the code below only calls back here if that is true.                          //                          // Level1: Only use header CRC's                          // Just get the CRC for the ZIP headers.                          //                          // Level2: Fully checksum changed only files                          // We know this file has been changed to do a full checksum scan.                          //                          // Level3: Fully checksum everything                          // So do a full checksum scan.                          if ((EScanLevel == eScanLevel.Level2) || (EScanLevel == eScanLevel.Level3))                          {                              checkZ.DeepScan();                          }                            // add all of the file information from the zip file into scanDir                          for (int i = 0; i < checkZ.LocalFilesCount(); i++)                          {                              RvFile tFile = new RvFile(DBTypeGet.FileFromDir(ft))                              {                                  Name = checkZ.Filename(i)'                                  ZipFileIndex = i'                                  ZipFileHeaderPosition = checkZ.LocalHeader(i)'                                  Size = checkZ.UncompressedSize(i)'                                  CRC = checkZ.CRC32(i)                              };                              // all 3 levels read the CRC from the ZIP header                              tFile.SetStatus(chechingDatStatus' GotStatus.Got);                              tFile.FileStatusSet(FileStatus.SizeFromHeader | FileStatus.CRCFromHeader);                                // if we are in level 2 or level 3 then do a full CheckSum Scan.                              if ((EScanLevel == eScanLevel.Level2) || (EScanLevel == eScanLevel.Level3))                              {                                  // DeepScan will return ZipReturn.ZipCRCDecodeError if the headers CRC and                                   // the actual CRC do not match.                                  // So we just need to set the MD5 and SHA1 from the ZIP file.                                  zr = checkZ.FileStatus(i);                                  if (zr == ZipReturn.ZipUntested)                                  {                                      _bgw.ReportProgress(0' new bgwShowCorrupt(zr' fullDir + " : " + checkZ.Filename(i)));                                  }                                  else if (zr != ZipReturn.ZipGood)                                  {                                      _bgw.ReportProgress(0' new bgwShowCorrupt(zr' fullDir + " : " + checkZ.Filename(i)));                                      tFile.GotStatus = GotStatus.Corrupt;                                  }                                  else                                  {                                      tFile.MD5 = checkZ.MD5(i);                                      tFile.SHA1 = checkZ.SHA1(i);                                      tFile.FileStatusSet(FileStatus.SizeVerified | FileStatus.CRCVerified | FileStatus.SHA1Verified | FileStatus.MD5Verified);                                  }                              }                                fileDir.ChildAdd(tFile);                          }                      }                      else if (zr == ZipReturn.ZipFileLocked)                      {                          _bgw.ReportProgress(0' new bgwShowError(fullDir' "Zip File Locked"));                          dbDir.TimeStamp = 0;                          dbDir.GotStatus = GotStatus.FileLocked;                      }                      else                      {                          _bgw.ReportProgress(0' new bgwShowCorrupt(zr' fullDir));                          dbDir.GotStatus = GotStatus.Corrupt;                      }                      checkZ.ZipFileClose();                  }                      break;                    case FileType.Dir:                  {                      fileDir = new RvDir(FileType.Dir);                          DirectoryInfo oDir = new DirectoryInfo(fullDir);                      DirectoryInfo[] oDirs = oDir.GetDirectories();                      FileInfo[] oFiles = oDir.GetFiles();                        // add all the subdirectories into scanDir                       foreach (DirectoryInfo dir in oDirs)                      {                          RvBase tDir = new RvDir(FileType.Dir)                          {                              Name = dir.Name'                              TimeStamp = dir.LastWriteTime                          };                          tDir.SetStatus(chechingDatStatus' GotStatus.Got);                          fileDir.ChildAdd(tDir);                      }                        // add all the files into scanDir                      foreach (FileInfo oFile in oFiles)                      {                          // if we find any zip files add them as zip files.                          string fExt = Path.GetExtension(oFile.Name);                          switch (fExt.ToLower())                          {                              case ".7z":                              {                                  RvDir tGame = new RvDir(FileType.SevenZip)                                  {                                      Name = Path.GetFileNameWithoutExtension(oFile.Name)'                                      TimeStamp = oFile.LastWriteTime                                  };                                  tGame.SetStatus(chechingDatStatus' GotStatus.Got);                                  fileDir.ChildAdd(tGame);                              }                                  break;                              case ".zip":                              {                                  RvDir tGame = new RvDir(FileType.Zip)                                  {                                      Name = Path.GetFileNameWithoutExtension(oFile.Name)'                                      TimeStamp = oFile.LastWriteTime                                  };                                  tGame.SetStatus(chechingDatStatus' GotStatus.Got);                                  fileDir.ChildAdd(tGame);                              }                                  break;                              default:                              {                                  string fName = oFile.Name;                                  if (fName == "__RomVault.tmp")                                  {                                      File.Delete(oFile.FullName);                                      continue;                                  }                                    // Scanning a file                                  //                                  // Level1 & 2 : (are the same for files) Fully checksum changed only files                                  // Here we are just getting the TimeStamp of the File' and later                                  // if the TimeStamp was not matched we will have to read the files CRC' MD5 & SHA1                                  //                                  // Level3: Fully checksum everything                                  // Get everything about the file right here so                                  // read CRC' MD5 & SHA1                                      // add all the files in the sub-directory to scanDir                                  RvFile tFile = new RvFile(FileType.File)                                  {                                      Name = fName'                                      Size = (ulong) oFile.Length'                                      TimeStamp = oFile.LastWriteTime                                  };                                    tFile.FileStatusSet(FileStatus.SizeVerified);                                    int errorCode = CHD.CheckFile(oFile' out tFile.SHA1CHD' out tFile.MD5CHD' out tFile.CHDVersion);                                    if (errorCode == 0)                                  {                                      if (tFile.SHA1CHD != null)                                      {                                          tFile.FileStatusSet(FileStatus.SHA1CHDFromHeader);                                      }                                      if (tFile.MD5CHD != null)                                      {                                          tFile.FileStatusSet(FileStatus.MD5CHDFromHeader);                                      }                                        tFile.SetStatus(chechingDatStatus' GotStatus.Got);                                        // if we are scanning at Level3 then we get all the info here                                      if (EScanLevel == eScanLevel.Level3)                                      {                                          DeepScanFile(fullDir' tFile);                                          ChdManCheck(fullDir' tFile);                                      }                                  }                                  else if (errorCode == 32)                                  {                                      tFile.GotStatus = GotStatus.FileLocked;                                      _bgw.ReportProgress(0' new bgwShowError(fullDir' "File Locked"));                                  }                                  else                                  {                                      string filename = Path.Combine(fullDir' tFile.Name);                                      ReportError.Show("File: " + filename + " Error: " + new Win32Exception(errorCode).Message + ". Scan Aborted.");                                      _fileErrorAbort = true;                                      return;                                  }                                  fileDir.ChildAdd(tFile);                              }                                  break;                          }                      }                  }                      break;                  default:                      ReportError.SendAndShow("Un supported file type in CheckADir " + ft);                      break;              }
Magic Number,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,The following statement contains a magic number: timenow - _lastUpdateTime > TimeSpan.TicksPerSecond/10
Magic Number,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,DeepScanFile,The following statement contains a magic number: errorCode == 32
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(12' 115);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(12' 115);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(445' 15);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(445' 15);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.TabIndex = 6;
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Underline)))' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(279' 142);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(279' 142);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(178' 16);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(178' 16);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 7;
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point(12' 133);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point(12' 133);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Size = new System.Drawing.Size(144' 29);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Size = new System.Drawing.Size(144' 29);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.TabIndex = 14;
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(471' 172);
Magic Number,ROMVault2,FrmHelpAbout,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmHelpAbout.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(471' 172);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: Height = displayList.Count*44 + 32;
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: Height = displayList.Count*44 + 32;
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: pictureBox.Location = new Point(4' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: pictureBox.Location = new Point(4' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: pictureBox.Location = new Point(4' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: pictureBox.Size = new Size(48' 42);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: pictureBox.Size = new Size(48' 42);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: label.Location = new Point(54' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: label.Location = new Point(54' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: label.Location = new Point(54' 4 + i*44);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: label.Size = new Size(542' 42);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,FrmKey_Load,The following statement contains a magic number: label.Size = new Size(542' 42);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(600' 532);
Magic Number,ROMVault2,FrmKey,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmKey.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(600' 532);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,FrmProgressWindow,The following statement contains a magic number: ClientSize = new Size(511' 131);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,FrmProgressWindow,The following statement contains a magic number: ClientSize = new Size(511' 131);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ClientSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ClientSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: MinimumSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: MinimumSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ErrorGrid.Rows[row].Cells["CError"].Style.ForeColor = Color.FromArgb(255' 0' 0);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ErrorGrid.Rows[row].Cells["CErrorFile"].Style.ForeColor = Color.FromArgb(255' 0' 0);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ClientSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ClientSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: MinimumSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: MinimumSize = new Size(511' 292);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ErrorGrid.Rows[row].Cells["CError"].Style.ForeColor = Color.FromArgb(255' 0' 0);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,BgwProgressChanged,The following statement contains a magic number: ErrorGrid.Rows[row].Cells["CErrorFile"].Style.ForeColor = Color.FromArgb(255' 0' 0);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,UpdateStatusText,The following statement contains a magic number: int percent = range > 0 ? progressBar.Value*100/range : 0;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar2.Location = new System.Drawing.Point(12' 71);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar2.Location = new System.Drawing.Point(12' 71);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar2.Size = new System.Drawing.Size(400' 22);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar2.Size = new System.Drawing.Size(400' 22);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar2.TabIndex = 3;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(12' 99);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(12' 99);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(400' 23);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(400' 23);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(12' 9);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(12' 9);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(368' 15);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(368' 15);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(424' 99);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(424' 99);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 2;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 34);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 34);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(480' 16);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(480' 16);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.lbl2Prog.Location = new System.Drawing.Point(386' 9);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.lbl2Prog.Location = new System.Drawing.Point(386' 9);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.lbl2Prog.Size = new System.Drawing.Size(109' 25);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.lbl2Prog.Size = new System.Drawing.Size(109' 25);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.lbl2Prog.TabIndex = 5;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.RowTemplate.Height = 17;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.Size = new System.Drawing.Size(511' 186);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.Size = new System.Drawing.Size(511' 186);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ErrorGrid.TabIndex = 6;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.CError.Width = 200;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(511' 320);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(511' 320);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 130;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 8;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 50);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 50);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(480' 16);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(480' 16);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(511' 320);
Magic Number,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(511' 320);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.Location = new System.Drawing.Point(12' 135);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.Location = new System.Drawing.Point(12' 135);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.RowTemplate.Height = 17;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.Size = new System.Drawing.Size(670' 214);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.Size = new System.Drawing.Size(670' 214);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.DataGridGames.TabIndex = 10;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnDeleteSelected.Location = new System.Drawing.Point(12' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnDeleteSelected.Location = new System.Drawing.Point(12' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnDeleteSelected.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnDeleteSelected.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnDeleteSelected.TabIndex = 11;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.Location = new System.Drawing.Point(12' 12);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.Location = new System.Drawing.Point(12' 12);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.Size = new System.Drawing.Size(670' 91);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.Size = new System.Drawing.Size(670' 91);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.grpBoxAddNew.TabIndex = 14;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.Location = new System.Drawing.Point(617' 53);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.Location = new System.Drawing.Point(617' 53);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.Size = new System.Drawing.Size(47' 24);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.Size = new System.Drawing.Size(47' 24);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnSetRomLocation.TabIndex = 14;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.Location = new System.Drawing.Point(89' 55);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.Location = new System.Drawing.Point(89' 55);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.Size = new System.Drawing.Size(515' 22);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.Size = new System.Drawing.Size(515' 22);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtROMLocation.TabIndex = 13;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.Location = new System.Drawing.Point(12' 60);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.Location = new System.Drawing.Point(12' 60);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.Size = new System.Drawing.Size(79' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.Size = new System.Drawing.Size(79' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblROMLocation.TabIndex = 12;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.Location = new System.Drawing.Point(89' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.Location = new System.Drawing.Point(89' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.Size = new System.Drawing.Size(515' 22);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.Size = new System.Drawing.Size(515' 22);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.txtDATLocation.TabIndex = 11;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.Location = new System.Drawing.Point(12' 30);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.Location = new System.Drawing.Point(12' 30);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.Size = new System.Drawing.Size(76' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.Size = new System.Drawing.Size(76' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDATLocation.TabIndex = 10;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.Location = new System.Drawing.Point(20' 111);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.Location = new System.Drawing.Point(20' 111);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.Size = new System.Drawing.Size(144' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.Size = new System.Drawing.Size(144' 13);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.lblDelete.TabIndex = 15;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(586' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(586' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 16;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnResetAll.Location = new System.Drawing.Point(138' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnResetAll.Location = new System.Drawing.Point(138' 355);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnResetAll.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnResetAll.Size = new System.Drawing.Size(96' 25);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.btnResetAll.TabIndex = 17;
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(694' 391);
Magic Number,ROMVault2,FrmSetDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSetDir.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(694' 391);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 19);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 19);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(103' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(103' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDATRoot.Location = new System.Drawing.Point(123' 14);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDATRoot.Location = new System.Drawing.Point(123' 14);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDATRoot.Size = new System.Drawing.Size(357' 22);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDATRoot.Size = new System.Drawing.Size(357' 22);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDATRoot.TabIndex = 3;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnDAT.Location = new System.Drawing.Point(486' 12);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnDAT.Location = new System.Drawing.Point(486' 12);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnDAT.Size = new System.Drawing.Size(47' 24);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnDAT.Size = new System.Drawing.Size(47' 24);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnDAT.TabIndex = 6;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(167' 314);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(167' 314);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 9;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(280' 314);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(280' 314);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 10;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(123' 111);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(123' 111);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(357' 136);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(357' 136);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 12;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(8' 113);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(8' 113);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(106' 72);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(106' 72);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 13;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboFixLevel.Location = new System.Drawing.Point(123' 75);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboFixLevel.Location = new System.Drawing.Point(123' 75);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboFixLevel.Size = new System.Drawing.Size(357' 21);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboFixLevel.Size = new System.Drawing.Size(357' 21);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboFixLevel.TabIndex = 14;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboScanLevel.Location = new System.Drawing.Point(123' 48);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboScanLevel.Location = new System.Drawing.Point(123' 48);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboScanLevel.Size = new System.Drawing.Size(357' 21);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboScanLevel.Size = new System.Drawing.Size(357' 21);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.cboScanLevel.TabIndex = 15;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 51);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 51);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(84' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(84' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 16;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(8' 79);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(8' 79);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(66' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(66' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 17;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDebugLogs.Location = new System.Drawing.Point(279' 261);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDebugLogs.Location = new System.Drawing.Point(279' 261);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDebugLogs.Size = new System.Drawing.Size(126' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDebugLogs.Size = new System.Drawing.Size(126' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDebugLogs.TabIndex = 18;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkCacheSaveTimer.Location = new System.Drawing.Point(125' 285);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkCacheSaveTimer.Location = new System.Drawing.Point(125' 285);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkCacheSaveTimer.Size = new System.Drawing.Size(156' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkCacheSaveTimer.Size = new System.Drawing.Size(156' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkCacheSaveTimer.TabIndex = 19;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Increment = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Location = new System.Drawing.Point(279' 283);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Location = new System.Drawing.Point(279' 283);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Maximum = new decimal(new int[] {              60'              0'              0'              0});
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Minimum = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Size = new System.Drawing.Size(47' 20);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Size = new System.Drawing.Size(47' 20);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.TabIndex = 20;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.upTime.Value = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(329' 286);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(329' 286);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(44' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(44' 13);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 21;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDoubleCheckDelete.Location = new System.Drawing.Point(125' 261);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDoubleCheckDelete.Location = new System.Drawing.Point(125' 261);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDoubleCheckDelete.Size = new System.Drawing.Size(128' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDoubleCheckDelete.Size = new System.Drawing.Size(128' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkDoubleCheckDelete.TabIndex = 22;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkRV7z.Location = new System.Drawing.Point(395' 284);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkRV7z.Location = new System.Drawing.Point(395' 284);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkRV7z.Size = new System.Drawing.Size(131' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkRV7z.Size = new System.Drawing.Size(131' 17);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.chkRV7z.TabIndex = 23;
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(545' 346);
Magic Number,ROMVault2,FrmSettings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(545' 346);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(565' 525);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(565' 525);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(460' 543);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(460' 543);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(117' 28);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(117' 28);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(20' 551);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(20' 551);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(202' 13);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(202' 13);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(589' 583);
Magic Number,ROMVault2,FrmShowError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmShowError.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(589' 583);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,FrmSplashScreen,The following statement contains a magic number: timer1.Interval = 50;
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,BgwRunWorkerCompleted,The following statement contains a magic number: _opacityIncrement = -0.1;
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(7' 135);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(7' 135);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Padding = new System.Windows.Forms.Padding(2' 2' 0' 0);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Padding = new System.Windows.Forms.Padding(2' 2' 0' 0);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(450' 20);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(450' 20);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(7' 159);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Location = new System.Drawing.Point(7' 159);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(450' 19);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Size = new System.Drawing.Size(450' 19);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.TabIndex = 4;
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(10' 113);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(10' 113);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(445' 15);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(445' 15);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.TabIndex = 5;
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(465' 207);
Magic Number,ROMVault2,FrmSplashScreen,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmSplashScreen.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(465' 207);
Magic Number,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,ReportFile,The following statement contains a magic number: sw.WriteLine(f.ReportIndex.ToString("D8") + " " + ArrByte.ToString(f.CRC) + " " + f.GotStatus.ToString().PadRight(10) + " " + f.RepStatus.ToString().PadRight(15) + " " + f.TreeFullName);
Magic Number,ROMVault2,ReportError,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\ReportError.cs,ReportFile,The following statement contains a magic number: sw.WriteLine(f.ReportIndex.ToString("D8") + " " + ArrByte.ToString(f.CRC) + " " + f.GotStatus.ToString().PadRight(10) + " " + f.RepStatus.ToString().PadRight(15) + " " + f.TreeFullName);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupInt,The following statement contains a magic number: AutoScrollMinSize = new Size(500' _yPos);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RTree = new Rectangle(0' _yPos - 8' 1 + nodeDepth*18' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RTree = new Rectangle(0' _yPos - 8' 1 + nodeDepth*18' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RTree = new Rectangle(0' _yPos - 8' 1 + nodeDepth*18' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RExpand = new Rectangle(5 + nodeDepth*18' _yPos + 4' 9' 9);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RExpand = new Rectangle(5 + nodeDepth*18' _yPos + 4' 9' 9);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RExpand = new Rectangle(5 + nodeDepth*18' _yPos + 4' 9' 9);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RExpand = new Rectangle(5 + nodeDepth*18' _yPos + 4' 9' 9);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RExpand = new Rectangle(5 + nodeDepth*18' _yPos + 4' 9' 9);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RChecked = new Rectangle(20 + nodeDepth*18' _yPos + 2' 13' 13);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RChecked = new Rectangle(20 + nodeDepth*18' _yPos + 2' 13' 13);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RChecked = new Rectangle(20 + nodeDepth*18' _yPos + 2' 13' 13);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RChecked = new Rectangle(20 + nodeDepth*18' _yPos + 2' 13' 13);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RChecked = new Rectangle(20 + nodeDepth*18' _yPos + 2' 13' 13);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RIcon = new Rectangle(35 + nodeDepth*18' _yPos' 16' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RIcon = new Rectangle(35 + nodeDepth*18' _yPos' 16' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RIcon = new Rectangle(35 + nodeDepth*18' _yPos' 16' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RIcon = new Rectangle(35 + nodeDepth*18' _yPos' 16' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RText = new Rectangle(51 + nodeDepth*18' _yPos' 500' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RText = new Rectangle(51 + nodeDepth*18' _yPos' 500' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RText = new Rectangle(51 + nodeDepth*18' _yPos' 500' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: pTree.Tree.RText = new Rectangle(51 + nodeDepth*18' _yPos' 500' 16);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,SetupTree,The following statement contains a magic number: _yPos = _yPos + 16;
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: int x = j*18 - _hScroll;
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: int icon = 2;
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: icon = 4;
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(51' 153' 255))' RSub(recBackGround' _hScroll' _vScroll));
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(51' 153' 255))' RSub(recBackGround' _hScroll' _vScroll));
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(51' 153' 255))' RSub(recBackGround' _hScroll' _vScroll));
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following statement contains a magic number: g.DrawString(thistxt' new Font("Microsoft Sans Serif"' 8)' Brushes.White' pTree.Tree.RText.Left - _hScroll' pTree.Tree.RText.Top + 1 - _vScroll);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(455' 416);
Magic Number,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(455' 416);
Magic Number,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The following statement contains a magic number: ver == 2
Magic Number,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The following statement contains a magic number: ver == 3
Magic Number,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The following statement contains a magic number: ver == 4
Magic Number,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The following statement contains a magic number: ver == 5
Magic Number,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The following statement contains a magic number: ver == 6
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIName = new Label { Location = SPoint(6' 15)' Size = SSize(76' 13)' Text = "Name :"' TextAlign = ContentAlignment.TopRight };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIName = new Label { Location = SPoint(6' 15)' Size = SSize(76' 13)' Text = "Name :"' TextAlign = ContentAlignment.TopRight };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIName = new Label { Location = SPoint(6' 15)' Size = SSize(76' 13)' Text = "Name :"' TextAlign = ContentAlignment.TopRight };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIName = new Label { Location = SPoint(6' 15)' Size = SSize(76' 13)' Text = "Name :"' TextAlign = ContentAlignment.TopRight };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITName = new Label { Location = SPoint(84' 14)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITName = new Label { Location = SPoint(84' 14)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITName = new Label { Location = SPoint(84' 14)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITName = new Label { Location = SPoint(84' 14)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDescription = new Label { Location = SPoint(6' 31)' Size = SSize(76' 13)' Text = "Description :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDescription = new Label { Location = SPoint(6' 31)' Size = SSize(76' 13)' Text = "Description :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDescription = new Label { Location = SPoint(6' 31)' Size = SSize(76' 13)' Text = "Description :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDescription = new Label { Location = SPoint(6' 31)' Size = SSize(76' 13)' Text = "Description :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDescription = new Label { Location = SPoint(84' 30)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDescription = new Label { Location = SPoint(84' 30)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDescription = new Label { Location = SPoint(84' 30)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDescription = new Label { Location = SPoint(84' 30)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIManufacturer = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Manufacturer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIManufacturer = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Manufacturer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIManufacturer = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Manufacturer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIManufacturer = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Manufacturer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITManufacturer = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITManufacturer = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITManufacturer = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITManufacturer = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSICloneOf = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Clone of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSICloneOf = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Clone of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSICloneOf = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Clone of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSICloneOf = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Clone of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITCloneOf = new Label { Location = SPoint(84' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITCloneOf = new Label { Location = SPoint(84' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITCloneOf = new Label { Location = SPoint(84' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITCloneOf = new Label { Location = SPoint(84' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIYear = new Label { Location = SPoint(206' 63)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIYear = new Label { Location = SPoint(206' 63)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIYear = new Label { Location = SPoint(206' 63)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIYear = new Label { Location = SPoint(206' 63)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITYear = new Label { Location = SPoint(284' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITYear = new Label { Location = SPoint(284' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITYear = new Label { Location = SPoint(284' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITYear = new Label { Location = SPoint(284' 62)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRomOf = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "ROM of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRomOf = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "ROM of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRomOf = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "ROM of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRomOf = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "ROM of :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRomOf = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRomOf = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRomOf = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRomOf = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITotalRoms = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Total ROMs :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITotalRoms = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Total ROMs :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITotalRoms = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Total ROMs :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITotalRoms = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Total ROMs :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITTotalRoms = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITTotalRoms = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITTotalRoms = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITTotalRoms = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPublisher = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Publisher :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPublisher = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Publisher :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPublisher = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Publisher :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPublisher = new Label { Location = SPoint(6' 47)' Size = SSize(76' 13)' Text = "Publisher :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPublisher = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPublisher = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPublisher = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPublisher = new Label { Location = SPoint(84' 46)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDeveloper = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Developer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDeveloper = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Developer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDeveloper = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Developer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIDeveloper = new Label { Location = SPoint(6' 63)' Size = SSize(76' 13)' Text = "Developer :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDeveloper = new Label { Location = SPoint(84' 62)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDeveloper = new Label { Location = SPoint(84' 62)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDeveloper = new Label { Location = SPoint(84' 62)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITDeveloper = new Label { Location = SPoint(84' 62)' Size = SSize(320' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIEdition = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "Edition :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIEdition = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "Edition :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIEdition = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "Edition :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIEdition = new Label { Location = SPoint(6' 79)' Size = SSize(76' 13)' Text = "Edition :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITEdition = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITEdition = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITEdition = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITEdition = new Label { Location = SPoint(84' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIVersion = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Version :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIVersion = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Version :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIVersion = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Version :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIVersion = new Label { Location = SPoint(206' 79)' Size = SSize(76' 13)' Text = "Version :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITVersion = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITVersion = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITVersion = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITVersion = new Label { Location = SPoint(284' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIType = new Label { Location = SPoint(406' 79)' Size = SSize(76' 13)' Text = "Type :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIType = new Label { Location = SPoint(406' 79)' Size = SSize(76' 13)' Text = "Type :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIType = new Label { Location = SPoint(406' 79)' Size = SSize(76' 13)' Text = "Type :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIType = new Label { Location = SPoint(406' 79)' Size = SSize(76' 13)' Text = "Type :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITType = new Label { Location = SPoint(484' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITType = new Label { Location = SPoint(484' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITType = new Label { Location = SPoint(484' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITType = new Label { Location = SPoint(484' 78)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMedia = new Label { Location = SPoint(6' 95)' Size = SSize(76' 13)' Text = "Media :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMedia = new Label { Location = SPoint(6' 95)' Size = SSize(76' 13)' Text = "Media :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMedia = new Label { Location = SPoint(6' 95)' Size = SSize(76' 13)' Text = "Media :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMedia = new Label { Location = SPoint(6' 95)' Size = SSize(76' 13)' Text = "Media :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMedia = new Label { Location = SPoint(84' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMedia = new Label { Location = SPoint(84' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMedia = new Label { Location = SPoint(84' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMedia = new Label { Location = SPoint(84' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSILanguage = new Label { Location = SPoint(206' 95)' Size = SSize(76' 13)' Text = "Language :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSILanguage = new Label { Location = SPoint(206' 95)' Size = SSize(76' 13)' Text = "Language :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSILanguage = new Label { Location = SPoint(206' 95)' Size = SSize(76' 13)' Text = "Language :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSILanguage = new Label { Location = SPoint(206' 95)' Size = SSize(76' 13)' Text = "Language :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITLanguage = new Label { Location = SPoint(284' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITLanguage = new Label { Location = SPoint(284' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITLanguage = new Label { Location = SPoint(284' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITLanguage = new Label { Location = SPoint(284' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPlayers = new Label { Location = SPoint(406' 95)' Size = SSize(76' 13)' Text = "Players :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPlayers = new Label { Location = SPoint(406' 95)' Size = SSize(76' 13)' Text = "Players :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPlayers = new Label { Location = SPoint(406' 95)' Size = SSize(76' 13)' Text = "Players :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPlayers = new Label { Location = SPoint(406' 95)' Size = SSize(76' 13)' Text = "Players :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPlayers = new Label { Location = SPoint(484' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPlayers = new Label { Location = SPoint(484' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPlayers = new Label { Location = SPoint(484' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPlayers = new Label { Location = SPoint(484' 94)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRatings = new Label { Location = SPoint(6' 111)' Size = SSize(76' 13)' Text = "Ratings :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRatings = new Label { Location = SPoint(6' 111)' Size = SSize(76' 13)' Text = "Ratings :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRatings = new Label { Location = SPoint(6' 111)' Size = SSize(76' 13)' Text = "Ratings :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIRatings = new Label { Location = SPoint(6' 111)' Size = SSize(76' 13)' Text = "Ratings :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRatings = new Label { Location = SPoint(84' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRatings = new Label { Location = SPoint(84' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRatings = new Label { Location = SPoint(84' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITRatings = new Label { Location = SPoint(84' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIGenre = new Label { Location = SPoint(206' 111)' Size = SSize(76' 13)' Text = "Genre :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIGenre = new Label { Location = SPoint(206' 111)' Size = SSize(76' 13)' Text = "Genre :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIGenre = new Label { Location = SPoint(206' 111)' Size = SSize(76' 13)' Text = "Genre :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIGenre = new Label { Location = SPoint(206' 111)' Size = SSize(76' 13)' Text = "Genre :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITGenre = new Label { Location = SPoint(284' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITGenre = new Label { Location = SPoint(284' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITGenre = new Label { Location = SPoint(284' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITGenre = new Label { Location = SPoint(284' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPeripheral = new Label { Location = SPoint(406' 111)' Size = SSize(76' 13)' Text = "Peripheral :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPeripheral = new Label { Location = SPoint(406' 111)' Size = SSize(76' 13)' Text = "Peripheral :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPeripheral = new Label { Location = SPoint(406' 111)' Size = SSize(76' 13)' Text = "Peripheral :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIPeripheral = new Label { Location = SPoint(406' 111)' Size = SSize(76' 13)' Text = "Peripheral :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPeripheral = new Label { Location = SPoint(484' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPeripheral = new Label { Location = SPoint(484' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPeripheral = new Label { Location = SPoint(484' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITPeripheral = new Label { Location = SPoint(484' 110)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIBarCode = new Label { Location = SPoint(6' 127)' Size = SSize(76' 13)' Text = "Barcode :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIBarCode = new Label { Location = SPoint(6' 127)' Size = SSize(76' 13)' Text = "Barcode :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIBarCode = new Label { Location = SPoint(6' 127)' Size = SSize(76' 13)' Text = "Barcode :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIBarCode = new Label { Location = SPoint(6' 127)' Size = SSize(76' 13)' Text = "Barcode :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITBarCode = new Label { Location = SPoint(84' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITBarCode = new Label { Location = SPoint(84' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITBarCode = new Label { Location = SPoint(84' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITBarCode = new Label { Location = SPoint(84' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTYear = new Label { Location = SPoint(206' 127)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTYear = new Label { Location = SPoint(206' 127)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTYear = new Label { Location = SPoint(206' 127)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTYear = new Label { Location = SPoint(206' 127)' Size = SSize(76' 13)' Text = "Year :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTTYear = new Label { Location = SPoint(284' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTTYear = new Label { Location = SPoint(284' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTTYear = new Label { Location = SPoint(284' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSTTYear = new Label { Location = SPoint(284' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMediaCatalogNumber = new Label { Location = SPoint(406' 127)' Size = SSize(76' 13)' Text = "Cat. No. :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMediaCatalogNumber = new Label { Location = SPoint(406' 127)' Size = SSize(76' 13)' Text = "Cat. No. :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMediaCatalogNumber = new Label { Location = SPoint(406' 127)' Size = SSize(76' 13)' Text = "Cat. No. :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSIMediaCatalogNumber = new Label { Location = SPoint(406' 127)' Size = SSize(76' 13)' Text = "Cat. No. :"' TextAlign = ContentAlignment.TopRight' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMediaCatalogNumber = new Label { Location = SPoint(484' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMediaCatalogNumber = new Label { Location = SPoint(484' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMediaCatalogNumber = new Label { Location = SPoint(484' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,addGameGrid,The following statement contains a magic number: lblSITMediaCatalogNumber = new Label { Location = SPoint(484' 126)' Size = SSize(120' 17)' BorderStyle = BorderStyle.FixedSingle' Visible = false };
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: string size = RomGrid.Rows[currentMouseOverRow].Cells[2].Value.ToString();
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: string crc = RomGrid.Rows[currentMouseOverRow].Cells[4].Value.ToString();
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: crc = crc.Substring(0' 8);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: crc.Length > 8
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: string sha1 = RomGrid.Rows[currentMouseOverRow].Cells[5].Value.ToString();
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: sha1 = sha1.Substring(0' 40);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: sha1.Length > 40
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: string md5 = RomGrid.Rows[currentMouseOverRow].Cells[6].Value.ToString();
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: md5 = md5.Substring(0' 32);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGridMouseUp,The following statement contains a magic number: md5.Length > 32
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_MouseUp,The following statement contains a magic number: object r2 = GameGrid.Rows[currentMouseOverRow].Cells[2].FormattedValue;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGrid_SortCompare,The following statement contains a magic number: e.Column.Index != 2
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,splitContainer3_Panel1_Resize,The following statement contains a magic number: gbDatInfo.Width = splitContainer3.Panel1.Width - gbDatInfo.Left * 2;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: const int leftPos = 89;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: int rightPos = (int)(gbDatInfo.Width / _scaleFactorX) - 15;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: rightPos = 600;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: rightPos > 600
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: int widthB1 = (int)((double)width * 120 / 340);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: int widthB1 = (int)((double)width * 120 / 340);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbDatInfo_Resize,The following statement contains a magic number: int backD = 97;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,The following statement contains a magic number: l >= 13
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,The following statement contains a magic number: int len = DigitLength(tDirStat.Get(RepairStatus.DisplayOrder[l])) * 7 + 26;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateGameGrid,The following statement contains a magic number: int len = DigitLength(tDirStat.Get(RepairStatus.DisplayOrder[l])) * 7 + 26;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,DigitLength,The following statement contains a magic number: textNumber = textNumber / 10;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The following statement contains a magic number: Color bgCol = Color.FromArgb(255' 255' 255);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The following statement contains a magic number: Color bgCol = Color.FromArgb(255' 255' 255);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The following statement contains a magic number: Color bgCol = Color.FromArgb(255' 255' 255);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGrid_CellFormatting,The following statement contains a magic number: g.DrawImage(bm' (cellBounds.Width - xSize) / 2' 0' xSize' cellBounds.Height - 1);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,GameGridColumnHeaderMouseClick,The following statement contains a magic number: (e.ColumnIndex != 1) && (e.ColumnIndex != 2)
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,splitContainer4_Panel1_Resize,The following statement contains a magic number: int chkLeft = splitContainer4.Panel1.Width - 150;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,splitContainer4_Panel1_Resize,The following statement contains a magic number: chkLeft = 430;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,splitContainer4_Panel1_Resize,The following statement contains a magic number: chkLeft < 430
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,splitContainer4_Panel1_Resize,The following statement contains a magic number: gbSetInfo.Width = chkLeft - gbSetInfo.Left - 10;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: const int leftPos = 84;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int rightPos = gbSetInfo.Width - 15;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: rightPos = 750;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: rightPos > 750
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int widthB1 = (int)((double)width * 120 / 340);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int widthB1 = (int)((double)width * 120 / 340);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIYear.Left = leftB2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSITotalRoms.Left = leftB2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int width3 = (int)(width * 0.24);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int p2 = (int)(width * 0.38);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: int width4 = (int)(width * 0.24);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIVersion.Left = leftPos + p2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIType.Left = leftPos + width - width3 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSILanguage.Left = leftPos + p2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIPlayers.Left = leftPos + width - width3 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIGenre.Left = leftPos + p2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIPeripheral.Left = leftPos + width - width3 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSTYear.Left = leftPos + p2 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,gbSetInfo_Resize,The following statement contains a magic number: lblSIMediaCatalogNumber.Left = leftPos + width - width4 - 78;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,Contrasty,The following statement contains a magic number: return (a.R << 1) + a.B + a.G + (a.G << 2) < 1024 ? Color.White : Color.Black;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,Contrasty,The following statement contains a magic number: return (a.R << 1) + a.B + a.G + (a.G << 2) < 1024 ? Color.White : Color.Black;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGrid_CellFormatting,The following statement contains a magic number: g.DrawImage(romIcon' 0' 0' 54' 18);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,RomGrid_CellFormatting,The following statement contains a magic number: g.DrawImage(romIcon' 0' 0' 54' 18);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(0' 24);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(1264' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(1264' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 80;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 5;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnReport.Location = new System.Drawing.Point(0' 320);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnReport.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnReport.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnReport.TabIndex = 13;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFixFiles.Location = new System.Drawing.Point(0' 240);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFixFiles.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFixFiles.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFixFiles.TabIndex = 10;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFindFixes.Location = new System.Drawing.Point(0' 160);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFindFixes.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFindFixes.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnFindFixes.TabIndex = 9;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnScanRoms.Location = new System.Drawing.Point(0' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnScanRoms.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnScanRoms.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnScanRoms.TabIndex = 8;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdateDats.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdateDats.Size = new System.Drawing.Size(80' 80);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Panel1MinSize = 450;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(1180' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(1180' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterDistance = 479;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Size = new System.Drawing.Size(479' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Size = new System.Drawing.Size(479' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.SplitterDistance = 148;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbDatInfo.Location = new System.Drawing.Point(5' 0);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbDatInfo.Size = new System.Drawing.Size(468' 147);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbDatInfo.Size = new System.Drawing.Size(468' 147);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbDatInfo.TabIndex = 3;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsUnknown.Location = new System.Drawing.Point(214' 121);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsUnknown.Location = new System.Drawing.Point(214' 121);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsUnknown.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsUnknown.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsUnknown.TabIndex = 26;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(10' 105);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(10' 105);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 23;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsUnknown.Location = new System.Drawing.Point(311' 120);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsUnknown.Location = new System.Drawing.Point(311' 120);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsUnknown.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsUnknown.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsUnknown.TabIndex = 21;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsFixable.Location = new System.Drawing.Point(311' 104);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsFixable.Location = new System.Drawing.Point(311' 104);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsFixable.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsFixable.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsFixable.TabIndex = 20;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsMissing.Location = new System.Drawing.Point(89' 120);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsMissing.Location = new System.Drawing.Point(89' 120);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsMissing.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsMissing.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsMissing.TabIndex = 19;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsGot.Location = new System.Drawing.Point(89' 104);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsGot.Location = new System.Drawing.Point(89' 104);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsGot.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsGot.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomsGot.TabIndex = 18;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomPath.Location = new System.Drawing.Point(10' 79);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomPath.Location = new System.Drawing.Point(10' 79);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomPath.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomPath.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITRomPath.TabIndex = 15;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITPath.Location = new System.Drawing.Point(89' 78);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITPath.Location = new System.Drawing.Point(89' 78);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITPath.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITPath.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITPath.TabIndex = 13;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDate.Location = new System.Drawing.Point(214' 63);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDate.Location = new System.Drawing.Point(214' 63);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDate.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDate.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDate.TabIndex = 12;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIAuthor.Location = new System.Drawing.Point(10' 63);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIAuthor.Location = new System.Drawing.Point(10' 63);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIAuthor.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIAuthor.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIAuthor.TabIndex = 11;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDate.Location = new System.Drawing.Point(311' 62);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDate.Location = new System.Drawing.Point(311' 62);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDate.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDate.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDate.TabIndex = 10;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITAuthor.Location = new System.Drawing.Point(89' 62);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITAuthor.Location = new System.Drawing.Point(89' 62);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITAuthor.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITAuthor.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITAuthor.TabIndex = 9;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIVersion.Location = new System.Drawing.Point(214' 47);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIVersion.Location = new System.Drawing.Point(214' 47);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIVersion.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIVersion.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIVersion.TabIndex = 8;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDICategory.Location = new System.Drawing.Point(10' 47);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDICategory.Location = new System.Drawing.Point(10' 47);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDICategory.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDICategory.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDICategory.TabIndex = 7;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITVersion.Location = new System.Drawing.Point(311' 46);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITVersion.Location = new System.Drawing.Point(311' 46);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITVersion.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITVersion.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITVersion.TabIndex = 6;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITCategory.Location = new System.Drawing.Point(89' 46);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITCategory.Location = new System.Drawing.Point(89' 46);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITCategory.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITCategory.Size = new System.Drawing.Size(120' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITCategory.TabIndex = 5;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDescription.Location = new System.Drawing.Point(10' 31);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDescription.Location = new System.Drawing.Point(10' 31);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDescription.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDescription.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIDescription.TabIndex = 4;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIName.Location = new System.Drawing.Point(10' 15);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIName.Location = new System.Drawing.Point(10' 15);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIName.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIName.Size = new System.Drawing.Size(75' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIName.TabIndex = 3;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDescription.Location = new System.Drawing.Point(89' 30);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDescription.Location = new System.Drawing.Point(89' 30);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDescription.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDescription.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITDescription.TabIndex = 2;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITName.Location = new System.Drawing.Point(89' 14);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITName.Location = new System.Drawing.Point(89' 14);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITName.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDITName.Size = new System.Drawing.Size(342' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsFixable.Location = new System.Drawing.Point(214' 105);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsFixable.Location = new System.Drawing.Point(214' 105);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsFixable.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsFixable.Size = new System.Drawing.Size(92' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.lblDIRomsFixable.TabIndex = 25;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(2' 121);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(2' 121);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(83' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(83' 13);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 24;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.DirTree.Size = new System.Drawing.Size(479' 586);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.DirTree.Size = new System.Drawing.Size(479' 586);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.DirTree.TabIndex = 2;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer4.Size = new System.Drawing.Size(697' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer4.Size = new System.Drawing.Size(697' 738);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer4.SplitterDistance = 148;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point(547' 114);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point(547' 114);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Size = new System.Drawing.Size(144' 29);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Size = new System.Drawing.Size(144' 29);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.TabIndex = 15;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnColorKey.Location = new System.Drawing.Point(547' 85);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnColorKey.Location = new System.Drawing.Point(547' 85);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnColorKey.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnColorKey.Size = new System.Drawing.Size(89' 23);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.btnColorKey.TabIndex = 9;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMerged.Location = new System.Drawing.Point(547' 68);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMerged.Location = new System.Drawing.Point(547' 68);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMerged.Size = new System.Drawing.Size(125' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMerged.Size = new System.Drawing.Size(125' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMerged.TabIndex = 8;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowFixed.Location = new System.Drawing.Point(547' 52);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowFixed.Location = new System.Drawing.Point(547' 52);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowFixed.Size = new System.Drawing.Size(102' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowFixed.Size = new System.Drawing.Size(102' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowFixed.TabIndex = 7;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMissing.Location = new System.Drawing.Point(547' 36);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMissing.Location = new System.Drawing.Point(547' 36);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMissing.Size = new System.Drawing.Size(124' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMissing.Size = new System.Drawing.Size(124' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowMissing.TabIndex = 6;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowCorrect.Location = new System.Drawing.Point(547' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowCorrect.Location = new System.Drawing.Point(547' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowCorrect.Size = new System.Drawing.Size(123' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowCorrect.Size = new System.Drawing.Size(123' 17);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxShowCorrect.TabIndex = 5;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbSetInfo.Location = new System.Drawing.Point(5' 0);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbSetInfo.Size = new System.Drawing.Size(532' 147);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbSetInfo.Size = new System.Drawing.Size(532' 147);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.gbSetInfo.TabIndex = 4;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer5.Size = new System.Drawing.Size(697' 586);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer5.Size = new System.Drawing.Size(697' 586);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer5.SplitterDistance = 267;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.RowTemplate.Height = 17;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.Size = new System.Drawing.Size(697' 267);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.Size = new System.Drawing.Size(697' 267);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.GameGrid.TabIndex = 4;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.Type.FillWeight = 40F;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.Type.Width = 40;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CGame.Width = 220;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CDescription.Width = 220;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CCorrect.Width = 500;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle4.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle5.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle6.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.RowTemplate.Height = 19;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.Size = new System.Drawing.Size(697' 315);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.Size = new System.Drawing.Size(697' 315);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.RomGrid.TabIndex = 21;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CGot.Width = 65;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CRom.Width = 150;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CSize.Width = 60;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CMerge.Width = 60;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CSHA1.Width = 150;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.CMD5.Width = 150;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(1264' 24);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(1264' 24);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 6;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmUpdateDATs.Size = new System.Drawing.Size(86' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmUpdateDATs.Size = new System.Drawing.Size(86' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanROMs.Size = new System.Drawing.Size(79' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanROMs.Size = new System.Drawing.Size(79' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel1.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel1.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel2.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel2.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel3.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmScanLevel3.Size = new System.Drawing.Size(300' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmFindFixes.Size = new System.Drawing.Size(70' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.tsmFindFixes.Size = new System.Drawing.Size(70' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.FixROMsToolStripMenuItem.Size = new System.Drawing.Size(68' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.FixROMsToolStripMenuItem.Size = new System.Drawing.Size(68' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.settingsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.settingsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.reportsToolStripMenuItem.Size = new System.Drawing.Size(59' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.reportsToolStripMenuItem.Size = new System.Drawing.Size(59' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fixDatReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fixDatReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fullReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fullReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fixReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.fixReportToolStripMenuItem.Size = new System.Drawing.Size(147' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.aboutRomVaultToolStripMenuItem.Size = new System.Drawing.Size(161' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.aboutRomVaultToolStripMenuItem.Size = new System.Drawing.Size(161' 22);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewImageColumn1.FillWeight = 40F;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewImageColumn1.Width = 40;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewImageColumn2.Width = 300;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewImageColumn3.Width = 65;
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1264' 762);
Magic Number,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1264' 762);
Magic Number,ROMVault2,GameGridRowComparer,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,Compare,The following statement contains a magic number: switch (_columnIndex)                  {                      case 1: // CGame                          result = string.CompareOrdinal(aRvDir.Name' bRvDir.Name);                          break;                      case 2: // CDescription                          string aDes = "";                          string bDes = "";                          if (aRvDir.Game != null)                          {                              aDes = aRvDir.Game.GetData(RvGame.GameData.Description);                          }                          if (bRvDir.Game != null)                          {                              bDes = bRvDir.Game.GetData(RvGame.GameData.Description);                          }                            result = string.CompareOrdinal(aDes' bDes);                            // if desciptions match' fall through to sorting by name                          if (result == 0)                          {                              result = string.CompareOrdinal(aRvDir.Name' bRvDir.Name);                          }                            break;                      default:                          Console.WriteLine("WARN: GameGridRowComparer::Compare() Invalid columnIndex: {0}"' _columnIndex);                          break;                  }
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,DBHelper,The following statement contains a magic number: ZeroByteMD5 = VarFix.CleanMD5SHA1("d41d8cd98f00b204e9800998ecf8427e"' 32);
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,DBHelper,The following statement contains a magic number: ZeroByteSHA1 = VarFix.CleanMD5SHA1("da39a3ee5e6b4b0d3255bfef95601890afd80709"' 40);
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,DBHelper,The following statement contains a magic number: ZeroByteCRC = VarFix.CleanMD5SHA1("00000000"' 8);
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,TrrntZipStringCompare,The following statement contains a magic number: (byte1 >= 65) && (byte1 <= 90)
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,TrrntZipStringCompare,The following statement contains a magic number: (byte1 >= 65) && (byte1 <= 90)
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,TrrntZipStringCompare,The following statement contains a magic number: (byte2 >= 65) && (byte2 <= 90)
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,TrrntZipStringCompare,The following statement contains a magic number: (byte2 >= 65) && (byte2 <= 90)
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,GetDatPath,The following statement contains a magic number: rootPath.Substring(0' 6) == "ToSort"
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,GetDatPath,The following statement contains a magic number: return Program.rvSettings.DatRoot + rootPath.Substring(8);
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,GetDatPath,The following statement contains a magic number: rootPath.Substring(0' 8) == "RomVault"
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSortCRCSize,The following statement contains a magic number: int intMiddle = (intTop + intBase)/2;
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSearchCRCSize,The following statement contains a magic number: int intMid = (intBottom + intTop + 1)/2;
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSortSHA1CHD,The following statement contains a magic number: int intMiddle = (intTop + intBase)/2;
Magic Number,ROMVault2,DBHelper,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DBHelper.cs,RomSearchSHA1CHD,The following statement contains a magic number: int intMid = (intBottom + intTop + 1)/2;
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: uint length = ReadUInt32(buff' 8);
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: version = ReadUInt32(buff' 12);
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: version > 5
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following statement contains a magic number: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,ReadUInt32,The following statement contains a magic number: return                  ((uint) b[p + 0] << 24) |                  ((uint) b[p + 1] << 16) |                  ((uint) b[p + 2] << 8) |                  b[p + 3];
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,ReadUInt32,The following statement contains a magic number: return                  ((uint) b[p + 0] << 24) |                  ((uint) b[p + 1] << 16) |                  ((uint) b[p + 2] << 8) |                  b[p + 3];
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,ReadUInt32,The following statement contains a magic number: return                  ((uint) b[p + 0] << 24) |                  ((uint) b[p + 1] << 16) |                  ((uint) b[p + 2] << 8) |                  b[p + 3];
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,ReadUInt32,The following statement contains a magic number: return                  ((uint) b[p + 0] << 24) |                  ((uint) b[p + 1] << 16) |                  ((uint) b[p + 2] << 8) |                  b[p + 3];
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,ReadUInt32,The following statement contains a magic number: return                  ((uint) b[p + 0] << 24) |                  ((uint) b[p + 1] << 16) |                  ((uint) b[p + 2] << 8) |                  b[p + 3];
Magic Number,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CHDOutputHandler,The following statement contains a magic number: switch (_outputLineCount)              {                  case 0:                      if (!Regex.IsMatch(sOut' @"^chdman - MAME Compressed Hunks of Data \(CHD\) manager ([0-9\.]+) \(.*\)"))                      {                          _result = "Incorrect startup of CHDMan :" + sOut;                          _resultType = CHDManCheck.CHDReturnError;                      }                      break;                  case 1:                      if (sOut != "Raw SHA1 verification successful!")                      {                          _result = "Raw SHA1 check failed :" + sOut;                          _resultType = CHDManCheck.CHDReturnError;                      }                      break;                  case 2:                      if (sOut != "Overall SHA1 verification successful!")                      {                          _result = "Overall SHA1 check failed :" + sOut;                          _resultType = CHDManCheck.CHDReturnError;                      }                      break;                  default:                      _result = "Unexpected output from chdman :" + sOut;                      _resultType = CHDManCheck.CHDUnknownError;                      break;              }
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,The following statement contains a magic number: tDat.AddData(RvDat.DatData.DatName' VarFix.CleanFileName(DatFileLoader.Next.Substring(5) + " " + DatFileLoader.GnRest()).Trim());
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,The following statement contains a magic number: (nextstr.Length > 5) && (nextstr.Substring(0' 5) == "name:")
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadHeaderFromDat,The following statement contains a magic number: (nextstr.Length > 5) && (nextstr.Substring(0' 5) == "name:")
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The following statement contains a magic number: fullname = fullname.Substring(0' fullname.Length - 4);
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The following statement contains a magic number: (fullname.Length > 4) && (fullname.ToLower().Substring(fullname.Length - 4' 4) == ".zip")
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The following statement contains a magic number: (fullname.Length > 4) && (fullname.ToLower().Substring(fullname.Length - 4' 4) == ".zip")
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadGameFromDat,The following statement contains a magic number: (fullname.Length > 4) && (fullname.ToLower().Substring(fullname.Length - 4' 4) == ".zip")
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: int posSize = linelc.IndexOf(" size "' posName + 5' StringComparison.Ordinal);
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: int posDate = linelc.IndexOf(" date "' posSize + 6' StringComparison.Ordinal);
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: int posCrc = linelc.IndexOf(" crc "' posDate + 6' StringComparison.Ordinal);
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: int posEnd = linelc.IndexOf(" )"' posCrc + 5' StringComparison.Ordinal);
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string name = line.Substring(posName + 5' posSize - (posName + 5));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string name = line.Substring(posName + 5' posSize - (posName + 5));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string size = line.Substring(posSize + 6' posDate - (posSize + 6));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string size = line.Substring(posSize + 6' posDate - (posSize + 6));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string crc = line.Substring(posCrc + 5' posEnd - (posCrc + 5));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: string crc = line.Substring(posCrc + 5' posEnd - (posCrc + 5));
Magic Number,ROMVault2.DatReaders,DatDOSReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType)              {                  Dat = tGame.Dat'                  Name = VarFix.CleanFullFileName(name.Trim())'                  Size = VarFix.ULong(size.Trim())'                  CRC = VarFix.CleanMD5SHA1(crc.Trim()' 8)              };
Magic Number,ROMVault2.DatReaders,DatFileLoader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,Gn,The following statement contains a magic number: _line = _line.Replace("" + (char) 9' " ");
Magic Number,ROMVault2.DatReaders,DatFileLoader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,Gn,The following statement contains a magic number: _line = (_line ?? "").Replace("" + (char) 9' " ");
Magic Number,ROMVault2.DatReaders,DatFileLoader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,Gn,The following statement contains a magic number: (_line.TrimStart().Length > 2) && (_line.TrimStart().Substring(0' 2) == @"//")
Magic Number,ROMVault2.DatReaders,DatFileLoader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatDOSReader.cs,Gn,The following statement contains a magic number: (_line.TrimStart().Length > 2) && (_line.TrimStart().Substring(0' 2) == @"//")
Magic Number,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,The following statement contains a magic number: switch (DatFileLoader.Next.ToLower())                  {                      case "size":                          tRom.Size = VarFix.ULong(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "crc":                          tRom.CRC = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 8);                          DatFileLoader.Gn();                          break;                      case "sha1":                          tRom.SHA1 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 40);                          DatFileLoader.Gn();                          break;                      case "md5":                          tRom.MD5 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 32);                          DatFileLoader.Gn();                          break;                      case "merge":                          tRom.Merge = VarFix.CleanFullFileName(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "flags":                          tRom.Status = VarFix.ToLower(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "date":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "bios":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "region":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "offs":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "nodump":                          tRom.Status = "nodump";                          DatFileLoader.Gn();                          break;                      default:                          DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename);                          DatFileLoader.Gn();                          break;                  }
Magic Number,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,The following statement contains a magic number: switch (DatFileLoader.Next.ToLower())                  {                      case "size":                          tRom.Size = VarFix.ULong(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "crc":                          tRom.CRC = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 8);                          DatFileLoader.Gn();                          break;                      case "sha1":                          tRom.SHA1 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 40);                          DatFileLoader.Gn();                          break;                      case "md5":                          tRom.MD5 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 32);                          DatFileLoader.Gn();                          break;                      case "merge":                          tRom.Merge = VarFix.CleanFullFileName(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "flags":                          tRom.Status = VarFix.ToLower(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "date":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "bios":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "region":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "offs":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "nodump":                          tRom.Status = "nodump";                          DatFileLoader.Gn();                          break;                      default:                          DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename);                          DatFileLoader.Gn();                          break;                  }
Magic Number,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadRomFromDat,The following statement contains a magic number: switch (DatFileLoader.Next.ToLower())                  {                      case "size":                          tRom.Size = VarFix.ULong(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "crc":                          tRom.CRC = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 8);                          DatFileLoader.Gn();                          break;                      case "sha1":                          tRom.SHA1 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 40);                          DatFileLoader.Gn();                          break;                      case "md5":                          tRom.MD5 = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 32);                          DatFileLoader.Gn();                          break;                      case "merge":                          tRom.Merge = VarFix.CleanFullFileName(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "flags":                          tRom.Status = VarFix.ToLower(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "date":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "bios":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "region":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "offs":                          DatFileLoader.Gn();                          DatFileLoader.Gn();                          break;                      case "nodump":                          tRom.Status = "nodump";                          DatFileLoader.Gn();                          break;                      default:                          DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename);                          DatFileLoader.Gn();                          break;                  }
Magic Number,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDiskFromDat,The following statement contains a magic number: switch (DatFileLoader.Next.ToLower())                  {                      case "sha1":                          tRom.SHA1CHD = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 40);                          DatFileLoader.Gn();                          break;                      case "md5":                          tRom.MD5CHD = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 32);                          DatFileLoader.Gn();                          break;                      case "merge":                          tRom.Merge = VarFix.CleanFullFileName(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "flags":                          tRom.Status = VarFix.ToLower(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "nodump":                          tRom.Status = "nodump";                          DatFileLoader.Gn();                          break;                      default:                          DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename);                          DatFileLoader.Gn();                          break;                  }
Magic Number,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadDiskFromDat,The following statement contains a magic number: switch (DatFileLoader.Next.ToLower())                  {                      case "sha1":                          tRom.SHA1CHD = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 40);                          DatFileLoader.Gn();                          break;                      case "md5":                          tRom.MD5CHD = VarFix.CleanMD5SHA1(DatFileLoader.Gn()' 32);                          DatFileLoader.Gn();                          break;                      case "merge":                          tRom.Merge = VarFix.CleanFullFileName(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "flags":                          tRom.Status = VarFix.ToLower(DatFileLoader.Gn());                          DatFileLoader.Gn();                          break;                      case "nodump":                          tRom.Status = "nodump";                          DatFileLoader.Gn();                          break;                      default:                          DatUpdate.SendAndShowDat(Resources.DatCmpReader_ReadDat_Error_keyword + DatFileLoader.Next + Resources.DatCmpReader_LoadRomFromDat_not_known_in_rom' DatFileLoader.Filename);                          DatFileLoader.Gn();                          break;                  }
Magic Number,ROMVault2.DatReaders,DatMessXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatMessXMLReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType) // changed                  {                      Name = VarFix.CleanFullFileName(name)'                      Size = VarFix.ULong(romNode.Attributes.GetNamedItem("size"))'                      CRC = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("crc")' 8)'                      SHA1 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                      Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))'                      Dat = tGame.Dat                  };
Magic Number,ROMVault2.DatReaders,DatMessXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatMessXMLReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType) // changed                  {                      Name = VarFix.CleanFullFileName(name)'                      Size = VarFix.ULong(romNode.Attributes.GetNamedItem("size"))'                      CRC = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("crc")' 8)'                      SHA1 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                      Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))'                      Dat = tGame.Dat                  };
Magic Number,ROMVault2.DatReaders,DatMessXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatMessXMLReader.cs,LoadDiskFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(FileType.File)              {                  Name = VarFix.CleanFullFileName(name) + ".chd"'                  SHA1CHD = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))'                  Dat = tGame.Dat              };
Magic Number,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType)              {                  Dat = tGame.Dat'                  Size = VarFix.ULong(romNode.Attributes.GetNamedItem("size"))'                  Name = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("name"))'                  CRC = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("crc")' 8)'                  SHA1 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  MD5 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("md5")' 32)'                  Merge = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("merge"))'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))              };
Magic Number,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType)              {                  Dat = tGame.Dat'                  Size = VarFix.ULong(romNode.Attributes.GetNamedItem("size"))'                  Name = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("name"))'                  CRC = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("crc")' 8)'                  SHA1 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  MD5 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("md5")' 32)'                  Merge = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("merge"))'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))              };
Magic Number,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadRomFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(thisFileType)              {                  Dat = tGame.Dat'                  Size = VarFix.ULong(romNode.Attributes.GetNamedItem("size"))'                  Name = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("name"))'                  CRC = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("crc")' 8)'                  SHA1 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  MD5 = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("md5")' 32)'                  Merge = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("merge"))'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))              };
Magic Number,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadDiskFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(FileType.File)              {                  Dat = tGame.Dat'                  Name = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("name")) + ".chd"'                  SHA1CHD = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  MD5CHD = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("md5")' 32)'                  Merge = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("merge"))'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))              };
Magic Number,ROMVault2.DatReaders,DatXmlReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatXMLReader.cs,LoadDiskFromDat,The following statement contains a magic number: RvFile tRom = new RvFile(FileType.File)              {                  Dat = tGame.Dat'                  Name = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("name")) + ".chd"'                  SHA1CHD = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("sha1")' 40)'                  MD5CHD = VarFix.CleanMD5SHA1(romNode.Attributes.GetNamedItem("md5")' 32)'                  Merge = VarFix.CleanFullFileName(romNode.Attributes.GetNamedItem("merge"))'                  Status = VarFix.ToLower(romNode.Attributes.GetNamedItem("status"))              };
Magic Number,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,Read,The following statement contains a magic number: datname = datname.Substring(9);
Magic Number,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,Read,The following statement contains a magic number: (datname.Length >= 9) && (datname.Substring(0' 9) == @"RomVault\")
Magic Number,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,Read,The following statement contains a magic number: (datname.Length >= 9) && (datname.Substring(0' 9) == @"RomVault\")
Magic Number,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,DirDatSearch,The following statement contains a magic number: intMid = (intBottom + intTop)/2;
Magic Number,ROMVault2.RvDB,RvDir,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\RvDir.cs,ChildNameSearch,The following statement contains a magic number: intMid = (intBottom + intTop)/2;
Magic Number,ROMVault2.RvDB,DB,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\DB.cs,Read,The following statement contains a magic number: fs.Length < 4
Magic Number,ROMVault2.RvDB,DB,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\RvDB\DB.cs,Read,The following statement contains a magic number: fs.Position > fs.Length - 8
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,ULong,The following statement contains a magic number: return Convert.ToUInt64(n.Substring(2)' 16);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,ULong,The following statement contains a magic number: return Convert.ToUInt64(n.Substring(2)' 16);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,ULong,The following statement contains a magic number: (n.Length >= 2) && (n.Substring(0' 2).ToLower() == "0x")
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,ULong,The following statement contains a magic number: (n.Length >= 2) && (n.Substring(0' 2).ToLower() == "0x")
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanCheck,The following statement contains a magic number: retcrc = retcrc.Substring(2);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanCheck,The following statement contains a magic number: (retcrc.Length >= 2) && (retcrc.Substring(0' 2).ToLower() == "0x")
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanCheck,The following statement contains a magic number: (retcrc.Length >= 2) && (retcrc.Substring(0' 2).ToLower() == "0x")
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: checksum = checksum.Substring(2);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: checksum.Substring(0' 2) == "0x"
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: checksum.Length >= 2
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: int retL = checksum.Length/2;
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: retB[i] = Convert.ToByte(checksum.Substring(i*2' 2)' 16);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: retB[i] = Convert.ToByte(checksum.Substring(i*2' 2)' 16);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanMD5SHA1,The following statement contains a magic number: retB[i] = Convert.ToByte(checksum.Substring(i*2' 2)' 16);
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanFullFileName,The following statement contains a magic number: (c == ':') || (c == '*') || (c == '?') || (c == '<') || (c == '>') || (c == '|') || (c < 32)
Magic Number,ROMVault2.Utils,VarFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\VarFix.cs,CleanFileName,The following statement contains a magic number: (c == ':') || (c == '*') || (c == '?') || (c == '<') || (c == '>') || (c == '|') || (c == '\\') || (c == '/') || (c < 32)
Duplicate Code,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixZip,The method contains a code clone-set at the following line numbers (starting from the method definition): ((319' 340)' (364' 385))
Duplicate Code,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,FullCompare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 65)' (114' 139))
Duplicate Code,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The method contains a code clone-set at the following line numbers (starting from the method definition): ((81' 102)' (106' 127))
Duplicate Code,ROMVault2,Settings,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Settings.cs,ReadConfig,The method contains a code clone-set at the following line numbers (starting from the method definition): ((111' 131)' (139' 159))
Duplicate Code,ROMVault2,FrmMain,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmMain.cs,UpdateRomGrid,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 66)' (172' 214))
Missing Default,ROMVault2,Report,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Report.cs,FindAllDats,The following switch statement is missing a default case: switch (rt)                      {                          case ReportType.Complete:                              if ((correct > 0) && (missing == 0) && (fixesNeeded == 0))                              {                                  _ts.WriteLine(RemoveBase(dat.GetData(RvDat.DatData.DatFullName)));                              }                              break;                          case ReportType.CompletelyMissing:                              if ((correct == 0) && (missing > 0) && (fixesNeeded == 0))                              {                                  _ts.WriteLine(RemoveBase(dat.GetData(RvDat.DatData.DatFullName)));                              }                              break;                          case ReportType.PartialMissing:                              if (((correct > 0) && (missing > 0)) || (fixesNeeded > 0))                              {                                  _ts.WriteLine(RemoveBase(dat.GetData(RvDat.DatData.DatFullName)));                                  _fileNameLength = 0;                                  _fileSizeLength = 0;                                  _repStatusLength = 0;                                  ReportMissingFindSizes(d' dat' rt);                                  ReportDrawBars();                                  ReportMissing(d' dat' rt);                                  ReportDrawBars();                                  _ts.WriteLine();                              }                              break;                          case ReportType.Fixing:                              if (fixesNeeded > 0)                              {                                  _ts.WriteLine(RemoveBase(dat.GetData(RvDat.DatData.DatFullName)));                                  _fileNameLength = 0;                                  _fileSizeLength = 0;                                  _repStatusLength = 0;                                  ReportMissingFindSizes(d' dat' rt);                                  ReportDrawBars();                                  ReportMissing(d' dat' rt);                                  ReportDrawBars();                                  _ts.WriteLine();                              }                              break;                      }
Missing Default,ROMVault2,FixFileCopy,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFileCopy.cs,RawCopy,The following switch statement is missing a default case: switch (Program.rvSettings.FixLevel)              {                  case eFixLevel.TrrntZipLevel1:                      return trrntzipped;                  case eFixLevel.TrrntZipLevel2:                      return trrntzipped && deepchecked;                  case eFixLevel.TrrntZipLevel3:                      return false;                    case eFixLevel.Level1:                      return true;                  case eFixLevel.Level2:                      return deepchecked;                  case eFixLevel.Level3:                      return false;              }
Missing Default,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,CountFixDir,The following switch statement is missing a default case: switch (child.FileType)                  {                      case FileType.Zip:                      case FileType.SevenZip:                          if (!thisSelected)                          {                              continue;                          }                          RvDir tZip = (RvDir) child;                          count += tZip.DirStatus.CountCanBeFixed();                            break;                        case FileType.Dir:                            count += CountFixDir((RvDir) child' thisSelected);                          break;                        case FileType.File:                          if (!thisSelected)                          {                              continue;                          }                          if (child.RepStatus == RepStatus.CanBeFixed)                          {                              count++;                          }                          break;                  }
Missing Default,ROMVault2,FixFiles,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FixFiles.cs,FixBase,The following switch statement is missing a default case: switch (child.FileType)              {                  case FileType.Zip:                      if (!thisSelected)                      {                          return ReturnCode.Good;                      }                        if (!string.IsNullOrEmpty(child.FileName))                      {                          string strDir = child.Parent.FullName;                          File.Move(Path.Combine(strDir' child.FileName + ".zip")' Path.Combine(strDir' child.Name + ".zip"));                          child.FileName = null;                      }                        do                      {                          returnCode = FixZip((RvDir) child);                      } while (returnCode == ReturnCode.StartOver);                      break;                    case FileType.SevenZip:                      if (!thisSelected)                      {                          return ReturnCode.Good;                      }                        if (!string.IsNullOrEmpty(child.FileName))                      {                          string strDir = child.Parent.FullName;                          File.Move(Path.Combine(strDir' child.FileName + ".z7")' Path.Combine(strDir' child.Name + ".z7"));                          child.FileName = null;                      }                        do                      {                          returnCode = FixZip((RvDir) child);                      } while (returnCode == ReturnCode.StartOver);                      break;                    case FileType.Dir:                      if (thisSelected)                      {                          if (!string.IsNullOrEmpty(child.FileName))                          {                              string strDir = child.Parent.FullName;                              Directory.Move(Path.Combine(strDir' child.FileName)' Path.Combine(strDir' "__RomVault.tmpDir"));                              RVIO.Directory.Move(Path.Combine(strDir' "__RomVault.tmpDir")' Path.Combine(strDir' child.Name));                              child.FileName = null;                          }                      }                        returnCode = FixDir((RvDir) child' thisSelected);                      return returnCode;                    case FileType.File:                      if (!thisSelected)                      {                          return ReturnCode.Good;                      }                        do                      {                          returnCode = FixFile((RvFile) child);                      } while (returnCode == ReturnCode.StartOver);                      break;              }
Missing Default,ROMVault2,FrmProgressWindowFix,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindowFix.cs,FrmProgressWindowFixResize,The following switch statement is missing a default case: switch (WindowState)              {                  case FormWindowState.Minimized:                      if (_parentForm.Visible)                      {                          _parentForm.Hide();                      }                      return;                  case FormWindowState.Maximized:                      if (!_parentForm.Visible)                      {                          _parentForm.Show();                      }                      return;                  case FormWindowState.Normal:                      if (!_parentForm.Visible)                      {                          _parentForm.Show();                      }                      return;              }
Missing Default,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,RemoveOldDats,The following switch statement is missing a default case: switch (res)                  {                      case 0:                          dbDat.Status = DatUpdateStatus.Correct;                          dbIndex++;                          scanIndex++;                          break;                        case 1:                          // this is a new dat that we will add next time around                          scanIndex++;                          break;                      case -1:                          dbDat.Status = DatUpdateStatus.Delete;                          lDir.DirDatRemove(dbIndex);                          break;                  }
Missing Default,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,RemoveOldDats,The following switch statement is missing a default case: switch (res)                  {                      case 0:                          // found a matching directory in DatRoot So recurse back into it                          RemoveOldDats(dbChild' (RvDir) fileChild);                          dbIndex++;                          scanIndex++;                          break;                        case 1:                          // found a new directory will be added later                          scanIndex++;                          break;                      case -1:                          if ((dbChild.FileType == FileType.Dir) && (dbChild.Dat == null))                          {                              RemoveOldDats(dbChild' new RvDir(FileType.Dir));                          }                          dbIndex++;                          break;                  }
Missing Default,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,AddNewDats,The following switch statement is missing a default case: switch (res)                  {                      case 0:                          _datsProcessed++;                          _bgw.ReportProgress(_datsProcessed);                          _bgw.ReportProgress(0' new bgwText("Dat : " + Path.GetFileNameWithoutExtension(fileDat.GetData(RvDat.DatData.DatFullName))));                              Debug.WriteLine("Correct");                          // Should already be set as correct above                          dbDat.Status = DatUpdateStatus.Correct;                          dbIndex++;                          scanIndex++;                          break;                        case 1:                          _datsProcessed++;                          _bgw.ReportProgress(_datsProcessed);                          _bgw.ReportProgress(0' new bgwText("Scanning New Dat : " + Path.GetFileNameWithoutExtension(fileDat.GetData(RvDat.DatData.DatFullName))));                              Debug.WriteLine("Adding new DAT");                          if (UpdateDatFile(fileDat' autoAddDirectory' dbDir))                          {                              dbIndex++;                          }                          scanIndex++;                          break;                        case -1:                          // This should not happen as deleted dat have been removed above                          //dbIndex++;                          ReportError.SendAndShow(Resources.DatUpdate_UpdateDatList_ERROR_Deleting_a_DAT_that_should_already_be_deleted);                          break;                  }
Missing Default,ROMVault2,DatUpdate,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatUpdate.cs,UpdateDirs,The following switch statement is missing a default case: switch (res)                  {                      case 0:                          // found a matching directory in DatRoot So recurse back into it                            if (dbChild.GotStatus == GotStatus.Got)                          {                              if (dbChild.Name != fileChild.Name) // check if the case of the Item in the DB is different from the Dat Root Actual filename                              {                                  if (!string.IsNullOrEmpty(dbChild.FileName)) // if we do not already have a different case name stored                                  {                                      dbChild.FileName = dbChild.Name; // copy the DB filename to the FileName                                  }                                  else // We already have a different case filename found in RomRoot                                  {                                      if (dbChild.FileName == fileChild.Name) // check if the Datroot name does now match the name in the DB Filename                                      {                                          dbChild.FileName = null; // if it does undo the BadCase Flag                                      }                                  }                                  dbChild.Name = fileChild.Name; // Set the db Name to match the Datroot Name.                              }                          }                          else                          {                              dbChild.Name = fileChild.Name;                          }                            UpdateDatList((RvDir) dbChild' (RvDir) fileChild);                          dbIndex++;                          scanIndex++;                          break;                        case 1:                          // found a new directory in Dat                          RvDir tDir = new RvDir(FileType.Dir)                          {                              Name = fileChild.Name'                              Tree = new RvTreeRow()'                              DatStatus = DatStatus.InDatCollect                          };                          dbDir.ChildAdd(tDir' dbIndex);                          Debug.WriteLine("Adding new Dir and Calling back in to check this DIR " + tDir.Name);                          UpdateDatList(tDir' (RvDir) fileChild);                            dbIndex++;                          scanIndex++;                          break;                      case -1:                          // all files                           dbIndex++;                          break;                  }
Missing Default,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,Compare,The following switch statement is missing a default case: switch (res)                  {                      case 0:                            if ((dbChild == null) || (fileChild == null))                          {                              ReportError.SendAndShow(Resources.FileScanning_CheckADir_Error_in_File_Scanning_Code);                              break;                          }                            //Complete MultiName Compare                          List<RvBase> dbs = new List<RvBase>();                          List<RvBase> files = new List<RvBase>();                          int dbsCount = 1;                          int filesCount = 1;                              dbs.Add(dbChild);                          files.Add(fileChild);                            while ((dbIndex + dbsCount < dbDir.ChildCount) && (DBHelper.CompareName(dbChild' dbDir.Child(dbIndex + dbsCount)) == 0))                          {                              dbs.Add(dbDir.Child(dbIndex + dbsCount));                              dbsCount += 1;                          }                          while ((fileIndex + filesCount < fileDir.ChildCount) && (DBHelper.CompareName(fileChild' fileDir.Child(fileIndex + filesCount)) == 0))                          {                              files.Add(fileDir.Child(fileIndex + filesCount));                              filesCount += 1;                          }                            for (int indexfile = 0; indexfile < filesCount; indexfile++)                          {                              if (files[indexfile].SearchFound)                              {                                  continue;                              }                                for (int indexdb = 0; indexdb < dbsCount; indexdb++)                              {                                  if (dbs[indexdb].SearchFound)                                  {                                      continue;                                  }                                    bool matched = FullCompare(dbs[indexdb]' files[indexfile]' false' fullDir' EScanLevel);                                  if (!matched)                                  {                                      continue;                                  }                                    MatchFound(dbs[indexdb]' files[indexfile]);                                  dbs[indexdb].SearchFound = true;                                  files[indexfile].SearchFound = true;                              }                                if (files[indexfile].SearchFound)                              {                                  continue;                              }                                for (int indexdb = 0; indexdb < dbsCount; indexdb++)                              {                                  if (dbs[indexdb].SearchFound)                                  {                                      continue;                                  }                                    bool matched = FullCompare(dbs[indexdb]' files[indexfile]' true' fullDir' EScanLevel);                                  if (!matched)                                  {                                      continue;                                  }                                    MatchFound(dbs[indexdb]' files[indexfile]);                                  dbs[indexdb].SearchFound = true;                                  files[indexfile].SearchFound = true;                              }                          }                              for (int indexdb = 0; indexdb < dbsCount; indexdb++)                          {                              if (dbs[indexdb].SearchFound)                              {                                  dbIndex++;                                  continue;                              }                              DBFileNotFound(dbs[indexdb]' dbDir' ref dbIndex);                          }                            for (int indexfile = 0; indexfile < filesCount; indexfile++)                          {                              if (files[indexfile].SearchFound)                              {                                  continue;                              }                              NewFileFound(files[indexfile]' dbDir' dbIndex);                              dbIndex++;                          }                            fileIndex += filesCount;                          break;                      case 1:                          NewFileFound(fileChild' dbDir' dbIndex);                          dbIndex++;                          fileIndex++;                          break;                      case -1:                          DBFileNotFound(dbChild' dbDir' ref dbIndex);                          break;                  }
Missing Default,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,DBFileNotFound,The following switch statement is missing a default case: switch (dbChild.FileType)                  {                      case FileType.Zip:                      case FileType.SevenZip:                          MarkAsMissing((RvDir) dbChild);                          break;                      case FileType.Dir:                          RvDir tDir = (RvDir) dbChild;                          if (tDir.Tree == null)                          {                              MarkAsMissing(tDir);                          }                          break;                  }
Missing Default,ROMVault2,FileScanning,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FileScanning.cs,MarkAsMissing,The following switch statement is missing a default case: switch (dbChild.FileType)                      {                          case FileType.Zip:                          case FileType.SevenZip:                              MarkAsMissing((RvDir) dbChild);                              break;                            case FileType.Dir:                              RvDir tDir = (RvDir) dbChild;                              if (tDir.Tree == null)                              {                                  MarkAsMissing(tDir);                              }                              break;                      }
Missing Default,ROMVault2,FrmProgressWindow,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\FrmProgressWindow.cs,FrmProgressWindow_Resize,The following switch statement is missing a default case: switch (WindowState)              {                  case FormWindowState.Minimized:                      if (_parentForm.Visible)                      {                          _parentForm.Hide();                      }                      return;                  case FormWindowState.Maximized:                      if (!_parentForm.Visible)                      {                          _parentForm.Show();                      }                      return;                  case FormWindowState.Normal:                      if (!_parentForm.Visible)                      {                          _parentForm.Show();                      }                      return;              }
Missing Default,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following switch statement is missing a default case: switch (cTree)                      {                          case "│":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              break;                            case "├":                          case "└":                              g.DrawLine(p' x + 9' y' x + 9' y + 16);                              g.DrawLine(p' x + 9' y + 16' x + 27' y + 16);                              break;                      }
Missing Default,ROMVault2,RvTree,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\rvTree.cs,PaintTree,The following switch statement is missing a default case: switch (pTree.Tree.Checked)                  {                      case RvTreeRow.TreeSelect.Disabled:                          g.DrawImage(rvImages.TickBoxDisabled' RSub(pTree.Tree.RChecked' _hScroll' _vScroll));                          break;                      case RvTreeRow.TreeSelect.UnSelected:                          g.DrawImage(rvImages.TickBoxUnTicked' RSub(pTree.Tree.RChecked' _hScroll' _vScroll));                          break;                      case RvTreeRow.TreeSelect.Selected:                          g.DrawImage(rvImages.TickBoxTicked' RSub(pTree.Tree.RChecked' _hScroll' _vScroll));                          break;                  }
Missing Default,ROMVault2.SupportedFiles.CHD,CHD,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\SupportedFiles\CHD\CHD.cs,CheckFile,The following switch statement is missing a default case: switch (version)              {                  case 1:                      if (length != 76)                      {                          return;                      }                        //    V1 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // 512-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] (V1 header length)                        return;                    case 2:                      if (length != 80)                      {                          return;                      }                        //    V2 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                        //    [ 24] UINT32 hunksize;      // seclen-byte sectors per hunk                      //    [ 28] UINT32 totalhunks;    // total # of hunks represented                      //    [ 32] UINT32 cylinders;     // number of cylinders on hard disk                      //    [ 36] UINT32 heads;         // number of heads on hard disk                      //    [ 40] UINT32 sectors;       // number of sectors on hard disk                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 seclen;        // number of bytes per sector                      //    [ 80] (V2 header length)                      return;                    case 3:                      if (length != 120)                      {                          return;                      }                        //    V3 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT8  md5[16];       // MD5 checksum of raw data                      MD5CHD = ReadBytes(buff' 44' 16);                      //    [ 60] UINT8  parentmd5[16]; // MD5 checksum of parent file                      //    [ 76] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 80] UINT8  sha1[20];      // SHA1 checksum of raw data                      SHA1CHD = ReadBytes(buff' 80' 20);                      //    [100] UINT8  parentsha1[20];// SHA1 checksum of parent file                      //    [120] (V3 header length)                      return;                    case 4:                      if (length != 108)                      {                          return;                      }                        //    V4 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 flags;         // flags (see below)                      //    [ 20] UINT32 compression;   // compression type                      compression = ReadUInt32(buff' 20);                      if (compression == 0)                      {                          return;                      }                      //    [ 24] UINT32 totalhunks;    // total # of hunks represented                      //    [ 28] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 36] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 44] UINT32 hunkbytes;     // number of bytes per hunk                      //    [ 48] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 48' 20);                      //    [ 68] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [ 88] UINT8  rawsha1[20];   // raw data SHA1                      //    [108] (V4 header length)                      return;                    case 5:                      if (length != 124)                      {                          return;                      }                        //    V5 header:                      //    [  0] char   tag[8];        // 'MComprHD'                      //    [  8] UINT32 length;        // length of header (including tag and length fields)                      //    [ 12] UINT32 version;       // drive format version                      //    [ 16] UINT32 compressors[4];// which custom compressors are used?                      uint compression0 = ReadUInt32(buff' 16);                      uint compression1 = ReadUInt32(buff' 20);                      uint compression2 = ReadUInt32(buff' 24);                      uint compression3 = ReadUInt32(buff' 28);                      if ((compression0 == 0) && (compression1 == 0) && (compression2 == 0) && (compression3 == 0))                      {                          return;                      }                      //    [ 32] UINT64 logicalbytes;  // logical size of the data (in bytes)                      //    [ 40] UINT64 mapoffset;     // offset to the map                      //    [ 48] UINT64 metaoffset;    // offset to the first blob of metadata                      //    [ 56] UINT32 hunkbytes;     // number of bytes per hunk (512k maximum)                      //    [ 60] UINT32 unitbytes;     // number of bytes per unit within each hunk                      //    [ 64] UINT8  rawsha1[20];   // raw data SHA1                      //    [ 84] UINT8  sha1[20];      // combined raw+meta SHA1                      SHA1CHD = ReadBytes(buff' 84' 20);                      //    [104] UINT8  parentsha1[20];// combined raw+meta SHA1 of parent                      //    [124] (V5 header length)                      return;              }
Missing Default,ROMVault2.DatReaders,DatCmpReader,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\DatReaders\DatCmpReader.cs,LoadEmulator,The following switch statement is missing a default case: switch (DatFileLoader.Next.ToLower())                  {                      case "name":                          DatFileLoader.GnRest();                          DatFileLoader.Gn();                          break;                      case "version":                          DatFileLoader.GnRest();                          DatFileLoader.Gn();                          break;                  }
Missing Default,ROMVault2.Utils,DBTypeGet,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\DBTypeGet.cs,DirFromFile,The following switch statement is missing a default case: switch (ft)              {                  case FileType.File:                      return FileType.Dir;                  case FileType.ZipFile:                      return FileType.Zip;                  case FileType.SevenZipFile:                      return FileType.SevenZip;              }
Missing Default,ROMVault2.Utils,DBTypeGet,D:\research\architectureSmells\repos\gjefferyes_RomVault\ROMVault2\Utils\DBTypeGet.cs,FileFromDir,The following switch statement is missing a default case: switch (ft)              {                  case FileType.Dir:                      return FileType.File;                  case FileType.Zip:                      return FileType.ZipFile;                  case FileType.SevenZip:                      return FileType.SevenZipFile;              }
