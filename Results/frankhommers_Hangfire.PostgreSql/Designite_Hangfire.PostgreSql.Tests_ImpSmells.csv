Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Hangfire.PostgreSql.Tests,ConnectionUtils,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\Utils\ConnectionUtils.cs,,The length of the parameter ConnectionStringTemplateVariable is 32.
Long Identifier,Hangfire.PostgreSql.Tests,ConnectionUtils,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\Utils\ConnectionUtils.cs,,The length of the parameter DefaultConnectionStringTemplate is 31.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The length of the statement  "			string arrangeSql = $@"insert into ""{GetSchemaName()}"".set (key' value' expireat' score) values (@key' @value' @expireAt' 0.0)"; " is 130.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddRangeToSet_AddsAllItems_ToAGivenSet,The length of the statement  "				var records = sql.Query<string>(@"select ""value"" from """ + GetSchemaName() + @""".""set"" where ""key"" = 'my-set'"); " is 120.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,RemoveSet_RemovesASet_WithAGivenKey,The length of the statement  "			string arrangeSql = @"insert into """ +  GetSchemaName() + @""".""set"" (""key""' ""value""' ""score"") values (@key' @value' 0.0)"; " is 132.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() +  @""".hash").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 138.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The length of the statement  "			string arrangeSql = @"insert into """ + GetSchemaName() + @""".""set"" (""key""' ""value""' ""score"") values (@key' @value' 0.0)"; " is 131.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 140.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 141.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistHash_ClearsExpirationTime_OnAGivenHash,The length of the statement  "			string arrangeSql = @"insert into """ + GetSchemaName() + @""".hash (""key""' ""field""' ""expireat"") values (@key' @field' @expireAt)"; " is 137.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistHash_ClearsExpirationTime_OnAGivenHash,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".hash").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 137.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistSet_ClearsExpirationTime_OnAGivenHash,The length of the statement  "			string arrangeSql = @"insert into """ + GetSchemaName() + @""".""set"" (""key""' ""value""' ""expireat""' ""score"") values (@key' @value' @expireAt' 0.0)"; " is 156.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistSet_ClearsExpirationTime_OnAGivenHash,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 140.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistList_ClearsExpirationTime_OnAGivenHash,The length of the statement  "			string arrangeSql = @"insert into """ + GetSchemaName() + @""".""list"" (""key""' ""expireat"") values (@key' @expireAt)"; " is 122.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,PersistList_ClearsExpirationTime_OnAGivenHash,The length of the statement  "				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat); " is 141.
Long Statement,Hangfire.PostgreSql.Tests,PostgreSqlTestObjectsInitializer,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\Utils\PostgreSqlTestObjectsInitializer.cs,CleanTables,The length of the statement  "                "Hangfire.PostgreSql.Tests.Scripts.Clean.sql").Replace("'hangfire'"' string.Format("'{0}'"' ConnectionUtils.GetSchemaName())); " is 126.
Magic Number,Hangfire.PostgreSql.Tests,ExpirationManagerFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\ExpirationManagerFacts.cs,Execute_Aggregates_CounterTable,The following statement contains a magic number: i < 5
Magic Number,Hangfire.PostgreSql.Tests,ExpirationManagerFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\ExpirationManagerFacts.cs,Execute_Aggregates_CounterTable,The following statement contains a magic number: Assert.Equal(5' connection.Query<long>(@"select sum(value) from """ + GetSchemaName() + @""".""counter""").Single());
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				var createdAt = new DateTime(2012' 12' 12);  				var jobId = connection.CreateExpiredJob(  					Job.FromExpression(() => SampleMethod("Hello"))'  					new Dictionary<string' string> {{"Key1"' "Value1"}' {"Key2"' "Value2"}}'  					createdAt'  					TimeSpan.FromDays(1));    				Assert.NotNull(jobId);  				Assert.NotEmpty(jobId);    				var sqlJob = sql.Query(@"select * from """ + GetSchemaName() + @""".""job""").Single();  				Assert.Equal(jobId' sqlJob.id.ToString());  				Assert.Equal(createdAt' sqlJob.createdat);  				Assert.Null((long?) sqlJob.stateid);  				Assert.Null((string) sqlJob.statename);    				var invocationData = JobHelper.FromJson<InvocationData>((string) sqlJob.invocationdata);  				invocationData.Arguments = sqlJob.arguments;    				var job = invocationData.Deserialize();  				Assert.Equal(typeof (PostgreSqlConnectionFacts)' job.Type);  				Assert.Equal("SampleMethod"' job.Method.Name);  				Assert.Equal("Hello"' job.Args[0]);    				Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.expireat);  				Assert.True(sqlJob.expireat < createdAt.AddDays(1).AddMinutes(1));    				var parameters = sql.Query(  					@"select * from """ + GetSchemaName() + @""".""jobparameter"" where ""jobid"" = @id"'  					new {id = Convert.ToInt32(jobId' CultureInfo.InvariantCulture)})  					.ToDictionary(x => (string) x.name' x => (string) x.value);    				Assert.Equal("Value1"' parameters["Key1"]);  				Assert.Equal("Value2"' parameters["Key2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				var createdAt = new DateTime(2012' 12' 12);  				var jobId = connection.CreateExpiredJob(  					Job.FromExpression(() => SampleMethod("Hello"))'  					new Dictionary<string' string> {{"Key1"' "Value1"}' {"Key2"' "Value2"}}'  					createdAt'  					TimeSpan.FromDays(1));    				Assert.NotNull(jobId);  				Assert.NotEmpty(jobId);    				var sqlJob = sql.Query(@"select * from """ + GetSchemaName() + @""".""job""").Single();  				Assert.Equal(jobId' sqlJob.id.ToString());  				Assert.Equal(createdAt' sqlJob.createdat);  				Assert.Null((long?) sqlJob.stateid);  				Assert.Null((string) sqlJob.statename);    				var invocationData = JobHelper.FromJson<InvocationData>((string) sqlJob.invocationdata);  				invocationData.Arguments = sqlJob.arguments;    				var job = invocationData.Deserialize();  				Assert.Equal(typeof (PostgreSqlConnectionFacts)' job.Type);  				Assert.Equal("SampleMethod"' job.Method.Name);  				Assert.Equal("Hello"' job.Args[0]);    				Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.expireat);  				Assert.True(sqlJob.expireat < createdAt.AddDays(1).AddMinutes(1));    				var parameters = sql.Query(  					@"select * from """ + GetSchemaName() + @""".""jobparameter"" where ""jobid"" = @id"'  					new {id = Convert.ToInt32(jobId' CultureInfo.InvariantCulture)})  					.ToDictionary(x => (string) x.name' x => (string) x.value);    				Assert.Equal("Value1"' parameters["Key1"]);  				Assert.Equal("Value2"' parameters["Key2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				var createdAt = new DateTime(2012' 12' 12);  				var jobId = connection.CreateExpiredJob(  					Job.FromExpression(() => SampleMethod("Hello"))'  					new Dictionary<string' string> {{"Key1"' "Value1"}' {"Key2"' "Value2"}}'  					createdAt'  					TimeSpan.FromDays(1));    				Assert.NotNull(jobId);  				Assert.NotEmpty(jobId);    				var sqlJob = sql.Query(@"select * from """ + GetSchemaName() + @""".""job""").Single();  				Assert.Equal(jobId' sqlJob.id.ToString());  				Assert.Equal(createdAt' sqlJob.createdat);  				Assert.Null((long?) sqlJob.stateid);  				Assert.Null((string) sqlJob.statename);    				var invocationData = JobHelper.FromJson<InvocationData>((string) sqlJob.invocationdata);  				invocationData.Arguments = sqlJob.arguments;    				var job = invocationData.Deserialize();  				Assert.Equal(typeof (PostgreSqlConnectionFacts)' job.Type);  				Assert.Equal("SampleMethod"' job.Method.Name);  				Assert.Equal("Hello"' job.Args[0]);    				Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.expireat);  				Assert.True(sqlJob.expireat < createdAt.AddDays(1).AddMinutes(1));    				var parameters = sql.Query(  					@"select * from """ + GetSchemaName() + @""".""jobparameter"" where ""jobid"" = @id"'  					new {id = Convert.ToInt32(jobId' CultureInfo.InvariantCulture)})  					.ToDictionary(x => (string) x.name' x => (string) x.value);    				Assert.Equal("Value1"' parameters["Key1"]);  				Assert.Equal("Value2"' parameters["Key2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql);    				var result = connection.GetFirstByLowestScoreFromSet("key"' -1.0' 3.0);    				Assert.Equal("-1.0"' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				var context1 = new ServerContext  				{  					Queues = new[] {"critical"' "default"}'  					WorkerCount = 4  				};  				connection.AnnounceServer("server"' context1);    				var server = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server"' server.id);  				Assert.True(((string) server.data).StartsWith(  					"{\"WorkerCount\":4'\"Queues\":[\"critical\"'\"default\"]'\"StartedAt\":")'  					server.data);  				Assert.NotNull(server.lastheartbeat);    				var context2 = new ServerContext  				{  					Queues = new[] {"default"}'  					WorkerCount = 1000  				};  				connection.AnnounceServer("server"' context2);  				var sameServer = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server"' sameServer.id);  				Assert.Contains("1000"' sameServer.data);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				var context1 = new ServerContext  				{  					Queues = new[] {"critical"' "default"}'  					WorkerCount = 4  				};  				connection.AnnounceServer("server"' context1);    				var server = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server"' server.id);  				Assert.True(((string) server.data).StartsWith(  					"{\"WorkerCount\":4'\"Queues\":[\"critical\"'\"default\"]'\"StartedAt\":")'  					server.data);  				Assert.NotNull(server.lastheartbeat);    				var context2 = new ServerContext  				{  					Queues = new[] {"default"}'  					WorkerCount = 1000  				};  				connection.AnnounceServer("server"' context2);  				var sameServer = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server"' sameServer.id);  				Assert.Contains("1000"' sameServer.data);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql);    				connection.Heartbeat("server1");    				var servers = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""")  					.ToDictionary(x => (string) x.id' x => (DateTime) x.lastheartbeat);    				Assert.NotEqual(2012' servers["server1"].Year);  				Assert.Equal(2012' servers["server2"].Year);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql);    				connection.Heartbeat("server1");    				var servers = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""")  					.ToDictionary(x => (string) x.id' x => (DateTime) x.lastheartbeat);    				Assert.NotEqual(2012' servers["server1"].Year);  				Assert.Equal(2012' servers["server2"].Year);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative,The following statement contains a magic number: UseConnection(connection => Assert.Throws<ArgumentException>(  				() => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))));
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(  					arrangeSql'  					new[]  					{  						new {id = "server1"' heartbeat = DateTime.UtcNow.AddDays(-1)}'  						new {id = "server2"' heartbeat = DateTime.UtcNow.AddHours(-12)}  					});    				connection.RemoveTimedOutServers(TimeSpan.FromHours(15));    				var liveServer = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server2"' liveServer.id);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(  					arrangeSql'  					new[]  					{  						new {id = "server1"' heartbeat = DateTime.UtcNow.AddDays(-1)}'  						new {id = "server2"' heartbeat = DateTime.UtcNow.AddHours(-12)}  					});    				connection.RemoveTimedOutServers(TimeSpan.FromHours(15));    				var liveServer = sql.Query(@"select * from """ + GetSchemaName() + @""".""server""").Single();  				Assert.Equal("server2"' liveServer.id);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetAllItemsFromSet_ReturnsAllItems,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new {key = "some-set"' value = "1"}'  					new {key = "some-set"' value = "2"}'  					new {key = "another-set"' value = "3"}  				});    				// Act  				var result = connection.GetAllItemsFromSet("some-set");    				// Assert  				Assert.Equal(2' result.Count);  				Assert.Contains("1"' result);  				Assert.Contains("2"' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,SetRangeInHash_DoesNotThrowSerializationException,The following statement contains a magic number: Parallel.For(1' 100' (i) =>  			{  				UseConnection((connection2) =>  				{  					connection2.SetRangeInHash("some-hash"' new Dictionary<string' string>  					{  						{"Key1"' "Value1"}'  						{"Key2"' "Value2"}  					});  				});  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new {key = "some-hash"' field = "Key1"' value = "Value1"}'  					new {key = "some-hash"' field = "Key2"' value = "Value2"}'  					new {key = "another-hash"' field = "Key3"' value = "Value3"}  				});    				// Act  				var result = connection.GetAllEntriesFromHash("some-hash");    				// Assert  				Assert.NotNull(result);  				Assert.Equal(2' result.Count);  				Assert.Equal("Value1"' result["Key1"]);  				Assert.Equal("Value2"' result["Key2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetSetCount_ReturnsNumberOfElements_InASet,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql' new List<dynamic>  				{  					new { key = "set-1"' value = "value-1" }'  					new { key = "set-2"' value = "value-1" }'  					new { key = "set-1"' value = "value-2" }  				});    				var result = connection.GetSetCount("set-1");    				Assert.Equal(2' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetCounter_ReturnsSumOfValues_InCounterTable,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "counter-1"' value = 1 }'  					new { key = "counter-2"' value = 1 }'  					new { key = "counter-1"' value = 1 }  				});    				// Act  				var result = connection.GetCounter("counter-1");    				// Assert  				Assert.Equal(2' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetListCount_ReturnsTheNumberOfListElements,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1" }'  					new { key = "list-1" }'  					new { key = "list-2" }  				});    				// Act  				var result = connection.GetListCount("list-1");    				// Assert  				Assert.Equal(2' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) }'  					new { key = "list-2"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetListTtl("list-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) }'  					new { key = "list-2"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetListTtl("list-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetRangeFromList_ReturnsAllEntries_WithinGivenBounds,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' value = "1" }'  					new { key = "list-2"' value = "2" }'  					new { key = "list-1"' value = "3" }'  					new { key = "list-1"' value = "4" }'  					new { key = "list-1"' value = "5" }  				});    				// Act  				var result = connection.GetRangeFromList("list-1"' 1' 2);    				// Assert  				Assert.Equal(new[] { "4"' "3" }' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetHashCount_ReturnsNumber_OfHashFields,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field-1" }'  					new { key = "hash-1"' field = "field-2" }'  					new { key = "hash-2"' field = "field-1" }  				});    				// Act  				var result = connection.GetHashCount("hash-1");    				// Assert  				Assert.Equal(2' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field"' expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) }'  					new { key = "hash-2"' field = "field"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetHashTtl("hash-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field"' expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) }'  					new { key = "hash-2"' field = "field"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetHashTtl("hash-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElements,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql' new List<dynamic>  				{  					new { key = "set-1"' value = "1" }'  					new { key = "set-1"' value = "2" }'  					new { key = "set-1"' value = "3" }'  					new { key = "set-1"' value = "4" }'  					new { key = "set-2"' value = "4" }'  					new { key = "set-1"' value = "5" }  				});    				var result = connection.GetRangeFromSet("set-1"' 2' 3);    				Assert.Equal(new[] { "3"' "4" }' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElements,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				sql.Execute(arrangeSql' new List<dynamic>  				{  					new { key = "set-1"' value = "1" }'  					new { key = "set-1"' value = "2" }'  					new { key = "set-1"' value = "3" }'  					new { key = "set-1"' value = "4" }'  					new { key = "set-2"' value = "4" }'  					new { key = "set-1"' value = "5" }  				});    				var result = connection.GetRangeFromSet("set-1"' 2' 3);    				Assert.Equal(new[] { "3"' "4" }' result);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'  					new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetSetTtl("set-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'  					new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetSetTtl("set-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlConnectionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'  					new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }  				});    				// Act  				var result = connection.GetSetTtl("set-1");    				// Assert  				Assert.True(TimeSpan.FromMinutes(59) < result);  				Assert.True(result < TimeSpan.FromMinutes(61));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlDistributedLockFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlDistributedLockFacts.cs,Ctor_AcquiresExclusiveApplicationLock_WithUseNativeDatabaseTransactions_OnSession_WhenDeadlockIsOccured,The following statement contains a magic number: PostgreSqlStorageOptions options = new PostgreSqlStorageOptions()              {                  SchemaName = GetSchemaName()'                  UseNativeDatabaseTransactions = true'                  DistributedLockTimeout = TimeSpan.FromSeconds(10)              };
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlDistributedLockFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlDistributedLockFacts.cs,Ctor_AcquiresExclusiveApplicationLock_WithUseNativeDatabaseTransactions_OnSession_WhenDeadlockIsOccured,The following statement contains a magic number: UseConnection(connection =>              {                  // Arrange                  var timeout = TimeSpan.FromSeconds(15);                  var resourceName = "hello";                  var dateTimeNow = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture);                  connection.Execute($@"INSERT INTO ""{GetSchemaName()}"".""lock"" VALUES ('{resourceName}'' 0' '{dateTimeNow}')");                    // Act                  var distributedLock = new PostgreSqlDistributedLock(resourceName' timeout' connection' options);                    // Assert                  Assert.True(distributedLock != null);              });
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlFetchedJobFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: UseConnection(connection =>  			{  				// Arrange  				CreateJobQueueRecord(connection' "1"' "default");  				CreateJobQueueRecord(connection' "1"' "critical");  				CreateJobQueueRecord(connection' "2"' "default");    				var fetchedJob = new PostgreSqlFetchedJob(connection' _options' 999' "1"' "default");    				// Act  				fetchedJob.RemoveFromQueue();    				// Assert  				var count = connection.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""jobqueue""").Single();  				Assert.Equal(3' count);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlFetchedJobFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlFetchedJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: UseConnection(connection =>  			{  				// Arrange  				CreateJobQueueRecord(connection' "1"' "default");  				CreateJobQueueRecord(connection' "1"' "critical");  				CreateJobQueueRecord(connection' "2"' "default");    				var fetchedJob = new PostgreSqlFetchedJob(connection' _options' 999' "1"' "default");    				// Act  				fetchedJob.RemoveFromQueue();    				// Assert  				var count = connection.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""jobqueue""").Single();  				Assert.Equal(3' count);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlJobQueueFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlJobQueueFacts.cs,Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs,The following statement contains a magic number: UseConnection(connection =>  			{  				var cts = new CancellationTokenSource(200);  				var queue = CreateJobQueue(connection' useNativeDatabaseTransactions);    				Assert.Throws<OperationCanceledException>(  					() => queue.Dequeue(DefaultQueues' cts.Token));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlJobQueueFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlJobQueueFacts.cs,Queues_Should_Support_Long_Queue_Names,The following statement contains a magic number: UseConnection(connection =>  			{  				var queue = CreateJobQueue(connection' false);    				var name = "very_long_name_that_is_over_20_characters_long_or_something";    				Assert.True(name.Length > 21);    				queue.Enqueue(name' "1");    				var record = connection.Query(@"select * from """ + GetSchemaName() + @""".""jobqueue""").Single();  				Assert.Equal(name' record.queue.ToString());  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlJobQueueFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlJobQueueFacts.cs,CreateTimingOutCancellationToken,The following statement contains a magic number: var source = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlMonitoringApiFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlMonitoringApiFacts.cs,GetJobs_MixedCasing_ReturnsJob,The following statement contains a magic number: UseConnection(sql =>              {                  var jobId = sql.Query(arrangeSql'                       new                       {                          invocationData = JobHelper.ToJson(invocationData)'                          arguments = invocationData.Arguments'                      }).Single().id.ToString();                    var state = new Mock<IState>();                  state.Setup(x => x.Name).Returns(SucceededState.StateName);                  state.Setup(x => x.SerializeData())                      .Returns(new Dictionary<string' string>                      {                          { "SUCCEEDEDAT"' "2018-05-03T13:28:18.3939693Z" }'                          { "PerformanceDuration"' "53" }'                          { "latency"' "6730"}                      });                    Commit(sql' x => x.SetJobState(jobId' state.Object));                    var monitoringApi = _storage.GetMonitoringApi();                  var jobs = monitoringApi.SucceededJobs(0' 10);                    Assert.NotNull(jobs);              });
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1)));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal(1' record.value);  				Assert.NotNull(record.expireat);    				var expireAt = (DateTime) record.expireat;    				Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);  				Assert.True(expireAt < DateTime.UtcNow.AddHours(25));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1)));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal(1' record.value);  				Assert.NotNull(record.expireat);    				var expireAt = (DateTime) record.expireat;    				Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);  				Assert.True(expireAt < DateTime.UtcNow.AddHours(25));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,IncrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.IncrementCounter("my-key");  					x.IncrementCounter("my-key");  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1)));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal(-1' record.value);  				Assert.NotNull(record.expireat);    				var expireAt = (DateTime) record.expireat;    				Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);  				Assert.True(expireAt < DateTime.UtcNow.AddHours(25));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1)));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal(-1' record.value);  				Assert.NotNull(record.expireat);    				var expireAt = (DateTime) record.expireat;    				Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);  				Assert.True(expireAt < DateTime.UtcNow.AddHours(25));  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,DecrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.DecrementCounter("my-key");  					x.DecrementCounter("my-key");  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""counter""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.AddToSet("my-key"' "my-value"));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal("my-value"' record.value);  				Assert.Equal(0.0' record.score' 2);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.AddToSet("my-key"' "my-value");  					x.AddToSet("my-key"' "another-value");  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal("my-value"' record.value);  				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal("my-value"' record.value);  				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2));    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal("my-key"' record.key);  				Assert.Equal("my-value"' record.value);  				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.AddToSet("my-key"' "my-value");  					x.AddToSet("my-key"' "my-value"' 3.2);  				});    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.AddToSet("my-key"' "my-value");  					x.AddToSet("my-key"' "my-value"' 3.2);  				});    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.AddToSet("my-key"' "my-value");  					x.AddToSet("my-key"' "my-value"' 3.2);  				});    				var record = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").Single();    				Assert.Equal(3.2' record.score' 3);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "my-value");  					x.InsertToList("my-key"' "my-value");  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""list""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "0");  					x.InsertToList("my-key"' "1");  					x.InsertToList("my-key"' "2");  					x.InsertToList("my-key"' "3");  					x.TrimList("my-key"' 1' 2);  				});    				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToArray();    				Assert.Equal(2' records.Length);  				Assert.Equal("1"' records[0].value);  				Assert.Equal("2"' records[1].value);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "0");  					x.InsertToList("my-key"' "1");  					x.InsertToList("my-key"' "2");  					x.InsertToList("my-key"' "3");  					x.TrimList("my-key"' 1' 2);  				});    				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToArray();    				Assert.Equal(2' records.Length);  				Assert.Equal("1"' records[0].value);  				Assert.Equal("2"' records[1].value);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "0");  					x.InsertToList("my-key"' "1");  					x.InsertToList("my-key"' "2");  					x.TrimList("my-key"' 1' 100);  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""list""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "0");  					x.InsertToList("my-key"' "1");  					x.InsertToList("my-key"' "2");  					x.TrimList("my-key"' 1' 100);  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""list""").Single();    				Assert.Equal(2' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>  			{  				Commit(sql' x =>  				{  					x.InsertToList("my-key"' "0");  					x.TrimList("my-key"' 1' 100);  				});    				var recordCount = sql.Query<long>(@"select count(*) from """ + GetSchemaName() + @""".""list""").Single();    				Assert.Equal(0' recordCount);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireHash_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>  			{  				var exception = Assert.Throws<ArgumentNullException>(  					() => Commit(sql' x => x.ExpireHash(null' TimeSpan.FromMinutes(5))));    				Assert.Equal("key"' exception.ParamName);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field" }'  					new { key = "hash-2"' field = "field" }  				});    				// Act  				Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() +  @""".hash").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);  				Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["hash-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field" }'  					new { key = "hash-2"' field = "field" }  				});    				// Act  				Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() +  @""".hash").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);  				Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["hash-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "hash-1"' field = "field" }'  					new { key = "hash-2"' field = "field" }  				});    				// Act  				Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() +  @""".hash").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);  				Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["hash-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>  			{  				var exception = Assert.Throws<ArgumentNullException>(  					() => Commit(sql' x => x.ExpireSet(null' TimeSpan.FromSeconds(45))));    				Assert.Equal("key"' exception.ParamName);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1" }'  					new { key = "set-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);  				Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["set-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1" }'  					new { key = "set-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);  				Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["set-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "set-1"' value = "1" }'  					new { key = "set-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""set""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);  				Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["set-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireList_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>  			{  				var exception = Assert.Throws<ArgumentNullException>(  					() => Commit(sql' x => x.ExpireList(null' TimeSpan.FromSeconds(45))));    				Assert.Equal("key"' exception.ParamName);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' value = "1" }'  					new { key = "list-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);  				Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["list-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' value = "1" }'  					new { key = "list-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);  				Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["list-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\PostgreSqlWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>  			{  				// Arrange  				sql.Execute(arrangeSql' new[]  				{  					new { key = "list-1"' value = "1" }'  					new { key = "list-2"' value = "1" }  				});    				// Act  				Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60)));    				// Assert  				var records = sql.Query(@"select * from """ + GetSchemaName() + @""".""list""").ToDictionary(x => (string)x.key' x => (DateTime?)x.expireat);  				Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);  				Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));  				Assert.Null(records["list-2"]);  			});
Magic Number,Hangfire.PostgreSql.Tests,PostgreSqlTestObjectsInitializer,D:\research\architectureSmells\repos\frankhommers_Hangfire.PostgreSql\tests\Hangfire.PostgreSql.Tests\Utils\PostgreSqlTestObjectsInitializer.cs,CleanTables,The following statement contains a magic number: command.CommandTimeout = 120;
