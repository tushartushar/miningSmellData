Implementation smell,Namespace,Class,File,Method,Description
Long Method,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,CreateCommands,The method has 127 lines of code.
Long Method,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The method has 122 lines of code.
Complex Method,PolarisServer,Config,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Config.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,CheckInput,Cyclomatic complexity of the method is 13
Complex Method,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,Help,Cyclomatic complexity of the method is 9
Complex Method,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,Cyclomatic complexity of the method is 10
Complex Method,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,Cyclomatic complexity of the method is 9
Complex Method,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,Cyclomatic complexity of the method is 24
Complex Method,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,SpawnClient,Cyclomatic complexity of the method is 8
Long Parameter List,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandlePacket,The method has 7 parameters. Parameters: typeA' typeB' flags1' flags2' data' position' size
Long Parameter List,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,LogPacket,The method has 6 parameters. Parameters: fromClient' typeA' typeB' flags1' flags2' packet
Long Parameter List,PolarisServer.Models,PSOLocation,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\Character.cs,PSOLocation,The method has 7 parameters. Parameters: RotX' RotY' RotZ' RotW' PosX' PosY' PosZ
Long Parameter List,PolarisServer.Models,PacketHeader,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\FixedPackets.cs,PacketHeader,The method has 5 parameters. Parameters: size' type' subtype' flags1' flags2
Long Parameter List,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CampshipTeleportDown,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CasinoTeleportHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CasinoTeleportHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CharacterSpawn,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterSpawn.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,QuestCounterHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,QuestCounterAvailableHander,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,QuestListRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,QuestDifficultyRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,QuestDifficultyStartHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,ReturnToLobbyHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ReturnToLobbyHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,SymbolArtListHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SymbolArtHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,PacketHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\PacketHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,KeyExchange,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\KeyExchange.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,PingResponse,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,DeleteCharacter,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,PingTimestampResponse,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,GuildInfoRequest,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,LogOutRequest,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CreateCharacterOne,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CreateCharacterTwo,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\SimplePackets.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CharacterCreate,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterCreate.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,CharacterList,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterList.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,StartGame,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\StartGame.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,InitialLoad,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\StartGame.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,DoItMaybe,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\StartGame.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,MovementEndHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,MovementActionHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,ActionUpdateHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.Handlers,ChatHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ChatHandler.cs,HandlePacket,The method has 5 parameters. Parameters: context' flags' data' position' size
Long Parameter List,PolarisServer.Packets.PSOPackets,ObjectActionPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\ObjectActionPacket.cs,ObjectActionPacket,The method has 5 parameters. Parameters: headerA' headerB' headerC' headerD' command
Long Parameter List,PolarisServer.Crypto,Arc4Managed,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\ARC4Managed.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,PolarisServer.Crypto,Arc4Managed,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\ARC4Managed.cs,InternalTransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,Map,The method has 5 parameters. Parameters: name' id' variant' type' flags
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The length of the statement  "            PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])' " is 129.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "            if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])))) " is 122.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "                dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4])) " is 140.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "                { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } }; " is 135.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "                dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))); " is 136.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "            //PSOLocation destination = new PSOLocation(float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])' float.Parse(args[5])'float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])); " is 197.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The length of the statement  "            //PolarisApp.Instance.Server.Clients[id].SendPacket(new TeleportTransferPacket(ObjectManager.Instance.getObjectByID("lobby"' 443)' destination)); " is 145.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The length of the statement  "            obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10])); " is 186.
Long Statement,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportObjects,The length of the statement  "                    Logger.WriteWarning("[OBJ] It seems object {0} has a nonzero objHeader! ({1}) Investigate."' newObj.ObjectName' objHeader.ID); " is 126.
Long Statement,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The length of the statement  "            PacketHeader header = new PacketHeader(8 + Marshal.SizeOf(typeof(ShipEntry)) * entries.Count + 12' 0x11' 0x3D' 0x4' 0x0); " is 121.
Long Statement,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,ObjectToString,The length of the statement  "            data = TypeDescriptor.GetProperties(obj).Cast<PropertyDescriptor>().Aggregate(data' (current' descriptor) => current + string.Format("{0} = {1}' "' descriptor.Name' descriptor.GetValue(obj))); " is 192.
Long Statement,PolarisServer.Models,PSOObject,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSOObject.cs,FromDBObject,The length of the statement  "            psoObj.Position = new PSOLocation(dbObject.RotX' dbObject.RotY' dbObject.RotZ' dbObject.RotW' dbObject.PosX' dbObject.PosY' dbObject.PosZ); " is 139.
Long Statement,PolarisServer.Object,ObjectManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Object\ObjectManager.cs,GetObjectsForZone,The length of the statement  "                            Logger.WriteInternal("[OBJ] Loaded object ID {0} with name {1} pos: ({2}' {3}' {4})"' newObject.Header.ID' newObject.Name' newObject.Position.PosX' " is 147.
Long Statement,PolarisServer.Object,ObjectManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Object\ObjectManager.cs,GetObjectsForZone,The length of the statement  "                            Logger.WriteInternal("[OBJ] Loaded object ID {0} with name {1} pos: ({2}' {3}' {4})"' newObject.Header.ID' newObject.Name' newObject.Position.PosX' " is 147.
Long Statement,PolarisServer.Object,ObjectManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Object\ObjectManager.cs,getObjectByID,The length of the statement  "            //FIXME: This has been commented out because we were getting object errors with possible shared objects? That or it was just object 1 which is an edge case. " is 156.
Long Statement,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The length of the statement  "            ZoneManager.Instance.AddMapToInstance(instanceName' new Map("area1"' 311' -1' Map.MapType.Other' (Map.MapFlags)0x6) { GenerationArgs = new Map.GenParam((uint)new Random().Next()' 2' 3)}); " is 187.
Long Statement,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The length of the statement  "            Logger.WriteInternal("[OBJ] {0} (ID {1}) <{2}> --> Ent {3} (ID {4})"' srcObj.Name' srcObj.Header.ID' command' (EntityType)dstObject.EntityType' dstObject.ID); " is 158.
Long Statement,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The length of the statement  "                        context.SendPacket(new TeleportTransferPacket(srcObj' new PSOLocation(0f' 1f' 0f' -0.000031f' -0.417969f' 0.000031f' 134.375f))); " is 129.
Long Statement,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The length of the statement  "                context.SendPacket(new ObjectActionPacket(new ObjectHeader((uint)context.User.PlayerId' EntityType.Player)' srcObj.Header' srcObj.Header' " is 137.
Long Statement,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The length of the statement  "                context.SendPacket(new ObjectActionPacket(new ObjectHeader((uint)context.User.PlayerId' EntityType.Player)' srcObj.Header' srcObj.Header' " is 137.
Long Statement,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The length of the statement  "                    client.SendPacket(new ObjectActionPacket(new ObjectHeader((uint)client.User.PlayerId' EntityType.Player)' srcObj.Header' " is 120.
Long Statement,PolarisServer.Packets.Handlers,QuestListRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The length of the statement  "                defs[i].difficulties = (byte)QuestListPacket.Difficulties.Normal | (byte)QuestListPacket.Difficulties.hard | (byte)QuestListPacket.Difficulties.VeryHard | (byte)QuestListPacket.Difficulties.SuperHard; " is 200.
Long Statement,PolarisServer.Packets.Handlers,QuestDifficultyRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The length of the statement  "            // [K873] I believe this is the correct packet' but it causes an infinite send/recieve loop' we're probably just missing something else " is 135.
Long Statement,PolarisServer.Packets.Handlers,QuestDifficultyStartHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The length of the statement  "            def.difficulties = (byte)QuestListPacket.Difficulties.Normal | (byte)QuestListPacket.Difficulties.hard | (byte)QuestListPacket.Difficulties.VeryHard | (byte)QuestListPacket.Difficulties.SuperHard; " is 196.
Long Statement,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The length of the statement  "                context.SendPacket(new SystemMessagePacket(PolarisApp.Config.motd' SystemMessagePacket.MessageType.AdminMessageInstant)); " is 121.
Long Statement,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The length of the statement  "            Logger.WriteInternal("[MOV] Player moving! {0} -> ({1}' {2}' {3})"' context.Character.Name' context.CurrentLocation.PosX' " is 121.
Long Statement,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The length of the statement  "            writer.WriteStruct(new ObjectHeader((uint)members[0].Player.PlayerId' EntityType.Player)); // Player receiving the thing " is 120.
Long Statement,PolarisServer.Party,Party,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Party\Party.cs,removeClientFromParty,The length of the statement  "                Logger.WriteWarning("[PTY] Client {0} was trying to be removed from {1}' but he was never in {1}!"' c.User.Username' name); " is 123.
Magic Number,PolarisServer,Config,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Config.cs,Load,The following statement contains a magic number: try              {                  // No config exists' save a default one                  if (!File.Exists(_configFile))                  {                      Save(true);                      return;                  }                    var fields = GetType().GetFields();                  var lines = File.ReadAllLines(_configFile);                    foreach (var option in lines)                  {                      // Blank Line                      if (option.Length == 0)                          continue;                        // Comment                      if (option.StartsWith("//"))                          continue;                        var split = option.Split('=');                        // Trim trailing/leading space                      for (var i = 0; i < split.Length; i++)                          split[i] = split[i].Trim();                        // Check length                      if (split.Length != 2)                      {                          Logger.WriteWarning("[CFG] Config line found with improper split size");                          continue;                      }                        var field = fields.FirstOrDefault(o => o.Name == split[0]);                      if (field != null)                          ParseField(field' split[1]);                  }              }              catch (Exception ex)              {                  Logger.WriteException("Error loading configuration"' ex);              }
Magic Number,PolarisServer,Config,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Config.cs,SettingsChanged,The following statement contains a magic number: PolarisApp.Instance.Server.PingTimer.Interval = 1000 * PingTime;
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ConsoleSystem,The following statement contains a magic number: SetSize(80' 24);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ConsoleSystem,The following statement contains a magic number: SetSize(80' 24);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ConsoleSystem,The following statement contains a magic number: timer = new Timer(1000);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,AssembleInfoBar,The following statement contains a magic number: if (PolarisApp.Instance != null && PolarisApp.Instance.Server != null)              {                  var clients = PolarisApp.Instance.Server.Clients.Count;                  float usage = Process.GetCurrentProcess().PrivateMemorySize64 / 1024 / 1024;                    var time = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToLongTimeString();                    return string.Format("Clients: {0} | Memory: {1} MB | {2}"' clients' usage' time);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,AssembleInfoBar,The following statement contains a magic number: if (PolarisApp.Instance != null && PolarisApp.Instance.Server != null)              {                  var clients = PolarisApp.Instance.Server.Clients.Count;                  float usage = Process.GetCurrentProcess().PrivateMemorySize64 / 1024 / 1024;                    var time = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToLongTimeString();                    return string.Format("Clients: {0} | Memory: {1} MB | {2}"' clients' usage' time);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,Config,The following statement contains a magic number: switch (args[1].ToLower())              {                  case "save":                      PolarisApp.Config.Save();                      break;                    case "load":                      PolarisApp.Config.Load();                      break;                    case "list":                      Logger.WriteCommand(client' "[CMD] Config Options");                      foreach (var f in fields)                          Logger.WriteCommand(client' "[CMD] {0} = {1}"' f.Name' f.GetValue(PolarisApp.Config));                      break;                    default: // Set a config option                      if (args.Length < 3)                          Logger.WriteCommand(client' "[CMD] Too few arguments");                      else if (field != null)                      {                          var value = args[2].Contains('\"') ? full.Split('"')[1].Split('"')[0].Trim('\"') : args[2];                            if (!PolarisApp.Config.SetField(args[1]' value))                              Logger.WriteCommand(client' "[CMD] Config option {0} could not be changed to {1}"' args[1]'                                  value);                          else                          {                              Logger.WriteCommand(client' "[CMD] Config option {0} changed to {1}"' args[1]' value);                              PolarisApp.Config.SettingsChanged();                          }                      }                      else                          Logger.WriteCommand(client' "[CMD] Config option {0} not found"' args[1]);                      break;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,Config,The following statement contains a magic number: switch (args[1].ToLower())              {                  case "save":                      PolarisApp.Config.Save();                      break;                    case "load":                      PolarisApp.Config.Load();                      break;                    case "list":                      Logger.WriteCommand(client' "[CMD] Config Options");                      foreach (var f in fields)                          Logger.WriteCommand(client' "[CMD] {0} = {1}"' f.Name' f.GetValue(PolarisApp.Config));                      break;                    default: // Set a config option                      if (args.Length < 3)                          Logger.WriteCommand(client' "[CMD] Too few arguments");                      else if (field != null)                      {                          var value = args[2].Contains('\"') ? full.Split('"')[1].Split('"')[0].Trim('\"') : args[2];                            if (!PolarisApp.Config.SetField(args[1]' value))                              Logger.WriteCommand(client' "[CMD] Config option {0} could not be changed to {1}"' args[1]'                                  value);                          else                          {                              Logger.WriteCommand(client' "[CMD] Config option {0} changed to {1}"' args[1]' value);                              PolarisApp.Config.SettingsChanged();                          }                      }                      else                          Logger.WriteCommand(client' "[CMD] Config option {0} not found"' args[1]);                      break;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,Config,The following statement contains a magic number: switch (args[1].ToLower())              {                  case "save":                      PolarisApp.Config.Save();                      break;                    case "load":                      PolarisApp.Config.Load();                      break;                    case "list":                      Logger.WriteCommand(client' "[CMD] Config Options");                      foreach (var f in fields)                          Logger.WriteCommand(client' "[CMD] {0} = {1}"' f.Name' f.GetValue(PolarisApp.Config));                      break;                    default: // Set a config option                      if (args.Length < 3)                          Logger.WriteCommand(client' "[CMD] Too few arguments");                      else if (field != null)                      {                          var value = args[2].Contains('\"') ? full.Split('"')[1].Split('"')[0].Trim('\"') : args[2];                            if (!PolarisApp.Config.SetField(args[1]' value))                              Logger.WriteCommand(client' "[CMD] Config option {0} could not be changed to {1}"' args[1]'                                  value);                          else                          {                              Logger.WriteCommand(client' "[CMD] Config option {0} changed to {1}"' args[1]' value);                              PolarisApp.Config.SettingsChanged();                          }                      }                      else                          Logger.WriteCommand(client' "[CMD] Config option {0} not found"' args[1]);                      break;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var playerName = args[2].Trim('\"');
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var x = float.Parse(args[3]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var y = float.Parse(args[4]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var z = float.Parse(args[5]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var fakePlayer = new Player              {                  Username = name'                  Nickname = playerName'                  PlayerId = (12345678 + new Random().Next())              };
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnClone,The following statement contains a magic number: var fakeChar = new Character              {                  CharacterId = 12345678 + new Random().Next()'                  Player = fakePlayer'                  Name = playerName'                  Looks = client.Character.Looks'                  Jobs = client.Character.Jobs              };
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: var type = byte.Parse(args[2]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: var subType = byte.Parse(args[3]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: var flags = byte.Parse(args[4]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: var data = new byte[args.Length - 5];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: if (args.Length >= 5)              {                  var packetSize = 4;                  while (++packetSize < args.Length)                      data[packetSize - 5] = byte.Parse(args[packetSize]);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: if (args.Length >= 5)              {                  var packetSize = 4;                  while (++packetSize < args.Length)                      data[packetSize - 5] = byte.Parse(args[packetSize]);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacket,The following statement contains a magic number: if (args.Length >= 5)              {                  var packetSize = 4;                  while (++packetSize < args.Length)                      data[packetSize - 5] = byte.Parse(args[packetSize]);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: var dirname = args[2].Trim('\"');
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectory,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: var dirname = args[2].Trim('\"');
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: var delay = Int32.Parse(args[3]);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketDirectorySlow,The following statement contains a magic number: foreach (var path in packetList)              {                  var index = -1;                  var data = File.ReadAllBytes(path);                  var packet = new byte[data.Length - 8];                    // Strip the header out                  while (++index < data.Length - 8)                      packet[index] = data[index + 8];                    // Send packet                  PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);                    Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                      path' data[4]' data[5]' data[6]' name);                  Thread.Sleep(delay);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: var filename = args[2].Trim('\"');
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: var packet = new byte[data.Length - 8];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: while (++index < data.Length - 8)                  packet[index] = data[index + 8];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: while (++index < data.Length - 8)                  packet[index] = data[index + 8];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: PolarisApp.Instance.Server.Clients[id].SendPacket(data[4]' data[5]' data[6]' packet);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                  filename' data[4]' data[5]' data[6]' name);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                  filename' data[4]' data[5]' data[6]' name);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SendPacketFile,The following statement contains a magic number: Logger.WriteCommand(client' "[CMD] Sent contents of {0} as packet {1:X}-{2:X} with flags {3} to {4}"'                  filename' data[4]' data[5]' data[6]' name);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: if (client != null)              {                  id = client.User.PlayerId;                  foundPlayer = true;              }                                else              {                  var name = args[8].Trim('\"');                    Helper.FindPlayerByUsername(name);                  if (id != -1)                      foundPlayer = true;                  client = PolarisApp.Instance.Server.Clients[id];              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: PSOLocation destination = new PSOLocation(float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3])' float.Parse(args[4])'                  float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer,The following statement contains a magic number: client.SendPacket(new TeleportTransferPacket(ObjectManager.Instance.getObjectByID("lobby"' 443)' destination));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer_POS,The following statement contains a magic number: if (client != null)              {                  id = client.User.PlayerId;                  foundPlayer = true;              }              else              {                  var name = args[4].Trim('\"');                    Helper.FindPlayerByUsername(name);                  if (id != -1)                      foundPlayer = true;                    client = PolarisApp.Instance.Server.Clients[id];              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer_POS,The following statement contains a magic number: PSOLocation destination = new PSOLocation(0f' 1f' 0f' 0f'                  float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer_POS,The following statement contains a magic number: PSOLocation destination = new PSOLocation(0f' 1f' 0f' 0f'                  float.Parse(args[1])' float.Parse(args[2])' float.Parse(args[3]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,TeleportPlayer_POS,The following statement contains a magic number: client.SendPacket(new TeleportTransferPacket(ObjectManager.Instance.getObjectByID("lobby"' 443)' destination));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: if (!ZoneManager.Instance.InstanceExists(String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8]))))              {                  dstMap = new Map("tpmap"' Int32.Parse(args[3])' Int32.Parse(args[8])' (Map.MapType)Int32.Parse(args[2])' (Map.MapFlags)Int32.Parse(args[4]))                  { GenerationArgs = new Map.GenParam() { seed = UInt32.Parse(args[5])' xsize = UInt32.Parse(args[6])' ysize = UInt32.Parse(args[7]) } };                  ZoneManager.Instance.NewInstance(String.Format("tpinstance_{0}"' Int32.Parse(args[3]))' dstMap);              } else              {                  dstMap = ZoneManager.Instance.MapFromInstance("tpmap"' String.Format("tpinstance_{0}_{1}"' Int32.Parse(args[3])' Int32.Parse(args[8])));              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ChangeArea,The following statement contains a magic number: context.SendPacket(0x8' 0xB' 0x0' ObjectManager.Instance.getObjectByID(443).GenerateSpawnBlob());
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: if(client == null)              {                  var id = Helper.FindPlayerByUsername(args[1]);                  if (id == -1)                      return;                    client = PolarisApp.Instance.Server.Clients[id];              }              else              {                  string[] newargs = new string[args.Length + 1];                  newargs[0] = "";                  newargs[1] = "";                  Array.Copy(args' 1' newargs' 2' 9);                  args = newargs;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: if(client == null)              {                  var id = Helper.FindPlayerByUsername(args[1]);                  if (id == -1)                      return;                    client = PolarisApp.Instance.Server.Clients[id];              }              else              {                  string[] newargs = new string[args.Length + 1];                  newargs[0] = "";                  newargs[1] = "";                  Array.Copy(args' 1' newargs' 2' 9);                  args = newargs;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Name = args[2];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Header = new ObjectHeader((uint)Int32.Parse(args[3])' EntityType.Object);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,SpawnObject,The following statement contains a magic number: obj.Position = new PSOLocation(float.Parse(args[4])' float.Parse(args[5])' float.Parse(args[6])' float.Parse(args[7])' float.Parse(args[8])' float.Parse(args[9])' float.Parse(args[10]));
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,RunLUA,The following statement contains a magic number: if (client == null)              {                  var id = Helper.FindPlayerByUsername(args[1]);                  if (id == -1)                      return;                    client = PolarisApp.Instance.Server.Clients[id];              }              else              {                  string[] newargs = new string[args.Length + 1];                  newargs[0] = "";                  newargs[1] = "";                  Array.Copy(args' 1' newargs' 2' args.Length - 1);                  args = newargs;              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,RunLUA,The following statement contains a magic number: luaPacket.WriteAscii(String.Join(" "' args' 2' args.Length - 2)' 0xD975' 0x2F);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,RunLUA,The following statement contains a magic number: luaPacket.WriteAscii(String.Join(" "' args' 2' args.Length - 2)' 0xD975' 0x2F);
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportNPCs,The following statement contains a magic number: string folder = args[2];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportObjects,The following statement contains a magic number: string folder = args[2];
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportObjects,The following statement contains a magic number: foreach (var path in packetList)              {                  var data = File.ReadAllBytes(path);                  PacketReader reader = new PacketReader(data);                  PacketHeader header = reader.ReadStruct<PacketHeader>();                  if (header.Type != 0x8 || header.Subtype != 0xB)                  {                      Logger.WriteWarning("[WRN] File {0} not an Object spawn packet' skipping."' path);                      continue;                  }                    GameObject newObj = new GameObject();                  newObj.ObjectID = (int)reader.ReadStruct<ObjectHeader>().ID;                  var pos = reader.ReadEntityPosition();                  newObj.RotX = pos.RotX;                  newObj.RotY = pos.RotY;                  newObj.RotZ = pos.RotZ;                  newObj.RotW = pos.RotW;                                       newObj.PosX = pos.PosX;                  newObj.PosY = pos.PosY;                  newObj.PosZ = pos.PosZ;                  reader.ReadInt16();                  newObj.ObjectName = reader.ReadFixedLengthAscii(0x2C);                  var objHeader = reader.ReadStruct<ObjectHeader>(); // Seems to always be blank...                  if (objHeader.ID != 0)                      Logger.WriteWarning("[OBJ] It seems object {0} has a nonzero objHeader! ({1}) Investigate."' newObj.ObjectName' objHeader.ID);                  newObj.ZoneName = zone;                  var thingCount = reader.ReadUInt32();                  newObj.ObjectFlags = new byte[thingCount * 4];                  for (int i = 0; i < thingCount; i++)                  {                      Buffer.BlockCopy(BitConverter.GetBytes(reader.ReadUInt32())' 0' newObj.ObjectFlags' i * 4' 4); // This should work                  }                  newObjects.Add(newObj);                  Logger.WriteInternal("[OBJ] Adding new Object {0} to the database for zone {1}"' newObj.ObjectName' zone);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportObjects,The following statement contains a magic number: foreach (var path in packetList)              {                  var data = File.ReadAllBytes(path);                  PacketReader reader = new PacketReader(data);                  PacketHeader header = reader.ReadStruct<PacketHeader>();                  if (header.Type != 0x8 || header.Subtype != 0xB)                  {                      Logger.WriteWarning("[WRN] File {0} not an Object spawn packet' skipping."' path);                      continue;                  }                    GameObject newObj = new GameObject();                  newObj.ObjectID = (int)reader.ReadStruct<ObjectHeader>().ID;                  var pos = reader.ReadEntityPosition();                  newObj.RotX = pos.RotX;                  newObj.RotY = pos.RotY;                  newObj.RotZ = pos.RotZ;                  newObj.RotW = pos.RotW;                                       newObj.PosX = pos.PosX;                  newObj.PosY = pos.PosY;                  newObj.PosZ = pos.PosZ;                  reader.ReadInt16();                  newObj.ObjectName = reader.ReadFixedLengthAscii(0x2C);                  var objHeader = reader.ReadStruct<ObjectHeader>(); // Seems to always be blank...                  if (objHeader.ID != 0)                      Logger.WriteWarning("[OBJ] It seems object {0} has a nonzero objHeader! ({1}) Investigate."' newObj.ObjectName' objHeader.ID);                  newObj.ZoneName = zone;                  var thingCount = reader.ReadUInt32();                  newObj.ObjectFlags = new byte[thingCount * 4];                  for (int i = 0; i < thingCount; i++)                  {                      Buffer.BlockCopy(BitConverter.GetBytes(reader.ReadUInt32())' 0' newObj.ObjectFlags' i * 4' 4); // This should work                  }                  newObjects.Add(newObj);                  Logger.WriteInternal("[OBJ] Adding new Object {0} to the database for zone {1}"' newObj.ObjectName' zone);              }
Magic Number,PolarisServer,ConsoleSystem,C:\repos\PolarisTeam_PolarisServer\PolarisServer\ConsoleSystem.cs,ImportObjects,The following statement contains a magic number: foreach (var path in packetList)              {                  var data = File.ReadAllBytes(path);                  PacketReader reader = new PacketReader(data);                  PacketHeader header = reader.ReadStruct<PacketHeader>();                  if (header.Type != 0x8 || header.Subtype != 0xB)                  {                      Logger.WriteWarning("[WRN] File {0} not an Object spawn packet' skipping."' path);                      continue;                  }                    GameObject newObj = new GameObject();                  newObj.ObjectID = (int)reader.ReadStruct<ObjectHeader>().ID;                  var pos = reader.ReadEntityPosition();                  newObj.RotX = pos.RotX;                  newObj.RotY = pos.RotY;                  newObj.RotZ = pos.RotZ;                  newObj.RotW = pos.RotW;                                       newObj.PosX = pos.PosX;                  newObj.PosY = pos.PosY;                  newObj.PosZ = pos.PosZ;                  reader.ReadInt16();                  newObj.ObjectName = reader.ReadFixedLengthAscii(0x2C);                  var objHeader = reader.ReadStruct<ObjectHeader>(); // Seems to always be blank...                  if (objHeader.ID != 0)                      Logger.WriteWarning("[OBJ] It seems object {0} has a nonzero objHeader! ({1}) Investigate."' newObj.ObjectName' objHeader.ID);                  newObj.ZoneName = zone;                  var thingCount = reader.ReadUInt32();                  newObj.ObjectFlags = new byte[thingCount * 4];                  for (int i = 0; i < thingCount; i++)                  {                      Buffer.BlockCopy(BitConverter.GetBytes(reader.ReadUInt32())' 0' newObj.ObjectFlags' i * 4' 4); // This should work                  }                  newObjects.Add(newObj);                  Logger.WriteInternal("[OBJ] Adding new Object {0} to the database for zone {1}"' newObj.ObjectName' zone);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)                  if ((i % 16) == 0)                      lines++;
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,Logger,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Logger.cs,WriteHex,The following statement contains a magic number: for (var i = 0; i < lines; i++)              {                  var hexString = string.Empty;                    // Address                  hexString += string.Format("{0:X8} "' i * 16);                    // Bytes                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        hexString += string.Format("{0:X2} "' array[j + (i * 16)]);                  }                    // Spacing                  while (hexString.Length < 16 * 4)                      hexString += ' ';                    // ASCII                  for (var j = 0; j < 16; j++)                  {                      if (j + (i * 16) >= array.Length)                          break;                        var asciiChar = (char)array[j + (i * 16)];                        if (asciiChar == (char)0x00)                          asciiChar = '.';                        hexString += asciiChar;                  }                    // Strip off unnecessary stuff                  hexString = hexString.Replace('\a'' ' '); // Alert beeps                  hexString = hexString.Replace('\n'' ' '); // Newlines                  hexString = hexString.Replace('\r'' ' '); // Carriage returns                  hexString = hexString.Replace('\\'' ' '); // Escape break                    AddLine(ConsoleColor.White' hexString);                  WriteFile(hexString);              }
Magic Number,PolarisServer,PolarisApp,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PolarisServer,PolarisApp,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Program.cs,Start,The following statement contains a magic number: for (var i = 0; i < 10; i++)                  QueryServers.Add(new QueryServer(QueryMode.ShipList' 12099 + (100 * i)));
Magic Number,PolarisServer,PolarisApp,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Program.cs,Start,The following statement contains a magic number: for (var i = 0; i < 10; i++)                  QueryServers.Add(new QueryServer(QueryMode.ShipList' 12099 + (100 * i)));
Magic Number,PolarisServer,PolarisApp,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Program.cs,Start,The following statement contains a magic number: for (var i = 0; i < 10; i++)                  QueryServers.Add(new QueryServer(QueryMode.ShipList' 12099 + (100 * i)));
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,Client,The following statement contains a magic number: _readBuffer = new byte[1024 * 64];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,Client,The following statement contains a magic number: _readBuffer = new byte[1024 * 64];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,Client,The following statement contains a magic number: welcome.Write((ushort)3);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,Client,The following statement contains a magic number: welcome.Write((ushort)201);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandleDataReceived,The following statement contains a magic number: while ((position + 8) <= _readBufferSize)              {                  var packetSize =                      _readBuffer[position] |                      ((uint)_readBuffer[position + 1] << 8) |                      ((uint)_readBuffer[position + 2] << 16) |                      ((uint)_readBuffer[position + 3] << 24);                    // Minimum size' just to avoid possible infinite loops etc                  if (packetSize < 8)                      packetSize = 8;                    // If we don't have enough data for this one...                  if (packetSize > 0x1000000 || (packetSize + position) > _readBufferSize)                      break;                    // Now handle this one                  HandlePacket(                      _readBuffer[position + 4]' _readBuffer[position + 5]'                      _readBuffer[position + 6]' _readBuffer[position + 7]'                      _readBuffer' position + 8' packetSize - 8);                    // If the connection was closed' we have no more business here                  if (IsClosed)                      break;                    position += packetSize;              }
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var typeA = blob[4];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var typeB = blob[5];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var flags1 = blob[6];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var flags2 = blob[7];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var packet = new byte[8 + data.Length];
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: var dataLen = (uint)data.Length + 8;
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[1] = (byte)((dataLen >> 8) & 0xFF);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[2] = (byte)((dataLen >> 16) & 0xFF);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[2] = (byte)((dataLen >> 16) & 0xFF);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[3] = (byte)((dataLen >> 24) & 0xFF);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[3] = (byte)((dataLen >> 24) & 0xFF);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[4] = typeA;
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[5] = typeB;
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[6] = flags;
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: packet[7] = 0;
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,SendPacket,The following statement contains a magic number: Array.Copy(data' 0' packet' 8' data.Length);
Magic Number,PolarisServer,Client,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Client.cs,HandlePacket,The following statement contains a magic number: Logger.Write("[-->] Packet {0:X}-{1:X} (flags {2}) ({3} bytes)"' typeA' typeB' (PacketFlags)flags1' size + 8);
Magic Number,PolarisServer,Server,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Server.cs,Server,The following statement contains a magic number: _server = new SocketServer(12205);
Magic Number,PolarisServer,Server,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Server.cs,Server,The following statement contains a magic number: PingTimer = new Timer(1000 * PolarisApp.Config.PingTime);
Magic Number,PolarisServer,Server,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Server.cs,Server,The following statement contains a magic number: new QueryServer(QueryMode.BlockBalance' 12200);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,Run,The following statement contains a magic number: serverSocket.Listen(5);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: for (var i = 1; i < 11; i++)              {                  var entry = new ShipEntry                  {                      order = (ushort)i'                      number = (uint)i'                      status = i == 2 ? ShipStatus.Online : ShipStatus.Offline' // Maybe move to Config?                      name = String.Format("Ship{0:0#}"' i)'                      ip = PolarisApp.BindAddress.GetAddressBytes()                  };                  entries.Add(entry);              }
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: for (var i = 1; i < 11; i++)              {                  var entry = new ShipEntry                  {                      order = (ushort)i'                      number = (uint)i'                      status = i == 2 ? ShipStatus.Online : ShipStatus.Offline' // Maybe move to Config?                      name = String.Format("Ship{0:0#}"' i)'                      ip = PolarisApp.BindAddress.GetAddressBytes()                  };                  entries.Add(entry);              }
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: PacketHeader header = new PacketHeader(8 + Marshal.SizeOf(typeof(ShipEntry)) * entries.Count + 12' 0x11' 0x3D' 0x4' 0x0);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: PacketHeader header = new PacketHeader(8 + Marshal.SizeOf(typeof(ShipEntry)) * entries.Count + 12' 0x11' 0x3D' 0x4' 0x0);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: writer.WriteMagic((uint)entries.Count' 0xE418' 81);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoShipList,The following statement contains a magic number: writer.Write((Int32)(DateTime.UtcNow.Subtract(new DateTime(1970' 1' 1))).TotalSeconds);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoBlockBalance,The following statement contains a magic number: writer.Write(new byte[0x68 - 8]);
Magic Number,PolarisServer,QueryServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\QueryServer.cs,DoBlockBalance,The following statement contains a magic number: writer.Write((UInt16)12205);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,ByteArrayToString,The following statement contains a magic number: var hex = new StringBuilder(ba.Length * 2);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,StringToByteArray,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,StringToByteArray,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,StringToByteArray,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,StringToByteArray,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,StringToByteArray,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,ObjectToString,The following statement contains a magic number: data = data.Remove(data.Length - 3);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,PacketTypeToUShort,The following statement contains a magic number: return (ushort)((type << 8) | subtype);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatFromHalfPrecision,The following statement contains a magic number: if ((value & 0x7FFF) != 0)              {                  var sign = (uint)((value & 0x8000) << 16);                  var exponent = (uint)(((value & 0x7C00) >> 10) + 0x70) << 23;                  var mantissa = (uint)((value & 0x3FF) << 13);                  return UIntToFloat(sign | exponent | mantissa);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatFromHalfPrecision,The following statement contains a magic number: if ((value & 0x7FFF) != 0)              {                  var sign = (uint)((value & 0x8000) << 16);                  var exponent = (uint)(((value & 0x7C00) >> 10) + 0x70) << 23;                  var mantissa = (uint)((value & 0x3FF) << 13);                  return UIntToFloat(sign | exponent | mantissa);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatFromHalfPrecision,The following statement contains a magic number: if ((value & 0x7FFF) != 0)              {                  var sign = (uint)((value & 0x8000) << 16);                  var exponent = (uint)(((value & 0x7C00) >> 10) + 0x70) << 23;                  var mantissa = (uint)((value & 0x3FF) << 13);                  return UIntToFloat(sign | exponent | mantissa);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatFromHalfPrecision,The following statement contains a magic number: if ((value & 0x7FFF) != 0)              {                  var sign = (uint)((value & 0x8000) << 16);                  var exponent = (uint)(((value & 0x7C00) >> 10) + 0x70) << 23;                  var mantissa = (uint)((value & 0x3FF) << 13);                  return UIntToFloat(sign | exponent | mantissa);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: if ((ivalue & 0x7FFFFFFF) != 0)              {                  var sign = (ushort)((ivalue >> 16) & 0x8000);                  var exponent = (ushort)(((ivalue & 0x7F800000) >> 23) - 0x70);                  if ((exponent & 0xFFFFFFE0) != 0)                  {                      return (ushort)((exponent >> 17) ^ 0x7FFF | sign);                  }                  var a = (ushort)((ivalue & 0x7FFFFF) >> 13);                  var b = (ushort)(exponent << 10);                  return (ushort)(a | b | sign);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: if ((ivalue & 0x7FFFFFFF) != 0)              {                  var sign = (ushort)((ivalue >> 16) & 0x8000);                  var exponent = (ushort)(((ivalue & 0x7F800000) >> 23) - 0x70);                  if ((exponent & 0xFFFFFFE0) != 0)                  {                      return (ushort)((exponent >> 17) ^ 0x7FFF | sign);                  }                  var a = (ushort)((ivalue & 0x7FFFFF) >> 13);                  var b = (ushort)(exponent << 10);                  return (ushort)(a | b | sign);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: if ((ivalue & 0x7FFFFFFF) != 0)              {                  var sign = (ushort)((ivalue >> 16) & 0x8000);                  var exponent = (ushort)(((ivalue & 0x7F800000) >> 23) - 0x70);                  if ((exponent & 0xFFFFFFE0) != 0)                  {                      return (ushort)((exponent >> 17) ^ 0x7FFF | sign);                  }                  var a = (ushort)((ivalue & 0x7FFFFF) >> 13);                  var b = (ushort)(exponent << 10);                  return (ushort)(a | b | sign);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: if ((ivalue & 0x7FFFFFFF) != 0)              {                  var sign = (ushort)((ivalue >> 16) & 0x8000);                  var exponent = (ushort)(((ivalue & 0x7F800000) >> 23) - 0x70);                  if ((exponent & 0xFFFFFFE0) != 0)                  {                      return (ushort)((exponent >> 17) ^ 0x7FFF | sign);                  }                  var a = (ushort)((ivalue & 0x7FFFFF) >> 13);                  var b = (ushort)(exponent << 10);                  return (ushort)(a | b | sign);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: if ((ivalue & 0x7FFFFFFF) != 0)              {                  var sign = (ushort)((ivalue >> 16) & 0x8000);                  var exponent = (ushort)(((ivalue & 0x7F800000) >> 23) - 0x70);                  if ((exponent & 0xFFFFFFE0) != 0)                  {                      return (ushort)((exponent >> 17) ^ 0x7FFF | sign);                  }                  var a = (ushort)((ivalue & 0x7FFFFF) >> 13);                  var b = (ushort)(exponent << 10);                  return (ushort)(a | b | sign);              }
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,FloatToHalfPrecision,The following statement contains a magic number: return (ushort)(ivalue >> 16);
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,Timestamp,The following statement contains a magic number: return time.ToFileTimeUtc() / 10000;
Magic Number,PolarisServer,Helper,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Helper.cs,Timestamp,The following statement contains a magic number: return DateTime.FromFileTimeUtc(stamp * 10000);
Magic Number,PolarisServer.Models,PSO2Item,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSO2Item.cs,SetGUID,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(guid)' 0' 8);
Magic Number,PolarisServer.Models,PSOObject,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSOObject.cs,GenerateSpawnBlob,The following statement contains a magic number: writer.Seek(2' SeekOrigin.Current);
Magic Number,PolarisServer.Models,PSOObject,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSOObject.cs,FromDBObject,The following statement contains a magic number: int thingCount = dbObject.ObjectFlags.Length / 4;
Magic Number,PolarisServer.Models,PSOObject,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSOObject.cs,FromDBObject,The following statement contains a magic number: for(int i = 0; i < psoObj.Things.Length; i++)              {                  psoObj.Things[i] = new PSOObjectThing(BitConverter.ToUInt32(dbObject.ObjectFlags' 4 * i)); // This should work?              }
Magic Number,PolarisServer.Models,PSONPC,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Models\PSOObject.cs,GenerateSpawnBlob,The following statement contains a magic number: writer.Write((UInt32)1101004800);
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: ZoneManager.Instance.NewInstance(instanceName' new Map("campship"' 150' 0' Map.MapType.Campship' 0));
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: ZoneManager.Instance.AddMapToInstance(instanceName' new Map("area1"' 311' -1' Map.MapType.Other' (Map.MapFlags)0x6) { GenerationArgs = new Map.GenParam((uint)new Random().Next()' 2' 3)});
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: ZoneManager.Instance.AddMapToInstance(instanceName' new Map("area1"' 311' -1' Map.MapType.Other' (Map.MapFlags)0x6) { GenerationArgs = new Map.GenParam((uint)new Random().Next()' 2' 3)});
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleport,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: ZoneManager.Instance.AddMapToInstance(instanceName' new Map("area1"' 311' -1' Map.MapType.Other' (Map.MapFlags)0x6) { GenerationArgs = new Map.GenParam((uint)new Random().Next()' 2' 3)});
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleportDown,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: if (context.CurrentLocation.PosZ >= 20)              {                  var instanceName = String.Format("{0}-{1}"' context.currentParty.currentQuest.name' context.User.Nickname);                    Map forest = ZoneManager.Instance.MapFromInstance("area1"' instanceName);                  forest.SpawnClient(context' new PSOLocation(0' 1' 0' -0' -37' 0.314f' 145.5f));              }
Magic Number,PolarisServer.Packets.Handlers,CampshipTeleportDown,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CampshipTeleport.cs,HandlePacket,The following statement contains a magic number: if (context.CurrentLocation.PosZ >= 20)              {                  var instanceName = String.Format("{0}-{1}"' context.currentParty.currentQuest.name' context.User.Nickname);                    Map forest = ZoneManager.Instance.MapFromInstance("area1"' instanceName);                  forest.SpawnClient(context' new PSOLocation(0' 1' 0' -0' -37' 0.314f' 145.5f));              }
Magic Number,PolarisServer.Packets.Handlers,CasinoTeleportHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CasinoTeleportHandler.cs,HandlePacket,The following statement contains a magic number: context.SendPacket(0x1E' 0xC' 0x0' BitConverter.GetBytes(101));
Magic Number,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The following statement contains a magic number: reader.ReadBytes(12);
Magic Number,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The following statement contains a magic number: byte[] someBytes = reader.ReadBytes(4);
Magic Number,PolarisServer.Packets.Handlers,ObjectInteract,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\ObjectInteract.cs,HandlePacket,The following statement contains a magic number: reader.ReadBytes(16);
Magic Number,PolarisServer.Packets.Handlers,QuestCounterHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The following statement contains a magic number: byte[] allTheQuests = new byte[408];
Magic Number,PolarisServer.Packets.Handlers,QuestListRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The following statement contains a magic number: for (int i = 0; i < defs.Length; i++)              {                  defs[i].dateOrSomething = "2012/01/05";                  defs[i].needsToBeNonzero = 0x00000020;                  defs[i].getsSetToWord = 0x0000000B;                  defs[i].questNameString = 30010;                  defs[i].playTime = (byte)QuestListPacket.EstimatedTime.Short;                  defs[i].partyType = (byte)QuestListPacket.PartyType.SinglePartyQuest;                  defs[i].difficulties = (byte)QuestListPacket.Difficulties.Normal | (byte)QuestListPacket.Difficulties.hard | (byte)QuestListPacket.Difficulties.VeryHard | (byte)QuestListPacket.Difficulties.SuperHard;                  defs[i].requiredLevel = 1;                  // Not sure why but these need to be set for the quest to be enabled                  defs[i].field_FF = 0xF1;                  defs[i].field_101 = 1;              }
Magic Number,PolarisServer.Packets.Handlers,QuestDifficultyRequestHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The following statement contains a magic number: for (int i = 0; i < diffs.Length; i++)              {                  diffs[i].dateOrSomething = "2012/01/05";                  diffs[i].something = 0x20;                  diffs[i].something2 = 0x0B;                  diffs[i].questNameString = 30010;                    // These are likely bitfields                  diffs[i].something3 = 0x00030301;              }
Magic Number,PolarisServer.Packets.Handlers,QuestDifficultyStartHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The following statement contains a magic number: def.questNameString = 30010;
Magic Number,PolarisServer.Packets.Handlers,QuestDifficultyStartHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\QuestCounterHandler.cs,HandlePacket,The following statement contains a magic number: diff.questNameString = 30010;
Magic Number,PolarisServer.Packets.Handlers,KeyExchange,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\KeyExchange.cs,HandlePacket,The following statement contains a magic number: var arc4Key = new byte[16];
Magic Number,PolarisServer.Packets.Handlers,KeyExchange,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\KeyExchange.cs,HandlePacket,The following statement contains a magic number: var decryptedToken = new byte[16];
Magic Number,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The following statement contains a magic number: var macCount = reader.ReadMagic(0x5E6' 107);
Magic Number,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The following statement contains a magic number: var username = reader.ReadFixedLengthAscii(64);
Magic Number,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The following statement contains a magic number: var password = reader.ReadFixedLengthAscii(64);
Magic Number,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The following statement contains a magic number: using (var db = new PolarisEf())              {                  var users = from u in db.Players                              where u.Username.ToLower().Equals(username.ToLower())                              select u;                      var error = "";                  Player user;                    if (!users.Any())                  {                      // Check if there is an empty field                      if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))                      {                          error = "Username and password fields must not be empty.";                          user = null;                      }                      // Check for special characters                      else if (!Regex.IsMatch(username' "^[a-zA-Z0-9 ]*$"' RegexOptions.IgnoreCase))                      {                          error = "Username must not contain special characters.\nPlease use letters and numbers only.";                          user = null;                      }                      else // We're all good!                      {                          // Insert new player into database                          user = new Player                          {                              Username = username.ToLower()'                              Password = BCrypt.Net.BCrypt.HashPassword(password)'                              Nickname = username.ToLower()'                              // Since we can't display the nickname prompt yet' just default it to the username                              SettingsIni = File.ReadAllText("Resources/settings.txt")                          };                          db.Players.Add(user);                          db.SaveChanges();                            // context.SendPacket(0x11' 0x1e' 0x0' new byte[0x44]); // Request nickname                      }                  }                  else                  {                      user = users.First();                      if (!BCrypt.Net.BCrypt.Verify(password' user.Password))                      {                          error = "Incorrect password.";                          user = null;                      }                  }                    /* Mystery packet                  var mystery = new PacketWriter();                  mystery.Write((uint)100);                  SendPacket(0x11' 0x49' 0' mystery.ToArray()); */                    // Login response packet                                   context.SendPacket(new LoginDataPacket("Polaris Block 1"' error' (user == null) ? (uint)0 : (uint)user.PlayerId));                    if (user == null)                      return;                    // Settings packet                  var settings = new PacketWriter();                  settings.WriteAscii(user.SettingsIni' 0x54AF' 0x100);                  context.SendPacket(0x2B' 2' 4' settings.ToArray());                    context.User = user;                }
Magic Number,PolarisServer.Packets.Handlers,Login,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\Login.cs,HandlePacket,The following statement contains a magic number: using (var db = new PolarisEf())              {                  var users = from u in db.Players                              where u.Username.ToLower().Equals(username.ToLower())                              select u;                      var error = "";                  Player user;                    if (!users.Any())                  {                      // Check if there is an empty field                      if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))                      {                          error = "Username and password fields must not be empty.";                          user = null;                      }                      // Check for special characters                      else if (!Regex.IsMatch(username' "^[a-zA-Z0-9 ]*$"' RegexOptions.IgnoreCase))                      {                          error = "Username must not contain special characters.\nPlease use letters and numbers only.";                          user = null;                      }                      else // We're all good!                      {                          // Insert new player into database                          user = new Player                          {                              Username = username.ToLower()'                              Password = BCrypt.Net.BCrypt.HashPassword(password)'                              Nickname = username.ToLower()'                              // Since we can't display the nickname prompt yet' just default it to the username                              SettingsIni = File.ReadAllText("Resources/settings.txt")                          };                          db.Players.Add(user);                          db.SaveChanges();                            // context.SendPacket(0x11' 0x1e' 0x0' new byte[0x44]); // Request nickname                      }                  }                  else                  {                      user = users.First();                      if (!BCrypt.Net.BCrypt.Verify(password' user.Password))                      {                          error = "Incorrect password.";                          user = null;                      }                  }                    /* Mystery packet                  var mystery = new PacketWriter();                  mystery.Write((uint)100);                  SendPacket(0x11' 0x49' 0' mystery.ToArray()); */                    // Login response packet                                   context.SendPacket(new LoginDataPacket("Polaris Block 1"' error' (user == null) ? (uint)0 : (uint)user.PlayerId));                    if (user == null)                      return;                    // Settings packet                  var settings = new PacketWriter();                  settings.WriteAscii(user.SettingsIni' 0x54AF' 0x100);                  context.SendPacket(0x2B' 2' 4' settings.ToArray());                    context.User = user;                }
Magic Number,PolarisServer.Packets.Handlers,CharacterCreate,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterCreate.cs,HandlePacket,The following statement contains a magic number: reader.ReadBytes(12);
Magic Number,PolarisServer.Packets.Handlers,CharacterCreate,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterCreate.cs,HandlePacket,The following statement contains a magic number: reader.ReadBytes(5);
Magic Number,PolarisServer.Packets.Handlers,CharacterCreate,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterCreate.cs,HandlePacket,The following statement contains a magic number: var name = reader.ReadFixedLengthUtf16(16);
Magic Number,PolarisServer.Packets.Handlers,CharacterList,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\CharacterList.cs,HandlePacket,The following statement contains a magic number: using (var db = new PolarisEf())              {                  var chars = db.Characters                      .Where(w => w.Player.PlayerId == context.User.PlayerId)                      .OrderBy(o => o.CharacterId) // TODO: Order by last played                      .Select(s => s);                    writer.Write((uint)chars.Count()); // Number of characters                    for (var i = 0; i < 0x4; i++) // Whatever this is                      writer.Write((byte)0);                    foreach (var ch in chars)                  {                      writer.Write((uint)ch.CharacterId);                      writer.Write((uint)context.User.PlayerId);                        for (var i = 0; i < 0x10; i++)                          writer.Write((byte)0);                        writer.WriteFixedLengthUtf16(ch.Name' 16);                      writer.Write((uint)0);                        writer.WriteStruct(ch.Looks); // Note: Pre-Episode 4 created looks doesn't seem to work anymore                      writer.WriteStruct(ch.Jobs);                        for (var i = 0; i < 0xFC; i++)                          writer.Write((byte)0);                  }              }
Magic Number,PolarisServer.Packets.Handlers,InitialLoad,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\StartGame.cs,HandlePacket,The following statement contains a magic number: context.SendPacket(6' 0' 0' setPlayerId.ToArray());
Magic Number,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: reader.ReadBytes(6);
Magic Number,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: byte[] flagBytes = reader.ReadBytes(3);
Magic Number,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: dataFlags |= (uint)(flagBytes[1] << 8);
Magic Number,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: dataFlags |= (uint)(flagBytes[2] << 16);
Magic Number,PolarisServer.Packets.Handlers,MovementHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: dataFlags |= (uint)(flagBytes[2] << 16);
Magic Number,PolarisServer.Packets.Handlers,MovementActionHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: byte[] preData = reader.ReadBytes(40);
Magic Number,PolarisServer.Packets.Handlers,MovementActionHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: byte[] rest = reader.ReadBytes(4);
Magic Number,PolarisServer.Packets.Handlers,MovementActionHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: for (int i = 0; i < thingCount; i++)              {                  thingWriter.Write(reader.ReadBytes(4));              }
Magic Number,PolarisServer.Packets.Handlers,MovementActionHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: byte[] final = reader.ReadBytes(4);
Magic Number,PolarisServer.Packets.Handlers,ActionUpdateHandler,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\Handlers\MovementHandlers.cs,HandlePacket,The following statement contains a magic number: byte[] rest = reader.ReadBytes(32);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 3; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16(_character.Player.Nickname' 16);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 36; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16(_character.Name' 16);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 24; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16("Polaris Team"' 16);
Magic Number,PolarisServer.Packets.PSOPackets,GuildInfoPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\GuildInfoPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 32; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: resp.Write(7);
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: resp.Write(11);
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: resp.Write(40);
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: resp.Write(1120403456);
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  resp.Write(1065353216);              }
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  resp.Write(1065353216);              }
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  resp.Write(1120403456);              }
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 21; i++)              {                  resp.Write(1120403456);              }
Magic Number,PolarisServer.Packets.PSOPackets,LoginDataPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\LoginDataPacket.cs,Build,The following statement contains a magic number: resp.WriteBytes(0' 12);
Magic Number,PolarisServer.Packets.PSOPackets,PalettePacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PalettePacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 1091; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The following statement contains a magic number: writer.WriteBytes(0' 12);
Magic Number,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The following statement contains a magic number: for(int i = 0; i < members.Length; i++)              {                  writer.WriteStruct(new ObjectHeader((uint)members[i].Player.PlayerId' EntityType.Player)); // Header of player                  writer.WriteUtf16(members[i].Name' 0xD863' 0xA9);                  writer.WriteUtf16(members[i].Player.Nickname' 0xD863' 0xA9);                  writer.Write((byte)members[i].Jobs.entries.hunter.level); // Active class level                  writer.Write((byte)0); // idk                  writer.Write((byte)4); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0); // idk                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.WriteBytes(0' 12);                  writer.Write(0);                  writer.Write(0);              }
Magic Number,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The following statement contains a magic number: for(int i = 0; i < members.Length; i++)              {                  writer.WriteStruct(new ObjectHeader((uint)members[i].Player.PlayerId' EntityType.Player)); // Header of player                  writer.WriteUtf16(members[i].Name' 0xD863' 0xA9);                  writer.WriteUtf16(members[i].Player.Nickname' 0xD863' 0xA9);                  writer.Write((byte)members[i].Jobs.entries.hunter.level); // Active class level                  writer.Write((byte)0); // idk                  writer.Write((byte)4); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0xFF); // idk                  writer.Write((byte)0); // idk                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.WriteBytes(0' 12);                  writer.Write(0);                  writer.Write(0);              }
Magic Number,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The following statement contains a magic number: for(int i = 0; i < 4 - members.Length; i++) // Empty entries              {                  writer.WriteStruct(new ObjectHeader(0' 0)); // Header of player                  writer.WriteMagic(0' 0xD863' 0xA9);                  writer.WriteMagic(0' 0xD863' 0xA9);                  writer.Write((byte)0); // Active class level                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.WriteBytes(0' 12);                  writer.Write(0);              }
Magic Number,PolarisServer.Packets.PSOPackets,PartyInitPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\PartyInitPacket.cs,Build,The following statement contains a magic number: for(int i = 0; i < 4 - members.Length; i++) // Empty entries              {                  writer.WriteStruct(new ObjectHeader(0' 0)); // Header of player                  writer.WriteMagic(0' 0xD863' 0xA9);                  writer.WriteMagic(0' 0xD863' 0xA9);                  writer.Write((byte)0); // Active class level                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((byte)0); // idk                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.Write((ushort)0);                  writer.WriteBytes(0' 12);                  writer.Write(0);              }
Magic Number,PolarisServer.Packets.PSOPackets,QuestAvailablePacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\QuestAvailablePacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  writer.Write((int)0);
Magic Number,PolarisServer.Packets.PSOPackets,QuestAvailablePacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\QuestAvailablePacket.cs,Build,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  writer.Write((int)0);
Magic Number,PolarisServer.Packets.PSOPackets,SetCurrencyPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\SetCurrencyPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 20; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,SetCurrencyPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\SetCurrencyPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Packets.PSOPackets,SymbolArtList,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\SymbolArtList.cs,Build,The following statement contains a magic number: writer.Write(new Byte[16 * 0x20]);
Magic Number,PolarisServer.Packets.PSOPackets,TeleportTransferPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\TeleportTransferPacket.cs,Build,The following statement contains a magic number: writer.Write(new byte[12]);
Magic Number,PolarisServer.Packets.PSOPackets,TeleportTransferPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\TeleportTransferPacket.cs,Build,The following statement contains a magic number: writer.Write(new byte[2]);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthASCII("Character"' 32);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((uint) 602);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((uint) 53);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((uint) (IsItMe ? 47 : 39));
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((uint) (IsItMe ? 47 : 39));
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((ushort) 559);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.Write((ushort) 306);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16(_character.Name' 16);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16(""' 32);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: writer.WriteFixedLengthUtf16(_character.Player.Nickname' 16);
Magic Number,PolarisServer.Packets.PSOPackets,CharacterSpawnPacket,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PSOPackets\CharacterSpawnPacket.cs,Build,The following statement contains a magic number: for (var i = 0; i < 64; i++)                  writer.Write((byte) 0);
Magic Number,PolarisServer.Party,PartyManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Party\PartyManager.cs,AddPlayerToParty,The following statement contains a magic number: if (p.getSize() >= 4) // For now                  return;
Magic Number,PolarisServer.Network,SocketClient,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Network\SocketClient.cs,SocketClient,The following statement contains a magic number: _readBuffer = new byte[1024 * 16];
Magic Number,PolarisServer.Network,SocketClient,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Network\SocketClient.cs,SocketClient,The following statement contains a magic number: _readBuffer = new byte[1024 * 16];
Magic Number,PolarisServer.Network,SocketClient,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Network\SocketClient.cs,SocketClient,The following statement contains a magic number: _writeBuffer = new byte[1024 * 1024];
Magic Number,PolarisServer.Network,SocketClient,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Network\SocketClient.cs,SocketClient,The following statement contains a magic number: _writeBuffer = new byte[1024 * 1024];
Magic Number,PolarisServer.Network,SocketServer,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Network\SocketServer.cs,Run,The following statement contains a magic number: try              {                  // Compile a list of possibly-readable sockets                  _readableSockets.Clear();                  _readableSockets.Add(_listener.Server);                  _writableSockets.Clear();                    foreach (var client in _clients)                  {                      _readableSockets.Add(client.Socket.Client);                      if (client.NeedsToWrite)                          _writableSockets.Add(client.Socket.Client);                  }                    Socket.Select(_readableSockets' _writableSockets' null' 1000000);                    foreach (var socket in _readableSockets)                  {                      if (socket == _listener.Server)                      {                          // New connection                          Logger.WriteInternal("[HI!] New connection!");                            var c = new SocketClient(this' _listener.AcceptTcpClient());                            _clients.Add(c);                          _socketMap.Add(c.Socket.Client' c);                            NewClient(c);                      }                      else                      {                          // Readable data                          if (socket.Connected)                              _socketMap[socket].OnReadable();                      }                  }                    foreach (var socket in _writableSockets)                      if (socket.Connected)                          _socketMap[socket].OnWritable();              }              catch (Exception ex)              {                  Logger.WriteException("A socket error occurred"' ex);              }
Magic Number,PolarisServer.Packets,PacketWriter,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketWriter.cs,WriteAscii,The following statement contains a magic number: if (str.Length == 0)              {                  WriteMagic(0' xor' sub);              }              else              {                  // Magic' followed by string' followed by null terminator'                  // followed by padding characters if needed.                  var charCount = (uint) str.Length;                  var padding = 4 - (charCount & 3);                    WriteMagic(charCount + 1' xor' sub);                  Write(Encoding.ASCII.GetBytes(str));                  for (var i = 0; i < padding; i++)                      Write((byte) 0);              }
Magic Number,PolarisServer.Packets,PacketWriter,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketWriter.cs,WriteAscii,The following statement contains a magic number: if (str.Length == 0)              {                  WriteMagic(0' xor' sub);              }              else              {                  // Magic' followed by string' followed by null terminator'                  // followed by padding characters if needed.                  var charCount = (uint) str.Length;                  var padding = 4 - (charCount & 3);                    WriteMagic(charCount + 1' xor' sub);                  Write(Encoding.ASCII.GetBytes(str));                  for (var i = 0; i < padding; i++)                      Write((byte) 0);              }
Magic Number,PolarisServer.Packets,PacketWriter,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketWriter.cs,WritePlayerHeader,The following statement contains a magic number: Write((ushort) 4);
Magic Number,PolarisServer.Packets,PacketReader,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketReader.cs,ReadAscii,The following statement contains a magic number: var padding = 4 - (charCount & 3);
Magic Number,PolarisServer.Packets,PacketReader,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketReader.cs,ReadAscii,The following statement contains a magic number: var padding = 4 - (charCount & 3);
Magic Number,PolarisServer.Packets,PacketReader,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketReader.cs,ReadUtf16,The following statement contains a magic number: var data = ReadBytes((int) (charCount*2));
Magic Number,PolarisServer.Packets,PacketReader,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Packets\PacketReader.cs,ReadFixedLengthUtf16,The following statement contains a magic number: var data = ReadBytes(charCount*2);
Magic Number,PolarisServer.Crypto,Rc4,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\RC4.cs,Rc4,The following statement contains a magic number: KeySizeValue = 128;
Magic Number,PolarisServer.Crypto,Rc4,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\RC4.cs,Rc4,The following statement contains a magic number: BlockSizeValue = 64;
Magic Number,PolarisServer.Crypto,Arc4Managed,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\ARC4Managed.cs,Arc4Managed,The following statement contains a magic number: _state = new byte[256];
Magic Number,PolarisServer.Crypto,Arc4Managed,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\ARC4Managed.cs,KeySetup,The following statement contains a magic number: for (var counter = 0; counter < 256; counter++)                  _state[counter] = (byte) counter;
Magic Number,PolarisServer.Crypto,Arc4Managed,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Crypto\ARC4Managed.cs,KeySetup,The following statement contains a magic number: for (var counter = 0; counter < 256; counter++)              {                  index2 = (byte) (key[index1] + _state[counter] + index2);                  // swap byte                  var tmp = _state[counter];                  _state[counter] = _state[index2];                  _state[index2] = tmp;                  index1 = (byte) ((index1 + 1)%key.Length);              }
Magic Number,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,GetDefaultLocation,The following statement contains a magic number: switch (Type)              {                  case MapType.Lobby:                      location = new PSOLocation(0f' 1f' 0f' 0f' -0.417969f' 0f' 137.375f);                      break;                    case MapType.Casino:                      location = new PSOLocation(0' 1f' 0' 0' 2' 6' 102);                      break;                    default:                      location = new PSOLocation(0f' 1f' 0f' 0f' 0f' 0f' 0f);                      break;              }
Magic Number,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,GetDefaultLocation,The following statement contains a magic number: switch (Type)              {                  case MapType.Lobby:                      location = new PSOLocation(0f' 1f' 0f' 0f' -0.417969f' 0f' 137.375f);                      break;                    case MapType.Casino:                      location = new PSOLocation(0' 1f' 0' 0' 2' 6' 102);                      break;                    default:                      location = new PSOLocation(0f' 1f' 0f' 0f' 0f' 0f' 0f);                      break;              }
Magic Number,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,GetDefaultLocation,The following statement contains a magic number: switch (Type)              {                  case MapType.Lobby:                      location = new PSOLocation(0f' 1f' 0f' 0f' -0.417969f' 0f' 137.375f);                      break;                    case MapType.Casino:                      location = new PSOLocation(0' 1f' 0' 0' 2' 6' 102);                      break;                    default:                      location = new PSOLocation(0f' 1f' 0f' 0f' 0f' 0f' 0f);                      break;              }
Magic Number,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,SpawnClient,The following statement contains a magic number: if (questOveride != "") // TODO: This is a temporary hack' fix me!!              {                  var setAreaPacket = File.ReadAllBytes("Resources/quests/" + questOveride + ".bin");                  c.SendPacket(0x03' 0x24' 4' setAreaPacket);              }              else              {                  PacketWriter writer = new PacketWriter();                  writer.WriteStruct(new ObjectHeader(3' EntityType.Map));                  writer.WriteStruct(new ObjectHeader((uint)c.User.PlayerId' EntityType.Player));                  writer.Write(0x1); // 8 Zeros                  writer.Write(0); // 8 Zeros                  writer.Write(~(uint)Type); // F4 FF FF FF                  writer.Write(MapID); // Map ID maybe                  writer.Write((uint)Flags);                  writer.Write(GenerationArgs.seed); // 81 8F E6 19 (Maybe seed)                  writer.Write(VariantID); // Randomgen enable / disable maybe                  writer.Write(GenerationArgs.xsize); // X Size                  writer.Write(GenerationArgs.ysize); // Y Size                  writer.Write(1);                  writer.Write(1);                  writer.Write(~0); // FF FF FF FF FF FF FF FF                  writer.Write(0x301);                    c.SendPacket(0x3' 0x0' 0x0' writer.ToArray());              }
Magic Number,PolarisServer.Zone,Map,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\Map.cs,SpawnClient,The following statement contains a magic number: if (questOveride != "") // TODO: This is a temporary hack' fix me!!              {                  var setAreaPacket = File.ReadAllBytes("Resources/quests/" + questOveride + ".bin");                  c.SendPacket(0x03' 0x24' 4' setAreaPacket);              }              else              {                  PacketWriter writer = new PacketWriter();                  writer.WriteStruct(new ObjectHeader(3' EntityType.Map));                  writer.WriteStruct(new ObjectHeader((uint)c.User.PlayerId' EntityType.Player));                  writer.Write(0x1); // 8 Zeros                  writer.Write(0); // 8 Zeros                  writer.Write(~(uint)Type); // F4 FF FF FF                  writer.Write(MapID); // Map ID maybe                  writer.Write((uint)Flags);                  writer.Write(GenerationArgs.seed); // 81 8F E6 19 (Maybe seed)                  writer.Write(VariantID); // Randomgen enable / disable maybe                  writer.Write(GenerationArgs.xsize); // X Size                  writer.Write(GenerationArgs.ysize); // Y Size                  writer.Write(1);                  writer.Write(1);                  writer.Write(~0); // FF FF FF FF FF FF FF FF                  writer.Write(0x301);                    c.SendPacket(0x3' 0x0' 0x0' writer.ToArray());              }
Magic Number,PolarisServer.Zone,ZoneManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\ZoneManager.cs,ZoneManager,The following statement contains a magic number: List<Map> lobbyMaps = new List<Map>(){ new Map("lobby"' 106' 0' Map.MapType.Lobby' Map.MapFlags.None)'                  new Map("casino"' 104' 0' Map.MapType.Casino' Map.MapFlags.MultiPartyArea | Map.MapFlags.Unknown1) };
Magic Number,PolarisServer.Zone,ZoneManager,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Zone\ZoneManager.cs,ZoneManager,The following statement contains a magic number: List<Map> lobbyMaps = new List<Map>(){ new Map("lobby"' 106' 0' Map.MapType.Lobby' Map.MapFlags.None)'                  new Map("casino"' 104' 0' Map.MapType.Casino' Map.MapFlags.MultiPartyArea | Map.MapFlags.Unknown1) };
Missing Default,PolarisServer,PolarisApp,C:\repos\PolarisTeam_PolarisServer\PolarisServer\Program.cs,Main,The following switch statement is missing a default case: switch (args[i].ToLower())                      {                          case "-b":                          case "--bind-address":                              if (++i < args.Length)                                  BindAddress = IPAddress.Parse(args[i]);                              break;                            case "-s":                          case "--size":                              var splitArgs = args[++i].Split(''');                              var width = int.Parse(splitArgs[0]);                              var height = int.Parse(splitArgs[1]);                              if (width < ConsoleSystem.Width)                              {                                  Logger.WriteWarning("[ARG] Capping console width to {0} columns"' ConsoleSystem.Width);                                  width = ConsoleSystem.Width;                              }                              if (height < ConsoleSystem.Height)                              {                                  Logger.WriteWarning("[ARG] Capping console height to {0} rows"' ConsoleSystem.Height);                                  height = ConsoleSystem.Height;                              }                              ConsoleSystem.SetSize(width' height);                              break;                      }
