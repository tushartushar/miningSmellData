Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByDto,The length of the statement  "		IQueryable<OrderDto> sourceResult = new OrderDto[0].AsQueryable ().Where (s => s.FullName.EndsWith ("Bestellung")).Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> (); " is 178.
Long Statement,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The length of the statement  "		IQueryable<OrderDto> sourceResult = new OrderDto[0].AsQueryable ().Where (s => s.FullName.EndsWith ("Bestellung")).Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> (); " is 178.
Long Statement,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The length of the statement  "			IQueryable<OrderDto> sourceResult2 = new OrderDto[0].AsQueryable ().Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> (); " is 131.
Empty Catch Block,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The method has an empty catch block.
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByDto,The following statement contains a magic number: using (var context = new TestDbContext (Effort.DbConnectionFactory.CreateTransient ())) {  	IQueryable<OrderDto> sourceResult = new OrderDto[0].AsQueryable ().Where (s => s.FullName.EndsWith ("Bestellung")).Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> ();  	// projection added  	var dtos = sourceResult.ToList ();  	Assert.AreEqual (2' dtos.Count);  }  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByDto,The following statement contains a magic number: Assert.AreEqual (2' dtos.Count);  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The following statement contains a magic number: using (var context = new TestDbContext (Effort.DbConnectionFactory.CreateTransient ())) {  	// works but requires filters (Where' ...) to be specified before call to "Map"  	// however' we'd like to apply filters to the resulting IQueryable "sourceResult".  	// that does not work though.  	IQueryable<OrderDto> sourceResult = new OrderDto[0].AsQueryable ().Where (s => s.FullName.EndsWith ("Bestellung")).Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> ();  	// projection added  	var dtos = sourceResult.ToList ();  	Assert.AreEqual (2' dtos.Count);  	// this is what we try to achieve but it does not work  	// as the mapping is done right away by "Map<>" and "ProjectTo<>"  	// and the .Where() filter does not at that time  	// so it is not mapped and results in a  	// "System.NotSupportedException : The specified type member 'FullName' is not supported   	// ...in LINQ to Entities. Only initializers' entity members' and entity navigation properties   	// ...are supported."  	try {  		IQueryable<OrderDto> sourceResult2 = new OrderDto[0].AsQueryable ().Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> ();  		// projection added  		var dtos2 = sourceResult.Where (s => s.FullName.EndsWith ("Bestellung")).ToList ();  		//Assert.Fail("NotSupportedException was expected");  	} catch (NotSupportedException) {  	}  	// Using "AsDataSource"  	IQueryable<OrderDto> sourceResult4 = context.OrderSet.UseAsDataSource (Mapper.Configuration).For<OrderDto> ();  	var dtos4 = sourceResult4.Where (d => d.FullName.EndsWith ("Bestellung")).ToList ();  	Assert.AreEqual (2' dtos4.Count);  }  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The following statement contains a magic number: using (var context = new TestDbContext (Effort.DbConnectionFactory.CreateTransient ())) {  	// works but requires filters (Where' ...) to be specified before call to "Map"  	// however' we'd like to apply filters to the resulting IQueryable "sourceResult".  	// that does not work though.  	IQueryable<OrderDto> sourceResult = new OrderDto[0].AsQueryable ().Where (s => s.FullName.EndsWith ("Bestellung")).Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> ();  	// projection added  	var dtos = sourceResult.ToList ();  	Assert.AreEqual (2' dtos.Count);  	// this is what we try to achieve but it does not work  	// as the mapping is done right away by "Map<>" and "ProjectTo<>"  	// and the .Where() filter does not at that time  	// so it is not mapped and results in a  	// "System.NotSupportedException : The specified type member 'FullName' is not supported   	// ...in LINQ to Entities. Only initializers' entity members' and entity navigation properties   	// ...are supported."  	try {  		IQueryable<OrderDto> sourceResult2 = new OrderDto[0].AsQueryable ().Map<OrderDto' Order> (context.OrderSet).ProjectTo<OrderDto> ();  		// projection added  		var dtos2 = sourceResult.Where (s => s.FullName.EndsWith ("Bestellung")).ToList ();  		//Assert.Fail("NotSupportedException was expected");  	} catch (NotSupportedException) {  	}  	// Using "AsDataSource"  	IQueryable<OrderDto> sourceResult4 = context.OrderSet.UseAsDataSource (Mapper.Configuration).For<OrderDto> ();  	var dtos4 = sourceResult4.Where (d => d.FullName.EndsWith ("Bestellung")).ToList ();  	Assert.AreEqual (2' dtos4.Count);  }  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The following statement contains a magic number: Assert.AreEqual (2' dtos.Count);  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_FilterByMappedQuery,The following statement contains a magic number: Assert.AreEqual (2' dtos4.Count);  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_OrderByDto_FullName,The following statement contains a magic number: using (var context = new TestDbContext (Effort.DbConnectionFactory.CreateTransient ())) {  	var orders = context.OrderSet;  	IQueryable<OrderDto> lazilyMappedQuery = orders.UseAsDataSource (Mapper.Configuration).For<OrderDto> ();  	var dtos3 = lazilyMappedQuery.OrderBy (dto => dto.FullName).Skip (2).ToList ();  	Assert.AreEqual (1' dtos3.Count);  	Assert.AreEqual ("Zalando Bestellung"' dtos3.Single ().FullName);  }  
Magic Number,AutoMapperSamples.EF,EffortQueryTests,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\EffortQueryTests.cs,Effort_OrderByDto_Price,The following statement contains a magic number: using (var context = new TestDbContext (Effort.DbConnectionFactory.CreateTransient ())) {  	var orders = context.OrderSet;  	IQueryable<OrderDto> lazilyMappedQuery = orders.UseAsDataSource (Mapper.Configuration).For<OrderDto> ();  	var dtos3 = lazilyMappedQuery.OrderBy (dto => dto.Price).Skip (2).ToList ();  	Assert.AreEqual (1' dtos3.Count);  	Assert.AreEqual ("Zalando Bestellung"' dtos3.Single ().FullName);  }  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Zalando Bestellung"'  	OrderDate = new DateTime (2015' 01' 14)'  	Price = 150d'  	Customer = jenny'  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Zalando Bestellung"'  	OrderDate = new DateTime (2015' 01' 14)'  	Price = 150d'  	Customer = jenny'  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Amazon Bestellung"'  	OrderDate = new DateTime (2015' 02' 3)'  	Price = 85d'  	Customer = alex'  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Amazon Bestellung"'  	OrderDate = new DateTime (2015' 02' 3)'  	Price = 85d'  	Customer = alex'  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Amazon Bestellung"'  	OrderDate = new DateTime (2015' 02' 3)'  	Price = 85d'  	Customer = alex'  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Universalversand"'  	OrderDate = new DateTime (2015' 04' 20)'  	Price = 33.9d'  	Customer = jenny  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Universalversand"'  	OrderDate = new DateTime (2015' 04' 20)'  	Price = 33.9d'  	Customer = jenny  });  
Magic Number,AutoMapperSamples.EF,TestDbContext,F:\newReposMay17\AutoMapper_AutoMapper\src\AutoMapperSamples.EF\TestDbContext.cs,Seed,The following statement contains a magic number: OrderSet.Add (new Order {  	Id = Guid.NewGuid ()'  	Name = "Universalversand"'  	OrderDate = new DateTime (2015' 04' 20)'  	Price = 33.9d'  	Customer = jenny  });  
