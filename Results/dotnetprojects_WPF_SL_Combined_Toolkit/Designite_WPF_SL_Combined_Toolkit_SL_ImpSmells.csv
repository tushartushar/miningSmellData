Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,Cyclomatic complexity of the method is 8
Complex Method,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,Cyclomatic complexity of the method is 8
Complex Method,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,Cyclomatic complexity of the method is 8
Complex Method,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationManager,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationManager.cs,Play,Cyclomatic complexity of the method is 13
Complex Method,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetNewDockingPosition,Cyclomatic complexity of the method is 16
Complex Method,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetNewMaximizedDockingPosition,Cyclomatic complexity of the method is 16
Complex Method,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,PrepareContainerForItemOverride,Cyclomatic complexity of the method is 9
Complex Method,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,OnApplyTemplate,Cyclomatic complexity of the method is 8
Complex Method,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,OnTileStateChanged,Cyclomatic complexity of the method is 12
Long Parameter List,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetMinimizedItemSize,The method has 7 parameters.
Long Statement,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The length of the statement  "						frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture))); " is 120.
Long Statement,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The length of the statement  "		Storyboard.SetTargetProperty (frames' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"' new object[0])); " is 156.
Long Statement,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The length of the statement  "		Storyboard.SetTargetProperty (frames2' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"' new object[0])); " is 157.
Long Statement,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationManager,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationManager.cs,Play,The length of the statement  "	if ((!GetIsAnimationEnabled (target) || !IsGlobalAnimationEnabled) || (VisualTreeHelper.GetChildrenCount (target) <= 0)) { " is 122.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemPosition,The length of the statement  "	}).EnsureDefaultTransforms ().MoveX (args).MoveY (numArray2).Origin (0.0' 0.0).EaseAll ((ReorderingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance; " is 154.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The length of the statement  "		}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance; " is 135.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetAbsoluteCoordinates,The length of the statement  "	return new Rect (element.TransformToVisual (GetRoot (element) as UIElement).Transform (new Point (0.0' 0.0))' element.RenderSize); " is 130.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetGeneratedItemContainers,The length of the statement  "	return Items.OfType<object> ().Select (item => ItemContainerGenerator.ContainerFromItem (item) as TileViewItem).Where (item => (item != null) && (item.Visibility == Visibility.Visible)); " is 186.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetMinimizedItemSize,The length of the statement  "	double num2 = generatedItemContainers.Where (i => i.MinimizedHeight > double.Epsilon).Select (i => i.MinimizedHeight).Sum (); " is 125.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetMinimizedItemSize,The length of the statement  "	double num3 = generatedItemContainers.Where (i => i.MinimizedWidth > double.Epsilon).Select (i => i.MinimizedWidth).Sum (); " is 123.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetMinimizedItemSize,The length of the statement  "	return new Size (num8' ((item.MinimizedHeight > 0.0) && !isDockedTopBottom) ? item.MinimizedHeight : Math.Max (0.0' num9)); " is 123.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,IsItemMaximizedByDefault,The length of the statement  "	if (((MaximizeMode != TileViewMaximizeMode.One) || (MaximizedItem != null)) && (item.TileState != TileViewItemState.Maximized)) { " is 129.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,IsMouseOverVisual,The length of the statement  "	return ((((mousePosition.X >= absoluteCoordinates.Left) && (mousePosition.X <= absoluteCoordinates.Right)) && (mousePosition.Y >= absoluteCoordinates.Top)) && (mousePosition.Y <= absoluteCoordinates.Bottom)); " is 208.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,IsValidDraggedItemPosition,The length of the statement  "	return (((((rect.Bottom <= ActualHeight) && (rect.Bottom >= size.Height)) && ((rect.Left >= 0.0) && (rect.Left <= (ActualWidth - size.Width)))) && (((rect.Right >= size.Width) && (rect.Right <= ActualWidth)) && (rect.Top >= 0.0))) && (rect.Top <= (ActualHeight - size.Height))); " is 278.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,TileViewPreviewTileStateChanged,The length of the statement  "	if (((source != null) && (control != null)) && ((Equals (this' control)) && (source.TileState == TileViewItemState.Maximized))) { " is 129.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,ShouldAnimateItemSizes,The length of the statement  "	return (((!double.IsInfinity (ActualWidth) && !double.IsNaN (ActualWidth)) && !DoubleUtil.IsZero (ActualWidth)) && !DoubleUtil.IsZero (ActualHeight)); " is 150.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,GripBarMouseLeftButtonDown,The length of the statement  "	if ((IsDoubleClick (_lastGripBarClickTime) && (ParentTileView != null)) && (ParentTileView.TileStateChangeTrigger == TileStateChangeTrigger.DoubleClick)) { " is 155.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,HandleItemMaximized,The length of the statement  "	if (((ParentTileView != null) && (_maximizeToggle != null)) && (ParentTileView.MaximizeMode == TileViewMaximizeMode.One)) { " is 123.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,HandleItemMinimized,The length of the statement  "	if (((ParentTileView != null) && (_maximizeToggle != null)) && ((ParentTileView.MaximizeMode != TileViewMaximizeMode.Zero) && !_maximizeToggle.IsEnabled)) { " is 156.
Long Statement,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,OnApplyTemplate,The length of the statement  "	if (((ParentTileView != null) && (_maximizeToggle != null)) && ((ParentTileView.MaximizeMode == TileViewMaximizeMode.Zero) || ((ParentTileView.MaximizeMode == TileViewMaximizeMode.One) && (TileState == TileViewItemState.Maximized)))) { " is 235.
Long Statement,WPF_SL_Combined_Toolkit.Converters,EqualsToBrushConverter,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Converters\BoolToValueConverter.cs,Convert,The length of the statement  "		return String.Equals (value.ToString ()' CompareValue' StringComparison.CurrentCultureIgnoreCase) ? this.TrueValue : this.FalseValue; " is 133.
Long Statement,WPF_SL_Combined_Toolkit.ExtensionMethods,DoubleUtil,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\ExtensionMethods\DoubleUtil.cs,AreClose,The length of the statement  "	return !rect2.IsEmpty && AreClose (rect1.X' rect2.X) && AreClose (rect1.Y' rect2.Y) && AreClose (rect1.Height' rect2.Height) && AreClose (rect1.Width' rect2.Width); " is 164.
Complex Conditional,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,TileViewPreviewTileStateChanged,The conditional expression  "((source != null) && (control != null)) && ((Equals (this' control)) && (source.TileState == TileViewItemState.Maximized))"  is complex.
Complex Conditional,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,HandleItemMinimized,The conditional expression  "((ParentTileView != null) && (_maximizeToggle != null)) && ((ParentTileView.MaximizeMode != TileViewMaximizeMode.Zero) && !_maximizeToggle.IsEnabled)"  is complex.
Complex Conditional,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,OnApplyTemplate,The conditional expression  "((ParentTileView != null) && (_maximizeToggle != null)) && ((ParentTileView.MaximizeMode == TileViewMaximizeMode.Zero) || ((ParentTileView.MaximizeMode == TileViewMaximizeMode.One) && (TileState == TileViewItemState.Maximized)))"  is complex.
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationBase,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationBase.cs,GetDurationSecondsForLength,The following statement contains a magic number: return Math.Max (num' 0.2);  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: if ((args.Length % 2) != 0) {  	throw new InvalidOperationException ("Params should come in a time-value pair");  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as ObjectAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new ObjectAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new DiscreteObjectKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [i]' CultureInfo.InvariantCulture)))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as ObjectAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new ObjectAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new DiscreteObjectKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [i]' CultureInfo.InvariantCulture)))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as ObjectAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new ObjectAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new DiscreteObjectKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [i]' CultureInfo.InvariantCulture)))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as ObjectAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as ObjectAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as DiscreteObjectKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [j]' CultureInfo.InvariantCulture)));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: j += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: for (int i = 0; i < list.Count; i += 2) {  	frames2.KeyFrames.Add (new DiscreteObjectKeyFrame {  		KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (Convert.ToDouble (list [i]' CultureInfo.InvariantCulture)))'  		Value = list [i + 1]  	});  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Discrete,The following statement contains a magic number: i += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The following statement contains a magic number: if ((args.Length % 2) != 0) {  	throw new InvalidOperationException ("Params should come in a time-value pair");  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		throw new NotImplementedException ();  	}  	var frames = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames' element);  	Storyboard.SetTargetProperty (frames' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"' new object[0]));  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"' new object[0]));  	for (int i = 0; i < list.Count; i += 2) {  		frames.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames);  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The following statement contains a magic number: for (int i = 0; i < list.Count; i += 2) {  	frames.KeyFrames.Add (new EasingDoubleKeyFrame {  		KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  		Value = list [i + 1]  	});  	frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  		KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  		Value = list [i + 1]  	});  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The following statement contains a magic number: i += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,Scale,The following statement contains a magic number: target.EndIndex += 2 * target.Targets.Count;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if ((args.Length % 2) != 0) {  	throw new InvalidOperationException ("Params should come in a time-value pair");  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath' new object[0]));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath' new object[0]));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath' new object[0]));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: j += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int i = 0; i < list.Count; i += 2) {  	frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  		KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  		Value = list [i + 1]  	});  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: i += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if ((args.Length % 2) != 0) {  	throw new InvalidOperationException ("Params should come in a time-value pair");  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: foreach (FrameworkElement element in target.Targets) {  	if (target.IsUpdate) {  		var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  		if (frames != null) {  			for (int j = 0; j < list.Count; j += 2) {  				var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  				if (frame != null) {  					frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  					frame.Value = list [j + 1];  				}  			}  		}  		num++;  		continue;  	}  	var frames2 = new DoubleAnimationUsingKeyFrames ();  	Storyboard.SetTarget (frames2' element);  	Storyboard.SetTargetProperty (frames2' new PropertyPath (propertyPath));  	for (int i = 0; i < list.Count; i += 2) {  		frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  			KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  			Value = list [i + 1]  		});  	}  	target.Instance.Children.Add (frames2);  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (target.IsUpdate) {  	var frames = target.Instance.Children [target.StartIndex + num] as DoubleAnimationUsingKeyFrames;  	if (frames != null) {  		for (int j = 0; j < list.Count; j += 2) {  			var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  			if (frame != null) {  				frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  				frame.Value = list [j + 1];  			}  		}  	}  	num++;  	continue;  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: if (frames != null) {  	for (int j = 0; j < list.Count; j += 2) {  		var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  		if (frame != null) {  			frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  			frame.Value = list [j + 1];  		}  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int j = 0; j < list.Count; j += 2) {  	var frame = frames.KeyFrames [j / 2] as EasingDoubleKeyFrame;  	if (frame != null) {  		frame.KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [j]));  		frame.Value = list [j + 1];  	}  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: j += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: for (int i = 0; i < list.Count; i += 2) {  	frames2.KeyFrames.Add (new EasingDoubleKeyFrame {  		KeyTime = KeyTime.FromTimeSpan (TimeSpan.FromSeconds (list [i]))'  		Value = list [i + 1]  	});  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.Animation,AnimationExtensions,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\Animation\AnimationExtensions.cs,SingleProperty,The following statement contains a magic number: i += 2
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemPosition,The following statement contains a magic number: args [2] = totalSeconds;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemPosition,The following statement contains a magic number: numArray2 [2] = totalSeconds;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: if (!item.SizeAnimating) {  	var size = new Size (item.ActualWidth' item.ActualHeight);  	item.Height = targetSize.Height;  	item.Width = targetSize.Width;  	double totalSeconds = ResizingDuration.TimeSpan.TotalSeconds;  	var args = new double[4];  	args [1] = size.Height;  	args [2] = totalSeconds;  	args [3] = targetSize.Height;  	var numArray2 = new double[4];  	numArray2 [1] = size.Width;  	numArray2 [2] = totalSeconds;  	numArray2 [3] = targetSize.Width;  	Storyboard sb = AnimationExtensions.Create ().Animate (new FrameworkElement[] {  		item  	}).EnsureDefaultTransforms ().Height (args).Width (numArray2).EaseAll ((ResizingEasing ?? Easings.SlideDown1)).AdjustSpeed ().Instance;  	sb.Completed += (sender' e) =>  {  		sb.Stop ();  		item.SizeAnimating = false;  	};  	item.SizeAnimating = true;  	sb.Begin ();  }  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: args [2] = totalSeconds;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: args [3] = targetSize.Height;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: numArray2 [2] = totalSeconds;  
Magic Number,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,AnimateItemSize,The following statement contains a magic number: numArray2 [3] = targetSize.Width;  
Magic Number,WPF_SL_Combined_Toolkit.ExtensionMethods,DoubleUtil,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\ExtensionMethods\DoubleUtil.cs,DoubleToInt,The following statement contains a magic number: if (0.0 >= val) {  	return (int)(val - 0.5);  }  
Magic Number,WPF_SL_Combined_Toolkit.ExtensionMethods,DoubleUtil,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\ExtensionMethods\DoubleUtil.cs,DoubleToInt,The following statement contains a magic number: return (int)(val - 0.5);  
Magic Number,WPF_SL_Combined_Toolkit.ExtensionMethods,DoubleUtil,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\ExtensionMethods\DoubleUtil.cs,DoubleToInt,The following statement contains a magic number: return (int)(val + 0.5);  
Missing Default,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetNewDockingPosition,The following switch statement is missing a default case: switch (MinimizedItemsPosition) {  case Dock.Left:  	x = 0.0;  	y = currentOffset;  	break;  case Dock.Top:  	x = currentOffset;  	y = 0.0;  	break;  case Dock.Right:  	x = ActualWidth - MinimizedColumnWidth;  	y = currentOffset;  	break;  case Dock.Bottom:  	x = currentOffset;  	y = ActualHeight - MinimizedRowHeight;  	break;  }  
Missing Default,WPF_SL_Combined_Toolkit.Controls.TileView,TileView,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileView.cs,GetNewMaximizedDockingPosition,The following switch statement is missing a default case: switch (MinimizedItemsPosition) {  case Dock.Left:  	x = MinimizedColumnWidth;  	y = 0.0;  	break;  case Dock.Top:  	x = 0.0;  	y = MinimizedRowHeight;  	break;  case Dock.Right:  	x = 0.0;  	y = 0.0;  	break;  case Dock.Bottom:  	x = 0.0;  	y = 0.0;  	break;  }  
Missing Default,WPF_SL_Combined_Toolkit.Controls.TileView,TileViewItem,C:\repos\dotnetprojects_WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit\WPF_SL_Combined_Toolkit_SL\..\WPF_SL_Combined_Toolkit\Controls\TileView\TileViewItem.cs,OnTileStateChanged,The following switch statement is missing a default case: switch (((TileViewItemState)e.NewValue)) {  case TileViewItemState.Restored:  	source.HandleItemRestored ();  	break;  case TileViewItemState.Maximized:  	source.HandleItemMaximized ();  	break;  case TileViewItemState.Minimized:  	source.HandleItemMinimized ();  	break;  }  
