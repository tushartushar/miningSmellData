Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft._3DTools,TrackballDecorator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\TrackballDecorator.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Virtual Method Call from Constructor,Surfaces,Surface,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\Surface.cs,Surface,The constructor "Surface" calls a virtual method "CreateMesh".
Magic Number,Surfaces,Sphere,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\Sphere.cs,GetTextureCoordinate,The following statement contains a magic number: map.Scale (1 / (2 * Math.PI)' -0.5);  
Magic Number,Surfaces,Sphere,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\Sphere.cs,GetTextureCoordinate,The following statement contains a magic number: map.Scale (1 / (2 * Math.PI)' -0.5);  
Magic Number,Surfaces,Circle,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\Circle.cs,CreateMesh,The following statement contains a magic number: for (int i = 1; i <= div; ++i) {  	double angle = 2 * Math.PI / div * i;  	Point3D newPoint = PointForAngle (angle);  	mesh.Positions.Add (prevPoint);  	mesh.Positions.Add (_position);  	mesh.Positions.Add (newPoint);  	mesh.Normals.Add (normal);  	mesh.Normals.Add (normal);  	mesh.Normals.Add (normal);  	prevPoint = newPoint;  }  
Magic Number,SolarSystem,OrbitsCalculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\OrbitsCalculator.cs,OrbitsCalculator,The following statement contains a magic number: DaysPerSecond = 2;  
Magic Number,SolarSystem,OrbitsCalculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\OrbitsCalculator.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (10);  
Magic Number,SolarSystem,OrbitsCalculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\OrbitsCalculator.cs,OnTimerTick,The following statement contains a magic number: Days += (now - _startTime).TotalMilliseconds * DaysPerSecond / 1000.0 * (ReverseTime ? -1 : 1);  
Magic Number,SolarSystem,OrbitsCalculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\OrbitsCalculator.cs,EarthRotation,The following statement contains a magic number: for (decimal step = 0; step <= 360; step += 0.00005m) {  	EarthRotationAngle = ((double)step) * Days / EarthRotationPeriod;  }  
Magic Number,SolarSystem,OrbitsCalculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Code-Tuning-And-Optimization\SolarSystem\OrbitsCalculator.cs,SunRotation,The following statement contains a magic number: SunRotationAngle = 360 * Days / SunRotationPeriod;  
