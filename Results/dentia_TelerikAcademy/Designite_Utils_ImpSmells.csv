Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Utils,Extensions,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\Extensions.cs,RemoveOddOccurences,The following statement contains a magic number: return numbersList.Where(x => numbersList.Count(y => y == x) % 2 == 0);
Magic Number,Utils,Extensions,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\Extensions.cs,GetMajorant,The following statement contains a magic number: return numbersList.Cast<int?>()                  .FirstOrDefault(x => numbersList.Count(y => y == x) >= (numbersCount / 2) + 1);
Magic Number,Utils,Extensions,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\Extensions.cs,GetSpecialSequence,The following statement contains a magic number: while (counter < sequeceLength)              {                  var element = queue.Dequeue();                    result.Add(element);                    queue.Enqueue(element + 1);                  queue.Enqueue((2 * element) + 1);                  queue.Enqueue(element + 2);                    counter += 3;              }
Magic Number,Utils,Extensions,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\Extensions.cs,GetSpecialSequence,The following statement contains a magic number: while (counter < sequeceLength)              {                  var element = queue.Dequeue();                    result.Add(element);                    queue.Enqueue(element + 1);                  queue.Enqueue((2 * element) + 1);                  queue.Enqueue(element + 2);                    counter += 3;              }
Magic Number,Utils,Extensions,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\Extensions.cs,GetSpecialSequence,The following statement contains a magic number: while (counter < sequeceLength)              {                  var element = queue.Dequeue();                    result.Add(element);                    queue.Enqueue(element + 1);                  queue.Enqueue((2 * element) + 1);                  queue.Enqueue(element + 2);                    counter += 3;              }
Magic Number,Utils.TextReader,Reader,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\TextReader\Reader.cs,ReadMatrix,The following statement contains a magic number: for (int row = 0; row < size; row++)              {                  var currentRow = this.ReadRow();                  if (currentRow.Length != size)                  {                      throw new ArgumentException("Invalid columns size.");                  }                    var currentCol = currentRow.Select(                      x =>                          {                              switch (x)                              {                                  case "x":                                      return -1;                                  case "0":                                      return 0;                                  case "*":                                      return -2;                                  default:                                      throw new ArgumentException("Invalid symbol.");                              }                          }).ToArray();                    for (int col = 0; col < size; col++)                  {                      if (currentCol[col] == -2)                      {                          maze.StartingCell = new Coordinates(row' col);                      }                        maze[row' col] = currentCol[col];                  }              }
Magic Number,Utils.TextReader,Reader,C:\repos\dentia_TelerikAcademy\Homeworks\DSA\Linear-Data-Structures\Utils\TextReader\Reader.cs,ReadMatrix,The following statement contains a magic number: for (int row = 0; row < size; row++)              {                  var currentRow = this.ReadRow();                  if (currentRow.Length != size)                  {                      throw new ArgumentException("Invalid columns size.");                  }                    var currentCol = currentRow.Select(                      x =>                          {                              switch (x)                              {                                  case "x":                                      return -1;                                  case "0":                                      return 0;                                  case "*":                                      return -2;                                  default:                                      throw new ArgumentException("Invalid symbol.");                              }                          }).ToArray();                    for (int col = 0; col < size; col++)                  {                      if (currentCol[col] == -2)                      {                          maze.StartingCell = new Coordinates(row' col);                      }                        maze[row' col] = currentCol[col];                  }              }
