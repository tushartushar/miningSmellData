Implementation smell,Namespace,Class,File,Method,Description
Long Method,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The method has 101 lines of code.
Complex Method,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,CountMines,Cyclomatic complexity of the method is 9
Long Statement,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The length of the statement  "			Console.WriteLine ("Let's play 'Minesweepers'. Try stepping only on the mine-free fields. " + "Command 'top' shows the highscores' 'restart' starts a new game' 'exit' quits the game!"); " is 185.
Long Statement,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The length of the statement  "			if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) { " is 173.
Long Statement,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,ShowHighscores,The length of the statement  "			Console.WriteLine ("{0}. {1} --> {2} fields opened"' place + 1' highscores [place].PlayerName' highscores [place].PlayerPoints); " is 128.
Complex Conditional,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The conditional expression  "int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)"  is complex.
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isAtStartOfGame) {  		Console.WriteLine ("Let's play 'Minesweepers'. Try stepping only on the mine-free fields. " + "Command 'top' shows the highscores' 'restart' starts a new game' 'exit' quits the game!");  		PrintPlayfield (playfield);  		isAtStartOfGame = false;  	}  	Console.Write ("Enter row and column: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		ShowHighscores (highscores);  		break;  	case "restart":  		playfield = CreatePlayfield ();  		mines = PutMines ();  		PrintPlayfield (playfield);  		steppedOnAMine = false;  		isAtStartOfGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye bye!");  		break;  	case "turn":  		if (mines [row' col] != '*') {  			if (mines [row' col] == '-') {  				ShowFieldValue (playfield' mines' row' col);  				pointCount++;  			}  			if (FieldsWithoutMines == pointCount) {  				wonTheGame = true;  			} else {  				PrintPlayfield (playfield);  			}  		} else {  			steppedOnAMine = true;  		}  		break;  	default:  		Console.WriteLine ("{0}Invalid command!{0}"' Environment.NewLine);  		break;  	}  	if (steppedOnAMine) {  		PrintPlayfield (mines);  		Console.Write ("{0}You died with {1} points. Enter your nickname: "' Environment.NewLine' pointCount);  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		if (highscores.Count < 5) {  			highscores.Add (playerScore);  		} else {  			for (int i = 0; i < highscores.Count; i++) {  				if (highscores [i].PlayerPoints < playerScore.PlayerPoints) {  					highscores.Insert (i' playerScore);  					highscores.RemoveAt (highscores.Count - 1);  					break;  				}  			}  		}  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerName.CompareTo (r1.PlayerName));  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerPoints.CompareTo (r1.PlayerPoints));  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		steppedOnAMine = false;  		isAtStartOfGame = true;  	}  	if (wonTheGame) {  		Console.WriteLine ("{0}Congratulations! You've opened all 35 fields unharmed!"' Environment.NewLine);  		PrintPlayfield (mines);  		Console.WriteLine ("Enter your nickname: ");  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		highscores.Add (playerScore);  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		wonTheGame = false;  		isAtStartOfGame = true;  	}  } while (command != "exit");  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isAtStartOfGame) {  		Console.WriteLine ("Let's play 'Minesweepers'. Try stepping only on the mine-free fields. " + "Command 'top' shows the highscores' 'restart' starts a new game' 'exit' quits the game!");  		PrintPlayfield (playfield);  		isAtStartOfGame = false;  	}  	Console.Write ("Enter row and column: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		ShowHighscores (highscores);  		break;  	case "restart":  		playfield = CreatePlayfield ();  		mines = PutMines ();  		PrintPlayfield (playfield);  		steppedOnAMine = false;  		isAtStartOfGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye bye!");  		break;  	case "turn":  		if (mines [row' col] != '*') {  			if (mines [row' col] == '-') {  				ShowFieldValue (playfield' mines' row' col);  				pointCount++;  			}  			if (FieldsWithoutMines == pointCount) {  				wonTheGame = true;  			} else {  				PrintPlayfield (playfield);  			}  		} else {  			steppedOnAMine = true;  		}  		break;  	default:  		Console.WriteLine ("{0}Invalid command!{0}"' Environment.NewLine);  		break;  	}  	if (steppedOnAMine) {  		PrintPlayfield (mines);  		Console.Write ("{0}You died with {1} points. Enter your nickname: "' Environment.NewLine' pointCount);  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		if (highscores.Count < 5) {  			highscores.Add (playerScore);  		} else {  			for (int i = 0; i < highscores.Count; i++) {  				if (highscores [i].PlayerPoints < playerScore.PlayerPoints) {  					highscores.Insert (i' playerScore);  					highscores.RemoveAt (highscores.Count - 1);  					break;  				}  			}  		}  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerName.CompareTo (r1.PlayerName));  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerPoints.CompareTo (r1.PlayerPoints));  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		steppedOnAMine = false;  		isAtStartOfGame = true;  	}  	if (wonTheGame) {  		Console.WriteLine ("{0}Congratulations! You've opened all 35 fields unharmed!"' Environment.NewLine);  		PrintPlayfield (mines);  		Console.WriteLine ("Enter your nickname: ");  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		highscores.Add (playerScore);  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		wonTheGame = false;  		isAtStartOfGame = true;  	}  } while (command != "exit");  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: do {  	if (isAtStartOfGame) {  		Console.WriteLine ("Let's play 'Minesweepers'. Try stepping only on the mine-free fields. " + "Command 'top' shows the highscores' 'restart' starts a new game' 'exit' quits the game!");  		PrintPlayfield (playfield);  		isAtStartOfGame = false;  	}  	Console.Write ("Enter row and column: ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		ShowHighscores (highscores);  		break;  	case "restart":  		playfield = CreatePlayfield ();  		mines = PutMines ();  		PrintPlayfield (playfield);  		steppedOnAMine = false;  		isAtStartOfGame = false;  		break;  	case "exit":  		Console.WriteLine ("Bye bye!");  		break;  	case "turn":  		if (mines [row' col] != '*') {  			if (mines [row' col] == '-') {  				ShowFieldValue (playfield' mines' row' col);  				pointCount++;  			}  			if (FieldsWithoutMines == pointCount) {  				wonTheGame = true;  			} else {  				PrintPlayfield (playfield);  			}  		} else {  			steppedOnAMine = true;  		}  		break;  	default:  		Console.WriteLine ("{0}Invalid command!{0}"' Environment.NewLine);  		break;  	}  	if (steppedOnAMine) {  		PrintPlayfield (mines);  		Console.Write ("{0}You died with {1} points. Enter your nickname: "' Environment.NewLine' pointCount);  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		if (highscores.Count < 5) {  			highscores.Add (playerScore);  		} else {  			for (int i = 0; i < highscores.Count; i++) {  				if (highscores [i].PlayerPoints < playerScore.PlayerPoints) {  					highscores.Insert (i' playerScore);  					highscores.RemoveAt (highscores.Count - 1);  					break;  				}  			}  		}  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerName.CompareTo (r1.PlayerName));  		highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerPoints.CompareTo (r1.PlayerPoints));  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		steppedOnAMine = false;  		isAtStartOfGame = true;  	}  	if (wonTheGame) {  		Console.WriteLine ("{0}Congratulations! You've opened all 35 fields unharmed!"' Environment.NewLine);  		PrintPlayfield (mines);  		Console.WriteLine ("Enter your nickname: ");  		string nickname = Console.ReadLine ();  		ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  		highscores.Add (playerScore);  		ShowHighscores (highscores);  		playfield = CreatePlayfield ();  		mines = PutMines ();  		pointCount = 0;  		wonTheGame = false;  		isAtStartOfGame = true;  	}  } while (command != "exit");  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: if (int.TryParse (command [0].ToString ()' out row) && int.TryParse (command [2].ToString ()' out col) && row <= playfield.GetLength (0) && col <= playfield.GetLength (1)) {  	command = "turn";  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: if (steppedOnAMine) {  	PrintPlayfield (mines);  	Console.Write ("{0}You died with {1} points. Enter your nickname: "' Environment.NewLine' pointCount);  	string nickname = Console.ReadLine ();  	ScoreInfo playerScore = new ScoreInfo (nickname' pointCount);  	if (highscores.Count < 5) {  		highscores.Add (playerScore);  	} else {  		for (int i = 0; i < highscores.Count; i++) {  			if (highscores [i].PlayerPoints < playerScore.PlayerPoints) {  				highscores.Insert (i' playerScore);  				highscores.RemoveAt (highscores.Count - 1);  				break;  			}  		}  	}  	highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerName.CompareTo (r1.PlayerName));  	highscores.Sort ((ScoreInfo r1' ScoreInfo r2) => r2.PlayerPoints.CompareTo (r1.PlayerPoints));  	ShowHighscores (highscores);  	playfield = CreatePlayfield ();  	mines = PutMines ();  	pointCount = 0;  	steppedOnAMine = false;  	isAtStartOfGame = true;  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,Main,The following statement contains a magic number: if (highscores.Count < 5) {  	highscores.Add (playerScore);  } else {  	for (int i = 0; i < highscores.Count; i++) {  		if (highscores [i].PlayerPoints < playerScore.PlayerPoints) {  			highscores.Insert (i' playerScore);  			highscores.RemoveAt (highscores.Count - 1);  			break;  		}  	}  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,PutMines,The following statement contains a magic number: while (mines.Count < 15) {  	Random random = new Random ();  	int randNumber = random.Next (50);  	if (!mines.Contains (randNumber)) {  		mines.Add (randNumber);  	}  }  
Magic Number,Minesweeper,Minesweeper,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Naming-Identifiers\Minesweeper\Minesweeper.cs,PutMines,The following statement contains a magic number: while (mines.Count < 15) {  	Random random = new Random ();  	int randNumber = random.Next (50);  	if (!mines.Contains (randNumber)) {  		mines.Add (randNumber);  	}  }  
