Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Assertions_Homework,SearchingAlgorithms,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\SearchingAlgorithms.cs,BinarySearch,Cyclomatic complexity of the method is 8
Long Statement,Assertions_Homework,SortingAlgorithms,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\SortingAlgorithms.cs,FindMinElementIndex,The length of the statement  "	Debug.Assert (AssertionUtils.IsMinValue (arr' arr [minElementIndex]' startIndex' endIndex)' "Returns wrong element as min."); " is 125.
Magic Number,Assertions_Homework,AssertionsHomework,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\AssertionsHomework.cs,Main,The following statement contains a magic number: Console.WriteLine (SearchingAlgorithms.BinarySearch (arr' -1000));  
Magic Number,Assertions_Homework,AssertionsHomework,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\AssertionsHomework.cs,Main,The following statement contains a magic number: Console.WriteLine (SearchingAlgorithms.BinarySearch (arr' 17));  
Magic Number,Assertions_Homework,AssertionsHomework,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\AssertionsHomework.cs,Main,The following statement contains a magic number: Console.WriteLine (SearchingAlgorithms.BinarySearch (arr' 10));  
Magic Number,Assertions_Homework,AssertionsHomework,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\AssertionsHomework.cs,Main,The following statement contains a magic number: Console.WriteLine (SearchingAlgorithms.BinarySearch (arr' 1000));  
Magic Number,Assertions_Homework,SearchingAlgorithms,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\SearchingAlgorithms.cs,BinarySearch,The following statement contains a magic number: while (startIndex <= endIndex) {  	int midIndex = (startIndex + endIndex) / 2;  	switch (arr [midIndex].CompareTo (value)) {  	case 0:  		return midIndex;  	case -1:  		startIndex = midIndex + 1;  		break;  	case 1:  		endIndex = midIndex - 1;  		break;  	}  }  
Missing Default,Assertions_Homework,SearchingAlgorithms,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Assertions-And-Exceptions\Assertions-Homework\SearchingAlgorithms.cs,BinarySearch,The following switch statement is missing a default case: switch (arr [midIndex].CompareTo (value)) {  case 0:  	return midIndex;  case -1:  	startIndex = midIndex + 1;  	break;  case 1:  	endIndex = midIndex - 1;  	break;  }  
