Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,Cyclomatic complexity of the method is 11
Complex Method,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,Calculate,Cyclomatic complexity of the method is 8
Complex Method,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ToPolishNotation,Cyclomatic complexity of the method is 14
Complex Method,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,Cyclomatic complexity of the method is 16
Complex Conditional,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The conditional expression  "index == 0 ||                                  (this.tokens[index - 1].Type == TokenType.Operator &&                                  (this.tokens[index - 1].OperatorType == OperatorType.OpeningBrace ||                                  this.tokens[index - 1].OperatorType == OperatorType.ClosingBrace))"  is complex.
Magic Number,ArithmeticalExpressions,Token,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: return 50;
Magic Number,ArithmeticalExpressions,Token,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType)              {                  case OperatorType.Addition:                  case OperatorType.Substraction:                      return 10;                  case OperatorType.Mulitiplication:                  case OperatorType.Partition:                      return 20;                  case OperatorType.OpeningBrace:                  case OperatorType.ClosingBrace:                      return 0;                  case OperatorType.UnaryMinus:                      return 40;                  default:                      throw new Exception("Invalid operator");              }
Magic Number,ArithmeticalExpressions,Token,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType)              {                  case OperatorType.Addition:                  case OperatorType.Substraction:                      return 10;                  case OperatorType.Mulitiplication:                  case OperatorType.Partition:                      return 20;                  case OperatorType.OpeningBrace:                  case OperatorType.ClosingBrace:                      return 0;                  case OperatorType.UnaryMinus:                      return 40;                  default:                      throw new Exception("Invalid operator");              }
Magic Number,ArithmeticalExpressions,Token,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType)              {                  case OperatorType.Addition:                  case OperatorType.Substraction:                      return 10;                  case OperatorType.Mulitiplication:                  case OperatorType.Partition:                      return 20;                  case OperatorType.OpeningBrace:                  case OperatorType.ClosingBrace:                      return 0;                  case OperatorType.UnaryMinus:                      return 40;                  default:                      throw new Exception("Invalid operator");              }
Missing Default,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,The following switch statement is missing a default case: switch (token.OperatorType)                      {                          case OperatorType.Addition:                              result.Append(" + ");                              break;                          case OperatorType.Substraction:                              result.Append(" - ");                              break;                          case OperatorType.Mulitiplication:                              result.Append(" * ");                              break;                          case OperatorType.Partition:                              result.Append(" / ");                              break;                          case OperatorType.UnaryMinus:                              result.Append(" _ ");                              break;                      }
Missing Default,ArithmeticalExpressions,Calculator,D:\research\architectureSmells\repos\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,The following switch statement is missing a default case: switch (token.FunctionType)                      {                          case FunctionType.Log:                              result.Append(" LOG ");                              break;                          case FunctionType.Sqrt:                              result.Append(" SQRT ");                              break;                          case FunctionType.Pow:                              result.Append(" POW ");                              break;                      }
