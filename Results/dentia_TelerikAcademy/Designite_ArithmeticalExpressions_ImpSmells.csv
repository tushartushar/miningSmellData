Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,Cyclomatic complexity of the method is 27
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,Calculate,Cyclomatic complexity of the method is 8
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ExecuteFunction,Cyclomatic complexity of the method is 11
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ExecuteOperation,Cyclomatic complexity of the method is 17
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ToPolishNotation,Cyclomatic complexity of the method is 14
Complex Method,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,Cyclomatic complexity of the method is 44
Complex Method,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,Cyclomatic complexity of the method is 9
Long Statement,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The length of the statement  "				if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) { " is 213.
Complex Conditional,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The conditional expression  "index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))"  is complex.
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: for (int index = 0; index < this.tokens.Length; index++) {  	if (double.TryParse (stringTokens [index]' out value)) {  		this.tokens [index] = new Token (value);  	} else {  		switch (stringTokens [index]) {  		case "+":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  			break;  		case "-":  			if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  				if (afterFunction) {  					afterFunction = false;  					this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  				} else {  					this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  				}  			} else {  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			}  			break;  		case "*":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  			break;  		case "/":  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  			break;  		case "(":  			this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  			break;  		case ")":  			this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  			if (inFunction) {  				inFunction = false;  				afterFunction = true;  			}  			break;  		case "pow":  			this.tokens [index] = new Token (FunctionType.Pow' 2);  			inFunction = true;  			break;  		case "log":  			this.tokens [index] = new Token (FunctionType.Log' 1);  			inFunction = true;  			break;  		case "sqrt":  			this.tokens [index] = new Token (FunctionType.Sqrt' 1);  			inFunction = true;  			break;  		case "'":  			this.tokens [index] = new Token (FunctionType.Separator' 0);  			break;  		default:  			break;  		}  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (double.TryParse (stringTokens [index]' out value)) {  	this.tokens [index] = new Token (value);  } else {  	switch (stringTokens [index]) {  	case "+":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  		break;  	case "-":  		if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  			if (afterFunction) {  				afterFunction = false;  				this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  			} else {  				this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  			}  		} else {  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		}  		break;  	case "*":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  		break;  	case "/":  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  		break;  	case "(":  		this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  		break;  	case ")":  		this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  		if (inFunction) {  			inFunction = false;  			afterFunction = true;  		}  		break;  	case "pow":  		this.tokens [index] = new Token (FunctionType.Pow' 2);  		inFunction = true;  		break;  	case "log":  		this.tokens [index] = new Token (FunctionType.Log' 1);  		inFunction = true;  		break;  	case "sqrt":  		this.tokens [index] = new Token (FunctionType.Sqrt' 1);  		inFunction = true;  		break;  	case "'":  		this.tokens [index] = new Token (FunctionType.Separator' 0);  		break;  	default:  		break;  	}  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: switch (stringTokens [index]) {  case "+":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  	break;  case "-":  	if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  		if (afterFunction) {  			afterFunction = false;  			this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  		} else {  			this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  		}  	} else {  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	}  	break;  case "*":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  	break;  case "/":  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  	break;  case "(":  	this.tokens [index] = new Token (OperatorType.OpeningBrace' 0' Associativity.Right);  	break;  case ")":  	this.tokens [index] = new Token (OperatorType.ClosingBrace' 0' Associativity.Right);  	if (inFunction) {  		inFunction = false;  		afterFunction = true;  	}  	break;  case "pow":  	this.tokens [index] = new Token (FunctionType.Pow' 2);  	inFunction = true;  	break;  case "log":  	this.tokens [index] = new Token (FunctionType.Log' 1);  	inFunction = true;  	break;  case "sqrt":  	this.tokens [index] = new Token (FunctionType.Sqrt' 1);  	inFunction = true;  	break;  case "'":  	this.tokens [index] = new Token (FunctionType.Separator' 0);  	break;  default:  	break;  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (OperatorType.Addition' 2' Associativity.Left);  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  	if (afterFunction) {  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	} else {  		this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  	}  } else {  	this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (index == 0 || (this.tokens [index - 1].Type == TokenType.Operator && (this.tokens [index - 1].OperatorType == OperatorType.OpeningBrace || this.tokens [index - 1].OperatorType == OperatorType.ClosingBrace))) {  	if (afterFunction) {  		afterFunction = false;  		this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  	} else {  		this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  	}  } else {  	this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: if (afterFunction) {  	afterFunction = false;  	this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  } else {  	this.tokens [index] = new Token (OperatorType.UnaryMinus' 1' Associativity.Left);  }  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (OperatorType.Substraction' 2' Associativity.Left);  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (OperatorType.Mulitiplication' 2' Associativity.Left);  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (OperatorType.Partition' 2' Associativity.Left);  
Magic Number,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,ConvertToToken,The following statement contains a magic number: this.tokens [index] = new Token (FunctionType.Pow' 2);  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: if (this.Type == TokenType.Function)  	return 50;  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: return 50;  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType) {  case OperatorType.Addition:  case OperatorType.Substraction:  	return 10;  case OperatorType.Mulitiplication:  case OperatorType.Partition:  	return 20;  case OperatorType.OpeningBrace:  case OperatorType.ClosingBrace:  	return 0;  case OperatorType.UnaryMinus:  	return 40;  default:  	throw new Exception ("Invalid operator");  }  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType) {  case OperatorType.Addition:  case OperatorType.Substraction:  	return 10;  case OperatorType.Mulitiplication:  case OperatorType.Partition:  	return 20;  case OperatorType.OpeningBrace:  case OperatorType.ClosingBrace:  	return 0;  case OperatorType.UnaryMinus:  	return 40;  default:  	throw new Exception ("Invalid operator");  }  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: switch (this.OperatorType) {  case OperatorType.Addition:  case OperatorType.Substraction:  	return 10;  case OperatorType.Mulitiplication:  case OperatorType.Partition:  	return 20;  case OperatorType.OpeningBrace:  case OperatorType.ClosingBrace:  	return 0;  case OperatorType.UnaryMinus:  	return 40;  default:  	throw new Exception ("Invalid operator");  }  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: return 10;  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: return 20;  
Magic Number,ArithmeticalExpressions,Token,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Token.cs,GetPrecedence,The following statement contains a magic number: return 40;  
Missing Default,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,The following switch statement is missing a default case: switch (token.OperatorType) {  case OperatorType.Addition:  	result.Append (" + ");  	break;  case OperatorType.Substraction:  	result.Append (" - ");  	break;  case OperatorType.Mulitiplication:  	result.Append (" * ");  	break;  case OperatorType.Partition:  	result.Append (" / ");  	break;  case OperatorType.UnaryMinus:  	result.Append (" _ ");  	break;  }  
Missing Default,ArithmeticalExpressions,Calculator,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\C#2\Classes-And-Objects\ArithmeticalExpressions\Calculator.cs,GetExpressionString,The following switch statement is missing a default case: switch (token.FunctionType) {  case FunctionType.Log:  	result.Append (" LOG ");  	break;  case FunctionType.Sqrt:  	result.Append (" SQRT ");  	break;  case FunctionType.Pow:  	result.Append (" POW ");  	break;  }  
