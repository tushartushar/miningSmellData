Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The length of the statement  "                var firstKickers = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 1).OrderByDescending(value => value).ToArray(); " is 139.
Long Statement,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The length of the statement  "                var secondKickers = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 1).OrderByDescending(value => value).ToArray(); " is 142.
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFourOfAKind,The following statement contains a magic number: return group.Any(gr => gr.Count() == 4);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: return group.Any(gr => gr.Count() == 3) && group.Any(gr => gr.Count() == 2);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: return group.Any(gr => gr.Count() == 3) && group.Any(gr => gr.Count() == 2);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsThreeOfAKind,The following statement contains a magic number: return group.Any(gr => gr.Count() == 3) && !group.Any(gr => gr.Count() == 2);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsThreeOfAKind,The following statement contains a magic number: return group.Any(gr => gr.Count() == 3) && !group.Any(gr => gr.Count() == 2);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: return hand.Cards.GroupBy(card => card.Face).Count(group => group.Count() == 2) == 2;
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: return hand.Cards.GroupBy(card => card.Face).Count(group => group.Count() == 2) == 2;
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: return group.Count(gr => gr.Count() == 2) == 1 && !group.Any(gr => gr.Count() == 3);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: return group.Count(gr => gr.Count() == 2) == 1 && !group.Any(gr => gr.Count() == 3);
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFourOfAKindHands,The following statement contains a magic number: var firstFourValue = firstCardsValues.Where(value => firstCardsValues.Count(x => x == value) == 4).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFourOfAKindHands,The following statement contains a magic number: var secondFourValue = secondCardsValues.Where(value => secondCardsValues.Count(x => x == value) == 4).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: var firstThreeValue = firstCardsValues.Where(value => firstCardsValues.Count(x => x == value) == 3).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: var secondThreeValue = secondCardsValues.Where(value => secondCardsValues.Count(x => x == value) == 3).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: if (firstThreeValue != secondThreeValue)              {                  return firstThreeValue.CompareTo(secondThreeValue);              }              else              {                  var firstTwoValue = firstCardsValues.Where(value => firstCardsValues.Count(x => x == value) == 2).ToArray()[0];                  var secondTwoValue = secondCardsValues.Where(value => secondCardsValues.Count(x => x == value) == 2).ToArray()[0];                    return firstTwoValue.CompareTo(secondTwoValue);              }
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: if (firstThreeValue != secondThreeValue)              {                  return firstThreeValue.CompareTo(secondThreeValue);              }              else              {                  var firstTwoValue = firstCardsValues.Where(value => firstCardsValues.Count(x => x == value) == 2).ToArray()[0];                  var secondTwoValue = secondCardsValues.Where(value => secondCardsValues.Count(x => x == value) == 2).ToArray()[0];                    return firstTwoValue.CompareTo(secondTwoValue);              }
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareThreeOfAKindHands,The following statement contains a magic number: var firstThreeValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 3).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareThreeOfAKindHands,The following statement contains a magic number: var secondThreeValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 3).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: var firstHigherPairValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 2).Max();
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: var secondHigherPairValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 2).Max();
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: if (firstHigherPairValue != secondHigherPairValue)              {                  return firstHigherPairValue.CompareTo(secondHigherPairValue);              }              else              {                  var firstLowerPairValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 2).Min();                  var secondLowerPairValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 2).Min();                    if (firstLowerPairValue != secondLowerPairValue)                  {                      return firstLowerPairValue.CompareTo(secondLowerPairValue);                  }                  else                  {                      var firstKickerValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 1).ToArray()[0];                      var secondKickerValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 1).ToArray()[0];                        return firstKickerValue.CompareTo(secondKickerValue);                  }              }
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: if (firstHigherPairValue != secondHigherPairValue)              {                  return firstHigherPairValue.CompareTo(secondHigherPairValue);              }              else              {                  var firstLowerPairValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 2).Min();                  var secondLowerPairValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 2).Min();                    if (firstLowerPairValue != secondLowerPairValue)                  {                      return firstLowerPairValue.CompareTo(secondLowerPairValue);                  }                  else                  {                      var firstKickerValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 1).ToArray()[0];                      var secondKickerValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 1).ToArray()[0];                        return firstKickerValue.CompareTo(secondKickerValue);                  }              }
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The following statement contains a magic number: var firstPairValue = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 2).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The following statement contains a magic number: var secondPairValue = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 2).ToArray()[0];
Magic Number,Poker,PokerHandsChecker,C:\repos\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The following statement contains a magic number: if (firstPairValue != secondPairValue)              {                  return firstPairValue.CompareTo(secondPairValue);              }              else              {                  var firstKickers = firstCardValues.Where(value => firstCardValues.Count(x => x == value) == 1).OrderByDescending(value => value).ToArray();                  var secondKickers = secondCardValues.Where(value => secondCardValues.Count(x => x == value) == 1).OrderByDescending(value => value).ToArray();                    for (int ind = 0; ind < 3; ind++)                  {                      var compareValue = firstKickers[ind].CompareTo(secondKickers[ind]);                        if (compareValue != 0)                      {                          return compareValue;                      }                  }                    return 0;              }
