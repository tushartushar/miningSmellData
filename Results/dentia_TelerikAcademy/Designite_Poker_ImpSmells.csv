Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareHands,Cyclomatic complexity of the method is 13
Complex Method,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,GetHandType,Cyclomatic complexity of the method is 10
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFourOfAKindHands,The length of the statement  "		var secondKickerValue = secondCardsValues.Where (value => secondCardsValues.Count (x => x == value) == 1).ToArray () [0]; " is 121.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The length of the statement  "	var secondThreeValue = secondCardsValues.Where (value => secondCardsValues.Count (x => x == value) == 3).ToArray () [0]; " is 120.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFlushHands,The length of the statement  "	var secondSortedValues = secondHand.Cards.Select (card => (int)card.Face).OrderByDescending (value => value).ToArray (); " is 120.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareThreeOfAKindHands,The length of the statement  "		var firstHigherKicker = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 1).ToArray ().Max (); " is 120.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareThreeOfAKindHands,The length of the statement  "		var secondHigherKicker = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).ToArray ().Max (); " is 123.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareThreeOfAKindHands,The length of the statement  "			var secondLowerKicker = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).ToArray ().Min (); " is 122.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The length of the statement  "		var firstKickers = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 1).OrderByDescending (value => value).ToArray (); " is 143.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The length of the statement  "		var secondKickers = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).OrderByDescending (value => value).ToArray (); " is 146.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareHighCardHands,The length of the statement  "	var firstHighCardValues = firstHand.Cards.Select (card => (int)card.Face).OrderByDescending (value => value).ToArray (); " is 120.
Long Statement,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareHighCardHands,The length of the statement  "	var secondHighCardValues = secondHand.Cards.Select (card => (int)card.Face).OrderByDescending (value => value).ToArray (); " is 122.
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFourOfAKind,The following statement contains a magic number: return group.Any (gr => gr.Count () == 4);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: return group.Any (gr => gr.Count () == 3) && group.Any (gr => gr.Count () == 2);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsFullHouse,The following statement contains a magic number: return group.Any (gr => gr.Count () == 3) && group.Any (gr => gr.Count () == 2);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsThreeOfAKind,The following statement contains a magic number: return group.Any (gr => gr.Count () == 3) && !group.Any (gr => gr.Count () == 2);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsThreeOfAKind,The following statement contains a magic number: return group.Any (gr => gr.Count () == 3) && !group.Any (gr => gr.Count () == 2);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: return hand.Cards.GroupBy (card => card.Face).Count (group => group.Count () == 2) == 2;  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsTwoPair,The following statement contains a magic number: return hand.Cards.GroupBy (card => card.Face).Count (group => group.Count () == 2) == 2;  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: return group.Count (gr => gr.Count () == 2) == 1 && !group.Any (gr => gr.Count () == 3);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,IsOnePair,The following statement contains a magic number: return group.Count (gr => gr.Count () == 2) == 1 && !group.Any (gr => gr.Count () == 3);  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: if (firstThreeValue != secondThreeValue) {  	return firstThreeValue.CompareTo (secondThreeValue);  } else {  	var firstTwoValue = firstCardsValues.Where (value => firstCardsValues.Count (x => x == value) == 2).ToArray () [0];  	var secondTwoValue = secondCardsValues.Where (value => secondCardsValues.Count (x => x == value) == 2).ToArray () [0];  	return firstTwoValue.CompareTo (secondTwoValue);  }  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareFullHouseHands,The following statement contains a magic number: if (firstThreeValue != secondThreeValue) {  	return firstThreeValue.CompareTo (secondThreeValue);  } else {  	var firstTwoValue = firstCardsValues.Where (value => firstCardsValues.Count (x => x == value) == 2).ToArray () [0];  	var secondTwoValue = secondCardsValues.Where (value => secondCardsValues.Count (x => x == value) == 2).ToArray () [0];  	return firstTwoValue.CompareTo (secondTwoValue);  }  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: if (firstHigherPairValue != secondHigherPairValue) {  	return firstHigherPairValue.CompareTo (secondHigherPairValue);  } else {  	var firstLowerPairValue = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 2).Min ();  	var secondLowerPairValue = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 2).Min ();  	if (firstLowerPairValue != secondLowerPairValue) {  		return firstLowerPairValue.CompareTo (secondLowerPairValue);  	} else {  		var firstKickerValue = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 1).ToArray () [0];  		var secondKickerValue = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).ToArray () [0];  		return firstKickerValue.CompareTo (secondKickerValue);  	}  }  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareTwoPairHands,The following statement contains a magic number: if (firstHigherPairValue != secondHigherPairValue) {  	return firstHigherPairValue.CompareTo (secondHigherPairValue);  } else {  	var firstLowerPairValue = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 2).Min ();  	var secondLowerPairValue = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 2).Min ();  	if (firstLowerPairValue != secondLowerPairValue) {  		return firstLowerPairValue.CompareTo (secondLowerPairValue);  	} else {  		var firstKickerValue = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 1).ToArray () [0];  		var secondKickerValue = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).ToArray () [0];  		return firstKickerValue.CompareTo (secondKickerValue);  	}  }  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The following statement contains a magic number: if (firstPairValue != secondPairValue) {  	return firstPairValue.CompareTo (secondPairValue);  } else {  	var firstKickers = firstCardValues.Where (value => firstCardValues.Count (x => x == value) == 1).OrderByDescending (value => value).ToArray ();  	var secondKickers = secondCardValues.Where (value => secondCardValues.Count (x => x == value) == 1).OrderByDescending (value => value).ToArray ();  	for (int ind = 0; ind < 3; ind++) {  		var compareValue = firstKickers [ind].CompareTo (secondKickers [ind]);  		if (compareValue != 0) {  			return compareValue;  		}  	}  	return 0;  }  
Magic Number,Poker,PokerHandsChecker,F:\newReposMay17\dentia_TelerikAcademy\Homeworks\HQC\Test-Driven-Development\Poker\PokerHandsChecker.cs,CompareOnePairHands,The following statement contains a magic number: for (int ind = 0; ind < 3; ind++) {  	var compareValue = firstKickers [ind].CompareTo (secondKickers [ind]);  	if (compareValue != 0) {  		return compareValue;  	}  }  
