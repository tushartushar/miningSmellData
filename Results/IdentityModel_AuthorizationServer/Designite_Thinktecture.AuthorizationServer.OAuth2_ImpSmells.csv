Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,Cyclomatic complexity of the method is 9
Complex Method,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,Cyclomatic complexity of the method is 22
Complex Method,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,Cyclomatic complexity of the method is 8
Complex Method,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,Cyclomatic complexity of the method is 8
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The method has 5 parameters.
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,TokenController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,TokenController,The method has 5 parameters.
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestClientException,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestClientException.cs,AuthorizeRequestClientException,The method has 5 parameters.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,ClientCredentialsFilter,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\ClientCredentialsFilter.cs,TryParseBasicAuthenticationScheme,The length of the statement  "	if (request.Headers.Authorization == null || !request.Headers.Authorization.Scheme.Equals ("Basic"' StringComparison.OrdinalIgnoreCase)) { " is 138.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,Index,The length of the statement  "			var handle = _handleManager.Find (ClaimsPrincipal.Current.GetSubject ()' validatedRequest.Client' validatedRequest.Application' validatedRequest.Scopes' StoredGrantType.ConsentDecision); " is 186.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "		return new ClientErrorResult (new Uri (request.redirect_uri)' OAuthConstants.Errors.AccessDenied' request.response_type' request.state); " is 136.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "		if (validatedRequest.Application.AllowRememberConsentDecision && validatedRequest.ResponseType == OAuthConstants.ResponseTypes.Token && rememberDuration == -1) { " is 161.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "			var handle = StoredGrant.CreateConsentDecision (ClaimsPrincipal.Current.GetSubject ()' validatedRequest.Client' validatedRequest.Application' validatedRequest.Scopes); " is 167.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "		if (validatedRequest.RequestingRefreshToken && rememberDuration != null && validatedRequest.Client.Flow == OAuthFlow.Code) { " is 124.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "	return new ClientErrorResult (new Uri (request.redirect_uri)' OAuthConstants.Errors.InvalidRequest' request.response_type' request.state); " is 138.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,PerformAuthorizationCodeGrant,The length of the statement  "	var handle = StoredGrant.CreateAuthorizationCode (validatedRequest.Client' validatedRequest.Application' validatedRequest.RedirectUri.Uri' ClaimsPrincipal.Current.FilterInternalClaims ()' validatedRequest.Scopes' validatedRequest.RequestingRefreshToken' validatedRequest.RequestedRefreshTokenExpiration); " is 304.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,PerformImplicitGrant,The length of the statement  "	var tokenString = string.Format ("access_token={0}&token_type={1}&expires_in={2}"' response.AccessToken' response.TokenType' response.ExpiresIn); " is 145.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,ProcessResourceOwnerCredentialRequest,The length of the statement  "			var handle = StoredGrant.CreateRefreshTokenHandle (principal.GetSubject ()' validatedRequest.Client' validatedRequest.Application' principal.Claims' validatedRequest.Scopes' DateTime.UtcNow.AddYears (5)); " is 204.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,ClientErrorResult,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\ClientErrorResult.cs,ConstructErrorUrl,The length of the statement  "		url = string.Format ("{0}{1}error={2}&state={3}"' redirectUri.AbsoluteUri' separator' error' WebUtility.UrlEncode (state)); " is 123.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "	Tracing.InformationFormat ("OAuth2 application: {0} ({1})"' validatedRequest.Application.Name' validatedRequest.Application.Namespace); " is 135.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "		Tracing.InformationFormat ("Redirect URI: {0} ({1})"' validatedRequest.RedirectUri.Uri' validatedRequest.RedirectUri.Description); " is 130.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "		throw new AuthorizeRequestClientException ("response_type is null or empty"' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.InvalidRequest' string.Empty' validatedRequest.State); " is 197.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "	if (!request.response_type.Equals (OAuthConstants.ResponseTypes.Token' StringComparison.Ordinal) && !request.response_type.Equals (OAuthConstants.ResponseTypes.Code' StringComparison.Ordinal)) { " is 194.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "		throw new AuthorizeRequestClientException ("response_type is not token or code: " + request.response_type' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.UnsupportedResponseType' string.Empty' validatedRequest.State); " is 236.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The length of the statement  "		throw new AuthorizeRequestClientException ("Invalid response_type: " + request.response_type' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.UnsupportedResponseType' request.response_type' validatedRequest.State); " is 232.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateTokenResponseType,The length of the statement  "		throw new AuthorizeRequestClientException ("response_type is not allowed: " + request.response_type' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.UnsupportedResponseType' request.response_type' validatedRequest.State); " is 239.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateCodeResponseType,The length of the statement  "		throw new AuthorizeRequestClientException ("response_type is not allowed: " + request.response_type' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.UnsupportedResponseType' request.response_type' validatedRequest.State); " is 239.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateScopes,The length of the statement  "		throw new AuthorizeRequestClientException ("Missing scope."' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.InvalidScope' validatedRequest.ResponseType' validatedRequest.State); " is 196.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateScopes,The length of the statement  "	if (validatedRequest.Application.Scopes.TryValidateScopes (validatedRequest.Client.ClientId' requestedScopes' out resultingScopes)) { " is 133.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateScopes,The length of the statement  "		throw new AuthorizeRequestClientException ("Invalid scope."' new Uri (validatedRequest.RedirectUri.Uri)' OAuthConstants.Errors.InvalidScope' validatedRequest.ResponseType' validatedRequest.State); " is 196.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The length of the statement  "	Tracing.InformationFormat ("OAuth2 application: {0} ({1})"' validatedRequest.Application.Name' validatedRequest.Application.Namespace); " is 135.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The length of the statement  "	if (request.Grant_Type == OAuthConstants.GrantTypes.AuthorizationCode || request.Grant_Type == OAuthConstants.GrantTypes.ClientCredentials || request.Grant_Type == OAuthConstants.GrantTypes.RefreshToken || request.Grant_Type == OAuthConstants.GrantTypes.Password) { " is 265.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The length of the statement  "		throw new TokenRequestValidationException ("Invalid grant_type: " + request.Grant_Type' OAuthConstants.Errors.UnsupportedGrantType); " is 132.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The length of the statement  "		throw new TokenRequestValidationException ("Invalid client or not enabled: " + ClaimsPrincipal.Current.Identity.Name' OAuthConstants.Errors.InvalidClient); " is 155.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The length of the statement  "		throw new TokenRequestValidationException ("Invalid grant_type: " + request.Grant_Type' OAuthConstants.Errors.UnsupportedGrantType); " is 132.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateClientCredentialsGrant,The length of the statement  "		throw new TokenRequestValidationException ("Client flow not allowed for client"' OAuthConstants.Errors.UnauthorizedClient); " is 123.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,The length of the statement  "		throw new TokenRequestValidationException ("Refresh tokens not allowed for client"' OAuthConstants.Errors.UnauthorizedClient); " is 126.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,The length of the statement  "		throw new TokenRequestValidationException ("Refresh token not found: " + validatedRequest.RefreshToken' OAuthConstants.Errors.InvalidGrant); " is 140.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,The length of the statement  "		throw new TokenRequestValidationException ("No expiration time set for refresh token. That's not allowed."' OAuthConstants.Errors.InvalidGrant); " is 144.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,The length of the statement  "		throw new TokenRequestValidationException (string.Format ("Client {0} is trying to refresh token from {1}."' validatedRequest.Client.ClientId' handle.Client.ClientId)' OAuthConstants.Errors.InvalidGrant); " is 204.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidatePasswordGrant,The length of the statement  "		throw new TokenRequestValidationException ("Resource owner password flow not allowed for client"' OAuthConstants.Errors.UnauthorizedClient); " is 140.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "		throw new TokenRequestValidationException ("Code flow not allowed for client"' OAuthConstants.Errors.UnauthorizedClient); " is 121.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "		throw new TokenRequestValidationException ("Authorization code not found: " + validatedRequest.AuthorizationCode' OAuthConstants.Errors.InvalidGrant); " is 150.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "		throw new TokenRequestValidationException (string.Format ("Client {0} is trying to request token using an authorization code from {1}."' validatedRequest.Client.ClientId' handle.Client.ClientId)' OAuthConstants.Errors.InvalidGrant); " is 232.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "		throw new TokenRequestValidationException (string.Format ("Redirect URI is missing")' OAuthConstants.Errors.InvalidRequest); " is 124.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "		throw new TokenRequestValidationException (string.Format ("Redirect URI in token request ({0})' does not match redirect URI from authorize request ({1})"' validatedRequest.RedirectUri' handle.RedirectUri)' OAuthConstants.Errors.InvalidRequest); " is 244.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateAssertionGrant,The length of the statement  "		throw new TokenRequestValidationException ("Assertion flow not allowed for client"' OAuthConstants.Errors.UnauthorizedClient); " is 126.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateScopes,The length of the statement  "	if (validatedRequest.Application.Scopes.TryValidateScopes (validatedRequest.Client.ClientId' requestedScopes' out resultingScopes)) { " is 133.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,Extensions,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\Extensions.cs,CreateOAuthErrorResponse,The length of the statement  "	return request.CreateErrorResponse (HttpStatusCode.BadRequest' string.Format ("{{ \"{0}\": \"{1}\" }}"' OAuthConstants.Errors.Error' OAuthError)); " is 146.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,Extensions,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\Extensions.cs,AuthorizeValidationError,The length of the statement  "		return new ClientErrorResult (clientException.RedirectUri' clientException.Error' clientException.ResponseType' clientException.State); " is 135.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidationException,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidationException.cs,CreateErrorResponse,The length of the statement  "	return request.CreateErrorResponse (HttpStatusCode.BadRequest' string.Format ("{{ \"{0}\": \"{1}\" }}"' OAuthConstants.Errors.Error' OAuthError)); " is 146.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,WSTrustResourceOwnerCredentialValidation,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\WSTrustResourceOwnerCredentialValidation.cs,Validate,The length of the statement  "		genericToken = WSTrustClient.Issue (new EndpointAddress (_address)' new EndpointAddress (_realm)' binding' credentials) as GenericXmlSecurityToken; " is 147.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,WSTrustResourceOwnerCredentialValidation,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\WSTrustResourceOwnerCredentialValidation.cs,Validate,The length of the statement  "	return FederatedAuthentication.FederationConfiguration.IdentityConfiguration.ClaimsAuthenticationManager.Authenticate ("ResourceOwnerPasswordValidation"' principal); " is 165.
Complex Conditional,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The conditional expression  "request.Grant_Type == OAuthConstants.GrantTypes.AuthorizationCode || request.Grant_Type == OAuthConstants.GrantTypes.ClientCredentials || request.Grant_Type == OAuthConstants.GrantTypes.RefreshToken || request.Grant_Type == OAuthConstants.GrantTypes.Password"  is complex.
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,Index,The following statement contains a magic number: validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears (50);  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The following statement contains a magic number: if (button == "yes") {  	Tracing.Information ("User allows access token request.");  	ValidatedRequest validatedRequest;  	try {  		validatedRequest = new AuthorizeRequestValidator ().Validate (application' request);  	} catch (AuthorizeRequestValidationException ex) {  		Tracing.Error ("Aborting OAuth2 authorization request");  		return this.AuthorizeValidationError (ex);  	}  	if (scopes == null || scopes.Length == 0) {  		ModelState.AddModelError (""' "Please choose at least one permission.");  		return View ("Consent"' validatedRequest);  	}  	// parse scopes form post and substitue scopes  	validatedRequest.Scopes.RemoveAll (x => !scopes.Contains (x.Name));  	// store consent decision if   	//  checkbox was checked  	//  and storage is allowed   	//  and flow == implicit  	if (validatedRequest.Application.AllowRememberConsentDecision && validatedRequest.ResponseType == OAuthConstants.ResponseTypes.Token && rememberDuration == -1) {  		var handle = StoredGrant.CreateConsentDecision (ClaimsPrincipal.Current.GetSubject ()' validatedRequest.Client' validatedRequest.Application' validatedRequest.Scopes);  		_handleManager.Add (handle);  		Tracing.Information ("Consent decision stored.");  	}  	// parse refresh token lifetime if   	// code flow is used   	// and refresh tokens are allowed  	if (validatedRequest.RequestingRefreshToken && rememberDuration != null && validatedRequest.Client.Flow == OAuthFlow.Code) {  		if (rememberDuration == -1) {  			validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears (50);  		} else {  			validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddHours (rememberDuration.Value);  		}  		Tracing.Information ("Selected refresh token lifetime in hours: " + rememberDuration);  	}  	var grantResult = PerformGrant (validatedRequest);  	if (grantResult != null)  		return grantResult;  }  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The following statement contains a magic number: if (validatedRequest.RequestingRefreshToken && rememberDuration != null && validatedRequest.Client.Flow == OAuthFlow.Code) {  	if (rememberDuration == -1) {  		validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears (50);  	} else {  		validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddHours (rememberDuration.Value);  	}  	Tracing.Information ("Selected refresh token lifetime in hours: " + rememberDuration);  }  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The following statement contains a magic number: if (rememberDuration == -1) {  	validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears (50);  } else {  	validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddHours (rememberDuration.Value);  }  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The following statement contains a magic number: validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears (50);  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,TokenController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,ProcessResourceOwnerCredentialRequest,The following statement contains a magic number: if (principal != null && principal.Identity.IsAuthenticated) {  	var sts = new TokenService (this._config.GlobalConfiguration);  	var response = sts.CreateTokenResponse (validatedRequest' principal);  	// check if refresh token is enabled for the client  	if (validatedRequest.Client.AllowRefreshToken && validatedRequest.Application.AllowRefreshToken) {  		var handle = StoredGrant.CreateRefreshTokenHandle (principal.GetSubject ()' validatedRequest.Client' validatedRequest.Application' principal.Claims' validatedRequest.Scopes' DateTime.UtcNow.AddYears (5));  		_handleManager.Add (handle);  		response.RefreshToken = handle.GrantId;  	}  	return Request.CreateTokenResponse (response);  } else {  	return Request.CreateOAuthErrorResponse (OAuthConstants.Errors.InvalidGrant);  }  
Magic Number,Thinktecture.AuthorizationServer.OAuth2,TokenController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,ProcessResourceOwnerCredentialRequest,The following statement contains a magic number: if (validatedRequest.Client.AllowRefreshToken && validatedRequest.Application.AllowRefreshToken) {  	var handle = StoredGrant.CreateRefreshTokenHandle (principal.GetSubject ()' validatedRequest.Client' validatedRequest.Application' principal.Claims' validatedRequest.Scopes' DateTime.UtcNow.AddYears (5));  	_handleManager.Add (handle);  	response.RefreshToken = handle.GrantId;  }  
Missing Default,Thinktecture.AuthorizationServer.OAuth2,TokenController,F:\newReposMay17\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,Post,The following switch statement is missing a default case: switch (validatedRequest.GrantType) {  case OAuthConstants.GrantTypes.Password:  	return ProcessResourceOwnerCredentialRequest (validatedRequest);  case OAuthConstants.GrantTypes.AuthorizationCode:  	return ProcessAuthorizationCodeRequest (validatedRequest);  case OAuthConstants.GrantTypes.RefreshToken:  	return ProcessRefreshTokenRequest (validatedRequest);  case OAuthConstants.GrantTypes.ClientCredentials:  	return ProcessClientCredentialsRequest (validatedRequest);  case OAuthConstants.GrantTypes.Assertion:  	return ProcessAssertionGrant (validatedRequest);  }  
