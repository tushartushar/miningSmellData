Implementation smell,Namespace,Class,File,Method,Description
Long Method,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,The method has 117 lines of code.
Complex Method,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,Cyclomatic complexity of the method is 9
Complex Method,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,Validate,Cyclomatic complexity of the method is 12
Complex Method,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,Cyclomatic complexity of the method is 8
Complex Method,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,Cyclomatic complexity of the method is 8
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The method has 5 parameters. Parameters: appName' button' scopes' request' rememberDuration
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,TokenController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,TokenController,The method has 5 parameters. Parameters: rocv' config' handleManager' assertionGrantValidator' tokenService
Long Parameter List,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestClientException,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestClientException.cs,AuthorizeRequestClientException,The method has 5 parameters. Parameters: message' redirectUri' error' responseType' state
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The length of the statement  "                return new ClientErrorResult(new Uri(request.redirect_uri)' OAuthConstants.Errors.AccessDenied' request.response_type' request.state); " is 134.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,ClientErrorResult,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\ClientErrorResult.cs,ConstructErrorUrl,The length of the statement  "                url = string.Format("{0}{1}error={2}&state={3}"' redirectUri.AbsoluteUri' separator' error' WebUtility.UrlEncode(state)); " is 121.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,AuthorizeRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\AuthorizeRequestValidator.cs,ValidateScopes,The length of the statement  "            if (validatedRequest.Application.Scopes.TryValidateScopes(validatedRequest.Client.ClientId' requestedScopes' out resultingScopes)) " is 130.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateRefreshTokenGrant,The length of the statement  "                    string.Format("Client {0} is trying to refresh token from {1}."' validatedRequest.Client.ClientId' handle.Client.ClientId)' " is 123.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "                    string.Format("Client {0} is trying to request token using an authorization code from {1}."' validatedRequest.Client.ClientId' handle.Client.ClientId)' " is 151.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateCodeGrant,The length of the statement  "                    string.Format("Redirect URI in token request ({0})' does not match redirect URI from authorize request ({1})"' validatedRequest.RedirectUri' handle.RedirectUri)' " is 161.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,ValidateScopes,The length of the statement  "            if (validatedRequest.Application.Scopes.TryValidateScopes(validatedRequest.Client.ClientId' requestedScopes' out resultingScopes)) " is 130.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,Extensions,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\Extensions.cs,AuthorizeValidationError,The length of the statement  "                return new ClientErrorResult(clientException.RedirectUri' clientException.Error' clientException.ResponseType' clientException.State); " is 134.
Long Statement,Thinktecture.AuthorizationServer.OAuth2,WSTrustResourceOwnerCredentialValidation,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\WSTrustResourceOwnerCredentialValidation.cs,Validate,The length of the statement  "            return FederatedAuthentication.FederationConfiguration.IdentityConfiguration.ClaimsAuthenticationManager.Authenticate("ResourceOwnerPasswordValidation"' principal); " is 164.
Complex Conditional,Thinktecture.AuthorizationServer.OAuth2,TokenRequestValidator,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Validation\TokenRequestValidator.cs,Validate,The conditional expression  "request.Grant_Type == OAuthConstants.GrantTypes.AuthorizationCode ||                  request.Grant_Type == OAuthConstants.GrantTypes.ClientCredentials ||                  request.Grant_Type == OAuthConstants.GrantTypes.RefreshToken ||                  request.Grant_Type == OAuthConstants.GrantTypes.Password"  is complex.
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,Index,The following statement contains a magic number: validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears(50);
Magic Number,Thinktecture.AuthorizationServer.OAuth2,AuthorizeController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\AuthorizeController.cs,HandleConsentResponse,The following statement contains a magic number: if (button == "yes")              {                  Tracing.Information("User allows access token request.");                    ValidatedRequest validatedRequest;                  try                  {                      validatedRequest = new AuthorizeRequestValidator().Validate(application' request);                  }                  catch (AuthorizeRequestValidationException ex)                  {                      Tracing.Error("Aborting OAuth2 authorization request");                      return this.AuthorizeValidationError(ex);                  }                    if (scopes == null || scopes.Length == 0)                  {                      ModelState.AddModelError(""' "Please choose at least one permission.");                      return View("Consent"' validatedRequest);                  }                    // parse scopes form post and substitue scopes                  validatedRequest.Scopes.RemoveAll(x => !scopes.Contains(x.Name));                    // store consent decision if                   //  checkbox was checked                  //  and storage is allowed                   //  and flow == implicit                  if (validatedRequest.Application.AllowRememberConsentDecision &&                      validatedRequest.ResponseType == OAuthConstants.ResponseTypes.Token &&                      rememberDuration == -1)                  {                      var handle = StoredGrant.CreateConsentDecision(                          ClaimsPrincipal.Current.GetSubject()'                          validatedRequest.Client'                          validatedRequest.Application'                          validatedRequest.Scopes);                        _handleManager.Add(handle);                        Tracing.Information("Consent decision stored.");                  }                    // parse refresh token lifetime if                   // code flow is used                   // and refresh tokens are allowed                  if (validatedRequest.RequestingRefreshToken &&                      rememberDuration != null &&                      validatedRequest.Client.Flow == OAuthFlow.Code)                  {                      if (rememberDuration == -1)                      {                          validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddYears(50);                      }                      else                      {                          validatedRequest.RequestedRefreshTokenExpiration = DateTime.UtcNow.AddHours(rememberDuration.Value);                      }                        Tracing.Information("Selected refresh token lifetime in hours: " + rememberDuration);                  }                    var grantResult = PerformGrant(validatedRequest);                  if (grantResult != null) return grantResult;              }
Magic Number,Thinktecture.AuthorizationServer.OAuth2,TokenController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,ProcessResourceOwnerCredentialRequest,The following statement contains a magic number: if (principal != null && principal.Identity.IsAuthenticated)              {                  var sts = new TokenService(this._config.GlobalConfiguration);                  var response = sts.CreateTokenResponse(validatedRequest' principal);                    // check if refresh token is enabled for the client                  if (validatedRequest.Client.AllowRefreshToken && validatedRequest.Application.AllowRefreshToken)                  {                      var handle = StoredGrant.CreateRefreshTokenHandle(                          principal.GetSubject()'                          validatedRequest.Client'                          validatedRequest.Application'                          principal.Claims'                          validatedRequest.Scopes'                          DateTime.UtcNow.AddYears(5));                        _handleManager.Add(handle);                      response.RefreshToken = handle.GrantId;                  }                    return Request.CreateTokenResponse(response);              }              else              {                  return Request.CreateOAuthErrorResponse(OAuthConstants.Errors.InvalidGrant);              }
Missing Default,Thinktecture.AuthorizationServer.OAuth2,TokenController,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.OAuth2\Endpoints\TokenController.cs,Post,The following switch statement is missing a default case: switch (validatedRequest.GrantType)              {                  case OAuthConstants.GrantTypes.Password:                      return ProcessResourceOwnerCredentialRequest(validatedRequest);                  case OAuthConstants.GrantTypes.AuthorizationCode:                      return ProcessAuthorizationCodeRequest(validatedRequest);                  case OAuthConstants.GrantTypes.RefreshToken:                      return ProcessRefreshTokenRequest(validatedRequest);                  case OAuthConstants.GrantTypes.ClientCredentials:                      return ProcessClientCredentialsRequest(validatedRequest);                  case OAuthConstants.GrantTypes.Assertion:                      return ProcessAssertionGrant(validatedRequest);              }
