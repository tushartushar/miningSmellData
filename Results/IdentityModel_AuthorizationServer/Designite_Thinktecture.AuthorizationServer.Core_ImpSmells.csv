Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Thinktecture.AuthorizationServer.Interfaces,IStoredGrantManager,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\Interfaces\IStoredGrantManager.cs,Find,The method has 5 parameters. Parameters: subject' client' application' scopes' type
Long Parameter List,Thinktecture.AuthorizationServer.Models,StoredGrant,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\Models\StoredGrant.cs,CreateRefreshTokenHandle,The method has 6 parameters. Parameters: subject' client' application' claims' scopes' expiration
Long Parameter List,Thinktecture.AuthorizationServer.Models,StoredGrant,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\Models\StoredGrant.cs,CreateAuthorizationCode,The method has 8 parameters. Parameters: client' application' redirectUri' claims' scopes' createRefreshToken' refreshTokenExpiration' expiration
Long Identifier,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,,The length of the parameter RequiredEncryptionKeyByteLength is 31.
Long Identifier,Thinktecture.AuthorizationServer,TokenService,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\TokenService.cs,TokenService,The length of the parameter authorizationServerConfiguration is 32.
Long Statement,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The length of the statement  "            if (confidentialityKey.Length != RequiredEncryptionKeyByteLength * 2) throw new ArgumentException("Invalid Confidentiality Key. It must be 256 bits or 64 hex characters."); " is 172.
Long Statement,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The length of the statement  "            if (validationKey.Length != RequiredSigningKeyByteLength * 2) throw new ArgumentException("Invalid Confidentiality Key. It must be 128 bytes or 256 hex characters."); " is 166.
Long Statement,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The length of the statement  "            if (this.encryptionKey == null) throw new ArgumentException("Invalid Confidentiality Key. It must be 256 bits or 64 hex characters."); " is 134.
Long Statement,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The length of the statement  "            if (this.signingKey == null) throw new ArgumentException("Invalid Confidentiality Key. It must be 128 bytes or 256 hex characters."); " is 133.
Long Statement,Thinktecture.AuthorizationServer,Tracing,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\Tracing.cs,ErrorVerbose,The length of the statement  "            TraceEventFormat(TraceEventType.Error' "{0}\n\nMethod: {1}\nFilename: {2}\nLine number: {3}"' message' memberName' filePath' lineNumber); " is 137.
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The following statement contains a magic number: if (confidentialityKey.Length != RequiredEncryptionKeyByteLength * 2) throw new ArgumentException("Invalid Confidentiality Key. It must be 256 bits or 64 hex characters.");
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,SetKeys,The following statement contains a magic number: if (validationKey.Length != RequiredSigningKeyByteLength * 2) throw new ArgumentException("Invalid Confidentiality Key. It must be 128 bytes or 256 hex characters.");
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,BytesFromHexString,The following statement contains a magic number: if ((data == null) || ((data.Length % 2) != 0))              {                  return null;              }
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,BytesFromHexString,The following statement contains a magic number: byte[] buffer = new byte[data.Length / 2];
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,BytesFromHexString,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++)              {                  int num2 = HexToInt(data[2 * i]);                  int num3 = HexToInt(data[(2 * i) + 1]);                  if ((num2 == -1) || (num3 == -1))                  {                      return null;                  }                  buffer[i] = (byte)((num2 << 4) | num3);              }
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,BytesFromHexString,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++)              {                  int num2 = HexToInt(data[2 * i]);                  int num3 = HexToInt(data[(2 * i) + 1]);                  if ((num2 == -1) || (num3 == -1))                  {                      return null;                  }                  buffer[i] = (byte)((num2 << 4) | num3);              }
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,BytesFromHexString,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++)              {                  int num2 = HexToInt(data[2 * i]);                  int num3 = HexToInt(data[(2 * i) + 1]);                  if ((num2 == -1) || (num3 == -1))                  {                      return null;                  }                  buffer[i] = (byte)((num2 << 4) | num3);              }
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,HexToInt,The following statement contains a magic number: if ((h >= 'a') && (h <= 'f'))              {                  return ((h - 'a') + 10);              }
Magic Number,Thinktecture.AuthorizationServer,KeyProtection,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\DataProtectection\KeyProtection.cs,HexToInt,The following statement contains a magic number: if ((h >= 'A') && (h <= 'F'))              {                  return ((h - 'A') + 10);              }
Magic Number,Thinktecture.AuthorizationServer,TokenService,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\TokenService.cs,CreateTokenResponse,The following statement contains a magic number: try              {                  var claims = CreateClaims(request' resourceOwner);                  var token = CreateToken(request' claims);                    return new TokenResponse                  {                      AccessToken = WriteToken(token)'                      ExpiresIn = request.Application.TokenLifetime * 60'                      TokenType = "Bearer"                  };              }              catch (Exception ex)              {                  Tracing.Error(ex.ToString());                  throw;              }
Magic Number,Thinktecture.AuthorizationServer.Models,StoredGrant,C:\repos\IdentityModel_AuthorizationServer\source\Libraries\Thinktecture.AuthorizationServer.Core\Models\StoredGrant.cs,CreateConsentDecision,The following statement contains a magic number: return new StoredGrant              {                  Type = StoredGrantType.ConsentDecision'                  Subject = subject'                  Client = client'                  Application = application'                   Scopes = scopes.ToList()'                  Created = DateTime.UtcNow'                  Expiration = DateTime.UtcNow.AddYears(5)              };
