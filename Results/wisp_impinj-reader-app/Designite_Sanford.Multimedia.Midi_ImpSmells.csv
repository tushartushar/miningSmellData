Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The method has 117 lines of code.
Long Method,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The method has 131 lines of code.
Long Method,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The method has 121 lines of code.
Complex Method,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,HandleMessage,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,HandleShortMessage,Cyclomatic complexity of the method is 9
Complex Method,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,StartRecording,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,Cyclomatic complexity of the method is 32
Complex Method,Sanford.Multimedia.Midi,MetaMessage,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MetaMessage.cs,ValidateDataLength,Cyclomatic complexity of the method is 13
Complex Method,Sanford.Multimedia.Midi,ChannelChaser,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelChaser.cs,Chase,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,Sanford.Multimedia.Midi,MidiFileProperties,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\MidiFileProperties.cs,FindHeader,Cyclomatic complexity of the method is 9
Complex Method,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,Merge,Cyclomatic complexity of the method is 11
Complex Method,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,GetMidiEvent,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,Move,Cyclomatic complexity of the method is 14
Complex Method,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TickIterator,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Sanford.Multimedia.Midi,MessageDispatcher,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MessageDispatcher.cs,Dispatch,Cyclomatic complexity of the method is 12
Complex Method,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PressPianoKey,Cyclomatic complexity of the method is 15
Long Parameter List,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,HandleMessage,The method has 5 parameters. Parameters: handle' msg' instance' param1' param2
Long Parameter List,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,midiInOpen,The method has 5 parameters. Parameters: handle' deviceID' proc' instance' flags
Long Parameter List,Sanford.Multimedia.Midi,OutputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputDevice.cs,midiOutOpen,The method has 5 parameters. Parameters: handle' deviceID' proc' instance' flags
Long Parameter List,Sanford.Multimedia.Midi,OutputDeviceBase,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputDeviceBase.cs,HandleMessage,The method has 5 parameters. Parameters: handle' msg' instance' param1' param2
Long Parameter List,Sanford.Multimedia.Midi,OutputStream,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputStream.cs,midiStreamOpen,The method has 6 parameters. Parameters: handle' deviceID' reserved' proc' instance' flag
Long Parameter List,Sanford.Multimedia.Midi,OutputStream,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputStream.cs,HandleMessage,The method has 5 parameters. Parameters: handle' msg' instance' param1' param2
Long Identifier,Sanford.Multimedia.Midi,TimeSignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\TimeSignatureBuilder.cs,,The length of the parameter DefaultClocksPerMetronomeClick is 30.
Long Identifier,Sanford.Multimedia.Midi,TimeSignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\TimeSignatureBuilder.cs,,The length of the parameter DefaultThirtySecondNotesPerQuarterNote is 38.
Long Statement,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The length of the statement  "            this.inputComboBox.AccessibleDescription = "Chooses the MIDI input device to use for receiving sample dump standard messages." + " is 128.
Long Statement,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The length of the statement  "            this.outputComboBox.AccessibleDescription = "Chooses the MIDI output device to use for sending sample dump standard messages."; " is 127.
Long Statement,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The length of the statement  "            this.inputComboBox.AccessibleDescription = "Chooses the MIDI input device to use for sending sample dump standard messages."; " is 125.
Long Statement,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The length of the statement  "            this.outputComboBox.AccessibleDescription = "Chooses the MIDI output device to use for sending sample dump standard messages."; " is 127.
Complex Conditional,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,HandleShortMessage,The conditional expression  "status == (int)SysCommonType.MidiTimeCode ||                  status == (int)SysCommonType.SongPositionPointer ||                  status == (int)SysCommonType.SongSelect ||                  status == (int)SysCommonType.TuneRequest"  is complex.
Complex Conditional,Sanford.Multimedia.Midi,MetaTextBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\MetaTextBuilder.cs,IsTextType,The conditional expression  "type == MetaType.Copyright ||                   type == MetaType.CuePoint ||                  type == MetaType.DeviceName ||                  type == MetaType.InstrumentName ||                  type == MetaType.Lyric ||                  type == MetaType.Marker ||                  type == MetaType.ProgramName ||                  type == MetaType.Text ||                  type == MetaType.TrackName"  is complex.
Complex Conditional,Sanford.Multimedia.Midi.UI,PianoKey,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.PianoKey.cs,OnMouseMove,The conditional expression  "e.X < 0 || e.X > Width || e.Y < 0 || e.Y > Height"  is complex.
Virtual Method Call from Constructor,Sanford.Multimedia.Midi,Sequencer,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Sequencer.cs,Sequencer,The constructor "Sequencer" calls a virtual method "OnPlayingCompleted".
Magic Number,Sanford.Multimedia.Midi,OutputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputDevice.cs,Send,The following statement contains a magic number: Send(message.Message >> 8);
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following statement contains a magic number: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following statement contains a magic number: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Magic Number,Sanford.Multimedia.Midi,MetaMessage,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MetaMessage.cs,CalculateHashCode,The following statement contains a magic number: hashCode ^= data[i] << Shift * 2;
Magic Number,Sanford.Multimedia.Midi,MetaMessage,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MetaMessage.cs,ValidateDataLength,The following statement contains a magic number: switch(type)              {                  case MetaType.SequenceNumber:                      if(length != 0 || length != 2)                      {                          result = false;                      }                      break;                    case MetaType.EndOfTrack:                      if(length != 0)                      {                          result = false;                      }                      break;                    case MetaType.Tempo:                      if(length != TempoLength)                      {                          result = false;                      }                      break;                    case MetaType.SmpteOffset:                      if(length != SmpteOffsetLength)                      {                          result = false;                      }                      break;                    case MetaType.TimeSignature:                      if(length != TimeSigLength)                      {                          result = false;                      }                      break;                    case MetaType.KeySignature:                      if(length != KeySigLength)                      {                          result = false;                      }                      break;                    default:                      result = true;                      break;              }
Magic Number,Sanford.Multimedia.Midi,ShortMessage,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\ShortMessage.cs,PackData2,The following statement contains a magic number: return (message & Data2Mask) | (data2 << (Shift * 2));
Magic Number,Sanford.Multimedia.Midi,ShortMessage,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\ShortMessage.cs,UnpackData2,The following statement contains a magic number: return (message & ~Data2Mask) >> (Shift * 2);
Magic Number,Sanford.Multimedia.Midi,MidiNoteConverter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\MidiNoteConverter.cs,MidiNoteConverter,The following statement contains a magic number: int notesPerOctave = 12;
Magic Number,Sanford.Multimedia.Midi,MidiNoteConverter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\MidiNoteConverter.cs,MidiNoteConverter,The following statement contains a magic number: double referenceFrequency = 440;
Magic Number,Sanford.Multimedia.Midi,MidiNoteConverter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\MidiNoteConverter.cs,MidiNoteConverter,The following statement contains a magic number: int referenceNoteID = 69;
Magic Number,Sanford.Multimedia.Midi,MidiNoteConverter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\MidiNoteConverter.cs,MidiNoteConverter,The following statement contains a magic number: NoteToFrequencyTable[i] = referenceFrequency * Math.Pow(2.0' exponent);
Magic Number,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,The following statement contains a magic number: switch(message.Command)              {                  case ChannelCommand.NoteOn:                      if(message.Data2 > 0)                      {                          noteOnMessage[message.MidiChannel' message.Data1] = message;                      }                      else                      {                          noteOnMessage[message.MidiChannel' message.Data1] = null;                      }                      break;                    case ChannelCommand.NoteOff:                      noteOnMessage[message.MidiChannel' message.Data1] = null;                      break;                    case ChannelCommand.Controller:                      switch(message.Data1)                      {                          case (int)ControllerType.HoldPedal1:                              if(message.Data2 > 63)                              {                                  holdPedal1Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal1Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.HoldPedal2:                              if(message.Data2 > 63)                              {                                  holdPedal2Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal2Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.SustenutoPedal:                              if(message.Data2 > 63)                              {                                  sustenutoMessage[message.MidiChannel] = true;                              }                              else                              {                                  sustenutoMessage[message.MidiChannel] = false;                              }                              break;                      }                      break;              }
Magic Number,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,The following statement contains a magic number: switch(message.Command)              {                  case ChannelCommand.NoteOn:                      if(message.Data2 > 0)                      {                          noteOnMessage[message.MidiChannel' message.Data1] = message;                      }                      else                      {                          noteOnMessage[message.MidiChannel' message.Data1] = null;                      }                      break;                    case ChannelCommand.NoteOff:                      noteOnMessage[message.MidiChannel' message.Data1] = null;                      break;                    case ChannelCommand.Controller:                      switch(message.Data1)                      {                          case (int)ControllerType.HoldPedal1:                              if(message.Data2 > 63)                              {                                  holdPedal1Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal1Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.HoldPedal2:                              if(message.Data2 > 63)                              {                                  holdPedal2Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal2Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.SustenutoPedal:                              if(message.Data2 > 63)                              {                                  sustenutoMessage[message.MidiChannel] = true;                              }                              else                              {                                  sustenutoMessage[message.MidiChannel] = false;                              }                              break;                      }                      break;              }
Magic Number,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,The following statement contains a magic number: switch(message.Command)              {                  case ChannelCommand.NoteOn:                      if(message.Data2 > 0)                      {                          noteOnMessage[message.MidiChannel' message.Data1] = message;                      }                      else                      {                          noteOnMessage[message.MidiChannel' message.Data1] = null;                      }                      break;                    case ChannelCommand.NoteOff:                      noteOnMessage[message.MidiChannel' message.Data1] = null;                      break;                    case ChannelCommand.Controller:                      switch(message.Data1)                      {                          case (int)ControllerType.HoldPedal1:                              if(message.Data2 > 63)                              {                                  holdPedal1Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal1Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.HoldPedal2:                              if(message.Data2 > 63)                              {                                  holdPedal2Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal2Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.SustenutoPedal:                              if(message.Data2 > 63)                              {                                  sustenutoMessage[message.MidiChannel] = true;                              }                              else                              {                                  sustenutoMessage[message.MidiChannel] = false;                              }                              break;                      }                      break;              }
Magic Number,Sanford.Multimedia.Midi,MidiFileProperties,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\MidiFileProperties.cs,FindHeader,The following statement contains a magic number: i < 4
Magic Number,Sanford.Multimedia.Midi,MidiFileProperties,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\MidiFileProperties.cs,AssertValid,The following statement contains a magic number: Debug.Assert(Format == 1 || Format == 2);
Magic Number,Sanford.Multimedia.Midi,Sequence,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Sequence.cs,LoadDoWork,The following statement contains a magic number: loadWorker.ReportProgress((int)(100 * percentage));
Magic Number,Sanford.Multimedia.Midi,Sequence,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Sequence.cs,SaveDoWork,The following statement contains a magic number: saveWorker.ReportProgress((int)(100 * percentage));
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestInsert,The following statement contains a magic number: int midiEventCount = 2000;
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestInsert,The following statement contains a magic number: int positionMax = 32000;
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestInsert,The following statement contains a magic number: int endOfTrackOffset = 1000;
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestInsert,The following statement contains a magic number: ChannelMessage message = new ChannelMessage(ChannelCommand.NoteOff' 0' 60' 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: ChannelMessage message = new ChannelMessage(ChannelCommand.NoteOff' 0' 60' 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: a.Insert(10' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: a.Insert(20' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: a.Insert(30' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: a.Insert(40' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: a.RemoveAt(a.Count - 2);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: Debug.Assert(a.Count == count - 2);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(0).AbsoluteTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(a.Count - 2).AbsoluteTicks == 30);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestRemoveAt,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(a.Count - 2).AbsoluteTicks == 30);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: ChannelMessage message = new ChannelMessage(ChannelCommand.NoteOff' 0' 60' 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: b.Insert(10' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: b.Insert(20' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: b.Insert(30' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: b.Insert(40' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: a.Insert(10' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: a.Insert(20' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: a.Insert(30' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: a.Insert(40' message);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(2).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(2).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(3).DeltaTicks == 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(4).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(4).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(5).DeltaTicks == 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(6).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(6).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(7).DeltaTicks == 0);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(8).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(8).DeltaTicks == 10);
Magic Number,Sanford.Multimedia.Midi,Track,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\Track.cs,TestMerge,The following statement contains a magic number: Debug.Assert(a.GetMidiEvent(9).DeltaTicks == 0);
Magic Number,Sanford.Multimedia.Midi,TrackReader,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackReader.cs,GetTrackLength,The following statement contains a magic number: byte[] trackLength = new byte[4];
Magic Number,Sanford.Multimedia.Midi,TrackReader,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackReader.cs,ParseChannelMessage,The following statement contains a magic number: ChannelMessage.DataBytesPerType(cmBuilder.Command) == 2
Magic Number,Sanford.Multimedia.Midi,TrackReader,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackReader.cs,ReadVariableLengthValue,The following statement contains a magic number: result <<= 7;
Magic Number,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,WriteVariableLengthValue,The following statement contains a magic number: byte[] array = new byte[4];
Magic Number,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,WriteVariableLengthValue,The following statement contains a magic number: v >>= 7;
Magic Number,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,WriteVariableLengthValue,The following statement contains a magic number: v >>= 7;
Magic Number,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,Write,The following statement contains a magic number: ChannelMessage.DataBytesPerType(message.Command) == 2
Magic Number,Sanford.Multimedia.Midi,OutputStream,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputStream.cs,Write,The following statement contains a magic number: sysExData = new byte[message.Length + (message.Length % 4)];
Magic Number,Sanford.Multimedia.Midi,OutputStream,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputStream.cs,Write,The following statement contains a magic number: message.Length % 4 != 0
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(12' 122);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(12' 122);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(123' 122);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(123' 122);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Location = new System.Drawing.Point(12' 25);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Location = new System.Drawing.Point(12' 25);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.TabIndex = 2;
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Location = new System.Drawing.Point(12' 72);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Location = new System.Drawing.Point(12' 72);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.TabIndex = 3;
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Location = new System.Drawing.Point(83' 9);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Location = new System.Drawing.Point(83' 9);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Size = new System.Drawing.Size(31' 13);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Size = new System.Drawing.Size(31' 13);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.TabIndex = 4;
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Location = new System.Drawing.Point(83' 56);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Location = new System.Drawing.Point(83' 56);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Size = new System.Drawing.Size(39' 13);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Size = new System.Drawing.Size(39' 13);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.TabIndex = 5;
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(217' 157);
Magic Number,Sanford.Multimedia.Midi.UI,DeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\DeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(217' 157);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Location = new System.Drawing.Point(84' 9);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Location = new System.Drawing.Point(84' 9);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Size = new System.Drawing.Size(31' 13);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.Size = new System.Drawing.Size(31' 13);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputLabel.TabIndex = 13;
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Location = new System.Drawing.Point(13' 25);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Location = new System.Drawing.Point(13' 25);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.inputComboBox.TabIndex = 12;
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(124' 75);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(124' 75);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 11;
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(13' 75);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(13' 75);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 10;
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(218' 114);
Magic Number,Sanford.Multimedia.Midi.UI,InputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\InputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(218' 114);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Location = new System.Drawing.Point(84' 9);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Location = new System.Drawing.Point(84' 9);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Size = new System.Drawing.Size(39' 13);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.Size = new System.Drawing.Size(39' 13);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputLabel.TabIndex = 9;
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Location = new System.Drawing.Point(13' 25);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Location = new System.Drawing.Point(13' 25);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.Size = new System.Drawing.Size(186' 21);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.outputComboBox.TabIndex = 8;
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(124' 75);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(124' 75);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 7;
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(13' 75);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(13' 75);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 6;
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(218' 114);
Magic Number,Sanford.Multimedia.Midi.UI,OutputDeviceDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\OutputDeviceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(218' 114);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.S' 2);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.E' 3);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.D' 4);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.F' 5);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.T' 6);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.G' 7);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.Y' 8);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.H' 9);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.U' 10);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.J' 11);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.K' 12);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.O' 13);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.L' 14);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PianoControl,The following statement contains a magic number: keyTable.Add(Keys.P' 15);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,InitializePianoKeys,The following statement contains a magic number: int offset = whiteKeyWidth - blackKeyWidth / 2;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,PressPianoKey,The following statement contains a magic number: int noteID = (int)keyTable[k] + 12 * octaveOffset;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControl,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControl.cs,ReleasePianoKey,The following statement contains a magic number: int noteID = (int)keyTable[k] + 12 * octaveOffset;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(18' 117);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(18' 117);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(142' 117);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(142' 117);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Location = new System.Drawing.Point(6' 43);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Location = new System.Drawing.Point(6' 43);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Maximum = new decimal(new int[] {              127'              0'              0'              0});
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.TabIndex = 4;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDNumericUpDown.Value = new decimal(new int[] {              21'              0'              0'              0});
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.noteRangeGroupBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.noteRangeGroupBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.noteRangeGroupBox.Size = new System.Drawing.Size(211' 88);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.noteRangeGroupBox.Size = new System.Drawing.Size(211' 88);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.noteRangeGroupBox.TabIndex = 5;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDLabel.Location = new System.Drawing.Point(150' 27);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDLabel.Location = new System.Drawing.Point(150' 27);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDLabel.Size = new System.Drawing.Size(55' 13);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDLabel.Size = new System.Drawing.Size(55' 13);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDLabel.TabIndex = 7;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDLabel.Location = new System.Drawing.Point(12' 27);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDLabel.Location = new System.Drawing.Point(12' 27);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDLabel.Size = new System.Drawing.Size(53' 13);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDLabel.Size = new System.Drawing.Size(53' 13);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.lowNoteIDLabel.TabIndex = 6;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Location = new System.Drawing.Point(145' 43);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Location = new System.Drawing.Point(145' 43);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Maximum = new decimal(new int[] {              127'              0'              0'              0});
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.TabIndex = 5;
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.highNoteIDNumericUpDown.Value = new decimal(new int[] {              109'              0'              0'              0});
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(235' 155);
Magic Number,Sanford.Multimedia.Midi.UI,PianoControlDialog,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\UI\PianoControlDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(235' 155);
Missing Default,Sanford.Multimedia.Midi,InputDevice,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\InputDevice Class\InputDevice.Construction.cs,HandleShortMessage,The following switch statement is missing a default case: switch((SysRealtimeType)status)                  {                      case SysRealtimeType.ActiveSense:                          e = SysRealtimeMessageEventArgs.ActiveSense;                          break;                        case SysRealtimeType.Clock:                          e = SysRealtimeMessageEventArgs.Clock;                          break;                        case SysRealtimeType.Continue:                          e = SysRealtimeMessageEventArgs.Continue;                          break;                        case SysRealtimeType.Reset:                          e = SysRealtimeMessageEventArgs.Reset;                          break;                        case SysRealtimeType.Start:                          e = SysRealtimeMessageEventArgs.Start;                          break;                        case SysRealtimeType.Stop:                          e = SysRealtimeMessageEventArgs.Stop;                          break;                        case SysRealtimeType.Tick:                          e = SysRealtimeMessageEventArgs.Tick;                          break;                  }
Missing Default,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following switch statement is missing a default case: switch(b)                  {                      case -7:                          key = Key.CFlatMajor;                          break;                        case -6:                          key = Key.GFlatMajor;                          break;                        case -5:                          key = Key.DFlatMajor;                          break;                        case -4:                          key = Key.AFlatMajor;                          break;                        case -3:                          key = Key.EFlatMajor;                          break;                        case -2:                          key = Key.BFlatMajor;                          break;                        case -1:                          key = Key.FMajor;                          break;                        case 0:                          key = Key.CMajor;                          break;                        case 1:                          key = Key.GMajor;                          break;                        case 2:                          key = Key.DMajor;                          break;                        case 3:                          key = Key.AMajor;                          break;                        case 4:                          key = Key.EMajor;                          break;                        case 5:                          key = Key.BMajor;                          break;                        case 6:                          key = Key.FSharpMajor;                          break;                        case 7:                          key = Key.CSharpMajor;                          break;                  }
Missing Default,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Initialize,The following switch statement is missing a default case: switch(b)                  {                      case -7:                          key = Key.AFlatMinor;                          break;                        case -6:                          key = Key.EFlatMinor;                          break;                        case -5:                          key = Key.BFlatMinor;                          break;                        case -4:                          key = Key.FMinor;                          break;                        case -3:                          key = Key.CMinor;                          break;                        case -2:                          key = Key.GMinor;                          break;                        case -1:                          key = Key.DMinor;                          break;                        case 0:                          key = Key.AMinor;                          break;                        case 1:                          key = Key.EMinor;                          break;                        case 2:                          key = Key.BMinor;                          break;                        case 3:                          key = Key.FSharpMinor;                          break;                        case 4:                          key = Key.CSharpMinor;                          break;                        case 5:                          key = Key.GSharpMinor;                          break;                        case 6:                          key = Key.DSharpMinor;                          break;                        case 7:                          key = Key.ASharpMinor;                          break;                  }
Missing Default,Sanford.Multimedia.Midi,KeySignatureBuilder,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\Message Builders\KeySignatureBuilder.cs,Build,The following switch statement is missing a default case: switch(Key)                  {                      case Key.CFlatMajor:                          data[0] = (byte)-7;                          data[1] = 0;                          break;                        case Key.GFlatMajor:                          data[0] = (byte)-6;                          data[1] = 0;                          break;                        case Key.DFlatMajor:                          data[0] = (byte)-5;                          data[1] = 0;                          break;                        case Key.AFlatMajor:                          data[0] = (byte)-4;                          data[1] = 0;                          break;                        case Key.EFlatMajor:                          data[0] = (byte)-3;                          data[1] = 0;                          break;                        case Key.BFlatMajor:                          data[0] = (byte)-2;                          data[1] = 0;                          break;                        case Key.FMajor:                          data[0] = (byte)-1;                          data[1] = 0;                          break;                        case Key.CMajor:                          data[0] = 0;                          data[1] = 0;                          break;                        case Key.GMajor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.DMajor:                          data[0] = 2;                          data[1] = 0;                          break;                        case Key.AMajor:                          data[0] = 3;                          data[1] = 0;                          break;                        case Key.EMajor:                          data[0] = 4;                          data[1] = 0;                          break;                        case Key.BMajor:                          data[0] = 5;                          data[1] = 0;                          break;                        case Key.FSharpMajor:                          data[0] = 6;                          data[1] = 0;                          break;                        case Key.CSharpMajor:                          data[0] = 7;                          data[1] = 0;                          break;                        case Key.AFlatMinor:                          data[0] = (byte)-7;                          data[1] = 1;                          break;                        case Key.EFlatMinor:                          data[0] = (byte)-6;                          data[1] = 1;                          break;                        case Key.BFlatMinor:                          data[0] = (byte)-5;                          data[1] = 1;                          break;                        case Key.FMinor:                          data[0] = (byte)-4;                          data[1] = 1;                          break;                        case Key.CMinor:                          data[0] = (byte)-3;                          data[1] = 1;                          break;                        case Key.GMinor:                          data[0] = (byte)-2;                          data[1] = 1;                          break;                        case Key.DMinor:                          data[0] = (byte)-1;                          data[1] = 1;                          break;                        case Key.AMinor:                          data[0] = 1;                          data[1] = 0;                          break;                        case Key.EMinor:                          data[0] = 1;                          data[1] = 1;                          break;                        case Key.BMinor:                          data[0] = 2;                          data[1] = 1;                          break;                        case Key.FSharpMinor:                          data[0] = 3;                          data[1] = 1;                          break;                        case Key.CSharpMinor:                          data[0] = 4;                          data[1] = 1;                          break;                        case Key.GSharpMinor:                          data[0] = 5;                          data[1] = 1;                          break;                        case Key.DSharpMinor:                          data[0] = 6;                          data[1] = 1;                          break;                        case Key.ASharpMinor:                          data[0] = 7;                          data[1] = 1;                          break;                  }
Missing Default,Sanford.Multimedia.Midi,ChannelChaser,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelChaser.cs,Process,The following switch statement is missing a default case: switch(message.Command)              {                  case ChannelCommand.Controller:                      controllerMessages[message.MidiChannel' message.Data1] = message;                      break;                    case ChannelCommand.ChannelPressure:                      channelPressureMessages[message.MidiChannel] = message;                      break;                    case ChannelCommand.PitchWheel:                      pitchBendMessages[message.MidiChannel] = message;                      break;                    case ChannelCommand.PolyPressure:                      polyPressureMessages[message.MidiChannel] = message;                      break;                    case ChannelCommand.ProgramChange:                      programChangeMessages[message.MidiChannel] = message;                      break;              }
Missing Default,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,The following switch statement is missing a default case: switch(message.Command)              {                  case ChannelCommand.NoteOn:                      if(message.Data2 > 0)                      {                          noteOnMessage[message.MidiChannel' message.Data1] = message;                      }                      else                      {                          noteOnMessage[message.MidiChannel' message.Data1] = null;                      }                      break;                    case ChannelCommand.NoteOff:                      noteOnMessage[message.MidiChannel' message.Data1] = null;                      break;                    case ChannelCommand.Controller:                      switch(message.Data1)                      {                          case (int)ControllerType.HoldPedal1:                              if(message.Data2 > 63)                              {                                  holdPedal1Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal1Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.HoldPedal2:                              if(message.Data2 > 63)                              {                                  holdPedal2Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal2Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.SustenutoPedal:                              if(message.Data2 > 63)                              {                                  sustenutoMessage[message.MidiChannel] = true;                              }                              else                              {                                  sustenutoMessage[message.MidiChannel] = false;                              }                              break;                      }                      break;              }
Missing Default,Sanford.Multimedia.Midi,ChannelStopper,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Processing\ChannelStopper.cs,Process,The following switch statement is missing a default case: switch(message.Data1)                      {                          case (int)ControllerType.HoldPedal1:                              if(message.Data2 > 63)                              {                                  holdPedal1Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal1Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.HoldPedal2:                              if(message.Data2 > 63)                              {                                  holdPedal2Message[message.MidiChannel] = true;                              }                              else                              {                                  holdPedal2Message[message.MidiChannel] = false;                              }                              break;                            case (int)ControllerType.SustenutoPedal:                              if(message.Data2 > 63)                              {                                  sustenutoMessage[message.MidiChannel] = true;                              }                              else                              {                                  sustenutoMessage[message.MidiChannel] = false;                              }                              break;                      }
Missing Default,Sanford.Multimedia.Midi,TrackReader,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackReader.cs,ParseSysCommonMessage,The following switch statement is missing a default case: switch((SysCommonType)status)              {                  case SysCommonType.MidiTimeCode:                      scBuilder.Data1 = trackData[trackIndex];                      trackIndex++;                      break;                    case SysCommonType.SongPositionPointer:                      scBuilder.Data1 = trackData[trackIndex];                      trackIndex++;                        if(trackIndex >= trackData.Length)                      {                          throw new MidiFileException("End of track unexpectedly reached.");                      }                        scBuilder.Data2 = trackData[trackIndex];                      trackIndex++;                      break;                    case SysCommonType.SongSelect:                      scBuilder.Data1 = trackData[trackIndex];                      trackIndex++;                      break;                    case SysCommonType.TuneRequest:                      // Nothing to do here.                      break;              }
Missing Default,Sanford.Multimedia.Midi,TrackReader,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackReader.cs,ParseSysRealtimeMessage,The following switch statement is missing a default case: switch((SysRealtimeType)status)              {                  case SysRealtimeType.ActiveSense:                      e = SysRealtimeMessage.ActiveSenseMessage;                      break;                    case SysRealtimeType.Clock:                      e = SysRealtimeMessage.ClockMessage;                      break;                    case SysRealtimeType.Continue:                      e = SysRealtimeMessage.ContinueMessage;                      break;                    case SysRealtimeType.Reset:                      e = SysRealtimeMessage.ResetMessage;                      break;                    case SysRealtimeType.Start:                      e = SysRealtimeMessage.StartMessage;                      break;                    case SysRealtimeType.Stop:                      e = SysRealtimeMessage.StopMessage;                      break;                    case SysRealtimeType.Tick:                      e = SysRealtimeMessage.TickMessage;                      break;              }
Missing Default,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,Write,The following switch statement is missing a default case: switch(e.MidiMessage.MessageType)                  {                      case MessageType.Channel:                          Write((ChannelMessage)e.MidiMessage);                          break;                        case MessageType.SystemExclusive:                          Write((SysExMessage)e.MidiMessage);                          break;                        case MessageType.Meta:                          Write((MetaMessage)e.MidiMessage);                          break;                        case MessageType.SystemCommon:                          Write((SysCommonMessage)e.MidiMessage);                          break;                        case MessageType.SystemRealtime:                          Write((SysRealtimeMessage)e.MidiMessage);                          break;                  }
Missing Default,Sanford.Multimedia.Midi,TrackWriter,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Sequencing\Track Classes\TrackWriter.cs,Write,The following switch statement is missing a default case: switch(message.SysCommonType)              {                  case SysCommonType.MidiTimeCode:                      trackData.Add((byte)message.Data1);                      break;                    case SysCommonType.SongPositionPointer:                      trackData.Add((byte)message.Data1);                      trackData.Add((byte)message.Data2);                      break;                    case SysCommonType.SongSelect:                      trackData.Add((byte)message.Data1);                      break;              }
Missing Default,Sanford.Multimedia.Midi,OutputStream,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Device Classes\OutputDevice Classes\OutputStream.cs,Write,The following switch statement is missing a default case: switch(e.MidiMessage.MessageType)              {                  case MessageType.Channel:                  case MessageType.SystemCommon:                  case MessageType.SystemRealtime:                      Write(e.DeltaTicks' (ShortMessage)e.MidiMessage);                      break;                    case MessageType.SystemExclusive:                      Write(e.DeltaTicks' (SysExMessage)e.MidiMessage);                      break;                    case MessageType.Meta:                      Write(e.DeltaTicks' (MetaMessage)e.MidiMessage);                      break;              }
Missing Default,Sanford.Multimedia.Midi,MessageDispatcher,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MessageDispatcher.cs,Dispatch,The following switch statement is missing a default case: switch(message.MessageType)              {                  case MessageType.Channel:                      OnChannelMessageDispatched(new ChannelMessageEventArgs((ChannelMessage)message));                      break;                    case MessageType.SystemExclusive:                      OnSysExMessageDispatched(new SysExMessageEventArgs((SysExMessage)message));                      break;                    case MessageType.Meta:                      OnMetaMessageDispatched(new MetaMessageEventArgs((MetaMessage)message));                      break;                    case MessageType.SystemCommon:                      OnSysCommonMessageDispatched(new SysCommonMessageEventArgs((SysCommonMessage)message));                      break;                    case MessageType.SystemRealtime:                      switch(((SysRealtimeMessage)message).SysRealtimeType)                      {                          case SysRealtimeType.ActiveSense:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.ActiveSense);                              break;                            case SysRealtimeType.Clock:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Clock);                              break;                            case SysRealtimeType.Continue:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Continue);                              break;                            case SysRealtimeType.Reset:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Reset);                              break;                            case SysRealtimeType.Start:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Start);                              break;                            case SysRealtimeType.Stop:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Stop);                              break;                            case SysRealtimeType.Tick:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Tick);                              break;                      }                        break;              }
Missing Default,Sanford.Multimedia.Midi,MessageDispatcher,D:\research\architectureSmells\repos\wisp_impinj-reader-app\Sanford.Multimedia.Midi\Messages\MessageDispatcher.cs,Dispatch,The following switch statement is missing a default case: switch(((SysRealtimeMessage)message).SysRealtimeType)                      {                          case SysRealtimeType.ActiveSense:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.ActiveSense);                              break;                            case SysRealtimeType.Clock:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Clock);                              break;                            case SysRealtimeType.Continue:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Continue);                              break;                            case SysRealtimeType.Reset:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Reset);                              break;                            case SysRealtimeType.Start:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Start);                              break;                            case SysRealtimeType.Stop:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Stop);                              break;                            case SysRealtimeType.Tick:                              OnSysRealtimeMessageDispatched(SysRealtimeMessageEventArgs.Tick);                              break;                      }
