Implementation smell,Namespace,Class,File,Method,Description
Long Method,LLRP,LLRPEndPoint,C:\repos\wisp_impinj-reader-app\LLRP\LLRPEndPoint.cs,TransactMessage,The method has 144 lines of code.
Long Method,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has 163 lines of code.
Long Method,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has 135 lines of code.
Long Method,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has 118 lines of code.
Long Method,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has 150 lines of code.
Long Method,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has 132 lines of code.
Long Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The method has 121 lines of code.
Long Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has 243 lines of code.
Long Method,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has 155 lines of code.
Long Method,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has 140 lines of code.
Long Method,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,ProcesssMessage,The method has 242 lines of code.
Long Method,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has 110 lines of code.
Long Method,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The method has 140 lines of code.
Complex Method,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,CustomParamDecodeFactory,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,DecodeCustomParameter,Cyclomatic complexity of the method is 9
Complex Method,LLRP,CustomParamDecodeFactory,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,DecodeXmlNodeToCustomParameter,Cyclomatic complexity of the method is 8
Complex Method,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,Cyclomatic complexity of the method is 15
Complex Method,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,Cyclomatic complexity of the method is 19
Complex Method,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,Cyclomatic complexity of the method is 21
Complex Method,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,Cyclomatic complexity of the method is 33
Complex Method,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,Cyclomatic complexity of the method is 17
Complex Method,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,Cyclomatic complexity of the method is 22
Complex Method,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,Cyclomatic complexity of the method is 17
Complex Method,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,Cyclomatic complexity of the method is 27
Complex Method,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,Cyclomatic complexity of the method is 13
Complex Method,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 16
Complex Method,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 23
Complex Method,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 15
Complex Method,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 17
Complex Method,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 14
Complex Method,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 13
Complex Method,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 13
Complex Method,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 21
Complex Method,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 19
Complex Method,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 14
Complex Method,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 17
Complex Method,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 20
Complex Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 27
Complex Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 21
Complex Method,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 49
Complex Method,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 13
Complex Method,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 17
Complex Method,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 16
Complex Method,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 31
Complex Method,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 17
Complex Method,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 14
Complex Method,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 16
Complex Method,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,Cyclomatic complexity of the method is 12
Complex Method,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 9
Complex Method,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 11
Complex Method,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 10
Complex Method,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Complex Method,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,Cyclomatic complexity of the method is 8
Long Parameter List,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The method has 5 parameters. Parameters: bit_array' cursor' obj' type' field_len
Long Identifier,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_ReceiveSensitivityTableEntry is 35.
Long Identifier,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_PerAntennaReceiveSensitivityRange is 40.
Long Identifier,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumberOfAntennaSupported_len is 31.
Long Identifier,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter PerAntennaReceiveSensitivityRange is 33.
Long Identifier,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter ReceiveSensitivityIndexMin_len is 30.
Long Identifier,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter ReceiveSensitivityIndexMax_len is 30.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter CanReportBufferFillWarning_len is 30.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter SupportsClientRequestOpSpec_len is 31.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter CanDoTagInventoryStateAwareSingulation is 38.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter CanDoTagInventoryStateAwareSingulation_len is 42.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter SupportsEventAndReportHolding_len is 33.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumPriorityLevelsSupported_len is 33.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter ClientRequestOpSpecTimeout_len is 30.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumInventoryParameterSpecsPerAISpec is 38.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumInventoryParameterSpecsPerAISpec_len is 42.
Long Identifier,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumOpSpecsPerAccessSpec_len is 30.
Long Identifier,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_TransmitPowerLevelTableEntry is 35.
Long Identifier,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter LLRPConfigurationStateValue_len is 31.
Long Identifier,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter AirProtocolInventoryCommandSettings is 35.
Long Identifier,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter HoldEventsAndReportsUponReconnect is 33.
Long Identifier,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter HoldEventsAndReportsUponReconnect_len is 37.
Long Identifier,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter EnableInventoryParameterSpecID is 30.
Long Identifier,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter EnableInventoryParameterSpecID_len is 34.
Long Identifier,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_C1G2BlockEraseOpSpecResult is 33.
Long Identifier,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_C1G2BlockWriteOpSpecResult is 33.
Long Identifier,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_FrequencyRSSILevelEntry is 30.
Long Identifier,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter ReportBufferOverflowErrorEvent is 30.
Long Identifier,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter ReportBufferPercentageFull_len is 30.
Long Identifier,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter MaxNumSelectFiltersPerQuery_len is 31.
Long Identifier,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the parameter _param_C1G2UHFRFModeTableEntry is 30.
Long Identifier,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter C1G2TagInventoryStateAwareFilterAction is 38.
Long Identifier,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter C1G2TagInventoryStateUnawareFilterAction is 40.
Long Identifier,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,,The length of the parameter C1G2TagInventoryStateAwareSingulationAction is 43.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_GET_READER_CAPABILITIES is 30.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_GET_READER_CAPABILITIES_RESPONSE is 39.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_DISABLE_ROSPEC_RESPONSE is 30.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_ADD_ACCESSSPEC_RESPONSE is 30.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_DELETE_ACCESSSPEC_RESPONSE is 33.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_ENABLE_ACCESSSPEC_RESPONSE is 33.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_DISABLE_ACCESSSPEC_RESPONSE is 34.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_GET_ACCESSSPECS_RESPONSE is 31.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_GET_READER_CONFIG_RESPONSE is 33.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_SET_READER_CONFIG_RESPONSE is 33.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_CLOSE_CONNECTION_RESPONSE is 32.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_READER_EVENT_NOTIFICATION is 32.
Long Identifier,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,,The length of the parameter _event_ENABLE_EVENTS_AND_REPORTS is 32.
Long Statement,LLRP,LLRPEndPoint,C:\repos\wisp_impinj-reader-app\LLRP\LLRPEndPoint.cs,TransactMessage,The length of the statement  "                                MSG_GET_READER_CAPABILITIES_RESPONSE r_msg = MSG_GET_READER_CAPABILITIES_RESPONSE.FromBitArray(ref bArr' ref cursor' length); " is 125.
Long Statement,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<CUSTOM_MESSAGE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 125.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_READER_CAPABILITIES" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 134.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_C1G2LLRPCapabilities _param_C1G2LLRPCapabilities = PARAM_C1G2LLRPCapabilities.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            while ((_param_C1G2LLRPCapabilities = PARAM_C1G2LLRPCapabilities.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 122.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_READER_CAPABILITIES_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 143.
Long Statement,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ADD_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 121.
Long Statement,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ADD_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 130.
Long Statement,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DELETE_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 124.
Long Statement,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DELETE_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 133.
Long Statement,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<START_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 123.
Long Statement,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<START_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 132.
Long Statement,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<STOP_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 122.
Long Statement,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<STOP_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 131.
Long Statement,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ENABLE_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 124.
Long Statement,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ENABLE_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 133.
Long Statement,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DISABLE_ROSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 125.
Long Statement,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DISABLE_ROSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 134.
Long Statement,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_ROSPECS" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 122.
Long Statement,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_ROSpec = PARAM_ROSpec.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_ROSpec); " is 125.
Long Statement,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_ROSPECS_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 131.
Long Statement,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ADD_ACCESSSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 125.
Long Statement,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ADD_ACCESSSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 134.
Long Statement,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DELETE_ACCESSSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 128.
Long Statement,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DELETE_ACCESSSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 137.
Long Statement,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ENABLE_ACCESSSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 128.
Long Statement,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ENABLE_ACCESSSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 137.
Long Statement,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DISABLE_ACCESSSPEC" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 129.
Long Statement,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<DISABLE_ACCESSSPEC_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 138.
Long Statement,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_ACCESSSPECS" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 126.
Long Statement,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_AccessSpec = PARAM_AccessSpec.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AccessSpec); " is 137.
Long Statement,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_ACCESSSPECS_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 135.
Long Statement,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_READER_CONFIG" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 128.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_AntennaProperties _param_AntennaProperties = PARAM_AntennaProperties.FromBitArray(ref bit_array' ref cursor' length); " is 123.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_AntennaProperties = PARAM_AntennaProperties.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AntennaProperties); " is 158.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_AntennaConfiguration _param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AntennaConfiguration); " is 167.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_GPIPortCurrentState _param_GPIPortCurrentState = PARAM_GPIPortCurrentState.FromBitArray(ref bit_array' ref cursor' length); " is 129.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_GPIPortCurrentState = PARAM_GPIPortCurrentState.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_GPIPortCurrentState); " is 164.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_GPOWriteData = PARAM_GPOWriteData.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_GPOWriteData); " is 143.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_READER_CONFIG_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 137.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_AntennaProperties _param_AntennaProperties = PARAM_AntennaProperties.FromBitArray(ref bit_array' ref cursor' length); " is 123.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_AntennaProperties = PARAM_AntennaProperties.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AntennaProperties); " is 158.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_AntennaConfiguration _param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AntennaConfiguration); " is 167.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_GPOWriteData = PARAM_GPOWriteData.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_GPOWriteData); " is 143.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_GPIPortCurrentState _param_GPIPortCurrentState = PARAM_GPIPortCurrentState.FromBitArray(ref bit_array' ref cursor' length); " is 129.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_GPIPortCurrentState = PARAM_GPIPortCurrentState.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_GPIPortCurrentState); " is 164.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<SET_READER_CONFIG" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 128.
Long Statement,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<SET_READER_CONFIG_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 137.
Long Statement,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<CLOSE_CONNECTION" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 127.
Long Statement,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<CLOSE_CONNECTION_RESPONSE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 136.
Long Statement,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<GET_REPORT" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 121.
Long Statement,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_TagReportData = PARAM_TagReportData.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_TagReportData); " is 146.
Long Statement,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "            PARAM_RFSurveyReportData _param_RFSurveyReportData = PARAM_RFSurveyReportData.FromBitArray(ref bit_array' ref cursor' length); " is 126.
Long Statement,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((_param_RFSurveyReportData = PARAM_RFSurveyReportData.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_RFSurveyReportData); " is 161.
Long Statement,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) obj.Custom.Add(custom); " is 132.
Long Statement,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<RO_ACCESS_REPORT" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 127.
Long Statement,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<KEEPALIVE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 120.
Long Statement,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<KEEPALIVE_ACK" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 124.
Long Statement,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<READER_EVENT_NOTIFICATION" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 136.
Long Statement,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ENABLE_EVENTS_AND_REPORTS" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 136.
Long Statement,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToString,The length of the statement  "            string xml_str = "<ERROR_MESSAGE" + " Version=\"" + version.ToString() + "\" MessageID=\"" + MSG_ID.ToString() + "\"" + ">"; " is 124.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_ReceiveSensitivityTableEntry _param_ReceiveSensitivityTableEntry = PARAM_ReceiveSensitivityTableEntry.FromBitArray(ref bit_array' ref cursor' length); " is 156.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_ReceiveSensitivityTableEntry = PARAM_ReceiveSensitivityTableEntry.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_ReceiveSensitivityTableEntry); " is 191.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_PerAntennaReceiveSensitivityRange _param_PerAntennaReceiveSensitivityRange = PARAM_PerAntennaReceiveSensitivityRange.FromBitArray(ref bit_array' ref cursor' length); " is 171.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_PerAntennaReceiveSensitivityRange = PARAM_PerAntennaReceiveSensitivityRange.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_PerAntennaReceiveSensitivityRange); " is 206.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_PerAntennaAirProtocol _param_PerAntennaAirProtocol = PARAM_PerAntennaAirProtocol.FromBitArray(ref bit_array' ref cursor' length); " is 135.
Long Statement,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_PerAntennaAirProtocol = PARAM_PerAntennaAirProtocol.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_PerAntennaAirProtocol); " is 170.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The length of the statement  "                    BitArray tempBitArr = Util.ConvertObjToBitArray(CanDoTagInventoryStateAwareSingulation' CanDoTagInventoryStateAwareSingulation_len); " is 132.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The length of the statement  "                    BitArray tempBitArr = Util.ConvertObjToBitArray(MaxNumInventoryParameterSpecsPerAISpec' MaxNumInventoryParameterSpecsPerAISpec_len); " is 132.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<CanDoTagInventoryStateAwareSingulation>" + CanDoTagInventoryStateAwareSingulation.ToString() + "</CanDoTagInventoryStateAwareSingulation>"; " is 152.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<SupportsEventAndReportHolding>" + SupportsEventAndReportHolding.ToString() + "</SupportsEventAndReportHolding>"; " is 125.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<MaxNumPriorityLevelsSupported>" + MaxNumPriorityLevelsSupported.ToString() + "</MaxNumPriorityLevelsSupported>"; " is 125.
Long Statement,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<MaxNumInventoryParameterSpecsPerAISpec>" + MaxNumInventoryParameterSpecsPerAISpec.ToString() + "</MaxNumInventoryParameterSpecsPerAISpec>"; " is 152.
Long Statement,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_TransmitPowerLevelTableEntry _param_TransmitPowerLevelTableEntry = PARAM_TransmitPowerLevelTableEntry.FromBitArray(ref bit_array' ref cursor' length); " is 156.
Long Statement,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_TransmitPowerLevelTableEntry = PARAM_TransmitPowerLevelTableEntry.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_TransmitPowerLevelTableEntry); " is 191.
Long Statement,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2UHFRFModeTable _param_C1G2UHFRFModeTable = PARAM_C1G2UHFRFModeTable.FromBitArray(ref bit_array' ref cursor' length); " is 126.
Long Statement,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_FrequencyHopTable _param_FrequencyHopTable = PARAM_FrequencyHopTable.FromBitArray(ref bit_array' ref cursor' length); " is 123.
Long Statement,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_FrequencyHopTable = PARAM_FrequencyHopTable.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_FrequencyHopTable); " is 158.
Long Statement,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_InventoryParameterSpec _param_InventoryParameterSpec = PARAM_InventoryParameterSpec.FromBitArray(ref bit_array' ref cursor' length); " is 138.
Long Statement,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_InventoryParameterSpec = PARAM_InventoryParameterSpec.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_InventoryParameterSpec); " is 173.
Long Statement,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_AntennaConfiguration _param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_AntennaConfiguration = PARAM_AntennaConfiguration.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_AntennaConfiguration); " is 167.
Long Statement,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2InventoryCommand _param_C1G2InventoryCommand = PARAM_C1G2InventoryCommand.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2InventoryCommand = PARAM_C1G2InventoryCommand.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 122.
Long Statement,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The length of the statement  "                    BitArray tempBitArr = Util.ConvertObjToBitArray(HoldEventsAndReportsUponReconnect' HoldEventsAndReportsUponReconnect_len); " is 122.
Long Statement,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<HoldEventsAndReportsUponReconnect>" + HoldEventsAndReportsUponReconnect.ToString() + "</HoldEventsAndReportsUponReconnect>"; " is 137.
Long Statement,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2EPCMemorySelector _param_C1G2EPCMemorySelector = PARAM_C1G2EPCMemorySelector.FromBitArray(ref bit_array' ref cursor' length); " is 135.
Long Statement,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2EPCMemorySelector = PARAM_C1G2EPCMemorySelector.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 124.
Long Statement,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToString,The length of the statement  "                xml_str += "<EnableInventoryParameterSpecID>" + EnableInventoryParameterSpecID.ToString() + "</EnableInventoryParameterSpecID>"; " is 128.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2ReadOpSpecResult _param_C1G2ReadOpSpecResult = PARAM_C1G2ReadOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2ReadOpSpecResult = PARAM_C1G2ReadOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 122.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2WriteOpSpecResult _param_C1G2WriteOpSpecResult = PARAM_C1G2WriteOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 135.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2WriteOpSpecResult = PARAM_C1G2WriteOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 124.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2KillOpSpecResult _param_C1G2KillOpSpecResult = PARAM_C1G2KillOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2KillOpSpecResult = PARAM_C1G2KillOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 122.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2LockOpSpecResult _param_C1G2LockOpSpecResult = PARAM_C1G2LockOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 132.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2LockOpSpecResult = PARAM_C1G2LockOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 122.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2BlockEraseOpSpecResult _param_C1G2BlockEraseOpSpecResult = PARAM_C1G2BlockEraseOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 150.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2BlockEraseOpSpecResult = PARAM_C1G2BlockEraseOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 134.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2BlockWriteOpSpecResult _param_C1G2BlockWriteOpSpecResult = PARAM_C1G2BlockWriteOpSpecResult.FromBitArray(ref bit_array' ref cursor' length); " is 150.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2BlockWriteOpSpecResult = PARAM_C1G2BlockWriteOpSpecResult.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 134.
Long Statement,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_FrequencyRSSILevelEntry _param_FrequencyRSSILevelEntry = PARAM_FrequencyRSSILevelEntry.FromBitArray(ref bit_array' ref cursor' length); " is 141.
Long Statement,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_FrequencyRSSILevelEntry = PARAM_FrequencyRSSILevelEntry.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_FrequencyRSSILevelEntry); " is 176.
Long Statement,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_EventNotificationState _param_EventNotificationState = PARAM_EventNotificationState.FromBitArray(ref bit_array' ref cursor' length); " is 138.
Long Statement,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_EventNotificationState = PARAM_EventNotificationState.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_EventNotificationState); " is 173.
Long Statement,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            param.ReportBufferLevelWarningEvent = PARAM_ReportBufferLevelWarningEvent.FromBitArray(ref bit_array' ref cursor' length); " is 122.
Long Statement,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            param.ReportBufferOverflowErrorEvent = PARAM_ReportBufferOverflowErrorEvent.FromBitArray(ref bit_array' ref cursor' length); " is 124.
Long Statement,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2SingulationDetails _param_C1G2SingulationDetails = PARAM_C1G2SingulationDetails.FromBitArray(ref bit_array' ref cursor' length); " is 138.
Long Statement,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2SingulationDetails = PARAM_C1G2SingulationDetails.FromBitArray(ref bit_array' ref cursor' length)) != null) " is 126.
Long Statement,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            PARAM_C1G2UHFRFModeTableEntry _param_C1G2UHFRFModeTableEntry = PARAM_C1G2UHFRFModeTableEntry.FromBitArray(ref bit_array' ref cursor' length); " is 141.
Long Statement,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2UHFRFModeTableEntry = PARAM_C1G2UHFRFModeTableEntry.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_C1G2UHFRFModeTableEntry); " is 176.
Long Statement,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2Filter = PARAM_C1G2Filter.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_C1G2Filter); " is 137.
Long Statement,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((custom = CustomParamDecodeFactory.DecodeCustomParameter(ref bit_array' ref cursor' length)) != null) param.Custom.Add(custom); " is 134.
Long Statement,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            param.C1G2TagInventoryStateAwareFilterAction = PARAM_C1G2TagInventoryStateAwareFilterAction.FromBitArray(ref bit_array' ref cursor' length); " is 140.
Long Statement,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            param.C1G2TagInventoryStateUnawareFilterAction = PARAM_C1G2TagInventoryStateUnawareFilterAction.FromBitArray(ref bit_array' ref cursor' length); " is 144.
Long Statement,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "            param.C1G2TagInventoryStateAwareSingulationAction = PARAM_C1G2TagInventoryStateAwareSingulationAction.FromBitArray(ref bit_array' ref cursor' length); " is 150.
Long Statement,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The length of the statement  "                        param.C1G2TagInventoryStateAwareSingulationAction = PARAM_C1G2TagInventoryStateAwareSingulationAction.FromXmlNode(xnl[0]); " is 122.
Long Statement,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2TargetTag = PARAM_C1G2TargetTag.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_C1G2TargetTag); " is 146.
Long Statement,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The length of the statement  "                while ((_param_C1G2LockPayload = PARAM_C1G2LockPayload.FromBitArray(ref bit_array' ref cursor' length)) != null) param_list.Add(_param_C1G2LockPayload); " is 152.
Long Statement,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,GET_READER_CAPABILITIES,The length of the statement  "                        MSG_GET_READER_CAPABILITIES_RESPONSE msg_rsp = MSG_GET_READER_CAPABILITIES_RESPONSE.FromBitArray(ref bArr' ref cursor' length); " is 127.
Long Statement,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The length of the statement  "                                    if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state); " is 135.
Long Statement,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertByteArrayToBitArray,The length of the statement  "            for (int i = 0; i < data.Length; i++) for (int j = 0; j < 8; j++) bit_array[i * 8 + j] = (((data[i] >> (7 - j)) & 0x01) == 1) ? true : false; " is 141.
Long Statement,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The length of the statement  "                for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16)); " is 120.
Long Statement,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The length of the statement  "                for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32)); " is 120.
Empty Catch Block,LLRP,CommunicationInterface,C:\repos\wisp_impinj-reader-app\LLRP\CommunicationInterface.cs,TriggerMessageEvent,The method has an empty catch block.
Empty Catch Block,LLRP,CommunicationInterface,C:\repos\wisp_impinj-reader-app\LLRP\CommunicationInterface.cs,TriggerOnClientConnect,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromXmlNode,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,TriggerReaderEventNotification,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,TriggerRoAccessReport,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,TriggerKeepAlive,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,Open,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,ProcesssMessage,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,ProcesssMessage,The method has an empty catch block.
Empty Catch Block,LLRP,LLRPClient,C:\repos\wisp_impinj-reader-app\LLRP\LLRPClient.cs,ProcesssMessage,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,DoAcceptTCPClientCallBack,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The method has an empty catch block.
Empty Catch Block,LLRP.DataType,UInt16Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The method has an empty catch block.
Empty Catch Block,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,SplitString,The method has an empty catch block.
Empty Catch Block,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The method has an empty catch block.
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,PARAM_Custom,The following statement contains a magic number: typeID = 1023;
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                  bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                  cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                  cursor += 10;                  cursor += 16;              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: try              {                  int temp_cursor = cursor;                  BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Data.Count)' 16);                  tempBitArr.CopyTo(bit_array' cursor);                  cursor += 16;                  tempBitArr = Util.ConvertObjToBitArray(Data' Data_len);                  tempBitArr.CopyTo(bit_array' cursor);                  cursor += tempBitArr.Length;              }              catch { }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: try              {                  int temp_cursor = cursor;                  BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Data.Count)' 16);                  tempBitArr.CopyTo(bit_array' cursor);                  cursor += 16;                  tempBitArr = Util.ConvertObjToBitArray(Data' Data_len);                  tempBitArr.CopyTo(bit_array' cursor);                  cursor += tempBitArr.Length;              }              catch { }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: if (obj.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != obj.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != obj.TypeID)                  {                      cursor -= 16;                      return null;                  }                  obj.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: if (obj.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != obj.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != obj.TypeID)                  {                      cursor -= 16;                      return null;                  }                  obj.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: if (obj.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != obj.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != obj.TypeID)                  {                      cursor -= 16;                      return null;                  }                  obj.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: if (obj.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != obj.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != obj.TypeID)                  {                      cursor -= 16;                      return null;                  }                  obj.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: if (obj.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != obj.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != obj.TypeID)                  {                      cursor -= 16;                      return null;                  }                  obj.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_Custom,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,FromBitArray,The following statement contains a magic number: field_len = (bit_array.Length - cursor)/8;
Magic Number,LLRP,CustomParamDecodeFactory,C:\repos\wisp_impinj-reader-app\LLRP\CustomParameter.cs,DecodeXmlNodeToCustomParameter,The following statement contains a magic number: if (temp.Length == 2) typeName = temp[1];              else                  typeName = temp[0];
Magic Number,LLRP,LLRPEndPoint,C:\repos\wisp_impinj-reader-app\LLRP\LLRPEndPoint.cs,cI_OnMessageReceived,The following statement contains a magic number: if ((msg_type == 100) || (msg_type == this.msg_type && msg_id == this.msg_id))              {                  Array.Copy(msg_data' this.data' msg_data.Length);                  this.msg_type = msg_type;                  this.msg_id = msg_id;                  this.version = ver;                  transactEvt.Set();              }
Magic Number,LLRP,LLRPEndPoint,C:\repos\wisp_impinj-reader-app\LLRP\LLRPEndPoint.cs,TransactMessage,The following statement contains a magic number: try              {                  transactEvt = new ManualResetEvent(false);                  Transaction.Send(cI' data);                    msg_id = (int)msg.MSG_ID;                    if (msg.MSG_TYPE != (uint)ENUM_LLRP_MSG_TYPE.CUSTOM_MESSAGE) msg_type = (short)(msg.MSG_TYPE + 10);                  else                      msg_type = (short)msg.MSG_TYPE;                    if (transactEvt.WaitOne(time_out' false))                  {                      BitArray bArr;                      int length;                      int cursor = 0;                      switch ((ENUM_LLRP_MSG_TYPE)msg_type)                      {                            case ENUM_LLRP_MSG_TYPE.GET_READER_CAPABILITIES_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_GET_READER_CAPABILITIES_RESPONSE r_msg = MSG_GET_READER_CAPABILITIES_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.ADD_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_ADD_ROSPEC_RESPONSE r_msg = MSG_ADD_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.DELETE_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_DELETE_ROSPEC_RESPONSE r_msg = MSG_DELETE_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.START_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_START_ROSPEC_RESPONSE r_msg = MSG_START_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.STOP_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_STOP_ROSPEC_RESPONSE r_msg = MSG_STOP_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.ENABLE_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_ENABLE_ROSPEC_RESPONSE r_msg = MSG_ENABLE_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.DISABLE_ROSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_DISABLE_ROSPEC_RESPONSE r_msg = MSG_DISABLE_ROSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.GET_ROSPECS_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_GET_ROSPECS_RESPONSE r_msg = MSG_GET_ROSPECS_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.ADD_ACCESSSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_ADD_ACCESSSPEC_RESPONSE r_msg = MSG_ADD_ACCESSSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.DELETE_ACCESSSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_DELETE_ACCESSSPEC_RESPONSE r_msg = MSG_DELETE_ACCESSSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.ENABLE_ACCESSSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_ENABLE_ACCESSSPEC_RESPONSE r_msg = MSG_ENABLE_ACCESSSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.DISABLE_ACCESSSPEC_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_DISABLE_ACCESSSPEC_RESPONSE r_msg = MSG_DISABLE_ACCESSSPEC_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.GET_ACCESSSPECS_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_GET_ACCESSSPECS_RESPONSE r_msg = MSG_GET_ACCESSSPECS_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.GET_READER_CONFIG_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_GET_READER_CONFIG_RESPONSE r_msg = MSG_GET_READER_CONFIG_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.SET_READER_CONFIG_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_SET_READER_CONFIG_RESPONSE r_msg = MSG_SET_READER_CONFIG_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            case ENUM_LLRP_MSG_TYPE.CLOSE_CONNECTION_RESPONSE:                              {                                  bArr = Util.ConvertByteArrayToBitArray(data);                                  length = bArr.Count;                                  MSG_CLOSE_CONNECTION_RESPONSE r_msg = MSG_CLOSE_CONNECTION_RESPONSE.FromBitArray(ref bArr' ref cursor' length);                                  return r_msg;                              }                            default:                              return null;                      }                  }                  else                  {                      return null;                  }                }              catch              {                  throw new Exception("Transaction Failed");              }
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_CUSTOM_MESSAGE,The following statement contains a magic number: msgType = 1023;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,MSG_CUSTOM_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = (bit_array.Length - cursor) / 8;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_READER_CAPABILITIES_RESPONSE,The following statement contains a magic number: msgType = 11;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CAPABILITIES_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ADD_ROSPEC,The following statement contains a magic number: msgType = 20;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ADD_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 30;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DELETE_ROSPEC,The following statement contains a magic number: msgType = 21;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DELETE_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 31;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_START_ROSPEC,The following statement contains a magic number: msgType = 22;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_START_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_START_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 32;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_START_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_STOP_ROSPEC,The following statement contains a magic number: msgType = 23;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_STOP_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 33;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_STOP_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ENABLE_ROSPEC,The following statement contains a magic number: msgType = 24;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ENABLE_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 34;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DISABLE_ROSPEC,The following statement contains a magic number: msgType = 25;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DISABLE_ROSPEC_RESPONSE,The following statement contains a magic number: msgType = 35;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ROSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_ROSPECS,The following statement contains a magic number: msgType = 26;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ROSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_ROSPECS_RESPONSE,The following statement contains a magic number: msgType = 36;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ROSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ADD_ACCESSSPEC,The following statement contains a magic number: msgType = 40;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ADD_ACCESSSPEC_RESPONSE,The following statement contains a magic number: msgType = 50;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ADD_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DELETE_ACCESSSPEC,The following statement contains a magic number: msgType = 41;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DELETE_ACCESSSPEC_RESPONSE,The following statement contains a magic number: msgType = 51;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DELETE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ENABLE_ACCESSSPEC,The following statement contains a magic number: msgType = 42;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ENABLE_ACCESSSPEC_RESPONSE,The following statement contains a magic number: msgType = 52;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DISABLE_ACCESSSPEC,The following statement contains a magic number: msgType = 43;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_DISABLE_ACCESSSPEC_RESPONSE,The following statement contains a magic number: msgType = 53;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_DISABLE_ACCESSSPEC_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_ACCESSSPECS,The following statement contains a magic number: msgType = 44;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_ACCESSSPECS_RESPONSE,The following statement contains a magic number: msgType = 54;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_ACCESSSPECS_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_READER_CONFIG,The following statement contains a magic number: msgType = 2;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,MSG_GET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_READER_CONFIG_RESPONSE,The following statement contains a magic number: msgType = 12;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_SET_READER_CONFIG,The following statement contains a magic number: msgType = 3;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_SET_READER_CONFIG_RESPONSE,The following statement contains a magic number: msgType = 13;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_SET_READER_CONFIG_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_CLOSE_CONNECTION,The following statement contains a magic number: msgType = 14;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_CLOSE_CONNECTION_RESPONSE,The following statement contains a magic number: msgType = 4;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_CLOSE_CONNECTION_RESPONSE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_GET_REPORT,The following statement contains a magic number: msgType = 60;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_GET_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_RO_ACCESS_REPORT,The following statement contains a magic number: msgType = 61;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_RO_ACCESS_REPORT,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_KEEPALIVE,The following statement contains a magic number: msgType = 62;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_KEEPALIVE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_KEEPALIVE_ACK,The following statement contains a magic number: msgType = 72;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_KEEPALIVE_ACK,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_READER_EVENT_NOTIFICATION,The following statement contains a magic number: msgType = 63;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_READER_EVENT_NOTIFICATION,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ENABLE_EVENTS_AND_REPORTS,The following statement contains a magic number: msgType = 64;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ENABLE_EVENTS_AND_REPORTS,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,MSG_ERROR_MESSAGE,The following statement contains a magic number: msgType = 100;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bool[] bit_array = new bool[500 * 1024 * 8];
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: BitArray bArr = Util.ConvertIntToBitArray(version' 3);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 3;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgType' 10);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 10;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgLen' 32);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msgID' 32);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: cursor += 32;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: UInt32 msg_len = (UInt32)cursor / 8;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr = Util.ConvertIntToBitArray(msg_len' 32);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,ToBitArray,The following statement contains a magic number: bArr.CopyTo(bit_array' 16);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: cursor += 6;
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: msg_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: if (msg_type != obj.msgType)              {                  cursor -= 16;                  return null;              }
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgLen = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,MSG_ERROR_MESSAGE,C:\repos\wisp_impinj-reader-app\LLRP\LLRPMsg.cs,FromBitArray,The following statement contains a magic number: obj.msgID = (UInt32)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 32);
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_UTCTimestamp,The following statement contains a magic number: typeID = 128;
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UTCTimestamp,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_Uptime,The following statement contains a magic number: typeID = 129;
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Uptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GeneralDeviceCapabilities,The following statement contains a magic number: typeID = 137;
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReaderFirmwareVersion != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReaderFirmwareVersion.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReaderFirmwareVersion' ReaderFirmwareVersion_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReaderFirmwareVersion != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReaderFirmwareVersion.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReaderFirmwareVersion' ReaderFirmwareVersion_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_GeneralDeviceCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReceiveSensitivityTableEntry,The following statement contains a magic number: typeID = 139;
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ReceiveSensitivityTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_PerAntennaReceiveSensitivityRange,The following statement contains a magic number: typeID = 149;
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_PerAntennaReceiveSensitivityRange,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_PerAntennaAirProtocol,The following statement contains a magic number: typeID = 140;
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ProtocolID != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ProtocolID.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ProtocolID' ProtocolID_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ProtocolID != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ProtocolID.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ProtocolID' ProtocolID_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PerAntennaAirProtocol,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GPIOCapabilities,The following statement contains a magic number: typeID = 141;
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPIOCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_LLRPCapabilities,The following statement contains a magic number: typeID = 142;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RegulatoryCapabilities,The following statement contains a magic number: typeID = 143;
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RegulatoryCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_UHFBandCapabilities,The following statement contains a magic number: typeID = 144;
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_UHFBandCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_TransmitPowerLevelTableEntry,The following statement contains a magic number: typeID = 145;
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_TransmitPowerLevelTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FrequencyInformation,The following statement contains a magic number: typeID = 146;
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyInformation,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FrequencyHopTable,The following statement contains a magic number: typeID = 147;
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Frequency != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Frequency.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Frequency' Frequency_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Frequency != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Frequency.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Frequency' Frequency_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyHopTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FixedFrequencyTable,The following statement contains a magic number: typeID = 148;
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Frequency != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Frequency.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Frequency' Frequency_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Frequency != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Frequency.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Frequency' Frequency_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FixedFrequencyTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROSpec,The following statement contains a magic number: typeID = 177;
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ROSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROBoundarySpec,The following statement contains a magic number: typeID = 178;
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROBoundarySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROSpecStartTrigger,The following statement contains a magic number: typeID = 179;
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStartTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_PeriodicTriggerValue,The following statement contains a magic number: typeID = 180;
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_PeriodicTriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GPITriggerValue,The following statement contains a magic number: typeID = 181;
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPITriggerValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROSpecStopTrigger,The following statement contains a magic number: typeID = 182;
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ROSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AISpec,The following statement contains a magic number: typeID = 183;
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (AntennaIDs != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(AntennaIDs.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(AntennaIDs' AntennaIDs_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (AntennaIDs != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(AntennaIDs.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(AntennaIDs' AntennaIDs_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AISpecStopTrigger,The following statement contains a magic number: typeID = 184;
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_AISpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_TagObservationTrigger,The following statement contains a magic number: typeID = 185;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_TagObservationTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_InventoryParameterSpec,The following statement contains a magic number: typeID = 186;
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_InventoryParameterSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFSurveySpec,The following statement contains a magic number: typeID = 187;
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RFSurveySpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFSurveySpecStopTrigger,The following statement contains a magic number: typeID = 188;
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RFSurveySpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AccessSpec,The following statement contains a magic number: typeID = 207;
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_AccessSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AccessSpecStopTrigger,The following statement contains a magic number: typeID = 208;
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_AccessSpecStopTrigger,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AccessCommand,The following statement contains a magic number: typeID = 209;
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_LLRPConfigurationStateValue,The following statement contains a magic number: typeID = 217;
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPConfigurationStateValue,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_Identification,The following statement contains a magic number: typeID = 218;
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReaderID != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReaderID.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReaderID' ReaderID_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReaderID != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReaderID.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReaderID' ReaderID_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_Identification,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GPOWriteData,The following statement contains a magic number: typeID = 219;
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPOWriteData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_KeepaliveSpec,The following statement contains a magic number: typeID = 220;
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_KeepaliveSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AntennaProperties,The following statement contains a magic number: typeID = 221;
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AntennaProperties,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AntennaConfiguration,The following statement contains a magic number: typeID = 222;
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaConfiguration,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFReceiver,The following statement contains a magic number: typeID = 223;
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFReceiver,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFTransmitter,The following statement contains a magic number: typeID = 224;
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFTransmitter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GPIPortCurrentState,The following statement contains a magic number: typeID = 225;
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPIPortCurrentState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_EventsAndReports,The following statement contains a magic number: typeID = 226;
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventsAndReports,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROReportSpec,The following statement contains a magic number: typeID = 237;
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ROReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_TagReportContentSelector,The following statement contains a magic number: typeID = 238;
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportContentSelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AccessReportSpec,The following statement contains a magic number: typeID = 239;
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessReportSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_TagReportData,The following statement contains a magic number: typeID = 240;
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_EPCData,The following statement contains a magic number: typeID = 241;
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (EPC != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(EPC.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(EPC' EPC_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (EPC != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(EPC.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(EPC' EPC_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPCData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_EPC_96,The following statement contains a magic number: typeID = 13;
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (EPC != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(EPC.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(EPC' EPC_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (EPC != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(EPC.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(EPC' EPC_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EPC_96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 96;
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROSpecID,The following statement contains a magic number: typeID = 9;
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_SpecIndex,The following statement contains a magic number: typeID = 14;
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_SpecIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_InventoryParameterSpecID,The following statement contains a magic number: typeID = 10;
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_InventoryParameterSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_PeakRSSI,The following statement contains a magic number: typeID = 6;
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_PeakRSSI,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ChannelIndex,The following statement contains a magic number: typeID = 7;
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ChannelIndex,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FirstSeenTimestampUTC,The following statement contains a magic number: typeID = 2;
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FirstSeenTimestampUptime,The following statement contains a magic number: typeID = 3;
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FirstSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_LastSeenTimestampUTC,The following statement contains a magic number: typeID = 4;
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUTC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_LastSeenTimestampUptime,The following statement contains a magic number: typeID = 5;
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LastSeenTimestampUptime,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 64;
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_TagSeenCount,The following statement contains a magic number: typeID = 8;
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_TagSeenCount,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AccessSpecID,The following statement contains a magic number: typeID = 16;
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AccessSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFSurveyReportData,The following statement contains a magic number: typeID = 242;
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyReportData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FrequencyRSSILevelEntry,The following statement contains a magic number: typeID = 243;
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_FrequencyRSSILevelEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReaderEventNotificationSpec,The following statement contains a magic number: typeID = 244;
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_EventNotificationState,The following statement contains a magic number: typeID = 245;
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_EventNotificationState,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReaderEventNotificationData,The following statement contains a magic number: typeID = 246;
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderEventNotificationData,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_HoppingEvent,The following statement contains a magic number: typeID = 247;
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_HoppingEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_GPIEvent,The following statement contains a magic number: typeID = 248;
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_GPIEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ROSpecEvent,The following statement contains a magic number: typeID = 249;
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_ROSpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReportBufferLevelWarningEvent,The following statement contains a magic number: typeID = 250;
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferLevelWarningEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReportBufferOverflowErrorEvent,The following statement contains a magic number: typeID = 251;
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReportBufferOverflowErrorEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ReaderExceptionEvent,The following statement contains a magic number: typeID = 252;
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Message != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Message.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Message' Message_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (Message != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(Message.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(Message' Message_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ReaderExceptionEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_OpSpecID,The following statement contains a magic number: typeID = 17;
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_OpSpecID,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_RFSurveyEvent,The following statement contains a magic number: typeID = 253;
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_RFSurveyEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AISpecEvent,The following statement contains a magic number: typeID = 254;
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_AISpecEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_AntennaEvent,The following statement contains a magic number: typeID = 255;
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_AntennaEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ConnectionAttemptEvent,The following statement contains a magic number: typeID = 256;
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionAttemptEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ConnectionCloseEvent,The following statement contains a magic number: typeID = 257;
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ConnectionCloseEvent,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_LLRPStatus,The following statement contains a magic number: typeID = 287;
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ErrorDescription != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ErrorDescription.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ErrorDescription' ErrorDescription_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ErrorDescription != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ErrorDescription.Length)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ErrorDescription' ErrorDescription_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_LLRPStatus,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_FieldError,The following statement contains a magic number: typeID = 288;
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_FieldError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_ParameterError,The following statement contains a magic number: typeID = 289;
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_ParameterError,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2LLRPCapabilities,The following statement contains a magic number: typeID = 327;
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LLRPCapabilities,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2UHFRFModeTable,The following statement contains a magic number: typeID = 328;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTable,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2UHFRFModeTableEntry,The following statement contains a magic number: typeID = 329;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2UHFRFModeTableEntry,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2InventoryCommand,The following statement contains a magic number: typeID = 330;
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2InventoryCommand,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2Filter,The following statement contains a magic number: typeID = 331;
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Filter,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TagInventoryMask,The following statement contains a magic number: typeID = 332;
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagMask != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagMask.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagMask' TagMask_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagMask != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagMask.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagMask' TagMask_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2TagInventoryMask,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TagInventoryStateAwareFilterAction,The following statement contains a magic number: typeID = 333;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TagInventoryStateUnawareFilterAction,The following statement contains a magic number: typeID = 334;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateUnawareFilterAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2RFControl,The following statement contains a magic number: typeID = 335;
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2RFControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2SingulationControl,The following statement contains a magic number: typeID = 336;
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2SingulationControl,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TagInventoryStateAwareSingulationAction,The following statement contains a magic number: typeID = 337;
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagInventoryStateAwareSingulationAction,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TagSpec,The following statement contains a magic number: typeID = 338;
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TagSpec,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2TargetTag,The following statement contains a magic number: typeID = 339;
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagMask != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagMask.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagMask' TagMask_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagMask != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagMask.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagMask' TagMask_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagData' TagData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (TagData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(TagData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(TagData' TagData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2TargetTag,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2Read,The following statement contains a magic number: typeID = 341;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Read,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2Write,The following statement contains a magic number: typeID = 342;
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (WriteData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(WriteData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(WriteData' WriteData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (WriteData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(WriteData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(WriteData' WriteData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2Write,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2Kill,The following statement contains a magic number: typeID = 343;
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Kill,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2Lock,The following statement contains a magic number: typeID = 344;
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2Lock,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2LockPayload,The following statement contains a magic number: typeID = 345;
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2LockPayload,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2BlockErase,The following statement contains a magic number: typeID = 346;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockErase,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2BlockWrite,The following statement contains a magic number: typeID = 347;
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (WriteData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(WriteData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(WriteData' WriteData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (WriteData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(WriteData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(WriteData' WriteData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 32;
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 2;
Magic Number,LLRP,PARAM_C1G2BlockWrite,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2EPCMemorySelector,The following statement contains a magic number: typeID = 348;
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2EPCMemorySelector,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2_PC,The following statement contains a magic number: typeID = 12;
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_PC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2_CRC,The following statement contains a magic number: typeID = 11;
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2_CRC,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2SingulationDetails,The following statement contains a magic number: typeID = 18;
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2SingulationDetails,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2ReadOpSpecResult,The following statement contains a magic number: typeID = 349;
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReadData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReadData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReadData' ReadData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (ReadData != null)              {                    try                  {                      int temp_cursor = cursor;                        BitArray tempBitArr = Util.ConvertIntToBitArray((UInt32)(ReadData.Count)' 16);                        tempBitArr.CopyTo(bit_array' cursor);                      cursor += 16;                        tempBitArr = Util.ConvertObjToBitArray(ReadData' ReadData_len);                      tempBitArr.CopyTo(bit_array' cursor);                      cursor += tempBitArr.Length;                  }                  catch                  {                  }                }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2ReadOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2WriteOpSpecResult,The following statement contains a magic number: typeID = 350;
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2WriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2KillOpSpecResult,The following statement contains a magic number: typeID = 351;
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2KillOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2LockOpSpecResult,The following statement contains a magic number: typeID = 352;
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2LockOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2BlockEraseOpSpecResult,The following statement contains a magic number: typeID = 353;
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2BlockEraseOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,PARAM_C1G2BlockWriteOpSpecResult,The following statement contains a magic number: typeID = 354;
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (tvCoding)              {                  bit_array[cursor] = true;                  cursor++;                    bArr = Util.ConvertIntToBitArray(typeID' 7);                  bArr.CopyTo(bit_array' cursor);                    cursor += 7;              }              else              {                  cursor += 6;                  bArr = Util.ConvertIntToBitArray(typeID' 10);                  bArr.CopyTo(bit_array' cursor);                    cursor += 10;                  cursor += 16;     //Omit the parameter length' will be added at the end.              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,ToBitArray,The following statement contains a magic number: if (!tvCoding)              {                  UInt32 param_len = (UInt32)(cursor - cursor_old) / 8;                  bArr = Util.ConvertIntToBitArray(param_len' 16);                  bArr.CopyTo(bit_array' cursor_old + 16);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: if (param.tvCoding)              {                  cursor++;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 7);                    if (param_type != param.TypeID)                  {                      cursor -= 8;                      return null;                  }              }              else              {                  cursor += 6;                  param_type = (int)(UInt64)Util.CalculateVal(ref bit_array' ref cursor' 10);                    if (param_type != param.TypeID)                  {                      cursor -= 16;                      return null;                  }                  param.length = (UInt16)(int)Util.DetermineFieldLength(ref bit_array' ref cursor);              }
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 8;
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,PARAM_C1G2BlockWriteOpSpecResult,C:\repos\wisp_impinj-reader-app\LLRP\LLRPParam.cs,FromBitArray,The following statement contains a magic number: field_len = 16;
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: lock (syn_msg)              {                  try                  {                  REPEAT:                      if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                      {                          msg_cursor = 0;                          int reserved_date_len = ss.data.Length - offset;                            if (reserved_date_len > 10)                          {                                //Calculate message type' version' length and id                              int header = (ss.data[offset] << 8) + ss.data[offset + 1];                              try                              {                                  msg_type = (Int16)(header & 0x03FF);                                  msg_ver = (Int16)((header >> 10) & 0x07);                                  msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                                  msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                              }                              catch                              {                                  msg_len = 0;                              }                                if (msg_len > 20000)                              {                                  int i = 0;                              }                                //if data length larger than needed data for a complete message'                               //copy data into existing message and triggered message event                               if (msg_len > 0 && msg_ver == 1)                              {                                    msg_data = new byte[msg_len];                                  //if message length greater than the calcualted message length. copy message and trigger message event                                    if (ss.data.Length >= (offset + msg_len))                                  {                                      Array.Copy(ss.data' offset' msg_data' 0' msg_len);                                      delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                                      msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                        offset += msg_len;                                        new_message = true;                                        goto REPEAT;                                  }                                  else//If the received data is shorter than the message length' keep reading for the next data                                   {                                      new_message = false;                                        Array.Copy(ss.data' offset' msg_data' 0' ss.data.Length - offset);                                      msg_cursor = ss.data.Length - offset;                                    }                              }                          }                          else                          {                              new_message = true;                                //if ns !=null' do next asyn-read' to ensure that read                              if (ns != null && ns.CanRead)                              {                                  try                                  {                                      ns.Flush();                                      state = new AsynReadState(BUFFER_SIZE);                                        Array.Copy(ss.data' offset' state.data' 0' reserved_date_len);                                        if (!trying_to_close) ns.BeginRead(state.data' reserved_date_len' BUFFER_SIZE-reserved_date_len' new AsyncCallback(OnDataRead)' state);                                  }                                  catch { }                              }                                return;                          }                      }                      else                      {                          //if data length larger than needed data for a complete message'                           //copy data into existing message and triggered message event                           if (ss.data.Length >= msg_len - msg_cursor)                          {                              Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                              delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                              msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                                offset += msg_len - msg_cursor;                                new_message = true;                                goto REPEAT;                          }                          else //keep reading                          {                              new_message = false;                                Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                              msg_cursor += ss.data.Length;                          }                      }                        //if ns !=null' do next asyn-read' to ensure that read                      if (ns != null && ns.CanRead)                      {                          try                          {                              ns.Flush();                              state = new AsynReadState(BUFFER_SIZE);                                if (!trying_to_close) ns.BeginRead(state.data' 0' BUFFER_SIZE' new AsyncCallback(OnDataRead)' state);                          }                          catch { }                      }                  }                  catch                  {                  }              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPClient,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Open,The following statement contains a magic number: try              {                  IPAddress ipAddr = new IPAddress(new byte[] { 127' 0' 0' 1 });                  server = new TcpListener(ipAddr' port);                  server.Start();                                    server.BeginAcceptTcpClient(new AsyncCallback(DoAcceptTCPClientCallBack)' server);                }              catch              {                  return false;              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,Receive,The following statement contains a magic number: try              {                  ns.ReadTimeout = 200;                                   byte[] buf = new byte[8096];                  int readSize = ns.Read(buf' 0' 8096);                    buffer = new byte[readSize];                    Array.Copy(buf' 0' buffer' 0' readSize);                    return readSize;              }              catch              {                  buffer = null;                  return -1;              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP,TCPIPServer,C:\repos\wisp_impinj-reader-app\LLRP\TCPIPConnection.cs,OnDataRead,The following statement contains a magic number: try              {              REPEAT:                             //if multiple messages exist in the result. repeat the process                  if (new_message)                //new_message is a flag to indicate if the data is part of unfinished message                  {                      //Calculate message type' version' length and id                      int header = (ss.data[offset] << 8) + ss.data[offset + 1];                      msg_type = (Int16)(header & 0x03FF);                      msg_ver = (Int16)((header >> 10) & 0x07);                      msg_len = (ss.data[offset + 2] << 24) + (ss.data[offset + 3] << 16) + (ss.data[offset + 4] << 8) + ss.data[offset + 5];                      msg_id = (ss.data[offset + 6] << 24) + (ss.data[offset + 7] << 16) + (ss.data[offset + 8] << 8) + ss.data[offset + 9];                        //if the message length is 0. the rest of byte array are empty. restart non-block reading                      if (msg_len == 0)                      {                          if (ns != null)                          {                              try                              {                                  ns.Flush();                                  state = new AsynReadState(BUFFER_SIZE);                                  ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                              }                              catch { }                                return;                          }                          else                              return;                      }                        msg_data = new byte[msg_len];                      //if message length greater than the calcualted message length. copy message and trigger message event                      if (ss.data.Length >= msg_len)                      {                          Array.Copy(ss.data' offset' msg_data' 0' msg_len);                            delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len;                          msg_len = 0;                            goto REPEAT;                      }                      else//If the received data is shorter than the message length' keep reading for the next data                       {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' 0' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                  else                  {                      //if data length larger than needed data for a complete message'                       //copy data into existing message and triggered message event                       if (ss.data.Length >= msg_len - msg_cursor)                      {                          Array.Copy(ss.data' 0' msg_data' msg_cursor' msg_len - msg_cursor);                          delegateMessageReceived msgRecv = new delegateMessageReceived(TriggerMessageEvent);                          msgRecv.BeginInvoke(msg_ver' msg_type' msg_id' msg_data' null' null);                            offset += msg_len - msg_cursor;                                                        msg_len = 0;                          msg_cursor = 0;                            new_message = true;                          goto REPEAT;                      }                      else //keep reading                      {                          new_message = false;                          Array.Copy(ss.data' 0' msg_data' msg_cursor' ss.data.Length);                          msg_cursor += ss.data.Length;                      }                  }                    //if ns !=null' do next asyn-read' to ensure that read                  if (ns != null && ns.CanRead)                  {                      try                      {                          ns.Flush();                          state = new AsynReadState(BUFFER_SIZE);                          ns.BeginRead(state.data' 0' state.data.Length' new AsyncCallback(OnDataRead)' state);                      }                      catch { }                  }              }              catch              {              }
Magic Number,LLRP.DataType,ByteArray,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The following statement contains a magic number: string[] s = Util.SplitString(str' new char[] { '''' ' '}' 2);
Magic Number,LLRP.DataType,UInt16Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < data.Count; i++)              {                  UInt16 hD = (UInt16)(data[i] >> 8);                  UInt16 lD = (UInt16)(data[i] & 0x00FF);                    s += hD.ToString("X2") + lD.ToString("X2");              }
Magic Number,LLRP.DataType,UInt16Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The following statement contains a magic number: if (str != string.Empty)              {                  string[] s = Util.SplitString(str' new char[] { '''' ' ' }' 4);                  for (int i = 0; i < s.Length; i++)                  {                      try                      {                          if (s[i] != string.Empty)                              Arr.Add(Convert.ToUInt16(s[i]' 16));                      }                      catch                      {                      }                  }              }
Magic Number,LLRP.DataType,UInt16Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The following statement contains a magic number: if (str != string.Empty)              {                  string[] s = Util.SplitString(str' new char[] { '''' ' ' }' 4);                  for (int i = 0; i < s.Length; i++)                  {                      try                      {                          if (s[i] != string.Empty)                              Arr.Add(Convert.ToUInt16(s[i]' 16));                      }                      catch                      {                      }                  }              }
Magic Number,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < data.Count; i++)              {                  UInt16 hD = (UInt16)(data[i] >> 16);                  UInt16 lD = (UInt16)(data[i]& 0x0000FFFF);                    UInt16 d1 = (UInt16)(hD >> 8);                  UInt16 d2 = (UInt16)(hD & 0x00FF);                  UInt16 d3 = (UInt16)(lD >> 8);                  UInt16 d4 = (UInt16)(lD & 0x00FF);                    s += d1.ToString("X2") + d2.ToString("X2") + d3.ToString("X2") + d4.ToString("X2");              }
Magic Number,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < data.Count; i++)              {                  UInt16 hD = (UInt16)(data[i] >> 16);                  UInt16 lD = (UInt16)(data[i]& 0x0000FFFF);                    UInt16 d1 = (UInt16)(hD >> 8);                  UInt16 d2 = (UInt16)(hD & 0x00FF);                  UInt16 d3 = (UInt16)(lD >> 8);                  UInt16 d4 = (UInt16)(lD & 0x00FF);                    s += d1.ToString("X2") + d2.ToString("X2") + d3.ToString("X2") + d4.ToString("X2");              }
Magic Number,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < data.Count; i++)              {                  UInt16 hD = (UInt16)(data[i] >> 16);                  UInt16 lD = (UInt16)(data[i]& 0x0000FFFF);                    UInt16 d1 = (UInt16)(hD >> 8);                  UInt16 d2 = (UInt16)(hD & 0x00FF);                  UInt16 d3 = (UInt16)(lD >> 8);                  UInt16 d4 = (UInt16)(lD & 0x00FF);                    s += d1.ToString("X2") + d2.ToString("X2") + d3.ToString("X2") + d4.ToString("X2");              }
Magic Number,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The following statement contains a magic number: string[] s = Util.SplitString(str' new char[] { '''' ' ' }' 8);
Magic Number,LLRP.DataType,UInt32Array,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,FromString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  try                  {                      Arr.Add(Convert.ToUInt32(s[i]' 16));                  }                  catch                  {                  }              }
Magic Number,LLRP.DataType,U96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToString,The following statement contains a magic number: return string.Format("{0:4X}{1:4X}{2:4X}{3:4X}{4:4X}{5:4X}"' data[0]' data[1]' data[2]' data[3]' data[4]' data[5]);
Magic Number,LLRP.DataType,U96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToString,The following statement contains a magic number: return string.Format("{0:4X}{1:4X}{2:4X}{3:4X}{4:4X}{5:4X}"' data[0]' data[1]' data[2]' data[3]' data[4]' data[5]);
Magic Number,LLRP.DataType,U96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToString,The following statement contains a magic number: return string.Format("{0:4X}{1:4X}{2:4X}{3:4X}{4:4X}{5:4X}"' data[0]' data[1]' data[2]' data[3]' data[4]' data[5]);
Magic Number,LLRP.DataType,U96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToString,The following statement contains a magic number: return string.Format("{0:4X}{1:4X}{2:4X}{3:4X}{4:4X}{5:4X}"' data[0]' data[1]' data[2]' data[3]' data[4]' data[5]);
Magic Number,LLRP.DataType,U96,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,U96,The following statement contains a magic number: data = new ushort[6];
Magic Number,LLRP.DataType,TwoBits,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,TwoBits,The following statement contains a magic number: bits = new bool[2];
Magic Number,LLRP.DataType,TwoBits,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,TwoBits,The following statement contains a magic number: bits[0] = ((data & 0x0002) == 2) ? true : false;
Magic Number,LLRP.DataType,TwoBits,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToInt,The following statement contains a magic number: return (UInt16)((UInt16)(bits[0] ? 2 : 0) + (UInt16)(bits[1] ? 1 : 0));
Magic Number,LLRP.DataType,TwoBits,C:\repos\wisp_impinj-reader-app\LLRP\LLRPDataType.cs,ToString,The following statement contains a magic number: UInt16 data = (UInt16)((bits[0] ? 2 : 0) + (bits[1] ? 1 : 0));
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToByteArray,The following statement contains a magic number: int size = bit_array.Length / 8 + (int)(((bit_array.Length % 8) > 0) ? 1 : 0);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToByteArray,The following statement contains a magic number: int size = bit_array.Length / 8 + (int)(((bit_array.Length % 8) > 0) ? 1 : 0);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToByteArray,The following statement contains a magic number: int reserved = bit_array.Length > 8 ? 8 : bit_array.Length;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToByteArray,The following statement contains a magic number: int reserved = bit_array.Length > 8 ? 8 : bit_array.Length;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToByteArray,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  for (int j = 0; j < reserved; j++)                  {                      val = (byte)(val << 1);                      val += (byte)(bit_array[i * 8 + j] ? 0x01 : 0x00);                  }                  data[i] = val;              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertByteArrayToBitArray,The following statement contains a magic number: BitArray bit_array = new BitArray(data.Length * 8);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertByteArrayToBitArray,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) for (int j = 0; j < 8; j++) bit_array[i * 8 + j] = (((data[i] >> (7 - j)) & 0x01) == 1) ? true : false;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertByteArrayToBitArray,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) for (int j = 0; j < 8; j++) bit_array[i * 8 + j] = (((data[i] >> (7 - j)) & 0x01) == 1) ? true : false;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertByteArrayToBitArray,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) for (int j = 0; j < 8; j++) bit_array[i * 8 + j] = (((data[i] >> (7 - j)) & 0x01) == 1) ? true : false;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,DetermineFieldLength,The following statement contains a magic number: return (int)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBitArrayToObj,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                  obj = bit_array[cursor];                  cursor++;              }              else if (type.Equals(typeof(byte)))              {                  obj = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(sbyte)))              {                  obj = (sbyte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);              }              else if (type.Equals(typeof(UInt16)))              {                  obj = (UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(Int16)))              {                  obj = (Int16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16);              }              else if (type.Equals(typeof(UInt32)))              {                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);              }              else if (type.Equals(typeof(Int32)))              {                  obj = (Int32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32);              }              else if (type.Equals(typeof(UInt64)))              {                  obj = (UInt64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(Int64)))              {                  obj = (Int64)(UInt64)CalculateVal(ref bit_array' ref cursor' 64);              }              else if (type.Equals(typeof(string)))              {                  string s = string.Empty;                  for (int i = 0; i < field_len; i++)                  {                      try                      {                          byte bd = (byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8);                          System.Text.UTF8Encoding encoding = new UTF8Encoding();                          byte[] bdarr = new byte[1] { bd };                          s += encoding.GetString(bdarr);                      }                      catch                      {                      }                  }                    if (field_len > 1 && s[field_len - 1] == 0) s = s.Substring(0' field_len - 1);                  obj = s;              }              else if (type.Equals(typeof(ByteArray)))              {                  obj = new ByteArray();                  for (int i = 0; i < field_len; i++) ((ByteArray)obj).Add((byte)(UInt64)CalculateVal(ref bit_array' ref cursor' 8));              }              else if (type.Equals(typeof(UInt16Array)))              {                  obj = new UInt16Array();                  for (int i = 0; i < field_len; i++) ((UInt16Array)obj).Add((UInt16)(UInt64)CalculateVal(ref bit_array' ref cursor' 16));              }              else if (type.Equals(typeof(UInt32Array)))              {                  obj = new UInt32Array();                  for (int i = 0; i < field_len; i++) ((UInt32Array)obj).Add((UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' 32));              }              else if (type.Equals(typeof(TwoBits)))              {                  obj = new TwoBits(bit_array[cursor]' bit_array[cursor + 1]);                  cursor += 2;              }              else if (type.Equals(typeof(BitArray)))              {                  obj = new BitArray(field_len);                    for (int i = 0; i < field_len; i++)                  {                      ((BitArray)obj)[i] = bit_array[cursor];                      cursor++;                  }              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  obj = new LLRPBitArray();                    for (int i = 0; i < field_len; i++)                  {                      ((LLRPBitArray)obj).Add(bit_array[cursor]);                      cursor++;                  }              }              else                  obj = (UInt32)(UInt64)CalculateVal(ref bit_array' ref cursor' field_len);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertIntToBitArray,The following statement contains a magic number: string s = Convert.ToString(val' 2).PadLeft(length' '0');
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertObjToBitArray,The following statement contains a magic number: if (type.Equals(typeof(bool)))              {                    bit_arr = new BitArray(1);                  bit_arr[0] = (bool)obj;                  return bit_arr;              }              else if (type.Equals(typeof(TwoBits)))              {                  bit_arr = new BitArray(2);                  bit_arr[0] = ((TwoBits)obj)[0];                  bit_arr[1] = ((TwoBits)obj)[1];                  return bit_arr;              }              else if (type.Equals(typeof(byte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((byte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(sbyte)))              {                  bit_arr = new BitArray(8);                  s = Convert.ToString((sbyte)obj' 2).PadLeft(8' '0');                  for (int i = 0; i < 8; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((UInt16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int16)))              {                  bit_arr = new BitArray(16);                  s = Convert.ToString((Int16)obj' 2).PadLeft(16' '0');                  for (int i = 0; i < 16; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((UInt32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int32)))              {                  bit_arr = new BitArray(32);                  s = Convert.ToString((Int32)obj' 2).PadLeft(32' '0');                  for (int i = 0; i < 32; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(UInt64)))              {                  bit_arr = new BitArray(64);                  Int64 tempV = (Int64)(UInt64)obj;                  s = Convert.ToString(tempV' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(Int64)))              {                  bit_arr = new BitArray(64);                  s = Convert.ToString((Int64)obj' 2).PadLeft(64' '0');                  for (int i = 0; i < 64; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;              }              else if (type.Equals(typeof(string)))              {                  int len = ((string)obj).Length * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((string)obj).Length; k++)                  {                      s = Convert.ToString(((string)obj)[k]' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(BitArray)))              {                  int len = ((BitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((BitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(LLRPBitArray)))              {                  int len = ((LLRPBitArray)obj).Count * 1;                  bit_arr = new BitArray(len);                  for (int k = 0; k < len; k++) bit_arr[k] = ((LLRPBitArray)obj)[k];                  return bit_arr;              }              else if (type.Equals(typeof(ByteArray)))              {                  int len = ((ByteArray)obj).Count * 8;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((ByteArray)obj).Count; k++)                  {                      s = Convert.ToString((byte)(((ByteArray)obj)[k])' 2).PadLeft(8' '0');                      for (int i = 0; i < 8; i++) bit_arr[k * 8 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt16Array)))              {                  int len = ((UInt16Array)obj).Count * 16;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt16Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt16)(((UInt16Array)obj)[k])' 2).PadLeft(16' '0');                      for (int i = 0; i < 16; i++) bit_arr[k * 16 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else if (type.Equals(typeof(UInt32Array)))              {                  int len = ((UInt32Array)obj).Count * 32;                  bit_arr = new BitArray(len);                    for (int k = 0; k < ((UInt32Array)obj).Count; k++)                  {                      s = Convert.ToString((UInt32)(((UInt32Array)obj)[k])' 2).PadLeft(32' '0');                      for (int i = 0; i < 32; i++) bit_arr[k * 32 + i] = (s[i] == '1');                  }                  return bit_arr;              }              else              {                  bit_arr = new BitArray(length);                  s = Convert.ToString((Int32)obj' 2).PadLeft(length' '0');                  for (int i = 0; i < length; i++) bit_arr[i] = (s[i] == '1');                  return bit_arr;                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertLongToString,The following statement contains a magic number: int nLen = 8 - strTemp.Length;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertHexStringToByteArray,The following statement contains a magic number: int nSize = (int)Math.Ceiling(fLen / 2);
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertHexStringToByteArray,The following statement contains a magic number: if (nSize * 2 > fLen)              {                  strArray = "0" + str;              }              else                  strArray = str;
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertHexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < nSize; i++)              {                  int index = i * 2;                  char[] cArr = new char[] { strArray[index]' strArray[index + 1] };                    string s = new string(cArr);                    try                  {                      bytes[i] = Convert.ToByte(s' 16);                  }                  catch (System.OverflowException)                  {                      System.Console.WriteLine(                          "Conversion from string to byte overflowed.");                  }                  catch (System.FormatException)                  {                      System.Console.WriteLine(                          "The string is not formatted as a byte.");                  }                  catch (System.ArgumentNullException)                  {                      System.Console.WriteLine(                          "The string is null.");                  }                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertHexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < nSize; i++)              {                  int index = i * 2;                  char[] cArr = new char[] { strArray[index]' strArray[index + 1] };                    string s = new string(cArr);                    try                  {                      bytes[i] = Convert.ToByte(s' 16);                  }                  catch (System.OverflowException)                  {                      System.Console.WriteLine(                          "Conversion from string to byte overflowed.");                  }                  catch (System.FormatException)                  {                      System.Console.WriteLine(                          "The string is not formatted as a byte.");                  }                  catch (System.ArgumentNullException)                  {                      System.Console.WriteLine(                          "The string is null.");                  }                }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToHexString,The following statement contains a magic number: while (tmp.Length > 0)              {                  int index = tmp.Length > 4 ? (tmp.Length - 4) : 0;                  int length = tmp.Length > 4 ? 4 : tmp.Length;                    string str = tmp.Substring(index' length);                  tmp = tmp.Remove(index' length);                    UInt64 dec = ConvertBinaryStringToDecimal(str);                    string s = Convert.ToString((long)dec' 16);                    strHex = strHex.Insert(0' s);              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToHexString,The following statement contains a magic number: while (tmp.Length > 0)              {                  int index = tmp.Length > 4 ? (tmp.Length - 4) : 0;                  int length = tmp.Length > 4 ? 4 : tmp.Length;                    string str = tmp.Substring(index' length);                  tmp = tmp.Remove(index' length);                    UInt64 dec = ConvertBinaryStringToDecimal(str);                    string s = Convert.ToString((long)dec' 16);                    strHex = strHex.Insert(0' s);              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToHexString,The following statement contains a magic number: while (tmp.Length > 0)              {                  int index = tmp.Length > 4 ? (tmp.Length - 4) : 0;                  int length = tmp.Length > 4 ? 4 : tmp.Length;                    string str = tmp.Substring(index' length);                  tmp = tmp.Remove(index' length);                    UInt64 dec = ConvertBinaryStringToDecimal(str);                    string s = Convert.ToString((long)dec' 16);                    strHex = strHex.Insert(0' s);              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToHexString,The following statement contains a magic number: while (tmp.Length > 0)              {                  int index = tmp.Length > 4 ? (tmp.Length - 4) : 0;                  int length = tmp.Length > 4 ? 4 : tmp.Length;                    string str = tmp.Substring(index' length);                  tmp = tmp.Remove(index' length);                    UInt64 dec = ConvertBinaryStringToDecimal(str);                    string s = Convert.ToString((long)dec' 16);                    strHex = strHex.Insert(0' s);              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToHexString,The following statement contains a magic number: while (tmp.Length > 0)              {                  int index = tmp.Length > 4 ? (tmp.Length - 4) : 0;                  int length = tmp.Length > 4 ? 4 : tmp.Length;                    string str = tmp.Substring(index' length);                  tmp = tmp.Remove(index' length);                    UInt64 dec = ConvertBinaryStringToDecimal(str);                    string s = Convert.ToString((long)dec' 16);                    strHex = strHex.Insert(0' s);              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertBinaryStringToDecimal,The following statement contains a magic number: if (strBinary.Length > 64)              {                  throw new Exception("String is longer than 64 bits' less than 64 bits is required");              }
Magic Number,LLRP.DataType,Util,C:\repos\wisp_impinj-reader-app\LLRP\LLRPUtil.cs,ConvertDecimalToBinaryString,The following statement contains a magic number: string s = Convert.ToString((long)dec' 2);
