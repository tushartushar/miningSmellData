Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FullScale180.SemanticLogging.Utility,ElasticsearchEventEntrySerializer,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Utility\ElasticsearchEventEntrySerializer.cs,WriteJsonEntry,Cyclomatic complexity of the method is 8
Long Parameter List,FullScale180.SemanticLogging,ElasticsearchLog,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\ElasticsearchLog.cs,LogToElasticsearch,The method has 11 parameters. Parameters: eventStream' instanceName' connectionString' index' type' flattenPayload' bufferingInterval' onCompletedTimeout' bufferingCount' maxBufferSize' globalContextExtension
Long Parameter List,FullScale180.SemanticLogging,ElasticsearchLog,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\ElasticsearchLog.cs,CreateListener,The method has 8 parameters. Parameters: instanceName' connectionString' index' type' flattenPayload' bufferingInterval' listenerDisposeTimeout' maxBufferSize
Long Parameter List,FullScale180.SemanticLogging.Utility,ElasticsearchEventEntrySerializer,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Utility\ElasticsearchEventEntrySerializer.cs,ElasticsearchEventEntrySerializer,The method has 5 parameters. Parameters: indexName' entryType' instanceName' flattenPayload' globalContextExtension
Long Parameter List,FullScale180.SemanticLogging.Sinks,ElasticsearchSink,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Sinks\ElasticsearchSink.cs,ElasticsearchSink,The method has 10 parameters. Parameters: instanceName' connectionString' index' type' flattenPayload' bufferInterval' bufferingCount' maxBufferSize' onCompletedTimeout' jsonGlobalContextExtension
Long Statement,FullScale180.SemanticLogging,Guard,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Guard.cs,ArgumentGreaterOrEqualThan,The length of the statement  "                throw new ArgumentOutOfRangeException(argumentName' argumentValue' string.Format(CultureInfo.CurrentCulture' Properties.Resource.ArgumentNotGreaterOrEqualTo' argumentName' lowerValue)); " is 185.
Long Statement,FullScale180.SemanticLogging,Guard,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Guard.cs,ArgumentLowerOrEqualThan,The length of the statement  "                throw new ArgumentOutOfRangeException(argumentName' argumentValue' string.Format(CultureInfo.CurrentCulture' Properties.Resource.ArgumentNotLowerOrEqualTo' argumentName' higherValue)); " is 184.
Long Statement,FullScale180.SemanticLogging,Guard,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Guard.cs,ArgumentIsValidTimeout,The length of the statement  "                    throw new ArgumentOutOfRangeException(string.Format(CultureInfo.CurrentCulture' Properties.Resource.TimeSpanOutOfRangeError' argumentName)); " is 140.
Long Statement,FullScale180.SemanticLogging.Sinks,ElasticsearchSink,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Sinks\ElasticsearchSink.cs,PublishEventsAsync,The length of the statement  "                using (var serializer = new ElasticsearchEventEntrySerializer(this.index' this.type' this.instanceName' this.flattenPayload' this._jsonGlobalContextExtension)) " is 159.
Long Statement,FullScale180.SemanticLogging.Sinks,ElasticsearchSink,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Sinks\ElasticsearchSink.cs,PublishEventsAsync,The length of the statement  "                var response = await client.PostAsync(this.elasticsearchUrl' content' cancellationTokenSource.Token).ConfigureAwait(false); " is 123.
Long Statement,FullScale180.SemanticLogging.Sinks,ElasticsearchSink,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Sinks\ElasticsearchSink.cs,PublishEventsAsync,The length of the statement  "                        SemanticLoggingEventSource.Log.CustomSinkUnhandledFault(string.Format("Elasticsearch sink unhandled exception {0} messages discarded with server error message {1}"' messagesDiscarded' serverErrorMessage)); " is 205.
Magic Number,FullScale180.SemanticLogging,Guard,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Guard.cs,ArgumentIsValidTimeout,The following statement contains a magic number: if (argumentValue.HasValue)              {                  long totalMilliseconds = (long)argumentValue.Value.TotalMilliseconds;                  if (totalMilliseconds < (long)-1 || totalMilliseconds > (long)2147483647)                  {                      throw new ArgumentOutOfRangeException(string.Format(CultureInfo.CurrentCulture' Properties.Resource.TimeSpanOutOfRangeError' argumentName));                  }              }
Magic Number,FullScale180.SemanticLogging.Sinks,ElasticsearchSink,C:\repos\fullscale180_slab-sinks\src\SemanticLogging.Elasticsearch\Sinks\ElasticsearchSink.cs,PublishEventsAsync,The following statement contains a magic number: try              {                  string logMessages;                  using (var serializer = new ElasticsearchEventEntrySerializer(this.index' this.type' this.instanceName' this.flattenPayload' this._jsonGlobalContextExtension))                  {                      logMessages = serializer.Serialize(collection);                  }                  var content = new StringContent(logMessages);                  content.Headers.ContentType = new MediaTypeHeaderValue("application/json");                    var response = await client.PostAsync(this.elasticsearchUrl' content' cancellationTokenSource.Token).ConfigureAwait(false);                    // If there is an exception                  if (response.StatusCode != HttpStatusCode.OK)                  {                      // Check the response for 400 bad request                      if (response.StatusCode == HttpStatusCode.BadRequest)                      {                          var messagesDiscarded = collection.Count();                            var errorContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            string serverErrorMessage;                            // Try to parse the exception message                          try                          {                              var errorObject = JObject.Parse(errorContent);                              serverErrorMessage = errorObject["error"].Value<string>();                          }                          catch (Exception)                          {                              // If for some reason we cannot extract the server error message log the entire response                              serverErrorMessage = errorContent;                          }                            // We are unable to write the batch of event entries - Possible poison message                          // I don't like discarding events but we cannot let a single malformed event prevent others from being written                          // We might want to consider falling back to writing entries individually here                          SemanticLoggingEventSource.Log.CustomSinkUnhandledFault(string.Format("Elasticsearch sink unhandled exception {0} messages discarded with server error message {1}"' messagesDiscarded' serverErrorMessage));                            return messagesDiscarded;                      }                        // This will leave the messages in the buffer                      return 0;                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                  var responseObject = JObject.Parse(responseString);                    var items = responseObject["items"] as JArray;                    // If the response return items collection                  if (items != null)                  {                      // NOTE: This only works with Elasticsearch 1.0                      // Alternatively we could query ES as part of initialization check results or fall back to trying <1.0 parsing                      // We should also consider logging errors for individual entries                      return items.Count(t => t["create"]["status"].Value<int>().Equals(201));                        // Pre-1.0 Elasticsearch                      // return items.Count(t => t["create"]["ok"].Value<bool>().Equals(true));                  }                    return 0;              }              catch (OperationCanceledException)              {                  return 0;              }              catch (Exception ex)              {                  // Although this is generally considered an anti-pattern this is not logged upstream and we have context                  SemanticLoggingEventSource.Log.CustomSinkUnhandledFault(ex.ToString());                  throw;              }
