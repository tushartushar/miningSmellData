Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SqlLinq,DictionaryComparer<TKey;TValue>,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\DictionaryComparer.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,SqlLinq,SqlParser,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,SqlLinq,TypeExtensions,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\TypeExtensions.cs,WidestNullable,Cyclomatic complexity of the method is 13
Complex Method,SqlLinq,TypeExtensions,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\TypeExtensions.cs,Widest,Cyclomatic complexity of the method is 17
Complex Method,SqlLinq.SyntaxTree,SelectNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,Cyclomatic complexity of the method is 8
Complex Method,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,Cyclomatic complexity of the method is 8
Long Statement,SqlLinq,DynamicGetMemberBinder,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\DynamicGetMemberBinder.cs,FallbackGetMember,The length of the statement  "            return DynamicMetaObject.Create(d' Expression.MakeIndex(Expression.Constant(d)' _indexer' new Expression[] { Expression.Constant(this.Name) })); " is 144.
Long Statement,SqlLinq,JoinQuery<TSource;TInner;TResult>,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\JoinQuery.cs,OnCompile,The length of the statement  "                _resultSelector = SyntaxNode.GroupByClause.CreateGroupBySelector<JoinResultSelector<TSource' TInner>' TResult>(SyntaxNode.Columns.Aggregates); " is 142.
Long Statement,SqlLinq,ParserFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\ParserFactory.cs,InitializeFactoryFromResource,The length of the statement  "            using (BinaryReader reader = new BinaryReader(Assembly.GetExecutingAssembly().GetManifestResourceStream("SqlLinq.SQL-ANSI-89.4.cgt"))) " is 134.
Long Statement,SqlLinq,QueryBase<TResult>,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\QueryBase.cs,Compile,The length of the statement  "                throw new SqlException(string.Format("SQL parse error:\n\t{0}\nin statement\n\t{1}"' parser.ErrorString' parser.ErrorLine)); " is 124.
Long Statement,SqlLinq,SqlParser,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,The length of the statement  "                        ErrorString = string.Format("Lexical Error. Line {0}. Token {1} was not expected."' m_parser.LineNumber' m_parser.TokenText); " is 125.
Long Statement,SqlLinq,SyntaxRuleFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxRuleFactory.cs,CreateNode,The length of the statement  "            NonTerminalNode node = _implTypes.ContainsKey(rule.Index) ? _implTypes.CreateInstance(rule.Index) : new NonTerminalNode(); " is 122.
Long Statement,SqlLinq,SyntaxRuleFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxRuleFactory.cs,LoadImplTypes,The length of the statement  "            loader.LoadMany(t => t.GetCustomAttributes(typeof(SyntaxNodeAttribute)' false).Select(attr => (int)((SyntaxNodeAttribute)attr).RuleConstant)); " is 142.
Long Statement,SqlLinq,ExpressionFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoObjectMembers,The length of the statement  "                               Expression.Bind(typeof(TResult).GetPropertyOrField(field.Item2)' CreateFieldSelector(item' field.Item1' typeof(TResult).GetFieldType(field.Item2))); " is 148.
Long Statement,SqlLinq,ExpressionFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoObjectMembers,The length of the statement  "            return Expression.Lambda<Func<TSource' TResult>>(Expression.MemberInit(Expression.New(typeof(TResult))' bindings)' item); " is 121.
Long Statement,SqlLinq,ExpressionFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateNewObjectExpression,The length of the statement  "            var bindings = zip.Select(tuple => CreateFieldSelector(item' tuple.Item1' tuple.Item2));   // the values that will intialize a TResult " is 134.
Long Statement,SqlLinq.SyntaxTree,SelectNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,The length of the statement  "                    throw new SqlException(string.Format("The query contains the field '{0}' that is not matched between the select list and group by clause."' difference.First())); " is 161.
Long Statement,SqlLinq.SyntaxTree,SelectNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,The length of the statement  "                        throw new SqlException(string.Format("The query specifies DISTINCT or GROUP BY but contains an ORDER BY field '{0}' that is not included in the result list."' item.Id.LookupId)); " is 178.
Long Statement,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CreateGroupBySelector,The length of the statement  "            GroupByCall<TSource' TResult> groupingCall = GroupByCallFactory.Create<TSource' TResult>(sourceFields' aggregateDelegates); " is 123.
Long Statement,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CreateGroupBySelector,The length of the statement  "            var groupByExpression = Expression.Call(typeof(Enumerable)' "GroupBy"' new Type[] { typeof(TSource)' tupleType' typeof(TResult) }' source' newTuple' resultSelectorLambda); " is 171.
Long Statement,SqlLinq.SyntaxTree.Clauses,OrderByItem,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\OrderByItem.cs,CreateExpression,The length of the statement  "            return Expression.Call(typeof(Enumerable)' IsDescending ? functionName + "Descending" : functionName' new Type[] { tSource' lambda.ReturnType }' param' lambda); " is 160.
Long Statement,SqlLinq.SyntaxTree.Expressions,ValueListNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\ValueListNode.cs,CreateExpression,The length of the statement  "            return Expression.NewArrayInit(type' FindDescendants<LiteralNode>().Select(l => l.CreateExpression(sourceData' param))); " is 120.
Long Statement,SqlLinq.SyntaxTree.Expressions,TupleNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\TupleNode.cs,CreateExpression,The length of the statement  "            return CreateChildExpression(sourceData' param' 1); // a tuple will of the form '(' '<expression>' ')' so return the expression of the middle node " is 146.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The length of the statement  "            return CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 2)' CreateChildExpression(sourceData' param' 4)); " is 140.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The length of the statement  "            return Expression.Not(CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 3)' CreateChildExpression(sourceData' param' 5))); " is 156.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotInNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotInNode.cs,CreateExpression,The length of the statement  "            return Expression.Not(CreateInExpression(CreateChildExpression(sourceData' param' 3)' CreateChildExpression(sourceData' param' 0))); " is 132.
Long Statement,SqlLinq.SyntaxTree.Aggregates,CountNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Aggregates\CountNode.cs,GetPropertyOrFieldAggregateExpression,The length of the statement  "            return Expression.Call(EvaluatatorType' Name' new Type[] { tSource' tSource.GetFieldType(SourceFieldName) }' param' lambda); " is 124.
Long Statement,SqlLinq.SyntaxTree.Joins,Join,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,CreateJoinFunction,The length of the statement  "            var _new = Expression.New(typeof(JoinResultSelector<TOuter' TInner>).GetConstructor(new Type[] { typeof(object)' typeof(object) })' outer' inner); " is 146.
Long Statement,SqlLinq.SyntaxTree.Joins,Join,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,CreateJoinFunction,The length of the statement  "            var call = Expression.Call(typeof(Enumerable)' "Join"' new Type[] { typeof(TOuter)' typeof(TInner)' keyType' typeof(JoinResultSelector<TOuter' TInner>) }' outerData' innerData' outerKeySelector' innerKeySelector' resultSelector); " is 229.
Long Statement,SqlLinq.SyntaxTree.Joins,Join,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,CreateJoinFunction,The length of the statement  "            return Expression.Lambda<Func<IEnumerable<TOuter>' IEnumerable<TInner>' IEnumerable<JoinResultSelector<TOuter' TInner>>>>(call' outerData' innerData).Compile(); " is 160.
Magic Number,SqlLinq,DictionaryComparer<TKey;TValue>,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\DictionaryComparer.cs,GetHashCode,The following statement contains a magic number: hash ^= ShiftAndWrap(key' 2) ^ value;
Magic Number,SqlLinq,DictionaryComparer<TKey;TValue>,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\DictionaryComparer.cs,ShiftAndWrap,The following statement contains a magic number: uint wrapped = number >> (32 - positions);
Magic Number,SqlLinq,ExpressionFactory,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoDictionary,The following statement contains a magic number: Debug.Assert(typeof(TResult).GetGenericArguments().Length == 2);
Magic Number,SqlLinq,TypeExtensions,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\TypeExtensions.cs,GetDictionaryValueType,The following statement contains a magic number: Debug.Assert(dictionaryType.GetGenericArguments().Length == 2);
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CheckSyntax,The following statement contains a magic number: GroupByItems.Count() > 8
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: Debug.Assert(typeArgumentCount >= 1 && typeArgumentCount <= 8);
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
Magic Number,SqlLinq.SyntaxTree.Expressions,BinaryExpressionNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\BinaryExpressionNode.cs,CreateExpression,The following statement contains a magic number: var right = CreateChildExpression(sourceData' param' 2);
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The following statement contains a magic number: return CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 2)' CreateChildExpression(sourceData' param' 4));
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The following statement contains a magic number: return CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 2)' CreateChildExpression(sourceData' param' 4));
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,InNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\InNode.cs,CreateExpression,The following statement contains a magic number: return CreateInExpression(CreateChildExpression(sourceData' param' 2)' CreateChildExpression(sourceData' param' 0));
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not(CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 3)' CreateChildExpression(sourceData' param' 5)));
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not(CreateBetweenExpression(sourceData' param' CreateChildExpression(sourceData' param' 3)' CreateChildExpression(sourceData' param' 5)));
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotInNode,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotInNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not(CreateInExpression(CreateChildExpression(sourceData' param' 3)' CreateChildExpression(sourceData' param' 0)));
Magic Number,SqlLinq.SyntaxTree.Joins,Join,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,Join,The following statement contains a magic number: _leftId = new Lazy<Identifier>(() => new Identifier(FindChild<TerminalNode>(4).Text));
Magic Number,SqlLinq.SyntaxTree.Joins,Join,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,Join,The following statement contains a magic number: _rightId = new Lazy<Identifier>(() => new Identifier(FindChild<TerminalNode>(6).Text));
Magic Number,SqlLinq.SyntaxTree.Expressions.Literals,IntegerLiteral,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Literals\IntegerLiteral.cs,GetCoercionMethod,The following statement contains a magic number: IntPtr.Size == 8
Missing Default,SqlLinq,SqlParser,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,The following switch statement is missing a default case: switch (m_parser.Parse())                  {                      case ParseMessage.LexicalError:                          ErrorString = string.Format("Lexical Error. Line {0}. Token {1} was not expected."' m_parser.LineNumber' m_parser.TokenText);                          return false;                        case ParseMessage.SyntaxError:                          StringBuilder text = new StringBuilder();                          foreach (Symbol tokenSymbol in m_parser.GetExpectedTokens())                              text.AppendFormat(" {0}"' tokenSymbol);                            ErrorString = string.Format("Syntax Error. Line {0}. Expecting: {1}."' m_parser.LineNumber' text);                            return false;                        case ParseMessage.Reduction:                          NonTerminalNode nonTerminal = SyntaxRuleFactory.CreateNode(m_parser.ReductionRule);                          m_parser.TokenSyntaxNode = nonTerminal;                            for (int i = 0; i < m_parser.ReductionCount; i++)                              nonTerminal.AppendChildNode(m_parser.GetReductionSyntaxNode(i) as SyntaxNode);                            // post parsing syntax check (used to do things like segregate the difference between HAVING and WHERE                           // expressions in terms of the validtity of aggregate expressions)                          nonTerminal.CheckSyntax();                            break;                        case ParseMessage.TokenRead:                          m_parser.TokenSyntaxNode = new TerminalNode(m_parser);                          break;                        case ParseMessage.Accept:                          SyntaxTree = m_parser.TokenSyntaxNode as NonTerminalNode;                          ErrorString = null;                          return true;                        case ParseMessage.InternalError:                          ErrorString = "Internal Error. Something is horribly wrong.";                          return false;                        case ParseMessage.NotLoadedError:                          ErrorString = "Grammar Table is not loaded.";                          return false;                        case ParseMessage.CommentError:                          ErrorString = "Comment Error. Unexpected end of input.";                          return false;                        case ParseMessage.CommentBlockRead:                      case ParseMessage.CommentLineRead:                          // don't do anything                           break;                  }
Missing Default,SqlLinq.SyntaxTree.Clauses,GroupByClause,D:\research\architectureSmells\repos\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following switch statement is missing a default case: switch (typeArgumentCount)              {                  case 1: return typeof(Tuple<>);                  case 2: return typeof(Tuple<'>);                  case 3: return typeof(Tuple<''>);                  case 4: return typeof(Tuple<'''>);                  case 5: return typeof(Tuple<''''>);                  case 6: return typeof(Tuple<'''''>);                  case 7: return typeof(Tuple<''''''>);                  case 8: return typeof(Tuple<'''''''>);              }
