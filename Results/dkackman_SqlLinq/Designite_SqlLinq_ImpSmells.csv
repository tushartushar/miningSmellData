Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SqlLinq,SqlParser,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,Cyclomatic complexity of the method is 32
Complex Method,SqlLinq.SyntaxTree,SelectNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,Cyclomatic complexity of the method is 8
Complex Method,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,Cyclomatic complexity of the method is 8
Long Statement,SqlLinq,JoinQuery,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\JoinQuery.cs,OnCompile,The length of the statement  "		_resultSelector = SyntaxNode.GroupByClause.CreateGroupBySelector<JoinResultSelector<TSource' TInner>' TResult> (SyntaxNode.Columns.Aggregates); " is 143.
Long Statement,SqlLinq,ParserFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\ParserFactory.cs,InitializeFactoryFromResource,The length of the statement  "	using (BinaryReader reader = new BinaryReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream ("SqlLinq.SQL-ANSI-89.4.cgt"))) " is 137.
Long Statement,SqlLinq,QueryBase,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\QueryBase.cs,Compile,The length of the statement  "		throw new SqlException (string.Format ("SQL parse error:\n\t{0}\nin statement\n\t{1}"' parser.ErrorString' parser.ErrorLine)); " is 126.
Long Statement,SqlLinq,SqlParser,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,The length of the statement  "			ErrorString = string.Format ("Lexical Error. Line {0}. Token {1} was not expected."' m_parser.LineNumber' m_parser.TokenText); " is 126.
Long Statement,SqlLinq,SyntaxRuleFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxRuleFactory.cs,CreateNode,The length of the statement  "	NonTerminalNode node = _implTypes.ContainsKey (rule.Index) ? _implTypes.CreateInstance (rule.Index) : new NonTerminalNode (); " is 125.
Long Statement,SqlLinq,SyntaxRuleFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxRuleFactory.cs,LoadImplTypes,The length of the statement  "	loader.LoadMany (t => t.GetCustomAttributes (typeof(SyntaxNodeAttribute)' false).Select (attr => (int)((SyntaxNodeAttribute)attr).RuleConstant)); " is 145.
Long Statement,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateDictionaryBindings,The length of the statement  "	select Expression.ElementInit (addMethod' Expression.Constant (field.Item2)' CreateFieldSelector (item' field.Item1' typeof(TResult).GetDictionaryValueType ())); " is 161.
Long Statement,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoObjectMembers,The length of the statement  "	var bindings = from field in sourceFields.Zip (resultFields' (source' result) => new Tuple<string' string> (source' result)) " is 124.
Long Statement,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoObjectMembers,The length of the statement  "	select Expression.Bind (typeof(TResult).GetPropertyOrField (field.Item2)' CreateFieldSelector (item' field.Item1' typeof(TResult).GetFieldType (field.Item2))); " is 159.
Long Statement,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoObjectMembers,The length of the statement  "	return Expression.Lambda<Func<TSource' TResult>> (Expression.MemberInit (Expression.New (typeof(TResult))' bindings)' item); " is 124.
Long Statement,SqlLinq,TypeExtensions,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\TypeExtensions.cs,GetPropertyOrFieldValue,The length of the statement  "	PropertyInfo p = o.GetType ().GetProperty (name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase); " is 120.
Long Statement,SqlLinq.SyntaxTree,SelectNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,The length of the statement  "			throw new SqlException (string.Format ("The query contains the field '{0}' that is not matched between the select list and group by clause."' difference.First ())); " is 164.
Long Statement,SqlLinq.SyntaxTree,SelectNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\SelectNode.cs,CheckSyntax,The length of the statement  "				throw new SqlException (string.Format ("The query specifies DISTINCT or GROUP BY but contains an ORDER BY field '{0}' that is not included in the result list."' item.Id.LookupId)); " is 180.
Long Statement,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CreateGroupBySelector,The length of the statement  "	select new KeyValuePair<string' Delegate> (a.ColumnAlias' Expression.Lambda (a.GetCallExpression (typeof(TSource)' source)' source).Compile ()); " is 144.
Long Statement,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CreateGroupBySelector,The length of the statement  "	GroupByCall<TSource' TResult> groupingCall = GroupByCallFactory.Create<TSource' TResult> (sourceFields' aggregateDelegates); " is 124.
Long Statement,SqlLinq.SyntaxTree.Expressions,ValueListNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\ValueListNode.cs,CreateExpression,The length of the statement  "	return Expression.NewArrayInit (type' FindDescendants<LiteralNode> ().Select (l => l.CreateExpression (sourceData' param))); " is 124.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The length of the statement  "	return CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 2)' CreateChildExpression (sourceData' param' 4)); " is 143.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateBetweenExpression,The length of the statement  "	return Expression.TryCatch (Expression.And (gte' lte)' Expression.Catch (typeof(Exception)' Expression.Constant (false))); " is 122.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The length of the statement  "	return Expression.Not (CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 3)' CreateChildExpression (sourceData' param' 5))); " is 160.
Long Statement,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotInNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotInNode.cs,CreateExpression,The length of the statement  "	return Expression.Not (CreateInExpression (CreateChildExpression (sourceData' param' 3)' CreateChildExpression (sourceData' param' 0))); " is 136.
Long Statement,SqlLinq.SyntaxTree.Joins,Join,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,CreateJoinFunction,The length of the statement  "	return Expression.Lambda<Func<IEnumerable<TOuter>' IEnumerable<TInner>' IEnumerable<JoinResultSelector<TOuter' TInner>>>> (call' outerData' innerData).Compile (); " is 162.
Long Statement,SqlLinq.SyntaxTree.Joins,Join,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,CreateKeySelector,The length of the statement  "	if (name.Equals ("this"' StringComparison.OrdinalIgnoreCase) || name.Equals ("that"' StringComparison.OrdinalIgnoreCase)) " is 121.
Magic Number,SqlLinq,DictionaryComparer,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\DictionaryComparer.cs,GetHashCode,The following statement contains a magic number: foreach (KeyValuePair<TKey' TValue> pair in obj) {  	int key = pair.Key.GetHashCode ();  	// key cannot be null  	int value = pair.Value != null ? pair.Value.GetHashCode () : 0;  	hash ^= ShiftAndWrap (key' 2) ^ value;  }  
Magic Number,SqlLinq,DictionaryComparer,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\DictionaryComparer.cs,GetHashCode,The following statement contains a magic number: hash ^= ShiftAndWrap (key' 2) ^ value;  
Magic Number,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoDictionary,The following statement contains a magic number: if (constructor == null) {  	Debug.Assert (typeof(TResult).IsGenericType);  	Debug.Assert (typeof(TResult).GetGenericArguments ().Length == 2);  	Debug.Assert (typeof(TResult).GetGenericArguments () [0] == typeof(string));  	Type def = typeof(Dictionary<' >).MakeGenericType (typeof(TResult).GetGenericArguments ());  	constructor = def.GetConstructor (new Type[] {  		typeof(StringComparer)  	});  }  
Magic Number,SqlLinq,ExpressionFactory,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\ExpressionFactory.cs,CreateSelectIntoDictionary,The following statement contains a magic number: Debug.Assert (typeof(TResult).GetGenericArguments ().Length == 2);  
Magic Number,SqlLinq,TypeExtensions,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\TypeExtensions.cs,GetDictionaryValueType,The following statement contains a magic number: Debug.Assert (dictionaryType.GetGenericArguments ().Length == 2);  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,CheckSyntax,The following statement contains a magic number: if (GroupByItems.Count () > 8)  	throw new SqlException ("Only 8 fields or less are currently supported for grouping");  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: Debug.Assert (typeArgumentCount >= 1 && typeArgumentCount <= 8);  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following statement contains a magic number: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The following statement contains a magic number: return CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 2)' CreateChildExpression (sourceData' param' 4));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,BetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\BetweenNode.cs,CreateExpression,The following statement contains a magic number: return CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 2)' CreateChildExpression (sourceData' param' 4));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,InNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\InNode.cs,CreateExpression,The following statement contains a magic number: return CreateInExpression (CreateChildExpression (sourceData' param' 2)' CreateChildExpression (sourceData' param' 0));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not (CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 3)' CreateChildExpression (sourceData' param' 5)));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotBetweenNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotBetweenNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not (CreateBetweenExpression (sourceData' param' CreateChildExpression (sourceData' param' 3)' CreateChildExpression (sourceData' param' 5)));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Predicates.Comparison,NotInNode,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Predicates\Comparison\NotInNode.cs,CreateExpression,The following statement contains a magic number: return Expression.Not (CreateInExpression (CreateChildExpression (sourceData' param' 3)' CreateChildExpression (sourceData' param' 0)));  
Magic Number,SqlLinq.SyntaxTree.Joins,Join,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,Join,The following statement contains a magic number: _leftId = new Lazy<Identifier> (() => new Identifier (FindChild<TerminalNode> (4).Text));  
Magic Number,SqlLinq.SyntaxTree.Joins,Join,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Joins\Join.cs,Join,The following statement contains a magic number: _rightId = new Lazy<Identifier> (() => new Identifier (FindChild<TerminalNode> (6).Text));  
Magic Number,SqlLinq.SyntaxTree.Expressions.Literals,IntegerLiteral,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Expressions\Literals\IntegerLiteral.cs,GetCoercionMethod,The following statement contains a magic number: if (IntPtr.Size == 8)  	return typeof(Convert).GetMethod ("ToInt64"' new Type[] {  		from  	});  
Missing Default,SqlLinq,SqlParser,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SqlParser.cs,Parse,The following switch statement is missing a default case: switch (m_parser.Parse ()) {  case ParseMessage.LexicalError:  	ErrorString = string.Format ("Lexical Error. Line {0}. Token {1} was not expected."' m_parser.LineNumber' m_parser.TokenText);  	return false;  case ParseMessage.SyntaxError:  	StringBuilder text = new StringBuilder ();  	foreach (Symbol tokenSymbol in m_parser.GetExpectedTokens ())  		text.AppendFormat (" {0}"' tokenSymbol);  	ErrorString = string.Format ("Syntax Error. Line {0}. Expecting: {1}."' m_parser.LineNumber' text);  	return false;  case ParseMessage.Reduction:  	NonTerminalNode nonTerminal = SyntaxRuleFactory.CreateNode (m_parser.ReductionRule);  	m_parser.TokenSyntaxNode = nonTerminal;  	for (int i = 0; i < m_parser.ReductionCount; i++)  		nonTerminal.AppendChildNode (m_parser.GetReductionSyntaxNode (i) as SyntaxNode);  	// post parsing syntax check (used to do things like segregate the difference between HAVING and WHERE   	// expressions in terms of the validtity of aggregate expressions)  	nonTerminal.CheckSyntax ();  	break;  case ParseMessage.TokenRead:  	m_parser.TokenSyntaxNode = new TerminalNode (m_parser);  	break;  case ParseMessage.Accept:  	SyntaxTree = m_parser.TokenSyntaxNode as NonTerminalNode;  	ErrorString = null;  	return true;  case ParseMessage.InternalError:  	ErrorString = "Internal Error. Something is horribly wrong.";  	return false;  case ParseMessage.NotLoadedError:  	ErrorString = "Grammar Table is not loaded.";  	return false;  case ParseMessage.CommentError:  	ErrorString = "Comment Error. Unexpected end of input.";  	return false;  case ParseMessage.CommentBlockRead:  case ParseMessage.CommentLineRead:  	// don't do anything   	break;  }  
Missing Default,SqlLinq.SyntaxTree.Clauses,GroupByClause,F:\newReposMay17\dkackman_SqlLinq\SqlLinq\SyntaxTree\Clauses\GroupByClause.cs,GetTupleTemplate,The following switch statement is missing a default case: switch (typeArgumentCount) {  case 1:  	return typeof(Tuple<>);  case 2:  	return typeof(Tuple<' >);  case 3:  	return typeof(Tuple<' ' >);  case 4:  	return typeof(Tuple<' ' ' >);  case 5:  	return typeof(Tuple<' ' ' ' >);  case 6:  	return typeof(Tuple<' ' ' ' ' >);  case 7:  	return typeof(Tuple<' ' ' ' ' ' >);  case 8:  	return typeof(Tuple<' ' ' ' ' ' ' >);  }  
