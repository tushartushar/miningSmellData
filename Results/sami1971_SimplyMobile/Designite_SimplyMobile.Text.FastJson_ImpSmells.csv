Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetPropInfo,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Num,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Obj,Cyclomatic complexity of the method is 9
Long Parameter List,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,TypeInfo,The method has 5 parameters. Parameters: type' self' eType' kType' vType
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Error,The length of the statement  "{ return new Exception(System.String.Format("{0} at {1} (found: '{2}')"' message' at' ((chr < EOF) ? ("\\" + chr) : "EOF"))); }" is 127.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseSingle,The length of the statement  "                if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseDouble,The length of the statement  "                if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseDateTimeOffset,The length of the statement  "            if (!DateTimeOffset.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTimeOffset)) " is 165.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseDateTime,The length of the statement  "            if (!DateTime.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTime)) " is 153.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Num,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Str,The length of the statement  "{ var s = ParseString(0); if ((outer != 2) || ((s != null) && (s.Length == 1))) return ((outer == 2) ? (object)s[0] : s); else throw Error("Bad character"); }" is 158.
Long Statement,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Entry,The length of the statement  "                types[outer] = (TypeInfo)Activator.CreateInstance(typeof(TypeInfo<>).MakeGenericType(type)' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic' null' new object[] { outer' et' kt' vt }' null); " is 224.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetCtor,The length of the statement  "                var type = (!list ? ((clr == typeof(object)) ? typeof(Dictionary<string' object>) : clr) : typeof(List<>).MakeGenericType(clr)); " is 128.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = type.GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 196.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = (type = (((type != clr) && clr.IsClass) ? clr : type)).GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 246.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetEnumInfos,The length of the statement  "                    einfo.Add(name' new EnumInfo { Name = name' Value = Convert.ToInt64(System.Enum.Parse(type' name))' Len = name.Length }); " is 121.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Set" + name' null' new Type[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 173.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = name' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>))' Len = name.Length }; " is 181.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Add"' null' new Type[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 166.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var sBrace = typeof(JsonParser).GetMethod("SBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var eBrace = typeof(JsonParser).GetMethod("EBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var kColon = typeof(JsonParser).GetMethod("KColon"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                var sComma = typeof(JsonParser).GetMethod("SComma"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = String.Empty' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>)) }; " is 170.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetEnumUnderlyingType,The length of the statement  "                return enumType.GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)[0].FieldType; " is 163.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetParseName,The length of the statement  "                var typeName = (!WellKnown.Contains(type) ? ((type.IsEnum && WellKnown.Contains(GetEnumUnderlyingType(type))) ? GetEnumUnderlyingType(type).Name : null) : type.Name); " is 166.
Long Statement,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetParserParse,The length of the statement  "                return typeof(JsonParser).GetMethod((pName ?? "Val")' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 138.
Long Statement,System.Text.Json,TypeInfo<T>,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetParseFunc,The length of the statement  "                    var method = new System.Reflection.Emit.DynamicMethod(parse.Name' typeof(R)' new Type[] { typeof(JsonParser)' typeof(int) }' typeof(string)' true); " is 147.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt16,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt32,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt64,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = '0'; c <= '9'; c++) { HXD[c] = true; HEX[c] = (byte)(c - 48); }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = ANY; c < 128; c++) if (ESC[c] == ANY) ESC[c] = (char)c;
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  int cp = 0' ic = -1;                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if ((ic < 4) || (cp > char.MaxValue)) throw Error("Invalid Unicode character");                  ch = Convert.ToChar(cp);              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetEnumInfo,The following statement contains a magic number: if (n > 0)              {                  while (true)                  {                      switch (ch = chr)                      {                          case '\\': ch = Read(); ec = true; break;                          case '"': Read(); return (((i < n) && (c > 0)) ? a[i] : null);                          default: break;                      }                      if (ch < EOF) { if (!ec || (ch >= 128)) { nc = ch; Read(); } else { nc = Esc(ch); ec = false; } } else break;                      while ((i < n) && ((c >= a[i].Len) || (a[i].Name[c] != nc))) i++; c++;                  }              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseByte,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (byte)e.Value;                  }                  else { n = ParseByte(0); Space(); Next('"'); return n; }              }              else              {                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (byte)");                  return n;              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseByte,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (byte)e.Value;                  }                  else { n = ParseByte(0); Space(); Next('"'); return n; }              }              else              {                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (byte)");                  return n;              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt16,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (short)e.Value;                  }                  else { n = ParseInt16(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = (short)-it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (short)(ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (short)");                  return (short)checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt16,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (short)e.Value;                  }                  else { n = ParseInt16(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = (short)-it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (short)(ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (short)");                  return (short)checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt32,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (int)e.Value;                  }                  else { n = ParseInt32(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = -it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (int)");                  return checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt32,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return (int)e.Value;                  }                  else { n = ParseInt32(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = -it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (int)");                  return checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt64,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return e.Value;                  }                  else { n = ParseInt64(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = -it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (long)");                  return checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseInt64,The following statement contains a magic number: if ((outer > 0) && (ch == '"'))              {                  ch = Read();                  if ((t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9')))                  {                      var e = GetEnumInfo(t);                      if (e == null) throw Error(System.String.Format("Bad enum value ({0})"' t.Type.FullName));                      return e.Value;                  }                  else { n = ParseInt64(0); Space(); Next('"'); return n; }              }              else              {                  if (ch == '-') { ch = Read(); it = -it; }                  while ((ch >= '0') && (ch <= '9') && (b = true)) { checked { n *= 10; n += (ch - 48); } ch = Read(); }                  if (!b) throw Error("Bad number (long)");                  return checked(it * n);              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,ParseString,The following statement contains a magic number: if (ch == '"')              {                  Read();                  lsb.Length = 0; lln = 0;                  while (true)                  {                      switch (ch = chr)                      {                          case '\\':                              ch = Read(); ec = true;                              break;                          case '"':                              Read();                              return ((outer >= 0) ? ((lsb.Length > 0) ? lsb.ToString() : new string(lbf' 0' lln)) : null);                          default:                              break;                      }                      if (ch < EOF) { if (!ec || (ch >= 128)) Char(ch); else { CharEsc(ch); ec = false; } } else break;                  }              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetPropInfo,The following statement contains a magic number: if (ch == '"')              {                  Read();                  lsb.Length = 0; lln = 0;                  while (true)                  {                      switch (ch = chr)                      {                          case '\\':                              ch = Read(); ec = true;                              break;                          case '"':                              Read();                              return (((i < n) && (c > 0)) ? a[i] : null);                          default:                              break;                      }                      if (ch < EOF) { if (!ec || (ch >= 128)) Char(nc = ch); else { nc = CharEsc(ch); ec = false; } } else break;                      if (k) { while ((i < n) && ((c >= a[i].Len) || (a[i].Name[c] != nc))) i++; c++; }                  }              }
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1))) return ((outer == 2) ? (object)s[0] : s); else throw Error("Bad character");
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1))) return ((outer == 2) ? (object)s[0] : s); else throw Error("Bad character");
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,KColon,The following statement contains a magic number: ParseString(-2);
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,GetKeyValueTypes,The following statement contains a magic number: var kvPair = ((generic != null) && (generic.GetGenericArguments().Length == 2));
Magic Number,System.Text.Json,JsonParser,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,JsonParser,The following statement contains a magic number: for (var input = 0; input < 128; input++) parse[input] = (parse[input] ?? Error);
Magic Number,System.Text.Json,TypeInfo,C:\repos\sami1971_SimplyMobile\Core\Plugins\SimplyMobile.Text.FastJson\JsonParser.cs,TypeInfo,The following statement contains a magic number: var props = ((self > 2) ? type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public) : new System.Reflection.PropertyInfo[] { });
