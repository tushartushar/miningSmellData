Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,Cyclomatic complexity of the method is 16
Complex Method,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,Cyclomatic complexity of the method is 9
Complex Method,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,ListShelvesets,Cyclomatic complexity of the method is 18
Long Parameter List,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetChangesets,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,WithWorkspace,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.VsCommon,WrapperForVersionControlServer,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,QueryHistory,The method has 11 parameters.
Long Parameter List,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,EvaluateCheckin,The method has 7 parameters.
Long Parameter List,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,Checkin,The method has 7 parameters.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the parameter branchChangesetsInTargetBranchForBatch is 38.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the parameter firstChangesetIdOfParentBranch is 30.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the parameter changesetIdsFirstChangesetInMainBranch is 38.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetMergeInfo,The length of the parameter firstChangesetInBranchToCreate is 30.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetMergeInfo,The length of the parameter mergedItemsToFirstChangesetInBranchToCreate is 43.
Long Identifier,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetShelvesetData,The length of the parameter wrapperForVersionControlServer is 30.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperVs2012Base,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Vs2012Base.cs,GetVsInstallDir,The length of the statement  "		vsInstallDir = TryGetRegString (@"Software\WOW6432Node\Microsoft\VisualStudio\" + TfsVersionString' "InstallDir") ?? TryGetRegString (@"Software\Microsoft\VisualStudio\" + TfsVersionString' "InstallDir") ?? TryGetUserRegString (@"Software\WOW6432Node\Microsoft\WDExpress\" + TfsVersionString + "_Config"' "InstallDir") ?? TryGetUserRegString (@"Software\Microsoft\WDExpress\" + TfsVersionString + "_Config"' "InstallDir"); " is 422.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperVs2012Base,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Vs2012Base.cs,GetIdentity,The length of the statement  "	return _bridge.Wrap<WrapperForIdentity' Identity> (Retry.Do (() => GroupSecurityService.ReadIdentity (SearchFactor.AccountName' username' QueryMembership.None))); " is 162.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperVs2012Base,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Vs2012Base.cs,GetTfsCredential,The length of the statement  "	return HasCredentials ? new TfsTeamProjectCollection (uri' GetCredential ()' new UICredentialsProvider ()) : new TfsTeamProjectCollection (uri' new UICredentialsProvider ()); " is 174.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,EnsureAuthenticated,The length of the statement  "			var registered = servers.FirstOrDefault (s => ((string.Compare (s.Name' Url' StringComparison.OrdinalIgnoreCase) == 0) || (string.Compare (s.Name' Uri.EscapeDataString (Url)' StringComparison.OrdinalIgnoreCase) == 0))); " is 219.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetChangesets,The length of the statement  "		changesets = Retry.Do (() => VersionControl.QueryHistory (path' lastChangeset' 0' RecursionType.Full' null' startChangeset' lastChangeset' BatchCount' true' true' true' true).Cast<Changeset> ().ToArray ()); " is 206.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetChangesets,The length of the statement  "		// to the old (iterated) elements and thus the referenced changesets won't be disposed until all elements were iterated. " is 120.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetChangesetsForTfs2008,The length of the statement  "	var changesets = VersionControl.QueryHistory (path' VersionSpec.Latest' 0' RecursionType.Full' null' new ChangesetVersionSpec (startVersion)' VersionSpec.Latest' int.MaxValue' true' true' true).Cast<Changeset> ().OrderBy (changeset => changeset.ChangesetId).ToArray (); " is 269.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetChangesetsForTfs2008,The length of the statement  "	// to the old (iterated) elements and thus the referenced changesets won't be disposed until all elements were iterated. " is 120.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetAllTfsRootBranchesOrderedByCreation,The length of the statement  "	return VersionControl.QueryRootBranchObjects (RecursionType.Full).Where (b => b.Properties.ParentBranch == null).Select (b => b.Properties.RootItem.Item); " is 154.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			foreach (var rootBranch in GetRootChangesetForBranchForTfs2008 (tfsPathBranchToCreate' lastChangesetIdToCheck' tfsPathParentBranch)) { " is 134.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			Trace.WriteLine ("Parameter about parent branch will be ignored because this version of TFS is able to find the parent!"); " is 122.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			throw new GitTfsException ("error : the branch you try to initialize '" + tfsPathBranchToCreate + "' is a root branch (e.g. has no parents)."' new List<string> { " is 161.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "				"Clone this branch from Tfs instead of trying to initialize it!\n   Command: git tfs clone " + Url + " " + tfsPathBranchToCreate " is 128.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			//  3) A folder is created based on the contents of $/MyProject/MyTrunk without branching (e.g. $/MyProject/MyFeature) (C3) " is 123.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "				var changesetEnumerable = VersionControl.QueryHistory (tfsPathBranchToCreate' VersionSpec.Latest' 0' RecursionType.Full' null' null' null' changesetsToRetrieve' false' false' false' true).Cast<Changeset> (); " is 207.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "					var branchChangesetsInTargetBranchForBatch = GetMergeInfo (tfsPathBranchToCreate' tfsPathParentBranch' changeset.ChangesetId' lastChangesetIdToCheck); " is 150.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "				throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to find first changeset for " + tfsPathBranchToCreate); " is 160.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			var rootChangesetInParentBranch = GetRelevantChangesetBasedOnChangeType (branchChangesetInTargetBranch' tfsPathParentBranch' tfsPathBranchToCreate' out renameFromBranch); " is 170.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			var rootChangesetInChildBranch = rootChangesetMergeInfo.SourceChangeset == rootChangesetInParentBranch ? rootChangesetMergeInfo.TargetChangeset : rootChangesetMergeInfo.SourceChangeset; " is 185.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "				Trace.WriteLine ("Found original branch '" + renameFromBranch + "' (renamed in branch '" + tfsPathBranchToCreate + "')"); " is 121.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The length of the statement  "			throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to query history for " + tfsPathBranchToCreate); " is 153.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "		throw new GitTfsException ("This version of TFS Server doesn't permit to use this command :(\nTry using option '--parent-branch'..."); " is 134.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "	var changesetIdsFirstChangesetInMainBranch = VersionControl.GetMergeCandidates (tfsPathParentBranch' tfsPathBranchToCreate' RecursionType.Full).Select (c => c.Changeset.ChangesetId).Where (c => c <= lastChangesetIdToCheck).FirstOrDefault (); " is 241.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "		Trace.WriteLine ("No changeset in main branch since branch done... (need only to find the last changeset in the main branch)"); " is 127.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "			new RootBranch (VersionControl.QueryHistory (tfsPathParentBranch' VersionSpec.Latest' 0' RecursionType.Full' null' new ChangesetVersionSpec (firstChangesetIdOfParentBranch)' VersionSpec.Latest' 1' false' false).Cast<Changeset> ().First ().ChangesetId' tfsPathBranchToCreate) " is 274.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "		var firstBranchChangesetIds = VersionControl.QueryHistory (tfsPathParentBranch' VersionSpec.Latest' 0' RecursionType.Full' null' new ChangesetVersionSpec (lowerBound)' new ChangesetVersionSpec (upperBound)' int.MaxValue' false' false' false).Cast<Changeset> ().Select (c => c.ChangesetId).ToList (); " is 299.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "				new RootBranch (firstBranchChangesetIds.First (cId => cId < changesetIdsFirstChangesetInMainBranch)' tfsPathBranchToCreate) " is 123.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranchForTfs2008,The length of the statement  "				throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to find a previous changeset to changeset n°" + changesetIdsFirstChangesetInMainBranch + " in the branch!!!"); " is 215.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "	var merge = merges.FirstOrDefault (m => m.SourceItem.Equals (tfsPathParentBranch' StringComparison.InvariantCultureIgnoreCase) && !m.TargetItem.Equals (tfsPathParentBranch' StringComparison.InvariantCultureIgnoreCase)); " is 219.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "		merge = merges.FirstOrDefault (m => m.SourceItem.Equals (tfsPathBranchToCreate' StringComparison.InvariantCultureIgnoreCase) && (m.TargetChangeType.HasFlag (ChangeType.Rename) || m.TargetChangeType.HasFlag (ChangeType.SourceRename))); " is 234.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "			merge = merges.FirstOrDefault (m => m.SourceChangeType.HasFlag (ChangeType.Rename) || m.SourceChangeType.HasFlag (ChangeType.SourceRename)); " is 140.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "			Trace.TraceWarning ("warning: git-tfs was unable to find the root changeset (ie the last common commit) between the branch '" + tfsPathBranchToCreate + "' and its parent branch '" + tfsPathParentBranch + "'.\n" + "(Any help to add support of this special case is welcomed! Open an issue on https://github.com/git-tfs/git-tfs/issues )\n\n" + "To be able to continue to fetch the changesets from Tfs'\nplease enter the root changeset id between the branch '" + tfsPathBranchToCreate + "'\n and its parent branch '" + tfsPathParentBranch + "' by analysing the Tfs history..."); " is 574.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "	if (merge.SourceItem.Equals (tfsPathBranchToCreate' StringComparison.InvariantCultureIgnoreCase) && (merge.TargetChangeType.HasFlag (ChangeType.Rename) || merge.TargetChangeType.HasFlag (ChangeType.SourceRename))) { " is 215.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "	} else if (merge.SourceChangeType.HasFlag (ChangeType.Rename) || merge.SourceChangeType.HasFlag (ChangeType.SourceRename)) { " is 124.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "	if (merge.SourceChangeType.HasFlag (ChangeType.Branch) || merge.SourceChangeType.HasFlag (ChangeType.Merge) || merge.SourceChangeType.HasFlag (ChangeType.Add) || merge.SourceChangeType.HasFlag (ChangeType.Rollback) || merge.SourceChangeType.HasFlag (ChangeType.Delete) || merge.SourceChangeType.HasFlag (ChangeType.Undelete)) { " is 327.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "	throw new GitTfsException ("Don't know (yet) how to find the root changeset for an ExtendedMerge of type " + merge.SourceChangeType' new string[] { " is 147.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The length of the statement  "		"Open an Issue on Github to notify the community that you need support for '" + merge.SourceChangeType + "': https://github.com/git-tfs/git-tfs/issues" " is 151.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetMergeInfo,The length of the statement  "		if (lastMerge != null && extendedMerge.SourceItem.ChangeType == lastMerge.SourceChangeType && targetChangeType == lastMerge.TargetChangeType && sourceItem == lastMerge.SourceItem && targetItem == lastMerge.TargetItem) " is 217.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,BuildTfsChangeset,The length of the statement  "	var tfsChangeset = _container.With<ITfsHelper> (this).With<IChangeset> (_bridge.Wrap<WrapperForChangeset' Changeset> (changeset)).GetInstance<TfsChangeset> (); " is 159.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,HasWorkItems,The length of the statement  "	// changeset.WorkItems might result to ConnectionException: TF26175: Team Foundation Core Services attribute 'AttachmentServerUrl' not found. " is 141.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,WithWorkspace,The length of the statement  "	var tfsWorkspace = _container.With ("localDirectory").EqualTo (localDirectory).With ("remote").EqualTo (remote).With ("contextVersion").EqualTo (versionToFetch).With ("workspace").EqualTo (_bridge.Wrap<WrapperForWorkspace' Workspace> (workspace)).With ("tfsHelper").EqualTo (this).GetInstance<TfsWorkspace> (); " is 310.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,WithWorkspace,The length of the statement  "		var tfsWorkspace = _container.With ("localDirectory").EqualTo (localDirectory).With ("remote").EqualTo (remote).With ("contextVersion").EqualTo (versionToFetch).With ("workspace").EqualTo (_bridge.Wrap<WrapperForWorkspace' Workspace> (workspace)).With ("tfsHelper").EqualTo (this).GetInstance<TfsWorkspace> (); " is 310.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,ShowCheckinDialog,The length of the statement  "	return ShowCheckinDialog (_bridge.Unwrap<Workspace> (workspace)' pendingChanges.Select (p => _bridge.Unwrap<PendingChange> (p)).ToArray ()' checkedInfos.Select (c => _bridge.Unwrap<WorkItemCheckedInfo> (c)).ToArray ()' checkinComment); " is 235.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,ShowCheckinDialog,The length of the statement  "		return dialog.Call<int> ("Show"' parentForm.Handle' workspace' pendingChanges' pendingChanges' checkinComment' null' null' checkedInfos); " is 137.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,CleanupWorkspaces,The length of the statement  "			foreach (var mapping in workspace.Folders.Where (f => fullWorkingDirectoryPath.StartsWith (Path.GetFullPath (f.LocalItem)' StringComparison.CurrentCultureIgnoreCase))) { " is 169.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,TryToDeleteWorkspace,The length of the statement  "	//  When deleting a workspace we may need to allow the TFS server some time to complete existing processing or re-try the workspace delete. " is 139.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,TryToDeleteWorkspace,The length of the statement  "	Trace.WriteLine (string.Format (deleteWsCompleted ? "TFS Workspace '{0}' was removed." : "TFS Workspace '{0}' could not be removed"' workspace.DisplayName)); " is 157.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetShelvesetData,The length of the statement  "		throw new GitTfsException ("Unable to find " + shelvesetOwner + "'s shelveset \"" + shelvesetName + "\" (" + shelvesets.Length + " matches).").WithRecommendation ("Try providing the shelveset owner."); " is 201.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetShelvesetData,The length of the statement  "		throw new GitTfsException ("There is no changes in this shelveset that apply to the current tfs remote.").WithRecommendation ("Try to apply the shelveset on another remote."); " is 175.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetShelvesetData,The length of the statement  "	var wrapperForVersionControlServer = _bridge.Wrap<WrapperForVersionControlServer' VersionControlServer> (VersionControl); " is 121.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,ListShelvesets,The length of the statement  "			Trace.TraceInformation ("ERROR: sorting criteria '{0}' is invalid. Possible values are: date' owner' name' comment"' sortBy); " is 125.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,CreateShelveset,The length of the statement  "	var shelveset = new Shelveset (_bridge.Unwrap<Workspace> (workspace).VersionControlServer' shelvesetName' workspace.OwnerName); " is 127.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetLatestChangeset,The length of the statement  "	var history = VersionControl.QueryHistory (remote.TfsRepositoryPath' VersionSpec.Latest' 0' RecursionType.Full' null' null' VersionSpec.Latest' 1' includeChanges' false' false).Cast<Changeset> ().ToList (); " is 206.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetWorkItemInfos,The length of the statement  "	return GetWorkItemInfosHelper<IWorkItemCheckinInfo' WrapperForWorkItemCheckinInfo' WorkItemCheckinInfo> (workItems' checkinAction' GetWorkItemInfo); " is 148.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetWorkItemCheckedInfos,The length of the statement  "	return GetWorkItemInfosHelper<IWorkItemCheckedInfo' WrapperForWorkItemCheckedInfo' WorkItemCheckedInfo> (workItems' checkinAction' GetWorkItemCheckedInfo); " is 155.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetWorkItemInfosHelper,The length of the statement  "	select _bridge.Wrap<TWrapper' TInstance> (func (workItem' _bridge.Convert<WorkItemCheckinAction> (checkinAction)))).Cast<TInterface> (); " is 136.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetLabels,The length of the statement  "	foreach (var labelDefinition in VersionControl.QueryLabels (nameFilter' tfsPathBranch' null' false' tfsPathBranch' VersionSpec.Latest)) { " is 137.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetLabels,The length of the statement  "		var label = VersionControl.QueryLabels (labelDefinition.Name' tfsPathBranch' null' true' tfsPathBranch' VersionSpec.Latest).FirstOrDefault (); " is 142.
Long Statement,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,TryGetRegStringStartingWithName,The length of the statement  "		Trace.WriteLine ("Unable to get registry value " + registryKey.Name + "\\" + path + "| starting with:" + startOfName + ": " + e); " is 129.
Long Statement,Sep.Git.Tfs.VsCommon,ItemDownloadStrategy,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,DownloadFile,The length of the statement  "		Trace.WriteLine (string.Format ("Something went wrong downloading \"{0}\" in changeset {1}"' item.ServerItem' item.ChangesetId)); " is 129.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForVersionControlServer,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,GetItem,The length of the statement  "	return _bridge.Wrap<WrapperForItem' Item> (_versionControlServer.GetItem (itemPath' new ChangesetVersionSpec (changesetNumber))); " is 129.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForVersionControlServer,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,GetItems,The length of the statement  "	var itemSet = _versionControlServer.GetItems (new ItemSpec (itemPath' _bridge.Convert<RecursionType> (recursionType)' 0)' new ChangesetVersionSpec (changesetNumber)' DeletedState.NonDeleted' ItemType.Any' true); " is 211.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForVersionControlServer,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,QueryHistory,The length of the statement  "	var history = _versionControlServer.QueryHistory (path' new ChangesetVersionSpec (version)' deletionId' _bridge.Convert<RecursionType> (recursion)' user' new ChangesetVersionSpec (versionFrom)' new ChangesetVersionSpec (versionTo)' maxCount' includeChanges' slotMode' includeDownloadInfo); " is 289.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,Shelve,The length of the statement  "	_workspace.Shelve (_bridge.Unwrap<Shelveset> (shelveset)' _bridge.Unwrap<PendingChange> (changes)' _bridge.Convert<ShelvingOptions> (options)); " is 143.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,ToTfs,The length of the statement  "	return new PolicyOverrideInfo (policyOverrideInfo.Comment' _bridge.Unwrap<PolicyFailure> (policyOverrideInfo.Failures)); " is 120.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,EvaluateCheckin,The length of the statement  "	return _bridge.Wrap<WrapperForCheckinEvaluationResult' CheckinEvaluationResult> (_workspace.EvaluateCheckin (_bridge.Convert<CheckinEvaluationOptions> (options)' _bridge.Unwrap<PendingChange> (allChanges)' _bridge.Unwrap<PendingChange> (changes)' comment' _bridge.Unwrap<CheckinNote> (checkinNote)' _bridge.Unwrap<WorkItemCheckinInfo> (workItemChanges))); " is 355.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,GetSpecificVersion,The length of the statement  "	Retry.Do (() => DoUntilNoFailures (() => _workspace.Get (new ChangesetVersionSpec (changeset)' GetOptions.Overwrite | GetOptions.GetAll))); " is 139.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,Merge,The length of the statement  "	var status = _workspace.Merge (sourceTfsPath' targetTfsPath' null' null' LockLevel.None' RecursionType.Full' MergeOptions.AlwaysAcceptMine); " is 140.
Long Statement,Sep.Git.Tfs.VsCommon,WrapperForWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\Wrappers.cs,Checkin,The length of the statement  "		throw new GitTfsGatedCheckinException (gatedException.ShelvesetName' gatedException.AffectedBuildDefinitions' gatedException.CheckInTicket); " is 140.
Complex Conditional,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRelevantChangesetBasedOnChangeType,The conditional expression  "merge.SourceChangeType.HasFlag (ChangeType.Branch) || merge.SourceChangeType.HasFlag (ChangeType.Merge) || merge.SourceChangeType.HasFlag (ChangeType.Add) || merge.SourceChangeType.HasFlag (ChangeType.Rollback) || merge.SourceChangeType.HasFlag (ChangeType.Delete) || merge.SourceChangeType.HasFlag (ChangeType.Undelete)"  is complex.
Complex Conditional,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetMergeInfo,The conditional expression  "lastMerge != null && extendedMerge.SourceItem.ChangeType == lastMerge.SourceChangeType && targetChangeType == lastMerge.TargetChangeType && sourceItem == lastMerge.SourceItem && targetItem == lastMerge.TargetItem"  is complex.
Magic Number,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The following statement contains a magic number: try {  	if (!CanGetBranchInformation) {  		Trace.WriteLine ("Try TFS2008 compatibility mode...");  		foreach (var rootBranch in GetRootChangesetForBranchForTfs2008 (tfsPathBranchToCreate' lastChangesetIdToCheck' tfsPathParentBranch)) {  			AddNewRootBranch (rootBranches' rootBranch);  		}  		return;  	}  	if (!string.IsNullOrWhiteSpace (tfsPathParentBranch))  		Trace.WriteLine ("Parameter about parent branch will be ignored because this version of TFS is able to find the parent!");  	Trace.WriteLine ("Looking to find branch '" + tfsPathBranchToCreate + "' in all TFS branches...");  	string tfsParentBranch;  	if (!AllTfsBranches.TryGetValue (tfsPathBranchToCreate' out tfsParentBranch)) {  		throw new GitTfsException ("error: TFS branches " + tfsPathBranchToCreate + " not found!");  	}  	if (tfsParentBranch == null) {  		throw new GitTfsException ("error : the branch you try to initialize '" + tfsPathBranchToCreate + "' is a root branch (e.g. has no parents)."' new List<string> {  			"Clone this branch from Tfs instead of trying to initialize it!\n   Command: git tfs clone " + Url + " " + tfsPathBranchToCreate  		});  	}  	tfsPathParentBranch = tfsParentBranch;  	Trace.WriteLine ("Found parent branch : " + tfsPathParentBranch);  	try {  		// This method now handles the scenario where a valid branch has been detected for migration but its  		// root/branch changeset is *not* the first changeset in its history.  		//  		// This situation can occur when:  		//  		//  1) My project is created (e.g. $/MyProject/MyTrunk) (C1)  		//  2) Work is done on $/MyProject/MyTrunk (C2)  		//  3) A folder is created based on the contents of $/MyProject/MyTrunk without branching (e.g. $/MyProject/MyFeature) (C3)  		//  4) Folder $/MyProject/MyFeature is deleted (C4)  		//  5) Branch $/MyProject/MyFeature is created from $/MyProject/MyTrunk (C5)  		//  		// In this case' the code previously assumed C3 is the root changeset and would only check for merge history in it.  		// Now' the code does not assume any given changeset is the branch root and instead crawls its history in  		// batches to find the first changeset with merge history and assumes that changeset is the root.  		const int batchSize = 100;  		IEnumerable<MergeInfo> branchChangesetInTargetBranch = null;  		for (var batchNumber = 1; branchChangesetInTargetBranch == null; batchNumber++) {  			var changesetsToRetrieve = batchNumber * batchSize;  			var changesetEnumerable = VersionControl.QueryHistory (tfsPathBranchToCreate' VersionSpec.Latest' 0' RecursionType.Full' null' null' null' changesetsToRetrieve' false' false' false' true).Cast<Changeset> ();  			if (batchNumber > 1) {  				changesetEnumerable = changesetEnumerable.Skip ((batchNumber - 1) * batchSize).Take (batchSize);  			}  			// ToList'ed because inspecting the enumerable during debugging was resulting in TFS timeouts  			var changesets = changesetEnumerable.ToList ();  			// If our batch has no results' there's nothing left to check; we're done.  			if (!changesets.Any ()) {  				break;  			}  			foreach (var changeset in changesets) {  				var branchChangesetsInTargetBranchForBatch = GetMergeInfo (tfsPathBranchToCreate' tfsPathParentBranch' changeset.ChangesetId' lastChangesetIdToCheck);  				if (branchChangesetsInTargetBranchForBatch.Any ()) {  					branchChangesetInTargetBranch = branchChangesetsInTargetBranchForBatch;  					break;  				}  			}  		}  		if (branchChangesetInTargetBranch == null) {  			throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to find first changeset for " + tfsPathBranchToCreate);  		}  		string renameFromBranch;  		var rootChangesetInParentBranch = GetRelevantChangesetBasedOnChangeType (branchChangesetInTargetBranch' tfsPathParentBranch' tfsPathBranchToCreate' out renameFromBranch);  		var rootChangesetMergeInfo = branchChangesetInTargetBranch.First ();  		// If the merge info indicates our parent branch root changeset is the source' then our child changeset  		// will be the target. Otherwise' they're swapped.  		var rootChangesetInChildBranch = rootChangesetMergeInfo.SourceChangeset == rootChangesetInParentBranch ? rootChangesetMergeInfo.TargetChangeset : rootChangesetMergeInfo.SourceChangeset;  		var rootBranch = new RootBranch (rootChangesetInParentBranch' rootChangesetInChildBranch' tfsPathBranchToCreate);  		AddNewRootBranch (rootBranches' rootBranch);  		if (renameFromBranch != null) {  			Trace.WriteLine ("Found original branch '" + renameFromBranch + "' (renamed in branch '" + tfsPathBranchToCreate + "')");  			GetRootChangesetForBranch (rootBranches' renameFromBranch);  		}  	} catch (VersionControlException) {  		throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to query history for " + tfsPathBranchToCreate);  	}  } catch (FeatureNotSupportedException ex) {  	Trace.WriteLine (ex.Message);  	foreach (var rootBranch in GetRootChangesetForBranchForTfs2008 (tfsPathBranchToCreate' -1' tfsPathParentBranch)) {  		AddNewRootBranch (rootBranches' rootBranch);  	}  }  
Magic Number,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,GetRootChangesetForBranch,The following statement contains a magic number: try {  	// This method now handles the scenario where a valid branch has been detected for migration but its  	// root/branch changeset is *not* the first changeset in its history.  	//  	// This situation can occur when:  	//  	//  1) My project is created (e.g. $/MyProject/MyTrunk) (C1)  	//  2) Work is done on $/MyProject/MyTrunk (C2)  	//  3) A folder is created based on the contents of $/MyProject/MyTrunk without branching (e.g. $/MyProject/MyFeature) (C3)  	//  4) Folder $/MyProject/MyFeature is deleted (C4)  	//  5) Branch $/MyProject/MyFeature is created from $/MyProject/MyTrunk (C5)  	//  	// In this case' the code previously assumed C3 is the root changeset and would only check for merge history in it.  	// Now' the code does not assume any given changeset is the branch root and instead crawls its history in  	// batches to find the first changeset with merge history and assumes that changeset is the root.  	const int batchSize = 100;  	IEnumerable<MergeInfo> branchChangesetInTargetBranch = null;  	for (var batchNumber = 1; branchChangesetInTargetBranch == null; batchNumber++) {  		var changesetsToRetrieve = batchNumber * batchSize;  		var changesetEnumerable = VersionControl.QueryHistory (tfsPathBranchToCreate' VersionSpec.Latest' 0' RecursionType.Full' null' null' null' changesetsToRetrieve' false' false' false' true).Cast<Changeset> ();  		if (batchNumber > 1) {  			changesetEnumerable = changesetEnumerable.Skip ((batchNumber - 1) * batchSize).Take (batchSize);  		}  		// ToList'ed because inspecting the enumerable during debugging was resulting in TFS timeouts  		var changesets = changesetEnumerable.ToList ();  		// If our batch has no results' there's nothing left to check; we're done.  		if (!changesets.Any ()) {  			break;  		}  		foreach (var changeset in changesets) {  			var branchChangesetsInTargetBranchForBatch = GetMergeInfo (tfsPathBranchToCreate' tfsPathParentBranch' changeset.ChangesetId' lastChangesetIdToCheck);  			if (branchChangesetsInTargetBranchForBatch.Any ()) {  				branchChangesetInTargetBranch = branchChangesetsInTargetBranchForBatch;  				break;  			}  		}  	}  	if (branchChangesetInTargetBranch == null) {  		throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to find first changeset for " + tfsPathBranchToCreate);  	}  	string renameFromBranch;  	var rootChangesetInParentBranch = GetRelevantChangesetBasedOnChangeType (branchChangesetInTargetBranch' tfsPathParentBranch' tfsPathBranchToCreate' out renameFromBranch);  	var rootChangesetMergeInfo = branchChangesetInTargetBranch.First ();  	// If the merge info indicates our parent branch root changeset is the source' then our child changeset  	// will be the target. Otherwise' they're swapped.  	var rootChangesetInChildBranch = rootChangesetMergeInfo.SourceChangeset == rootChangesetInParentBranch ? rootChangesetMergeInfo.TargetChangeset : rootChangesetMergeInfo.SourceChangeset;  	var rootBranch = new RootBranch (rootChangesetInParentBranch' rootChangesetInChildBranch' tfsPathBranchToCreate);  	AddNewRootBranch (rootBranches' rootBranch);  	if (renameFromBranch != null) {  		Trace.WriteLine ("Found original branch '" + renameFromBranch + "' (renamed in branch '" + tfsPathBranchToCreate + "')");  		GetRootChangesetForBranch (rootBranches' renameFromBranch);  	}  } catch (VersionControlException) {  	throw new GitTfsException ("An unexpected error occurred when trying to find the root changeset.\nFailed to query history for " + tfsPathBranchToCreate);  }  
Magic Number,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,QueueGatedCheckinBuild,The following statement contains a magic number: do {  	Console.Write (".");  	System.Threading.Thread.Sleep (5000);  	queuedBuild.Refresh (QueryOptions.Definitions);  } while (queuedBuild.Build == null || !queuedBuild.Build.BuildFinished);  
Magic Number,Sep.Git.Tfs.VsCommon,TfsHelperBase,F:\newReposMay17\git-tfs_git-tfs\GitTfs.Vs2012\..\GitTfs.VsCommon\TfsHelper.Common.cs,QueueGatedCheckinBuild,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
