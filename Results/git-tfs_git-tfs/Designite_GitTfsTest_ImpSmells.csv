Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,InitMocks4Tests,The method has 5 parameters. Parameters: gitBranchToInit' gitRepositoryMock' trunkGitTfsRemoteMock' newBranchRemoteMock' tfsHelperMock
Long Parameter List,GitTfs.Test.Core,FakeChange,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FakeChange,The method has 5 parameters. Parameters: tfsChangeType' itemType' serverItem' deletionId' renamedFrom
Long Parameter List,GitTfs.Test.Core,FakeChange,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,QueryHistory,The method has 11 parameters. Parameters: path' version' deletionId' recursion' user' versionFrom' versionTo' maxCount' includeChanges' slotMode' includeDownloadInfo
Long Parameter List,GitTfs.Test.Core,RenamedFromDeletedChange,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,QueryHistory,The method has 11 parameters. Parameters: path' version' deletionId' recursion' user' versionFrom' versionTo' maxCount' includeChanges' slotMode' includeDownloadInfo
Long Parameter List,GitTfs.Test.Core,StubbedCheckinEvaluationResult,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\StubbedCheckinEvaluationResult.cs,WithNoteFailure,The method has 5 parameters. Parameters: serverItem' name' required' displayOrder' message
Long Parameter List,GitTfs.Test.Core,StubbedCheckinNoteFailure,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\StubbedCheckinEvaluationResult.cs,StubbedCheckinNoteFailure,The method has 5 parameters. Parameters: serverItem' name' required' displayOrder' message
Long Parameter List,GitTfs.Test.Integration,FakeHistoryBuilder,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,BranchChangeset,The method has 6 parameters. Parameters: changesetId' message' checkinDate' fromBranch' toBranch' rootChangesetId
Long Parameter List,GitTfs.Test.Integration,FakeHistoryBuilder,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,MergeChangeset,The method has 6 parameters. Parameters: changesetId' message' checkinDate' fromBranch' intoBranch' lastChangesetId
Long Parameter List,GitTfs.Test.Integration,FakeChangesetBuilder,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,Change,The method has 5 parameters. Parameters: changeType' itemType' tfsPath' contents' itemId
Long Parameter List,GitTfs.Test.Integration,FakeChangesetBuilder,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,Change,The method has 5 parameters. Parameters: changeType' itemType' tfsPath' contents' itemId
Long Identifier,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The length of the parameter expectedBranchChangesetParentCommit is 35.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranch,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepositoryMock' out var trunkGitTfsRemoteMock' out var newBranchRemoteMock' out var tfsHelperMock); " is 146.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranch,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") }); " is 169.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranch,The length of the statement  "            trunkGitTfsRemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 178.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranch,The length of the statement  "            trunkGitTfsRemoteMock.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' It.IsAny<string>()' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranchRemoteMock.Object).Verifiable(); " is 225.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepository' out var trunkGitTfsRemoteMock' out var newBranchRemoteMock' out var tfsHelperMock); " is 142.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The length of the statement  "            trunkGitTfsRemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }); " is 165.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The length of the statement  "            trunkGitTfsRemoteMock.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' It.IsAny<string>()' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranchRemoteMock.Object); " is 212.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") }); " is 169.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The length of the statement  "            gitRepository.Setup(x => x.ReadAllTfsRemotes()).Returns(new List<IGitTfsRemote> { trunkGitTfsRemoteMock.Object' existingBranchRemote }).Verifiable(); " is 149.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseRootChangeSetNotFound,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepository' out var trunkGitTfsRemoteMock' out var newBranchRemote' out var tfsHelperMock); " is 138.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseRootChangeSetNotFound,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Throws(new GitTfsException("")); " is 120.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseRootChangeSetNotFound,The length of the statement  "            gitRepository.Setup(x => x.ReadAllTfsRemotes()).Returns(new List<IGitTfsRemote> { trunkGitTfsRemoteMock.Object }).Verifiable(); " is 127.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseGitCommitCorrespondingToChangeSetNotFound,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepository' out var remote' out var newBranchRemote' out var tfsHelperMock); " is 123.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseGitCommitCorrespondingToChangeSetNotFound,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") }); " is 169.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepository' out var remoteMock' out var newBranchRemoteMock' out var tfsHelperMock); " is 131.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The length of the statement  "            remoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }); " is 154.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The length of the statement  "            remoteMock.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' It.IsAny<string>()' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranchRemoteMock.Object); " is 201.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' remoteMock.Object.TfsRepositoryPath)).Returns(new List<RootBranch>() { new RootBranch(2008' "$/MyProject/MyBranch") }); " is 200.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The length of the statement  "            newBranchRemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 176.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailedInitBranchInTfs2008CompatibilityModeBecauseParentBranchNotAlreadyCloned,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT' out var gitRepository' out var remote' out var newBranchRemote' out var tfsHelperMock); " is 123.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailedInitBranchInTfs2008CompatibilityModeBecauseParentBranchNotAlreadyCloned,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2008' "$/MyProject/MyBranch") }); " is 169.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT1' out var gitRepositoryMock' out var trunkGitTfsRemote' out var newBranch1RemoteMock' out var tfsHelperMock); " is 144.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            tfsHelperMock.Setup(t => t.GetAllTfsRootBranchesOrderedByCreation()).Returns(new List<string> { trunkGitTfsRemote.Object.TfsRepositoryPath }); " is 142.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch1' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB1' tfsPathBranch1) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            newBranch1RemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 177.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch2' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB2' tfsPathBranch2) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            newBranch2RemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 177.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            trunkGitTfsRemote.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 174.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            trunkGitTfsRemote.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' tfsPathBranch1' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranch1RemoteMock.Object); " is 205.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The length of the statement  "            trunkGitTfsRemote.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' tfsPathBranch2' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranch2RemoteMock.Object); " is 205.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT1' out var gitRepository' out var trunkGitTfsRemote' out var newBranch1RemoteMock' out var tfsHelperMock); " is 140.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch1' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB1' tfsPathBranch1) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            newBranch1RemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 177.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch2' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB2' tfsPathBranch2) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            newBranch2RemoteMock.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 177.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            trunkGitTfsRemote.Setup(r => r.Fetch(It.IsAny<bool>()' It.IsAny<int>()' It.IsAny<IRenameResult>())).Returns(new GitTfsRemote.FetchResult() { IsSuccess = true }).Verifiable(); " is 174.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            trunkGitTfsRemote.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' tfsPathBranch1' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranch1RemoteMock.Object); " is 205.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The length of the statement  "            trunkGitTfsRemote.Setup(t => t.InitBranch(It.IsAny<RemoteOptions>()' tfsPathBranch2' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<IRenameResult>())).Returns(newBranch2RemoteMock.Object); " is 205.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The length of the statement  "            InitMocks4Tests(GIT_BRANCH_TO_INIT1' out var gitRepositoryMock' out var trunkGitTfsRemoteMock' out var newBranch1RemoteMock' out var tfsHelperMock); " is 148.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch1' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB1' tfsPathBranch1) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The length of the statement  "            tfsHelperMock.Setup(t => t.GetRootChangesetForBranch(tfsPathBranch2' -1' null)).Returns(new List<RootBranch>() { new RootBranch(rootChangeSetB2' tfsPathBranch2) }); " is 164.
Long Statement,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The length of the statement  "            Assert.Equal("error: The use of the option '--branches=all' to init all the branches is only possible when 'git tfs clone' was done from the trunk!!! '$/MyProject/Trunk' is not a TFS branch!"' ex.Message); " is 205.
Long Statement,GitTfs.Test.Commands,ShelveTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\ShelveTest.cs,ShouldTellRemoteToShelve,The length of the statement  "            gitTfsRemoteMock.Verify(x => x.Shelve("shelveset name"' "HEAD"' It.IsAny<TfsChangesetInfo>()' It.IsAny<CheckinOptions>()' false)' Times.Once); " is 142.
Long Statement,GitTfs.Test.Commands,ShelveTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\ShelveTest.cs,ShouldTellRemoteToShelveTreeish,The length of the statement  "            gitTfsRemoteMock.Verify(x => x.Shelve("shelveset name"' "treeish"' It.IsAny<TfsChangesetInfo>()' It.IsAny<CheckinOptions>()' false)' Times.Once); " is 145.
Long Statement,GitTfs.Test.Commands,ShelveTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\ShelveTest.cs,DoesNotTryToShelveIfShelvesetExists,The length of the statement  "                x => x.Shelve(It.IsAny<string>()' It.IsAny<string>()' It.IsAny<TfsChangesetInfo>()' It.IsAny<CheckinOptions>()' It.IsAny<bool>())' Times.Never); " is 144.
Long Statement,GitTfs.Test.Commands,ShelveTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\ShelveTest.cs,DoesNotStopIfForceIsSpecified,The length of the statement  "                x => x.Shelve(It.IsAny<string>()' It.IsAny<string>()' It.IsAny<TfsChangesetInfo>()' It.IsAny<CheckinOptions>()' It.IsAny<bool>())' Times.Once); " is 143.
Long Statement,GitTfs.Test.Core,DirsAndPathsOutsideTheProject,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchFilesOutside,The length of the statement  "                Assert.Equal(new string[] { "$/Project/dir1"' "$/Project/movedinside.txt" }' Subject.GetChangesToFetch().Select(c => c.Item.ServerItem)); " is 137.
Long Statement,GitTfs.Test.Core,DirectoryTidierTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\DirectoryTidierTests.cs,MovingAFileOutLeavesAllEmptyParents,The length of the statement  "            Mock.Get(mockWorkspace).Verify(x => x.Rename("dir1/dir2/dir3/lonelyFile.txt"' "otherdir/otherdir2/newName.txt"' ScoreIsIrrelevant)); " is 132.
Long Statement,GitTfs.Test.Core,DirectoryTidierTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\DirectoryTidierTests.cs,MovingAFileOutAndInLeavesParents,The length of the statement  "            Mock.Get(mockWorkspace).Verify(x => x.Rename("dir1/dir2/dir3/lonelyFile.txt"' "otherdir/otherdir2/newName.txt"' ScoreIsIrrelevant)); " is 132.
Long Statement,GitTfs.Test.Core,DirectoryTidierTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\DirectoryTidierTests.cs,MovingAFileOutAndInLeavesParents,The length of the statement  "            Mock.Get(mockWorkspace).Verify(x => x.Rename("topDir/topFile.txt"' "dir1/dir2/dir3/replacement.txt"' ScoreIsIrrelevant)); " is 121.
Long Statement,GitTfs.Test.Core,DirectoryTidierTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\DirectoryTidierTests.cs,HandlesEditAndRenameOnSameFile,The length of the statement  "            Mock.Get(mockWorkspace).Verify(x => x.Rename("topDir/midDir/bottomDir/file1.txt"' "topDir/midDir/bottomDir/file1renamed.txt"' ScoreIsIrrelevant)); " is 146.
Long Statement,GitTfs.Test.Core,DirectoryTidierTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\DirectoryTidierTests.cs,item,The length of the statement  "            return new TfsTreeEntry(gitPath' mocks.OneOf<IItem>().Tap(mockItem => Mock.Get(mockItem).Setup(x => x.ItemType).Returns(itemType))); " is 132.
Long Statement,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldNotDetectUnincludedChangeTypes,The length of the statement  "            Assert.False(TfsChangeType.Add.IncludesOneOf(TfsChangeType.Branch' TfsChangeType.Delete' TfsChangeType.Edit' TfsChangeType.Encoding' TfsChangeType.Lock' TfsChangeType.Merge' TfsChangeType.None' TfsChangeType.Rename' TfsChangeType.Undelete)); " is 241.
Long Statement,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldDetectMultivaluesThatIntersectAndAreASubset,The length of the statement  "            Assert.True((TfsChangeType.Add | TfsChangeType.Branch | TfsChangeType.Edit).IncludesOneOf(TfsChangeType.Branch | TfsChangeType.Edit)); " is 134.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsMode,The length of the statement  "            var line = ":000000 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"; " is 120.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsLinkMode,The length of the statement  "            var line = ":000000 160000 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"; " is 120.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsChangeType,The length of the statement  "            var line = ":000000 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"; " is 120.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsChangeTypeWhenScoreIsPresent,The length of the statement  "            var line = ":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"; " is 132.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsPath,The length of the statement  "            var line = ":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0Foo\0Bar\0"; " is 127.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsPathTo,The length of the statement  "            var line = ":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0Foo\0Bar\0"; " is 127.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfAdd,The length of the statement  "            var change = GetChangeItem(":000000 100644 0000000000000000000000000000000000000000 01234567ab01234567ab01234567ab01234567ab A\0blah\0"); " is 137.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfAddWithNewMode,The length of the statement  "            var change = (Add)GetChangeItem(":000000 100644 0000000000000000000000000000000000000000 01234567ab01234567ab01234567ab01234567ab A\0blah\0"); " is 142.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfAddWithNewPath,The length of the statement  "            var change = (Add)GetChangeItem(":000000 100644 0000000000000000000000000000000000000000 01234567ab01234567ab01234567ab01234567ab A\0blah\0"); " is 142.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfCopy,The length of the statement  "            var change = GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab C100\0oldname\0newname\0"); " is 152.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfAddForCopyWithPath,The length of the statement  "            var change = (Copy)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab C100\0oldname\0newname\0"); " is 158.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfModify,The length of the statement  "            var change = GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"); " is 137.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfModifyWithPath,The length of the statement  "            var change = (Modify)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"); " is 145.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfModifyWithNewSha,The length of the statement  "            var change = (Modify)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab M\0blah\0"); " is 145.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfDelete,The length of the statement  "            var change = GetChangeItem(":100644 000000 abcdef0123abcdef0123abcdef0123abcdef0123 0000000000000000000000000000000000000000 D\0blah\0"); " is 137.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfDeleteWithPath,The length of the statement  "            var change = (Delete)GetChangeItem(":100644 000000 abcdef0123abcdef0123abcdef0123abcdef0123 0000000000000000000000000000000000000000 D\0blah\0"); " is 145.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfRenameEdit,The length of the statement  "            var change = GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"); " is 149.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfRenameEditWithPath,The length of the statement  "            var change = (RenameEdit)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"); " is 161.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfRenameEditWithPathTo,The length of the statement  "            var change = (RenameEdit)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"); " is 161.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfRenameEditWithNewSha,The length of the statement  "            var change = (RenameEdit)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"); " is 161.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,GetsInstanceOfRenameEditWithScore,The length of the statement  "            var change = (RenameEdit)GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\0blah\0newblah\0"); " is 161.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ThrowsOnIncorrectInputLine,The length of the statement  "                GetChangeItem(":100644 100644 abcdef0123abcdef0123abcdef0123abcdef0123 01234567ab01234567ab01234567ab01234567ab R001\tblah\tnewblah")); " is 135.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 ed61b923604692e7c8b14763bd94412f471d91cc A\0TestFiles/Test0.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The length of the statement  "                ":100644 100644 5f10a5d3fa9f56697881f8d9c49e20bcc541cc94 74e8a9318a5566812366a5b6005c94cfdd33036d M\0TestFiles/Test1.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The length of the statement  "                ":100644 000000 de4ea28b4e441777cf99329788d54598645618f3 0000000000000000000000000000000000000000 D\0TestFiles/Test2.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The length of the statement  "                ":100644 100644 fb6422c94fcb11e61378a231b0f3ce36958206d4 fb6422c94fcb11e61378a231b0f3ce36958206d4 R100\0TestFiles/Test3.txt\0TestFiles/Test3_moved.txt\0" + " is 155.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 5238c94b04f81776f57eed406484c0a0e0697749 A\0TestFiles/Test4.txt\0"; " is 124.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 ed61b923604692e7c8b14763bd94412f471d91cc A\0TestFiles/試し0.txt\0" + " is 123.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The length of the statement  "                ":100644 100644 5f10a5d3fa9f56697881f8d9c49e20bcc541cc94 74e8a9318a5566812366a5b6005c94cfdd33036d M\0TestFiles/試し1.txt\0" + " is 123.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The length of the statement  "                ":100644 000000 de4ea28b4e441777cf99329788d54598645618f3 0000000000000000000000000000000000000000 D\0TestFiles/試し2.txt\0" + " is 123.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The length of the statement  "                ":100644 100644 fb6422c94fcb11e61378a231b0f3ce36958206d4 fb6422c94fcb11e61378a231b0f3ce36958206d4 R100\0TestFiles/試し3.txt\0TestFiles/試し3_moved.txt\0" + " is 151.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 5238c94b04f81776f57eed406484c0a0e0697749 A\0TestFiles/試し4.txt\0"; " is 122.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectNormalRename_AndReturnOneRenameChange,The length of the statement  "            string input = ":100644 100644 ab6422c94fcb11e61378a231b0f3ce36958206d4 bb6422c94fcb11e61378a231b0f3ce36958206d4 R100\0TestFiles/Test0.txt\0TestFiles/Test_moved.txt\0"; " is 168.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectCaseOnlyRenameWithNoContentChange_AndReturnNoChanges,The length of the statement  "            string input = ":100644 100644 fb6422c94fcb11e61378a231b0f3ce36958206d4 fb6422c94fcb11e61378a231b0f3ce36958206d4 R100\0TestFiles/Test2.txt\0TestFiles/test2.txt\0"; " is 163.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectCaseOnlyRenameWithContentChange_AndReturnOneModificationChanges,The length of the statement  "            string input = ":100644 100644 aaaac94fcb11e61378a231b0f3ce36958206d4dd bbbb22c94fcb11e61378a231b0f3ce36958206d4 R100\0TestFiles/Test1.txt\0TestFiles/test1.txt\0"; " is 163.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteCorrespondingToCaseRenameWithContentChange_AndReturnOneModificationChange,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 ed61b923604692e7c8b14763bd94412f471d91cc A\0TestFiles/Test0.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteCorrespondingToCaseRenameWithContentChange_AndReturnOneModificationChange,The length of the statement  "                ":100644 000000 de4ea28b4e441777cf99329788d545986456183f 0000000000000000000000000000000000000000 D\0TestFiles/test0.txt\0"; " is 124.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteNotCorrespondingToCaseRenameWithContentChange_AndReturnOneAdditionAndOneDeletionChange,The length of the statement  "                ":100644 000000 de4ea28b4e441777cf99329788d545986456183f 0000000000000000000000000000000000000000 D\0TestFiles/Test1.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteNotCorrespondingToCaseRenameWithContentChange_AndReturnOneAdditionAndOneDeletionChange,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 ed61b923604692e7c8b14763bd94412f471d91cc A\0TestFiles/Test2.txt\0"; " is 124.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteCorrespondingToCaseRenameWithoutContentChange_AndReturnNoChanges,The length of the statement  "                ":000000 100644 0000000000000000000000000000000000000000 ed61b923604692e7c8b14763bd94412f471d91cc A\0TestFiles/Test3.txt\0" + " is 125.
Long Statement,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteCorrespondingToCaseRenameWithoutContentChange_AndReturnNoChanges,The length of the statement  "                ":100644 000000 ed61b923604692e7c8b14763bd94412f471d91cc 0000000000000000000000000000000000000000 D\0TestFiles/test3.txt\0"; " is 124.
Long Statement,GitTfs.Test.Core,GitTfsRemoteTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitTfsRemoteTests.cs,MatchesUrlAndRepositoryPath_should_be_case_insensitive_for_legacy_urls,The length of the statement  "            var remote = BuildRemote(legacyUrls: new[] { "http://testvcs:8080/tfs/test"' "AnotherUrlThatDoesntMatch" }' repository: "test"); " is 128.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenOnlyOneRemoteFoundInParentCommits_ThenReturnIt,The length of the statement  "                                   Remote = new GitTfsRemote(new RemoteInfo() {Id = "myRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) " is 159.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenTwoRemotesFoundInParentCommits_ThenReturnTheFirst,The length of the statement  "                                   Remote = new GitTfsRemote(new RemoteInfo() {Id = "mainRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) " is 161.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenTwoRemotesFoundInParentCommits_ThenReturnTheFirst,The length of the statement  "                                   Remote = new GitTfsRemote(new RemoteInfo() {Id = "myRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) " is 159.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenNoRemotesFoundInParentCommits_ThereIsOnlyOneRemoteInRepository_AndThisIsTheDefaultOne_ThenReturnIt,The length of the statement  "                   .Returns(new List<GitTfsRemote>() { new GitTfsRemote(new RemoteInfo() { Id = "default" }' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) }); " is 191.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenNoRemotesFoundInParentCommits_AndThereIsOnlyOneRemoteInRepository_ThenThrowAnException,The length of the statement  "                   .Returns(new List<GitTfsRemote>() { new GitTfsRemote(new RemoteInfo() { Id = "myRemote" }' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) }); " is 192.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenNoRemotesFoundInParentCommits_AndThereIsARemoteInRepository_ThenThrowAnException,The length of the statement  "                           new GitTfsRemote(new RemoteInfo() { Id = "myRemote" }' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))' " is 153.
Long Statement,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenNoRemotesFoundInParentCommits_AndThereIsARemoteInRepository_ThenThrowAnException,The length of the statement  "                           new GitTfsRemote(new RemoteInfo() { Id = "myRemote2" }' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null)) " is 153.
Long Statement,GitTfs.Test.Core,RemoteConfigConverterTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\RemoteConfigConverterTests.cs,HandlesDotsInName,The length of the statement  "            var originalRemote = new RemoteInfo { Id = "has.dots.in.it"' Url = "http://do/not/care"' Repository = "$/do/not/care" }; " is 120.
Long Statement,GitTfs.Test.Core,RemoteConfigConverterTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\RemoteConfigConverterTests.cs,HandlesDotsInName,The length of the statement  "                Assert.True(entry.Key.StartsWith("tfs-remote.has.dots.in.it.")' entry.Key + " should start with tfs-remote.has.dots.in.it"); " is 124.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingMaster,The length of the statement  "                r.Changeset(ChangesetIdToTrickFetch' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 181.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingMaster,The length of the statement  "                c1 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingOneBrancheInAdditionToMaster,The length of the statement  "                r.Changeset(ChangesetIdToTrickFetch' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 181.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingOneBrancheInAdditionToMaster,The length of the statement  "                c1 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingOneBrancheInAdditionToMaster,The length of the statement  "                c2 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/branch;C" + ChangesetIdToTrickFetch); " is 124.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingAMergeCommit,The length of the statement  "                r.Changeset(ChangesetIdToTrickFetch' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 181.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingAMergeCommit,The length of the statement  "                c1 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingAMergeCommit,The length of the statement  "                c2 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/branch;C" + ChangesetIdToTrickFetch); " is 124.
Long Statement,GitTfs.Test.Integration,BootstrapTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\BootstrapTests.cs,WhenUsingIOption_ThenAutoBootstrapingAMergeCommit,The length of the statement  "                c3 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneProjectWithInternationalCharactersInFileContents,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Folder/File.txt"' "Blåbærsyltetøy er godt!"); // "Blueberry jam is tasty!" " is 132.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithMixedUpCase,The length of the statement  "                    .Change(TfsChangeType.Edit' TfsItemType.File' "$/myproject/foo/BAR/file.txt"' "Updated file contents in path with different casing") " is 132.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithMixedUpCase,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/myproject/FOO/bar/file2.txt"' "Another file in the same folder' but with different casing"); " is 140.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The length of the statement  "                r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2) " is 167.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The length of the statement  "                r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5) " is 168.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The length of the statement  "                    .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge"); " is 134.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/heads/master"' "refs/remotes/tfs/default" }' commit: "e7d54b14fbdcbbc184d58e82931b7c1ac4a2be70"); " is 136.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/heads/b1"' "refs/remotes/tfs/b1" }' commit: "3cdb2a311ac7cbda1e892a9b3371a76c871a696a"); " is 127.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/heads/b1.1"' "refs/remotes/tfs/b1.1" }' commit: "e6e79221fd35b2002367a41535de9c43b626150a"); " is 131.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/heads/renameFile"' "refs/remotes/tfs/renameFile" }' commit: "003ca02adfd9561418f05a61c7a999386957a146"); " is 143.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/remotes/tfs/branch_from_nowhere" }' commit: "9cb91c60d76d00af182ae9f16da6e6aa77b88a5e"); " is 127.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WhenCloningFunctionalTestVtccdsWithBranchesRenaming_ThenAllRenamesShouldBeWellHandled,The length of the statement  "            AssertNewClone("Vtccds"' new[] { "refs/heads/renamed3"' "refs/remotes/tfs/renamed3" }' commit: "615ac5588d3cb6282c2c7d514f2828ad3aeaf5c7"); " is 139.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt") " is 129.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe") " is 137.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe") " is 135.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt"); " is 134.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt") " is 132.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe") " is 140.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe") " is 139.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The length of the statement  "                    .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt"); " is 133.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The length of the statement  "            Assert.DoesNotContain(branch.Commits' c => c.Message.IndexOf(@"Create ""branch"" (as a folder)."' StringComparison.InvariantCultureIgnoreCase) >= 0); " is 149.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The length of the statement  "            var expectedBranchChangesetParentCommit = branch.Commits.Where(c => c.Message.IndexOf("Create root branch."' StringComparison.InvariantCultureIgnoreCase) >= 0).FirstOrDefault(); " is 177.
Long Statement,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The length of the statement  "            var branchChangesetCommit = branch.Commits.Where(c => c.Message.IndexOf("Create a proper branch (though' with the same name as the previously deleted folder)"' StringComparison.InvariantCultureIgnoreCase) >= 0).FirstOrDefault(); " is 228.
Long Statement,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CanFetchWithMixedUpCasingForLegacyTfsServerUrl,The length of the statement  "            integrationHelper.ChangeConfigSetting("MyProject"' "tfs-remote.default.legacy-urls"' tfsUrlInUpperCase + "'aDifferentUrl"); " is 123.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenThereIsMoreThanTfsChangeset_ThenReturnTheLast,The length of the statement  "                r.Changeset(42' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 160.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsNotFromTfs_ThenReturnTheParentsFoundWithMainParentFromMasterFirst,The length of the statement  "                r.Changeset(ChangesetIdToTrickFetch' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 181.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsNotFromTfs_ThenReturnTheParentsFoundWithMainParentFromMasterFirst,The length of the statement  "                c1 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsNotFromTfs_ThenReturnTheParentsFoundWithMainParentFromMasterFirst,The length of the statement  "                c2 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/branch;C" + ChangesetIdToTrickFetch); " is 124.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsNotFromTfs_ThenReturnTheParentsFoundWithMainParentFromMasterFirst,The length of the statement  "                c3 = g.Commit("A merge commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 122.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsFromTfs_ThenReturnThisCommit,The length of the statement  "                r.Changeset(1' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 159.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsFromTfs_ThenReturnThisCommit,The length of the statement  "                c1 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsFromTfs_ThenReturnThisCommit,The length of the statement  "                c2 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/branch;C" + ChangesetIdToTrickFetch); " is 124.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsFromTfs_ThenReturnThisCommit,The length of the statement  "                c3 = g.Commit("A sample commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 123.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsFromTfs_ThenReturnThisCommit,The length of the statement  "                c4 = g.Amend("A merge commit from TFS.\n\ngit-tfs-id: [http://server/tfs]$/MyProject/trunk;C" + ChangesetIdToTrickFetch); " is 121.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenNoCommitFromTfs_ThenReturnNothing,The length of the statement  "                r.Changeset(1' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00")) " is 159.
Long Statement,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,FindParentCommits,The length of the statement  "                //string revList = gitRepository.CommandOneline("rev-list"' "--parents"' "--ancestry-path"' "--first-parent"' "--reverse"' c1 + ".." + c4); " is 139.
Long Statement,GitTfs.Test.Integration,IntegrationHelper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,AssertCleanWorkspace,The length of the statement  "            AssertEqual(new List<string>()' status.Select(statusEntry => "" + statusEntry.State + ": " + statusEntry.FilePath).ToList()' "repo status"); " is 140.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            //            r.Changeset(22484' "Created team project folder $/vtccds via the Team Project Creation Wizard"' DateTime.Parse("2013-05-24T15:44:32.373Z")) " is 153.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            //                .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds"' Read(null)' 390990) " is 121.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("36eae6b6a4717375a4ff16287744cd1d")' 390991); " is 168.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("70e6b3871859cf52ef78fba876bc37a4")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(22513' "Creation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:01:06.747Z")' "$/vtccds/trunk"' "$/vtccds/b1"' 22511) " is 139.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 391049); " is 122.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("96b58369f5bd2b081005ba208ac649b8")' 391049); " is 120.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.MergeChangeset(22515' "Merge branch 'b1' in trunk\n\nb1.1\n\nCreation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:48:45.6Z")' "$/vtccds/b1"' "$/vtccds/trunk"' 22514) " is 174.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4cd460612edcbab617997836871d7291")' 390991); " is 145.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(25198' "create branch to test renaming branch in tfs"' DateTime.Parse("2013-09-09T20:39:59.453Z")' "$/vtccds/trunk"' "$/vtccds/testRename"' 25197) " is 164.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 426364); " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364); " is 128.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199) " is 159.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364) " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364); " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364); " is 129.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(25957' "branch to test rename of a file"' DateTime.Parse("2013-10-25T08:33:22.15Z")' "$/vtccds/trunk"' "$/vtccds/renameFile"' 25197) " is 150.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693); " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693) " is 129.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693); " is 138.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("9a975dd2be9a190424fc226a5a25d84f")' 439693); " is 136.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fd30d6210bb40fd2c9b689f0bf8b2833")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("86882c0ae4717b4969d54f676c0261e3")' 390991); " is 123.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(27503' "create a new branch from nowhere\n=> not a branch from another branch!!"' DateTime.Parse("2014-01-05T16:08:07.48Z")' string.Empty' "$/vtccds/branch_from_nowhere"' -1) " is 192.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/branch_from_nowhere"' Read(null)' 479197); " is 124.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("6c6060d9696edc7000396cc499ab8277")' 479199); " is 195.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479199); " is 150.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.MergeChangeset(27507' "baseless merge from branch not branched \"branch_from_nowhere\""' DateTime.Parse("2014-01-05T21:02:33.82Z")' "$/vtccds/branch_from_nowhere"' "$/vtccds/renameFile"' 27506) " is 195.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Encoding | TfsChangeType.Branch | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/renameFile/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479200); " is 190.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202) " is 161.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364) " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364); " is 132.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364); " is 130.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(30333' "Creation branch $/vtccds/b1.1"' DateTime.Parse("2014-06-05T11:06:52.633Z")' "$/vtccds/trunk"' "$/vtccds/b1.1"' 26394) " is 143.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 513922); " is 124.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("c02331d395d07dc7efaaa295ac474971")' 513922); " is 122.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("1b9bf73806f680f3f6a79ca80e635dcf")' 513922); " is 122.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("52c0fc9d4cfbf1ae07f36b8e711a5d6b")' 391049); " is 120.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "            r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509) " is 195.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364) " is 148.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696) " is 171.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The length of the statement  "                .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364); " is 132.
Long Statement,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Read,The length of the statement  "            using (var stream = typeof(vtccds).Assembly.GetManifestResourceStream("GitTfs.Test.Fixtures.vtccds." + itemContentHash)) " is 120.
Long Statement,GitTfs.Test.Util,AuthorsFileUnitTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\AuthorsFileUnitTest.cs,AuthorsFileMultiLineRecordWithBlankLine,The length of the statement  "            Assert.Throws<GitTfsException>(() => authFile.Parse(new StreamReader(new MemoryStream(Encoding.ASCII.GetBytes(author))))); " is 122.
Long Statement,GitTfs.Test.Util,AuthorsFileUnitTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\AuthorsFileUnitTest.cs,AuthorsFileTestBadRecord,The length of the statement  "            Assert.Throws<GitTfsException>(() => authFile.Parse(new StreamReader(new MemoryStream(Encoding.ASCII.GetBytes(author))))); " is 122.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Sets_commit_message_as_checkin_comments,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(singletonCheckinOptions' commitMessage); " is 130.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_work_item_to_associate_and_removes_checkin_command_comment,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_does_not_require_action,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_user_defined_regex_non_matching,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory(@"workitem id:(?<item_id>\d+)").BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 157.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_user_defined_regex_matching,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory(@"workitem id:(?<item_id>\d+)").BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 157.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_user_defined_invalid_regex,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory(@"workitem id:((?<item_id>\d+)").BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 158.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_user_defined_empty_regex,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory(@"").BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 130.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash2,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash_wrong_format,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash_2_styles,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash_same_workitems,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_work_item_to_resolve_and_removes_checkin_command_comment,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_work_item_to_resolve_and_removes_checkin_command_comment,The length of the statement  "            Assert.Equal(expectedCheckinComment.Replace(Environment.NewLine' "NEWLINE")' specificCheckinOptions.CheckinComment.Replace(Environment.NewLine' "NEWLINE")); " is 156.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_multiple_work_items_and_removes_checkin_command_comment,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_multiple_work_items_and_removes_checkin_command_comment,The length of the statement  "            Assert.Equal(expectedCheckinComment.Replace(Environment.NewLine' "NEWLINE")' specificCheckinOptions.CheckinComment.Replace(Environment.NewLine' "NEWLINE")); " is 156.
Long Statement,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_reviewers_and_removes_checkin_command_comment,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildCommitSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 127.
Long Statement,GitTfs.Test.Util,ShelveSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\ShelveSpecificCheckinOptionsFactoryTests.cs,Adds_work_item_to_associate_and_removes_checkin_command_comment,The length of the statement  "            var specificCheckinOptions = GetCheckinOptionsFactory().BuildShelveSetSpecificCheckinOptions(new CheckinOptions()' commitMessage); " is 130.
Empty Catch Block,GitTfs.Test.Integration,IntegrationHelper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\IntegrationHelper.cs,Dispose,The method has an empty catch block.
Magic Number,GitTfs.Test.Commands,HelpTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\HelpTest.cs,ShouldWriteGeneralHelp,The following statement contains a magic number: memoryTarget.Logs[2].Equals(" (use 'git-tfs help [command]' or 'git-tfs [command] --help' for more information)");
Magic Number,GitTfs.Test.Commands,HelpTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\HelpTest.cs,ShouldWriteGeneralHelp,The following statement contains a magic number: memoryTarget.Logs[3].Equals("Find more help in our online help : https://github.com/git-tfs/git-tfs");
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranch,The following statement contains a magic number: tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") });
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldDoNothingBecauseRemoteAlreadyExisting,The following statement contains a magic number: tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") });
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailBecauseGitCommitCorrespondingToChangeSetNotFound,The following statement contains a magic number: tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2010' "$/MyProject/MyBranch") });
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitBranchInTfs2008CompatibilityMode,The following statement contains a magic number: tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' remoteMock.Object.TfsRepositoryPath)).Returns(new List<RootBranch>() { new RootBranch(2008' "$/MyProject/MyBranch") });
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailedInitBranchInTfs2008CompatibilityModeBecauseParentBranchNotAlreadyCloned,The following statement contains a magic number: tfsHelperMock.Setup(t => t.GetRootChangesetForBranch("$/MyProject/MyBranch"' -1' null)).Returns(new List<RootBranch>() { new RootBranch(2008' "$/MyProject/MyBranch") });
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The following statement contains a magic number: var rootChangeSetB1 = 1000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The following statement contains a magic number: var rootChangeSetB2 = 2000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldInitAllBranches,The following statement contains a magic number: trunkGitTfsRemote.Object.MaxChangesetId = 2000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The following statement contains a magic number: var rootChangeSetB1 = 1000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The following statement contains a magic number: var rootChangeSetB2 = 2000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,WhenCloningASubBranch_ThenInitAllBranchesShouldSucceedWithInitializingOnlyChildrenBranches,The following statement contains a magic number: trunkGitTfsRemote.Object.MaxChangesetId = 2000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The following statement contains a magic number: var rootChangeSetB1 = 1000;
Magic Number,GitTfs.Test.Commands,InitBranchTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Commands\InitBranchTest.cs,ShouldFailInitAllBranchesBecauseCloneWasNotMadeFromABranch,The following statement contains a magic number: var rootChangeSetB2 = 2000;
Magic Number,GitTfs.Test.Core,Fixture,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,Fixture,The following statement contains a magic number: Changeset.Changes = new IChange[] {                          FakeChange.Rename("$/Project/file1.txt"' from: "$/Project/oldfile1.txt"' deletionId: 33)'                          FakeChange.Add("$/Project/deletedfile1.txt"' deletionId: 33)' // this seems like nonsense.                      };
Magic Number,GitTfs.Test.Core,Fixture,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,Fixture,The following statement contains a magic number: Changeset.Changes = new IChange[] {                          FakeChange.Rename("$/Project/file1.txt"' from: "$/Project/oldfile1.txt"' deletionId: 33)'                          FakeChange.Add("$/Project/deletedfile1.txt"' deletionId: 33)' // this seems like nonsense.                      };
Magic Number,GitTfs.Test.Core,WithAddsAndDeletes,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllChanges,The following statement contains a magic number: Assert.Equal(5' fetchChanges.Length);
Magic Number,GitTfs.Test.Core,WithAddsAndDeletes,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllChanges,The following statement contains a magic number: Assert.Contains(Changes[2]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithAddsAndDeletes,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllChanges,The following statement contains a magic number: Assert.Contains(Changes[3]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithAddsAndDeletes,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllChanges,The following statement contains a magic number: Assert.Contains(Changes[4]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithIgnoredThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllExceptIgnored,The following statement contains a magic number: Assert.Equal(3' fetchChanges.Length);
Magic Number,GitTfs.Test.Core,WithIgnoredThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllExceptIgnored,The following statement contains a magic number: Assert.Contains(Changes[2]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithIgnoredThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllExceptIgnored,The following statement contains a magic number: Assert.Contains(Changes[3]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithIgnoredThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,FetchesAllExceptIgnored,The following statement contains a magic number: Assert.Contains(Changes[6]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithExistingItems,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,PreservesFileMode,The following statement contains a magic number: Assert.Equal("100755"' toApply[2].Mode.ToModeString());
Magic Number,GitTfs.Test.Core,WithExistingItems,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,PreservesFileMode,The following statement contains a magic number: Assert.Equal("100644"' toApply[3].Mode.ToModeString());
Magic Number,GitTfs.Test.Core,SkipBranchedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Equal(3' fetchChanges.Length);
Magic Number,GitTfs.Test.Core,SkipBranchedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Contains(Changes[2]' fetchChanges);
Magic Number,GitTfs.Test.Core,SkipBranchedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Contains(Changes[3]' fetchChanges);
Magic Number,GitTfs.Test.Core,SkipMergedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Equal(3' fetchChanges.Length);
Magic Number,GitTfs.Test.Core,SkipMergedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Contains(Changes[2]' fetchChanges);
Magic Number,GitTfs.Test.Core,SkipMergedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Contains(Changes[3]' fetchChanges);
Magic Number,GitTfs.Test.Core,SkipMergedThings,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,DoesNotFetchBranchedFile,The following statement contains a magic number: Assert.Contains(Changes[4]' fetchChanges);
Magic Number,GitTfs.Test.Core,WithDeleteMainFolderBranchAndSubItems,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ChangeSieveTests.cs,Dispose,The following statement contains a magic number: BaseFixture.RemoteMock.Verify(r => r.GetPathInGitRepo(It.IsAny<string>())' Times.Exactly(4));
Magic Number,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldFormatDateForGit,The following statement contains a magic number: var date = new DateTime(2000' 1' 2' 12' 34' 56);
Magic Number,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldFormatDateForGit,The following statement contains a magic number: var date = new DateTime(2000' 1' 2' 12' 34' 56);
Magic Number,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldFormatDateForGit,The following statement contains a magic number: var date = new DateTime(2000' 1' 2' 12' 34' 56);
Magic Number,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldFormatDateForGit,The following statement contains a magic number: var date = new DateTime(2000' 1' 2' 12' 34' 56);
Magic Number,GitTfs.Test.Core,ExtTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ExtTests.cs,ShouldFormatDateForGit,The following statement contains a magic number: var date = new DateTime(2000' 1' 2' 12' 34' 56);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal(5' changes.Length);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("D"' changes[2].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("TestFiles/Test2.txt"' changes[2].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("R"' changes[3].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("100"' changes[3].score);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("TestFiles/Test3.txt"' changes[3].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("TestFiles/Test3_moved.txt"' changes[3].pathTo);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("A"' changes[4].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChanges,The following statement contains a magic number: Assert.Equal("TestFiles/Test4.txt"' changes[4].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal(5' changes.Length);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("D"' changes[2].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("TestFiles/試し2.txt"' changes[2].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("R"' changes[3].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("100"' changes[3].score);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("TestFiles/試し3.txt"' changes[3].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("TestFiles/試し3_moved.txt"' changes[3].pathTo);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("A"' changes[4].Status);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,MultipleChangesWithJapanese,The following statement contains a magic number: Assert.Equal("TestFiles/試し4.txt"' changes[4].path);
Magic Number,GitTfs.Test.Core,GitChangeInfoTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GitChangeInfoTests.cs,ShouldDetectAddDeleteNotCorrespondingToCaseRenameWithContentChange_AndReturnOneAdditionAndOneDeletionChange,The following statement contains a magic number: Assert.Equal(2' changes.Length);
Magic Number,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenOnlyOneRemoteFoundInParentCommits_ThenReturnIt,The following statement contains a magic number: _gitRepositoryMock.Setup(r => r.GetLastParentTfsCommits("HEAD"))                     .Returns(new List<TfsChangesetInfo>()                         {                             new TfsChangesetInfo()                                 {                                     ChangesetId = 34'                                     Remote = new GitTfsRemote(new RemoteInfo() {Id = "myRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))                                 }                         });
Magic Number,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenTwoRemotesFoundInParentCommits_ThenReturnTheFirst,The following statement contains a magic number: _gitRepositoryMock.Setup(r => r.GetLastParentTfsCommits("HEAD"))                     .Returns(new List<TfsChangesetInfo>()                         {                             new TfsChangesetInfo()                                 {                                     ChangesetId = 34'                                     Remote = new GitTfsRemote(new RemoteInfo() {Id = "mainRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))                                 }'                                 new TfsChangesetInfo()                                 {                                     ChangesetId = 34'                                     Remote = new GitTfsRemote(new RemoteInfo() {Id = "myRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))                                 }'                         });
Magic Number,GitTfs.Test.Core,GlobalsTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\GlobalsTests.cs,WhenTwoRemotesFoundInParentCommits_ThenReturnTheFirst,The following statement contains a magic number: _gitRepositoryMock.Setup(r => r.GetLastParentTfsCommits("HEAD"))                     .Returns(new List<TfsChangesetInfo>()                         {                             new TfsChangesetInfo()                                 {                                     ChangesetId = 34'                                     Remote = new GitTfsRemote(new RemoteInfo() {Id = "mainRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))                                 }'                                 new TfsChangesetInfo()                                 {                                     ChangesetId = 34'                                     Remote = new GitTfsRemote(new RemoteInfo() {Id = "myRemote"}' _gitRepositoryMock.Object' new RemoteOptions()' _globals' _tfsHelper' new ConfigProperties(null))                                 }'                         });
Magic Number,GitTfs.Test.Core,RemoteConfigConverterTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\RemoteConfigConverterTests.cs,MultipleRemotes,The following statement contains a magic number: Assert.Equal(2' remotes.Count());
Magic Number,GitTfs.Test.Integration,ConfigPropertyLoaderTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ConfigPropertyLoaderTests.cs,WhenNoValueIsSet_ThenDefaultValueIsReturned,The following statement contains a magic number: Assert.Equal(100' configProperties.BatchSize);
Magic Number,GitTfs.Test.Integration,ConfigPropertyLoaderTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ConfigPropertyLoaderTests.cs,WhenANewValueIsSet_ThenThisValueIsReturned,The following statement contains a magic number: configProperties.BatchSize = 10;
Magic Number,GitTfs.Test.Integration,ConfigPropertyLoaderTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ConfigPropertyLoaderTests.cs,WhenANewValueIsSet_ThenThisValueIsReturned,The following statement contains a magic number: Assert.Equal(10' configProperties.BatchSize);
Magic Number,GitTfs.Test.Integration,ConfigPropertyLoaderTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ConfigPropertyLoaderTests.cs,WhenANewValueIsSetThrougthGitConfigFile_ThenThisValueIsReturned,The following statement contains a magic number: Assert.Equal(5' configProperties.BatchSize);
Magic Number,GitTfs.Test.Integration,ConfigPropertyLoaderTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\ConfigPropertyLoaderTests.cs,WhenANewValueIsSetAndPersistedInTheGitConfigFile_ThenThisValueAppearInTheGitConfigFile,The following statement contains a magic number: configProperties.BatchSize = 7;
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneProjectWithChangesets,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Folder")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Folder/File.txt"' "File contents")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tldr");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneProjectWithInternationalCharactersInFileNamesAndFolderNames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/ÆØÅ")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ÆØÅ/äöü.txt"' "File contents");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneProjectWithInternationalCharactersInFileContents,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Folder")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Folder/File.txt"' "Blåbærsyltetøy er godt!"); // "Blueberry jam is tasty!"              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneProjectWithInternationalCharactersInCommitMessages,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Blåbærsyltetøy"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Folder")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Folder/File.txt"' "File contents");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithMixedUpCase,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo")                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo/Bar")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Foo/Bar/File.txt"' "File contents");                  r.Changeset(3' "Second commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/myproject/foo/BAR/file.txt"' "Updated file contents in path with different casing")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/myproject/FOO/bar/file2.txt"' "Another file in the same folder' but with different casing");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithMixedUpCase,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo")                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo/Bar")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Foo/Bar/File.txt"' "File contents");                  r.Changeset(3' "Second commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/myproject/foo/BAR/file.txt"' "Updated file contents in path with different casing")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/myproject/FOO/bar/file2.txt"' "Another file in the same folder' but with different casing");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CreateFakeRepositoryWithMergeChangeset,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyProject/Main");                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "First commit"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Main")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents");                  r.Changeset(3' "commit in main"' DateTime.Parse("2012-01-02 12:12:13 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main");                  r.BranchChangeset(4' "create branch"' DateTime.Parse("2012-01-02 12:12:14 -05:00")' fromBranch: "$/MyProject/Main"' toBranch: "$/MyProject/Branch"' rootChangesetId: 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyProject/Branch")                      .Change(TfsChangeType.Branch' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents");                  r.Changeset(5' "commit in branch"' DateTime.Parse("2012-01-02 12:12:15 -05:00"))                      .Change(TfsChangeType.Edit' TfsItemType.File' "$/MyProject/Branch/File.txt"' "File contents_branch");                  r.MergeChangeset(6' "merge in main"' DateTime.Parse("2012-01-02 12:12:16 -05:00")' fromBranch: "$/MyProject/Branch"' intoBranch: "$/MyProject/Main"' lastChangesetId: 5)                      .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/MyProject/Main/File.txt"' "File contents_main_branch=>_merge");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,IgnoresAFile,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tldr\nanother line\n")                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/app.exe"' "Do not include");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WorksForACommitWithOnlyIgnoredFiles,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tldr\nanother line\n");                  r.Changeset(3' "Add an ignored file"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/app.exe"' "Do not include");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,WorksForACommitWithOnlyIgnoredFiles,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tldr\nanother line\n");                  r.Changeset(3' "Add an ignored file"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/app.exe"' "Do not include");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,LineEndingsNormalizedWhenAutocrlf,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tld \r\n another line \r\n");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,LineNotNormalizedWhenAutocrlfFalse,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tld \r\n another line \r\n");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,HandlesIgnoredFilesParticipatingInRenames,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                  r.Changeset(2' "Add some files"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' itemId: 100' contents: "tldr\nanother line\n")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/notignored.txt"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/ignoredatfirst.exe"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/alwaysignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/neverignored.txt"' itemId: 104' contents: "originalname: neverignored.txt");                  r.Changeset(3' "Rename the ignored files"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/notignored.exe"' itemId: 101' contents: "originalname: notignored.txt")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/ignoredatfirst.txt"' itemId: 102' contents: "originalname: ignoredatfirst.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/foreverignored.exe"' itemId: 103' contents: "originalname: alwaysignored.exe")                      .Change(TfsChangeType.Rename' TfsItemType.File' "$/MyProject/included.txt"' itemId: 104' contents: "originalname: neverignored.txt");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyTeamProject/Root");                    r.Changeset(1' "Create initial team project."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject");                    r.Changeset(2' "Create root branch."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Root");                    r.Changeset(3' @"Create ""branch"" (as a folder)."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.Changeset(4' @"Delete the ""branch"" folder."' DateTime.Now)                      .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.BranchChangeset(5' "Create a proper branch (though' with the same name as the previously deleted folder)"'                          DateTime.Now' "$/MyTeamProject/Root"' "$/MyTeamProject/Branch"' 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyTeamProject/Branch");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyTeamProject/Root");                    r.Changeset(1' "Create initial team project."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject");                    r.Changeset(2' "Create root branch."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Root");                    r.Changeset(3' @"Create ""branch"" (as a folder)."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.Changeset(4' @"Delete the ""branch"" folder."' DateTime.Now)                      .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.BranchChangeset(5' "Create a proper branch (though' with the same name as the previously deleted folder)"'                          DateTime.Now' "$/MyTeamProject/Root"' "$/MyTeamProject/Branch"' 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyTeamProject/Branch");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyTeamProject/Root");                    r.Changeset(1' "Create initial team project."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject");                    r.Changeset(2' "Create root branch."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Root");                    r.Changeset(3' @"Create ""branch"" (as a folder)."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.Changeset(4' @"Delete the ""branch"" folder."' DateTime.Now)                      .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.BranchChangeset(5' "Create a proper branch (though' with the same name as the previously deleted folder)"'                          DateTime.Now' "$/MyTeamProject/Root"' "$/MyTeamProject/Branch"' 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyTeamProject/Branch");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyTeamProject/Root");                    r.Changeset(1' "Create initial team project."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject");                    r.Changeset(2' "Create root branch."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Root");                    r.Changeset(3' @"Create ""branch"" (as a folder)."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.Changeset(4' @"Delete the ""branch"" folder."' DateTime.Now)                      .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.BranchChangeset(5' "Create a proper branch (though' with the same name as the previously deleted folder)"'                          DateTime.Now' "$/MyTeamProject/Root"' "$/MyTeamProject/Branch"' 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyTeamProject/Branch");              });
Magic Number,GitTfs.Test.Integration,CloneTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\CloneTests.cs,CloneWithAllBranchesShouldHandleFolderDeletedAndRecreatedAsBranch,The following statement contains a magic number: h.SetupFake(r =>              {                  r.SetRootBranch("$/MyTeamProject/Root");                    r.Changeset(1' "Create initial team project."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject");                    r.Changeset(2' "Create root branch."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Root");                    r.Changeset(3' @"Create ""branch"" (as a folder)."' DateTime.Now)                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.Changeset(4' @"Delete the ""branch"" folder."' DateTime.Now)                      .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/MyTeamProject/Branch");                    r.BranchChangeset(5' "Create a proper branch (though' with the same name as the previously deleted folder)"'                          DateTime.Now' "$/MyTeamProject/Root"' "$/MyTeamProject/Branch"' 2)                      .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/MyTeamProject/Branch");              });
Magic Number,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CanFetchWithMixedUpCasingForTfsServerUrl,The following statement contains a magic number: Assert.Equal(3' integrationHelper.GetCommitCount("MyProject"));
Magic Number,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CanFetchWithMixedUpCasingForLegacyTfsServerUrl,The following statement contains a magic number: Assert.Equal(3' integrationHelper.GetCommitCount("MyProject"));
Magic Number,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CanFetchWithMixedUpCasingForTfsRepositoryPath,The following statement contains a magic number: Assert.Equal(3' integrationHelper.GetCommitCount("MyProject"));
Magic Number,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CloneRepoWithTwoCommits,The following statement contains a magic number: integrationHelper.SetupFake(r =>                                              {                                                  r.Changeset(1' "Project created from template"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                                                   .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");                                                  r.Changeset(2' "Add Readme"' DateTime.Parse("2012-01-02 12:12:12 -05:00"))                                                   .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Folder")                                                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Folder/File.txt"' "File contents")                                                   .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/README"' "tldr");                                              });
Magic Number,GitTfs.Test.Integration,FetchTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\FetchTests.cs,CreateAChangeset,The following statement contains a magic number: return r.Changeset(3' "Add a file"' DateTime.Parse("2012-01-03 12:12:12 -05:00"))                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo")                      .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject/Foo/Bar")                      .Change(TfsChangeType.Add' TfsItemType.File' "$/MyProject/Foo/Bar/File.txt"' "File contents");
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenThereIsMoreThanTfsChangeset_ThenReturnTheLast,The following statement contains a magic number: h.SetupFake(r =>              {                  r.Changeset(42' "UseLess! Just to have the same changeset Id that the commit already in repo (and fetch nothing)"' DateTime.Parse("2012-01-01 12:12:12 -05:00"))                   .Change(TfsChangeType.Add' TfsItemType.Folder' "$/MyProject");              });
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,GetLastParentTfsCommits_WhenTheMergeCommitIsNotFromTfs_ThenReturnTheParentsFoundWithMainParentFromMasterFirst,The following statement contains a magic number: Assert.Equal(2' changesets.Count());
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,FindParentCommits,The following statement contains a magic number: Assert.Equal(3' changesets.Count());
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,FindParentCommits,The following statement contains a magic number: Assert.Equal(c5' changesets.ElementAt(2).Sha);
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,FindParentCommits,The following statement contains a magic number: Assert.Equal(3' changesets.Count());
Magic Number,GitTfs.Test.Integration,GitRepositoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Integration\GitRepositoryTests.cs,FindParentCommits,The following statement contains a magic number: Assert.Equal(c6' changesets.ElementAt(2).Sha);
Magic Number,GitTfs.Test.Core.TfsInterop,BranchExtensionsTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\TfsInterop\BranchExtensionsTest.cs,WhenGettingChildrenOfTopBranch_ThenReturnAllTheChildren,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,GitTfs.Test.Core.TfsInterop,BranchExtensionsTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\TfsInterop\BranchExtensionsTest.cs,WhenGettingChildrenOfOneBranch_ThenReturnChildrenOfThisBranch,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,GitTfs.Test.Core.TfsInterop,BranchExtensionsTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\TfsInterop\BranchExtensionsTest.cs,WhenFindingChildrenOfTopBranchByPath_ThenReturnAllTheChildren,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,GitTfs.Test.Core.TfsInterop,BranchExtensionsTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Core\TfsInterop\BranchExtensionsTest.cs,WhenFindingChildrenOfOneBranchByPath_ThenReturnChildrenOfThisBranch,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22487' "1er commit dans le tronc!!!"' DateTime.Parse("2013-05-24T16:27:37.15Z"))                  .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/trunk"' Read(null)' 390992)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("36eae6b6a4717375a4ff16287744cd1d")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22487' "1er commit dans le tronc!!!"' DateTime.Parse("2013-05-24T16:27:37.15Z"))                  .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/trunk"' Read(null)' 390992)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("36eae6b6a4717375a4ff16287744cd1d")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22487' "1er commit dans le tronc!!!"' DateTime.Parse("2013-05-24T16:27:37.15Z"))                  .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/trunk"' Read(null)' 390992)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("36eae6b6a4717375a4ff16287744cd1d")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22511' "trunk1"' DateTime.Parse("2013-05-24T22:58:06.307Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22511' "trunk1"' DateTime.Parse("2013-05-24T22:58:06.307Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22512' "trunk2"' DateTime.Parse("2013-05-24T22:59:05.403Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("70e6b3871859cf52ef78fba876bc37a4")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22512' "trunk2"' DateTime.Parse("2013-05-24T22:59:05.403Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("70e6b3871859cf52ef78fba876bc37a4")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(22513' "Creation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:01:06.747Z")' "$/vtccds/trunk"' "$/vtccds/b1"' 22511)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1"' Read(null)' 391048)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(22513' "Creation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:01:06.747Z")' "$/vtccds/trunk"' "$/vtccds/b1"' 22511)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1"' Read(null)' 391048)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(22513' "Creation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:01:06.747Z")' "$/vtccds/trunk"' "$/vtccds/b1"' 22511)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1"' Read(null)' 391048)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(22513' "Creation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:01:06.747Z")' "$/vtccds/trunk"' "$/vtccds/b1"' 22511)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1"' Read(null)' 391048)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("74687eb86f9a0c7a2ca65efbbae6a5ad")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22514' "b1.1"' DateTime.Parse("2013-05-24T23:03:43.493Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("96b58369f5bd2b081005ba208ac649b8")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(22514' "b1.1"' DateTime.Parse("2013-05-24T23:03:43.493Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("96b58369f5bd2b081005ba208ac649b8")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(22515' "Merge branch 'b1' in trunk\n\nb1.1\n\nCreation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:48:45.6Z")' "$/vtccds/b1"' "$/vtccds/trunk"' 22514)                  .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4cd460612edcbab617997836871d7291")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(22515' "Merge branch 'b1' in trunk\n\nb1.1\n\nCreation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:48:45.6Z")' "$/vtccds/b1"' "$/vtccds/trunk"' 22514)                  .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4cd460612edcbab617997836871d7291")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(22515' "Merge branch 'b1' in trunk\n\nb1.1\n\nCreation branch $/vtccds/b1"' DateTime.Parse("2013-05-24T23:48:45.6Z")' "$/vtccds/b1"' "$/vtccds/trunk"' 22514)                  .Change(TfsChangeType.Edit | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4cd460612edcbab617997836871d7291")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25197' "trunk after merge"' DateTime.Parse("2013-09-09T20:33:30.637Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25197' "trunk after merge"' DateTime.Parse("2013-09-09T20:33:30.637Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25198' "create branch to test renaming branch in tfs"' DateTime.Parse("2013-09-09T20:39:59.453Z")' "$/vtccds/trunk"' "$/vtccds/testRename"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25198' "create branch to test renaming branch in tfs"' DateTime.Parse("2013-09-09T20:39:59.453Z")' "$/vtccds/trunk"' "$/vtccds/testRename"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25198' "create branch to test renaming branch in tfs"' DateTime.Parse("2013-09-09T20:39:59.453Z")' "$/vtccds/trunk"' "$/vtccds/testRename"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25198' "create branch to test renaming branch in tfs"' DateTime.Parse("2013-09-09T20:39:59.453Z")' "$/vtccds/trunk"' "$/vtccds/testRename"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25199' "rename branch1"' DateTime.Parse("2013-09-09T20:45:50.05Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25199' "rename branch1"' DateTime.Parse("2013-09-09T20:45:50.05Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25200' "testRename renamed in afterRename"' DateTime.Parse("2013-09-09T22:13:05.513Z")' "$/vtccds/testRename"' "$/vtccds/afterRename"' 25199)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/testRename"' Read(null)' 426363)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/testRename/file.txt"' Read("2ea0b9d555f39b93aa67d834aec81dec")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25202' "1st commit after rename"' DateTime.Parse("2013-09-10T12:19:16.28Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25202' "1st commit after rename"' DateTime.Parse("2013-09-10T12:19:16.28Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25957' "branch to test rename of a file"' DateTime.Parse("2013-10-25T08:33:22.15Z")' "$/vtccds/trunk"' "$/vtccds/renameFile"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25957' "branch to test rename of a file"' DateTime.Parse("2013-10-25T08:33:22.15Z")' "$/vtccds/trunk"' "$/vtccds/renameFile"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25957' "branch to test rename of a file"' DateTime.Parse("2013-10-25T08:33:22.15Z")' "$/vtccds/trunk"' "$/vtccds/renameFile"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(25957' "branch to test rename of a file"' DateTime.Parse("2013-10-25T08:33:22.15Z")' "$/vtccds/trunk"' "$/vtccds/renameFile"' 25197)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25958' "file.txt renamed to renamed_file.txt"' DateTime.Parse("2013-10-25T08:37:09.53Z"))                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25958' "file.txt renamed to renamed_file.txt"' DateTime.Parse("2013-10-25T08:37:09.53Z"))                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25958' "file.txt renamed to renamed_file.txt"' DateTime.Parse("2013-10-25T08:37:09.53Z"))                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renameFile/file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("fba9507f41916830d82be84924dded7b")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25959' "other useless commit"' DateTime.Parse("2013-10-25T08:37:33.233Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("9a975dd2be9a190424fc226a5a25d84f")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(25959' "other useless commit"' DateTime.Parse("2013-10-25T08:37:33.233Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renameFile/renamed_file.txt"' Read("9a975dd2be9a190424fc226a5a25d84f")' 439693);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26394' "fix #1669 and  #1670"' DateTime.Parse("2013-11-18T10:15:38.977Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26394' "fix #1669 and  #1670"' DateTime.Parse("2013-11-18T10:15:38.977Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26496' "wi #1669"' DateTime.Parse("2013-11-22T21:59:09.56Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fd30d6210bb40fd2c9b689f0bf8b2833")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26496' "wi #1669"' DateTime.Parse("2013-11-22T21:59:09.56Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("fd30d6210bb40fd2c9b689f0bf8b2833")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26497' "wi #1670"' DateTime.Parse("2013-11-22T22:03:45.9Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("86882c0ae4717b4969d54f676c0261e3")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(26497' "wi #1670"' DateTime.Parse("2013-11-22T22:03:45.9Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/trunk/file.txt"' Read("86882c0ae4717b4969d54f676c0261e3")' 390991);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27503' "create a new branch from nowhere\n=> not a branch from another branch!!"' DateTime.Parse("2014-01-05T16:08:07.48Z")' string.Empty' "$/vtccds/branch_from_nowhere"' -1)                  .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/branch_from_nowhere"' Read(null)' 479197);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27503' "create a new branch from nowhere\n=> not a branch from another branch!!"' DateTime.Parse("2014-01-05T16:08:07.48Z")' string.Empty' "$/vtccds/branch_from_nowhere"' -1)                  .Change(TfsChangeType.Add | TfsChangeType.Encoding' TfsItemType.Folder' "$/vtccds/branch_from_nowhere"' Read(null)' 479197);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27505' "first changeset from nowhere..."' DateTime.Parse("2014-01-05T20:41:20.78Z"))                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("6c6060d9696edc7000396cc499ab8277")' 479199);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27505' "first changeset from nowhere..."' DateTime.Parse("2014-01-05T20:41:20.78Z"))                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("6c6060d9696edc7000396cc499ab8277")' 479199);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27506' "2nd changeset from nowhere..."' DateTime.Parse("2014-01-05T20:43:16.14Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479199);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27506' "2nd changeset from nowhere..."' DateTime.Parse("2014-01-05T20:43:16.14Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/branch_from_nowhere/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479199);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(27507' "baseless merge from branch not branched \"branch_from_nowhere\""' DateTime.Parse("2014-01-05T21:02:33.82Z")' "$/vtccds/branch_from_nowhere"' "$/vtccds/renameFile"' 27506)                  .Change(TfsChangeType.Merge' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Encoding | TfsChangeType.Branch | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/renameFile/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479200);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(27507' "baseless merge from branch not branched \"branch_from_nowhere\""' DateTime.Parse("2014-01-05T21:02:33.82Z")' "$/vtccds/branch_from_nowhere"' "$/vtccds/renameFile"' 27506)                  .Change(TfsChangeType.Merge' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Encoding | TfsChangeType.Branch | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/renameFile/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479200);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(27507' "baseless merge from branch not branched \"branch_from_nowhere\""' DateTime.Parse("2014-01-05T21:02:33.82Z")' "$/vtccds/branch_from_nowhere"' "$/vtccds/renameFile"' 27506)                  .Change(TfsChangeType.Merge' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Encoding | TfsChangeType.Branch | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/renameFile/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479200);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.MergeChangeset(27507' "baseless merge from branch not branched \"branch_from_nowhere\""' DateTime.Parse("2014-01-05T21:02:33.82Z")' "$/vtccds/branch_from_nowhere"' "$/vtccds/renameFile"' 27506)                  .Change(TfsChangeType.Merge' TfsItemType.Folder' "$/vtccds/renameFile"' Read(null)' 439692)                  .Change(TfsChangeType.Encoding | TfsChangeType.Branch | TfsChangeType.Merge' TfsItemType.File' "$/vtccds/renameFile/file_from_nowhere.txt"' Read("5a18c163f1804fe83dfeae04f1d1d34e")' 479200);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(27508' "rename the branch a second time..."' DateTime.Parse("2014-01-05T23:08:43.21Z")' "$/vtccds/afterRename"' "$/vtccds/renamedTwice"' 25202)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/afterRename"' Read(null)' 426365)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/afterRename/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364)                  .Change(TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("6553cc439299c73677e0c43dd0fd786e")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27509' "first commit after 2nd branch renaming..."' DateTime.Parse("2014-01-05T23:12:55.78Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(27509' "first commit after 2nd branch renaming..."' DateTime.Parse("2014-01-05T23:12:55.78Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(30333' "Creation branch $/vtccds/b1.1"' DateTime.Parse("2014-06-05T11:06:52.633Z")' "$/vtccds/trunk"' "$/vtccds/b1.1"' 26394)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1.1"' Read(null)' 513921)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(30333' "Creation branch $/vtccds/b1.1"' DateTime.Parse("2014-06-05T11:06:52.633Z")' "$/vtccds/trunk"' "$/vtccds/b1.1"' 26394)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1.1"' Read(null)' 513921)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(30333' "Creation branch $/vtccds/b1.1"' DateTime.Parse("2014-06-05T11:06:52.633Z")' "$/vtccds/trunk"' "$/vtccds/b1.1"' 26394)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1.1"' Read(null)' 513921)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(30333' "Creation branch $/vtccds/b1.1"' DateTime.Parse("2014-06-05T11:06:52.633Z")' "$/vtccds/trunk"' "$/vtccds/b1.1"' 26394)                  .Change(TfsChangeType.Branch' TfsItemType.Folder' "$/vtccds/b1.1"' Read(null)' 513921)                  .Change(TfsChangeType.Branch' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("4f4cd8afcb1708c003540aea8d64239d")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(30397' "b1.1"' DateTime.Parse("2014-06-09T22:24:49.643Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("c02331d395d07dc7efaaa295ac474971")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(30397' "b1.1"' DateTime.Parse("2014-06-09T22:24:49.643Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("c02331d395d07dc7efaaa295ac474971")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(30398' "b1.1 again"' DateTime.Parse("2014-06-09T22:25:12.27Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("1b9bf73806f680f3f6a79ca80e635dcf")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(30398' "b1.1 again"' DateTime.Parse("2014-06-09T22:25:12.27Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1.1/file.txt"' Read("1b9bf73806f680f3f6a79ca80e635dcf")' 513922);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(31588' "test changeset after merge"' DateTime.Parse("2014-07-13T19:23:16.753Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("52c0fc9d4cfbf1ae07f36b8e711a5d6b")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.Changeset(31588' "test changeset after merge"' DateTime.Parse("2014-07-13T19:23:16.753Z"))                  .Change(TfsChangeType.Edit' TfsItemType.File' "$/vtccds/b1/file.txt"' Read("52c0fc9d4cfbf1ae07f36b8e711a5d6b")' 391049);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Fixtures,vtccds,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Fixtures\vtccds.cs,Prepare,The following statement contains a magic number: r.BranchChangeset(33407' "Rename branch and other changes...\n\n-Modify file.txt\n-Add file2.txt"' DateTime.Parse("2014-10-11T15:19:56.077Z")' "$/vtccds/renamedTwice"' "$/vtccds/renamed3"' 27509)                  .Change(TfsChangeType.Rename' TfsItemType.Folder' "$/vtccds/renamed3"' Read(null)' 479201)                  .Change(TfsChangeType.Delete' TfsItemType.Folder' "$/vtccds/renamedTwice"' Read(null)' 479201)                  .Change(TfsChangeType.Edit | TfsChangeType.Rename' TfsItemType.File' "$/vtccds/renamed3/file.txt"' Read("fb5dcd187b5ab3729973b310f3c55596")' 426364)                  .Change(TfsChangeType.Add | TfsChangeType.Edit | TfsChangeType.Encoding' TfsItemType.File' "$/vtccds/renamed3/file2.txt"' Read("0445de4a590c27552a06ecda1b5ff2af")' 587696)                  .Change(TfsChangeType.Delete' TfsItemType.File' "$/vtccds/renamedTwice/file.txt"' Read("d67034311a9ccd1a5a62cc0ecdaa1a6f")' 426364);
Magic Number,GitTfs.Test.Util,AuthorsFileUnitTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\AuthorsFileUnitTest.cs,AuthorsFileMultiLineRecord,The following statement contains a magic number: Assert.Equal<int>(2' authFile.Authors.Count);
Magic Number,GitTfs.Test.Util,AuthorsFileUnitTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\AuthorsFileUnitTest.cs,AuthorsFileCommentCharacterMiddleOfLine,The following statement contains a magic number: Assert.Equal<int>(2' authFile.Authors.Count);
Magic Number,GitTfs.Test.Util,AuthorsFileUnitTest,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\AuthorsFileUnitTest.cs,AuthorsFileInternationalCharactersMultiLine,The following statement contains a magic number: Assert.Equal<int>(2' authFile.Authors.Count);
Magic Number,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Checkin_regex_with_hash_2_styles,The following statement contains a magic number: Assert.Equal(2' specificCheckinOptions.WorkItemsToAssociate.Count);
Magic Number,GitTfs.Test.Util,CommitSpecificCheckinOptionsFactoryTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\CommitSpecificCheckinOptionsFactoryTests.cs,Adds_reviewers_and_removes_checkin_command_comment,The following statement contains a magic number: Assert.Equal(3' specificCheckinOptions.CheckinNotes.Count);
Magic Number,GitTfs.Test.Util,GitTfsCommandRunnerTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,ReturnsCommandReturnValue,The following statement contains a magic number: Assert.Equal(99' _mocks.ClassUnderTest.Run(new UsesList()' Args()));
Magic Number,GitTfs.Test.Util,GitTfsCommandRunnerTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,ReturnsHelpForTooFewArgs,The following statement contains a magic number: Mock.Get(_mocks.Get<IHelpHelper>()).Setup(x => x.ShowHelpForInvalidArguments(It.IsAny<GitTfsCommand>())).Returns(33);
Magic Number,GitTfs.Test.Util,GitTfsCommandRunnerTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,ReturnsHelpForTooFewArgs,The following statement contains a magic number: Assert.Equal(33' _mocks.ClassUnderTest.Run(new UsesOverloads()' Args()));
Magic Number,GitTfs.Test.Util,GitTfsCommandRunnerTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,ReturnsHelpForTooManyArgs,The following statement contains a magic number: Mock.Get(_mocks.Get<IHelpHelper>()).Setup(x => x.ShowHelpForInvalidArguments(It.IsAny<GitTfsCommand>())).Returns(33);
Magic Number,GitTfs.Test.Util,GitTfsCommandRunnerTests,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,ReturnsHelpForTooManyArgs,The following statement contains a magic number: Assert.Equal(33' _mocks.ClassUnderTest.Run(new UsesOverloads()' Args("a"' "b"' "c")));
Magic Number,GitTfs.Test.Util,UsesList,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 99;
Magic Number,GitTfs.Test.Util,UsesOverloads,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 89;
Magic Number,GitTfs.Test.Util,UsesOverloads,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 88;
Magic Number,GitTfs.Test.Util,UsesOverloadsOrDefault,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 79;
Magic Number,GitTfs.Test.Util,UsesOverloadsOrDefault,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 78;
Magic Number,GitTfs.Test.Util,UsesOverloadsOrDefault,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfsTest\Util\GitTfsCommandRunnerTests.cs,Run,The following statement contains a magic number: return 77;
