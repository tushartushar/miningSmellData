Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,Cyclomatic complexity of the method is 10
Complex Method,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitializeBranches,Cyclomatic complexity of the method is 15
Complex Method,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,Cyclomatic complexity of the method is 9
Complex Method,Sep.Git.Tfs.Core,RemoteConfigConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\RemoteConfigConverter.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Checkin,Cyclomatic complexity of the method is 11
Complex Method,Sep.Git.Tfs.Core,TfsWriter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWriter.cs,WriteWith,Cyclomatic complexity of the method is 11
Complex Method,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FetchWithMerge,Cyclomatic complexity of the method is 13
Complex Method,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessChangeset,Cyclomatic complexity of the method is 17
Complex Method,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitTfsBranch,Cyclomatic complexity of the method is 9
Complex Method,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,Cyclomatic complexity of the method is 11
Complex Method,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Sep.Git.Tfs.Util,ChangeSieve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\ChangeSieve.cs,GetChangesToApply,Cyclomatic complexity of the method is 9
Complex Method,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessWorkItemCommands,Cyclomatic complexity of the method is 8
Complex Method,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessCheckinNoteCommands,Cyclomatic complexity of the method is 14
Long Parameter List,Sep.Git.Tfs.Commands,Branch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Branch.cs,Branch,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,FetchRemote,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs,GitTfs,F:\newReposMay17\git-tfs_git-tfs\GitTfs\GitTfs.cs,GitTfs,The method has 7 parameters.
Long Parameter List,Sep.Git.Tfs.Core,CheckinPolicyEvaluator,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\CheckinPolicyEvaluator.cs,EvaluateCheckin,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,InitBranch,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,Unshelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,Shelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,Checkin,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitTfsRemote.cs,InitBranch,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitTfsRemote.cs,Unshelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitTfsRemote.cs,Shelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitTfsRemote.cs,Checkin,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,TfsWorkspace,The method has 7 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,CreateTag,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,CreateNote,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,GitTfsRemote,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FetchWithMerge,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Unshelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Shelve,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Shelve,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Checkin,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Checkin,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitBranch,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitTfsBranch,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitRepository.cs,CreateTag,The method has 6 parameters.
Long Parameter List,Sep.Git.Tfs.Core,IGitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\IGitRepository.cs,CreateNote,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,ITfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\ITfsChangeset.cs,Apply,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,Apply,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core.TfsInterop,IVersionControlServer,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\IVersionControlServer.cs,QueryHistory,The method has 11 parameters.
Long Parameter List,Sep.Git.Tfs.Core.TfsInterop,ITfsHelper,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\ITfsHelper.cs,GetChangesets,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core.TfsInterop,ITfsHelper,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\ITfsHelper.cs,WithWorkspace,The method has 5 parameters.
Long Parameter List,Sep.Git.Tfs.Core.TfsInterop,IWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\IWorkspace.cs,EvaluateCheckin,The method has 7 parameters.
Long Parameter List,Sep.Git.Tfs.Core.TfsInterop,IWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\IWorkspace.cs,Checkin,The method has 7 parameters.
Long Identifier,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the parameter tfsRepositoryPathParentBranchFound is 34.
Long Identifier,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the parameter tfsRepositoryPathOfMergedBranch is 31.
Long Statement,Sep.Git.Tfs.Commands,Checkout,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Checkout.cs,Run,The length of the statement  "		throw new GitTfsException ("error: unable to checkout '" + commitishToCheckout + "' due to changes in your workspace!"' new List<string> { " is 138.
Long Statement,Sep.Git.Tfs.Commands,ResetRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "		throw new GitTfsException ("error : the commit where you want to reset the tfs remote does not belong to a tfs remote!"); " is 121.
Long Statement,Sep.Git.Tfs.Commands,ResetRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "			throw new GitTfsException ("error : the commit where you want to reset the tfs remote does not belong to the current tfs remote \"" + currentTfsCommit.Remote.Id + "\"!"' new List<string> { " is 188.
Long Statement,Sep.Git.Tfs.Commands,ResetRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "				"Use '--force' option to reset the remote \"" + targetCommit.Remote.Id + "\" to a commit not belonging to the current remote \"" + currentTfsCommit.Remote.Id + "\"" " is 164.
Long Statement,Sep.Git.Tfs.Commands,ResetRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "	Trace.TraceInformation ("Note: remember to use the '--force' option when doing the next 'fetch' to force git-tfs to fetch again the changesets!"); " is 146.
Long Statement,Sep.Git.Tfs.Commands,ListRemoteBranches,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ListRemoteBranches.cs,Run,The length of the statement  "	string convertBranchMessage = "  -> Open 'Source Control Explorer' and for each folder corresponding to a branch' right click on the folder and select 'Branching and Merging' > 'Convert to branch'."; " is 199.
Long Statement,Sep.Git.Tfs.Commands,ListRemoteBranches,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\ListRemoteBranches.cs,Run,The length of the statement  "		Trace.TraceInformation ("\n\nPS:if your branch is not listed here' perhaps you should convert its containing folder into a branch in TFS:"); " is 140.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoAdd,The length of the statement  "		owner = _globals.Repository.HasRemote (_globals.RemoteId) ? _globals.Repository.ReadTfsRemote (_globals.RemoteId) : null; " is 121.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoAdd,The length of the statement  "		owner = _globals.Repository.ReadAllTfsRemotes ().FirstOrDefault (x => string.IsNullOrEmpty (x.TfsRepositoryPath) && !x.IsSubtree); " is 130.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoAdd,The length of the statement  "	IGitTfsRemote remote = _globals.Repository.HasRemote (remoteId) ? _globals.Repository.ReadTfsRemote (remoteId) : _globals.Repository.CreateTfsRemote (new RemoteInfo { " is 166.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoPull,The length of the statement  "	remoteId = remoteId ?? string.Format (GitTfsConstants.RemoteSubtreeFormat' _globals.RemoteId ?? GitTfsConstants.DefaultRepositoryId' Prefix); " is 141.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoSplit,The length of the statement  "	var owners = _globals.Repository.GetLastParentTfsCommits ("HEAD").Where (x => !x.Remote.IsSubtree && x.Remote.TfsRepositoryPath == null).ToList (); " is 147.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,DoSplit,The length of the statement  "	foreach (var subtree in _globals.Repository.ReadAllTfsRemotes ().Where (x => x.IsSubtree && string.Equals (x.Prefix' Prefix))) { " is 128.
Long Statement,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,ValidatePrefix,The length of the statement  "		throw new GitTfsException (string.Format ("Directory {0} does not exist"' Prefix)).WithRecommendation ("Add the subtree using 'git tfs subtree add -p=<prefix> [tfs-server] [tfs-repository]'"); " is 192.
Long Statement,Sep.Git.Tfs.Commands,Branch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Branch.cs,VerifyCloneAllRepository,The length of the statement  "	if (_globals.Repository.ReadTfsRemote (GitTfsConstants.DefaultRepositoryId).TfsRepositoryPath == GitTfsConstants.TfsRoot) " is 121.
Long Statement,Sep.Git.Tfs.Commands,Branch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Branch.cs,VerifyCloneAllRepository,The length of the statement  "		throw new GitTfsException ("error: you can't use the 'branch' command when you have cloned the whole repository '$/' !"); " is 121.
Long Statement,Sep.Git.Tfs.Commands,Branch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Branch.cs,CreateRemote,The length of the statement  "	remote.Tfs.CreateBranch (remote.TfsRepositoryPath' tfsPath' commit.ChangesetId' Comment ?? "Creation branch " + tfsPath); " is 121.
Long Statement,Sep.Git.Tfs.Commands,Bootstrap,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Bootstrap.cs,Run,The length of the statement  "		Trace.TraceInformation ("commit {0}\nAuthor: {1} <{2}>\nDate:   {3}\n\n    {4}"' commit.Sha' commit.AuthorAndEmail.Item1' commit.AuthorAndEmail.Item2' commit.When.ToString ("ddd MMM d HH:mm:ss zzz")' commit.Message.Replace ("\n"' "\n    ").TrimEnd (' ')); " is 255.
Long Statement,Sep.Git.Tfs.Commands,CheckinTool,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\CheckinTool.cs,DoCheckin,The length of the statement  "		throw new GitTfsException ("checkintool does not work with this TFS version (" + changeset.Remote.Tfs.TfsClientLibraryVersion + ")."' new[] { " is 141.
Long Statement,Sep.Git.Tfs.Commands,Labels,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Labels.cs,CreateLabelsForTfsBranch,The length of the statement  "		Trace.WriteLine ("LabelId:" + label.Id + "/ChangesetId:" + label.ChangesetId + "/LabelName:" + label.Name + "/Owner:" + label.Owner); " is 133.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "		var tfsRepositoryPathParentBranchFound = allRemotes.FirstOrDefault (r => r.TfsRepositoryPath.ToLower () == ParentBranch.ToLower ()); " is 132.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "			throw new GitTfsException ("error: The Tfs parent branch '" + ParentBranch + "' can not be found in the Git repository\nPlease init it first and try again...\n"); " is 162.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "		creationBranchData = defaultRemote.Tfs.GetRootChangesetForBranch (tfsBranchPath' -1' tfsRepositoryPathParentBranchFound.TfsRepositoryPath); " is 139.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "		Trace.WriteLine ("Processing " + (rootBranch.IsRenamedBranch ? "renamed " : string.Empty) + "branch :" + rootBranch.TfsBranchPath + " (" + rootBranch.SourceBranchChangesetId + ")"); " is 181.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "		branchTfsRemote = defaultRemote.InitBranch (_remoteOptions' cbd.TfsRepositoryPath' cbd.RootChangesetId' !NoFetch' cbd.GitBranchNameExpected' fetchResult); " is 154.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "			fetchResult = FetchRemote (branchTfsRemote' false' !DontCreateGitBranch && !rootBranch.IsRenamedBranch' fetchResult' rootBranch.TargetBranchChangesetId); " is 153.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,GetChildBranchesToInit,The length of the statement  "		throw new GitTfsException ("error: The use of the option '--branches=all' to init all the branches is only possible when 'git tfs clone' was done from the trunk!!! '" + defaultRemote.TfsRepositoryPath + "' is not a TFS branch!"); " is 229.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "			TfsRemote = _globals.Repository.ReadAllTfsRemotes ().FirstOrDefault (r => r.TfsRepositoryPath == childBranchPath.TfsRepositoryPath) " is 131.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "					tfsBranch.TfsRemote = InitBranchSupportingRename (tfsBranch.TfsRepositoryPath' null' tfsBranch.CreationBranchData' defaultRemote' out fetchResult); " is 147.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "		Trace.TraceInformation ("\nPlease report this case to the git-tfs developers! (report here : https://github.com/git-tfs/git-tfs/issues/461 )"); " is 143.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "		Trace.TraceInformation ("\nPlease report this case to the git-tfs developers! (report here : https://github.com/git-tfs/git-tfs/issues )"); " is 139.
Long Statement,Sep.Git.Tfs.Commands,InitBranch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\InitBranch.cs,InitFromDefaultRemote,The length of the statement  "		defaultRemote = _globals.Repository.ReadAllTfsRemotes ().Where (x => x != null && x.RemoteInfo != null && !string.IsNullOrEmpty (x.RemoteInfo.Url)).OrderBy (x => x.RemoteInfo.Url.Length).FirstOrDefault (); " is 205.
Long Statement,Sep.Git.Tfs.Commands,Info,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Info.cs,DescribeTfsRemotes,The length of the statement  "	Trace.TraceInformation ("               {0} - {1} @ {2}"' remote.RemoteRef' remote.MaxCommitHash' remote.MaxChangesetId); " is 121.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,Run,The length of the statement  "				string msg = string.Format ("warning: Something went wrong while cleaning file after internal error (See below).\n    Can't clean up files because of IOException:\n{0}\n"' e.IndentExceptionMessage ()); " is 201.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,Run,The length of the statement  "				string msg = string.Format ("warning: Something went wrong while cleaning file after internal error (See below).\n    Can't clean up files because of UnauthorizedAccessException:\n{0}\n"' e.IndentExceptionMessage ()); " is 217.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,Run,The length of the statement  "		_globals.Repository.SetConfig (GitTfsConstants.IgnoreBranches' (_fetch.BranchStrategy == BranchStrategy.None).ToString ()); " is 123.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,Run,The length of the statement  "		throw new GitTfsException ("error: a problem occurred when trying to clone the repository. Try to solve the problem described below.\nIn any case' after' try to continue using command `git tfs " + (_fetch.BranchStrategy == BranchStrategy.All ? "branch init --all" : "fetch") + "`\n"' ex); " is 288.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "			throw new GitTfsException ("error: the path " + tfsRepositoryPath + " you want to clone doesn't exist!").WithRecommendation ("To discover which branch to clone' you could use the command :\ngit tfs list-remote-branches " + remote.TfsUrl); " is 238.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "				Trace.TraceInformation ("info: no TFS root found !\n\nPS:perhaps you should convert your trunk folder into a branch in TFS."); " is 126.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "			var cloneMsg = "   => If you want to manage branches with git-tfs' clone one of this branch instead :\n" + " - " + tfsRootBranches.Aggregate ((s1' s2) => s1 + "\n - " + s2) + "\n\nPS:if your branch is not listed here' perhaps you should convert the containing folder to a branch in TFS."; " is 288.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "				throw new GitTfsException ("error: cloning the whole repository or too high in the repository path doesn't permit to manage branches!\n" + cloneMsg); " is 149.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "			Trace.TraceWarning ("warning: you are going to clone the whole repository or too high in the repository path !\n" + cloneMsg); " is 126.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "				Trace.TraceInformation ("info: you are going to clone a branch instead of the trunk ( {0} )\n" + "   => If you want to manage branches with git-tfs' clone {0} with '--branches=all' option instead...)"' tfsTrunkRepositoryPath); " is 226.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "				Trace.TraceWarning ("warning: you are going to clone a subdirectory of a branch and won't be able to manage branches :(\n" + "   => If you want to manage branches with git-tfs' clone " + tfsTrunkRepositoryPath + " with '--branches=all' option instead...)"); " is 257.
Long Statement,Sep.Git.Tfs.Commands,Clone,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "		Trace.TraceWarning ("warning: a server error occurs when trying to verify the tfs path cloned:\n   " + ex.Message + "\n   try to continue anyway..."); " is 150.
Long Statement,Sep.Git.Tfs.Commands,Fetch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Fetch.cs,DoFetch,The length of the statement  "	// in that case tfs fetch will retrieve same changes again unnecessarily. To prevent it we will scan tree from HEAD and see if newer changesets from " is 148.
Long Statement,Sep.Git.Tfs.Commands,Fetch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Fetch.cs,DoFetch,The length of the statement  "	if (!ForceFetch && remote.Repository.IsBare && remote.Repository.HasRef (GitRepository.ShortToLocalName (bareBranch)) && remote.MaxCommitHash != remote.Repository.GetCommit (bareBranch).Sha) { " is 192.
Long Statement,Sep.Git.Tfs.Commands,Fetch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Fetch.cs,DoFetch,The length of the statement  "	bool shouldExport = ExportMetadatas || remote.Repository.GetConfig (GitTfsConstants.ExportMetadatasConfigKey) == "true"; " is 120.
Long Statement,Sep.Git.Tfs.Commands,Help,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Help.cs,Run,The length of the statement  "	Trace.TraceInformation ("\nFind more help in our online help : https://github.com/git-tfs/git-tfs/blob/master/doc/commands/" + GetCommandName (command) + ".md"); " is 161.
Long Statement,Sep.Git.Tfs.Commands,Help,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Help.cs,GetCommandInstances,The length of the statement  "	return _container.Model.PluginTypes.Single (p => p.PluginType == typeof(GitTfsCommand)).Instances.Where (i => i != null); " is 121.
Long Statement,Sep.Git.Tfs.Commands,Help,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Help.cs,GetCommandUsage,The length of the statement  "	var descriptionAttribute = command.GetType ().GetCustomAttributes (typeof(DescriptionAttribute)' false).FirstOrDefault () as DescriptionAttribute; " is 146.
Long Statement,Sep.Git.Tfs.Commands,Ext,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Init.cs,SuggestPaths,The length of the statement  "		yield return "Cloning an entire TFS repository is not supported. Try using a subdirectory of the root (e.g. $/MyProject)."; " is 123.
Long Statement,Sep.Git.Tfs.Commands,Ext,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Init.cs,ToGitBranchNameFromTfsRepositoryPath,The length of the statement  "	string gitBranchNameExpected = tfsRepositoryPath.IndexOf ("$/") == 0 ? tfsRepositoryPath.Remove (0' tfsRepositoryPath.IndexOf ('/'' 2) + 1) : tfsRepositoryPath; " is 160.
Long Statement,Sep.Git.Tfs.Commands,Pull,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Pull.cs,Run,The length of the statement  "				throw new GitTfsException ("error: You have local changes; rebase-workflow only possible with clean working directory.").WithRecommendation ("Try 'git stash' to stash your local changes and pull again."); " is 204.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,PerformRCheckin,The length of the statement  "		throw new GitTfsException ("error: You have local changes; rebase-workflow checkin only possible with clean working directory.").WithRecommendation ("Try 'git stash' to stash your local changes and checkin again."); " is 215.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,PerformRCheckin,The length of the statement  "			throw new GitTfsException ("error: New TFS changesets were found.").WithRecommendation ("Try to rebase HEAD onto latest TFS checkin and repeat rcheckin or alternatively checkins"); " is 180.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,PerformRCheckin,The length of the statement  "	IEnumerable<GitCommit> commitsToCheckin = _globals.Repository.FindParentCommits (refToCheckin' parentChangeset.Remote.MaxCommitHash); " is 133.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "		string tfsRepositoryPathOfMergedBranch = _checkinOptions.NoMerge ? null : FindTfsRepositoryPathOfMergedBranch (tfsRemote' parents' target); " is 139.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "		var commitSpecificCheckinOptions = _checkinOptionsFactory.BuildCommitSpecificCheckinOptions (_checkinOptions' message' commit' _authors); " is 137.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "		Trace.TraceInformation ("Starting checkin of {0} '{1}'"' target.Substring (0' 8)' commitSpecificCheckinOptions.CheckinComment); " is 127.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "			newChangesetId = tfsRemote.Checkin (target' currentParent' parentChangeset' commitSpecificCheckinOptions' tfsRepositoryPathOfMergedBranch); " is 139.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,BuildCommitMessage,The length of the statement  "	return generateCheckinComment ? _globals.Repository.GetCommitMessage (commit.Sha' latest) : _globals.Repository.GetCommit (commit.Sha).Message; " is 143.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "			Trace.TraceWarning ("warning: only 1 parent is supported by TFS for a merge changeset. The other parents won't be materialized in the TFS merge!"); " is 147.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "					throw new GitTfsException ("error: the merged branch '" + lastCheckinCommit.Remote.Id + "' is a TFS tracked branch (" + lastCheckinCommit.Remote.TfsRepositoryPath + ") with some commits not checked in.\nIn this case' the local merge won't be materialized as a merge in tfs...").WithRecommendation ("check in all the commits of the tfs merged branch in TFS before trying to check in a merge commit"' "use --ignore-merge option to ignore merged TFS branch and check in commit as a normal changeset (not a merge)."); " is 513.
Long Statement,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "				Trace.TraceWarning ("warning: the parent " + gitParent + " does not belong to a TFS tracked branch (not checked in TFS) and will be ignored!"); " is 143.
Long Statement,Sep.Git.Tfs.Commands,Shelve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Shelve.cs,Run,The length of the statement  "		? BuildCommitMessage (commit' !_checkinOptions.NoGenerateCheckinComment' changeset.Remote.MaxCommitHash) : string.Empty; " is 120.
Long Statement,Sep.Git.Tfs.Commands,Shelve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Shelve.cs,Run,The length of the statement  "		var shelveSpecificCheckinOptions = _checkinOptionsFactory.BuildShelveSetSpecificCheckinOptions (_checkinOptions' message); " is 122.
Long Statement,Sep.Git.Tfs.Commands,Shelve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Shelve.cs,Run,The length of the statement  "		changeset.Remote.Shelve (shelvesetName' referenceToShelve' changeset' shelveSpecificCheckinOptions' EvaluateCheckinPolicies); " is 125.
Long Statement,Sep.Git.Tfs.Commands,Shelve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Shelve.cs,BuildCommitMessage,The length of the statement  "	return generateCheckinComment ? _globals.Repository.GetCommitMessage (commit.Sha' latest) : _globals.Repository.GetCommit (commit.Sha).Message; " is 143.
Long Statement,Sep.Git.Tfs.Commands,TreeVerifier,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Verify.cs,Verify,The length of the statement  "	var tfsTree = changeset.Remote.GetChangeset (changeset.ChangesetId).GetTree ().ToDictionary (entry => entry.FullName.ToLowerInvariant ().Replace ("/"' @"\")); " is 158.
Long Statement,Sep.Git.Tfs.Commands,TreeVerifier,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Verify.cs,Verify,The length of the statement  "	var gitTree = changeset.Remote.Repository.GetCommit (changeset.GitCommit).GetTree ().ToDictionary (entry => entry.Entry.Path.ToLowerInvariant ()); " is 146.
Long Statement,Sep.Git.Tfs,GitTfs,F:\newReposMay17\git-tfs_git-tfs\GitTfs\GitTfs.cs,ParseAuthors,The length of the statement  "		Trace.TraceWarning ("         Verify the file :" + Path.Combine (_globals.GitDir' AuthorsFile.GitTfsCachedAuthorsFileName)); " is 124.
Long Statement,Sep.Git.Tfs,GitTfs,F:\newReposMay17\git-tfs_git-tfs\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "			throw new Exception ("This command must be run inside a git repository!\nGIT_DIR=" + _globals.GitDir + " explicitly set' but it is not a directory."); " is 150.
Long Statement,Sep.Git.Tfs,GitTfs,F:\newReposMay17\git-tfs_git-tfs\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "		git.WrapGitCommandErrors ("This command must be run inside a git repository!\nAlready at top level' but " + gitDir + " not found."' () => { " is 139.
Long Statement,Sep.Git.Tfs,GitTfs,F:\newReposMay17\git-tfs_git-tfs\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "			throw new Exception ("This command must be run inside a git repository!\n" + gitDir + " still not found after going to " + cdUp); " is 129.
Long Statement,Sep.Git.Tfs,Program,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Program.cs,ReportInternalException,The length of the statement  "			Trace.TraceError ("error running command: " + gitCommandException.Process.StartInfo.FileName + " " + gitCommandException.Process.StartInfo.Arguments); " is 150.
Long Statement,Sep.Git.Tfs.Core,DirectoryTidier,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DirectoryTidier.cs,Dispose,The length of the statement  "	_filesInTfs = _getInitialTfsTree ().Where (entry => entry.Item.ItemType == TfsItemType.File).Select (entry => entry.FullName.ToLowerInvariant ()).ToList (); " is 156.
Long Statement,Sep.Git.Tfs.Core,Bootstrapper,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\Bootstrapper.cs,GetRemoteId,The length of the statement  "		Trace.TraceInformation ("info: '" + changeset.Remote.TfsRepositoryPath + "' will be bootstraped as your main remote..."); " is 121.
Long Statement,Sep.Git.Tfs.Core,CheckinPolicyEvaluator,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\CheckinPolicyEvaluator.cs,EvaluateCheckin,The length of the statement  "	var result = workspace.EvaluateCheckin (TfsCheckinEvaluationOptions.All' pendingChanges' pendingChanges' comment' null' checkinNote' workItemInfo); " is 147.
Long Statement,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,GetHashCode,The length of the statement  "		return ((_tfsUrl != null ? _tfsUrl.GetHashCode () : 0) * 397) ^ (_tfsRepositoryPath != null ? _tfsRepositoryPath.GetHashCode () : 0); " is 133.
Long Statement,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,UpdateChangeStatusForAddedAndDeletedCaseOnlyRenames,The length of the statement  "		var matchingDelete = deletes.FirstOrDefault (d => String.Equals (addChange.path' d.path' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "	shelveset.Comment = string.IsNullOrWhiteSpace (_checkinOptions.CheckinComment) && !_checkinOptions.NoGenerateCheckinComment ? generateCheckinComment () : _checkinOptions.CheckinComment; " is 185.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "		foreach (var message in _policyEvaluator.EvaluateCheckin (_workspace' pendingChanges' shelveset.Comment' null' shelveset.WorkItemInfo).Messages) { " is 146.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "	_workspace.Shelve (shelveset' pendingChanges' _checkinOptions.Force ? TfsShelvingOptions.Replace : TfsShelvingOptions.None); " is 124.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,CheckinTool,The length of the statement  "	var newChangesetId = _tfsHelper.ShowCheckinDialog (_workspace' pendingChanges' GetWorkItemCheckedInfos ()' checkinComment); " is 123.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Checkin,The length of the statement  "	var checkinProblems = _policyEvaluator.EvaluateCheckin (_workspace' pendingChanges' checkinComment' checkinNote' workItemInfos); " is 128.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,Checkin,The length of the statement  "		var newChangeset = _workspace.Checkin (pendingChanges' checkinComment' options.AuthorTfsUserId' checkinNote' workItemInfos' policyOverride' options.OverrideGatedCheckIn); " is 170.
Long Statement,Sep.Git.Tfs.Core,TfsWorkspace,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWorkspace.cs,LaunchGatedCheckinBuild,The length of the statement  "	Trace.TraceInformation ("Due to a gated check-in' a shelveset '" + shelvesetName + "' containing your changes has been created and need to be built before it can be committed."); " is 178.
Long Statement,Sep.Git.Tfs.Core,TfsWriter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsWriter.cs,WriteWith,The length of the statement  "			Trace.TraceInformation ("Basing from parent '{0}:{1}'' use -i to override"' lastChangeSet.Remote.Id' lastChangeSet.ChangesetId); " is 128.
Long Statement,Sep.Git.Tfs.Core,GitTfsVersionProvider,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsVersionProvider.cs,GetVersionString,The length of the statement  "	return string.Format ("git-tfs version {0} (TFS client library {1}) ({2}-bit)"' GetType ().Assembly.GetName ().Version' _tfsHelper.TfsClientLibraryVersion' (Environment.Is64BitProcess ? "64" : "32")); " is 200.
Long Statement,Sep.Git.Tfs.Core,GitHelpers,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitHelpers.cs,Close,The length of the statement  "		throw new GitCommandException (string.Format ("Command exited with error code: {0}\n{1}"' process.ExitCode' process.StandardErrorString)' process); " is 147.
Long Statement,Sep.Git.Tfs.Core,GitHelpers,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitHelpers.cs,WrapGitCommandErrors,The length of the statement  "		throw new Exception (string.Format (exceptionMessage' e.Process.StartInfo.FileName + " " + e.Process.StartInfo.Arguments' e.Process.ExitCode)' e); " is 146.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,Commit,The length of the statement  "	var commit = _repository.ObjectDatabase.CreateCommit (new Signature (logEntry.AuthorName' logEntry.AuthorEmail' logEntry.Date.ToUniversalTime ())' new Signature (logEntry.CommitterName' logEntry.CommitterEmail' logEntry.Date.ToUniversalTime ())' logEntry.Log' logEntry.Tree' parents' false); " is 291.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,ReadTfsRemote,The length of the statement  "		throw new GitTfsException ("Unable to locate git-tfs remote with id = " + remoteId).WithRecommendation ("Try using `git tfs bootstrap` to auto-init TFS remotes."); " is 163.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,ReadTfsRemote,The length of the statement  "	var matchingRemotes = allRemotes.Values.Where (remote => remote.MatchesUrlAndRepositoryPath (tfsUrl' tfsRepositoryPath)); " is 121.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,GetGitRemoteBranches,The length of the statement  "	var references = _repository.Branches.Where (b => b.IsRemote && b.FriendlyName.StartsWith (gitRemote) && !b.FriendlyName.EndsWith ("/HEAD")); " is 141.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,ReadTfsRemotes,The length of the statement  "	// reload configuration' because `git tfs init` and `git tfs clone` use Process.Start to update the config' so _repository's copy is out of date. " is 145.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,TryParseChangesetInfo,The length of the statement  "		commitInfo.Remote = ReadTfsRemote (match.Groups ["url"].Value' match.Groups ["repository"].Success ? match.Groups ["repository"].Value : null); " is 143.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,FindCommitByChangesetId,The length of the statement  "		reachableFromRemoteBranches.IncludeReachableFrom = _repository.Branches.Where (p => p.IsRemote && p.CanonicalName.EndsWith (remoteRef)); " is 136.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,GetSubtrees,The length of the statement  "	return ReadAllTfsRemotes ().Where (x => x.IsSubtree && string.Equals (x.OwningRemoteId' owner.Id' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,Sep.Git.Tfs.Core,GitRepository,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitRepository.cs,CommitGitIgnore,The length of the statement  "	var signature = new Signature ("git-tfs"' "git-tfs@noreply.com"' new DateTimeOffset (2000' 1' 1' 0' 0' 0' new TimeSpan (0))); " is 125.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,GetPathInGitRepo,The length of the statement  "		var p = _globals.Repository.GetSubtrees (this).Where (x => x.IsSubtree).FirstOrDefault (x => tfsPath.StartsWith (x.TfsRepositoryPath' StringComparison.InvariantCultureIgnoreCase) && (tfsPath.Length == x.TfsRepositoryPath.Length || tfsPath [x.TfsRepositoryPath.Length] == '/')); " is 277.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FetchWithMerge,The length of the statement  "			var parentSha = (renameResult != null && renameResult.IsProcessingRenameChangeset) ? renameResult.LastParentCommitBeforeRename : MaxCommitHash; " is 143.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessMergeChangeset,The length of the statement  "		Trace.TraceInformation ("info: this changeset " + changeset.Summary.ChangesetId + " is a merge changeset. But was not treated as is because this version of TFS can't manage branches..."); " is 187.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessMergeChangeset,The length of the statement  "			Trace.TraceInformation ("warning: this changeset " + changeset.Summary.ChangesetId + " is a merge changeset. But git-tfs is unable to determine the parent changeset."); " is 168.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessMergeChangeset,The length of the statement  "			Trace.TraceInformation ("warning: this changeset " + changeset.Summary.ChangesetId + " is a merge changeset. But git-tfs failed to find and fetch the parent changeset " + parentChangesetId + ". Parent changeset will be ignored..."); " is 232.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessMergeChangeset,The length of the statement  "		Trace.TraceInformation ("info: this changeset " + changeset.Summary.ChangesetId + " is a merge changeset. But was not treated as is because of your git setting..."); " is 165.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,IsIgnoringBranches,The length of the statement  "	Trace.TraceInformation ("warning: no value found for branch management setting '" + GitTfsConstants.IgnoreBranches + "'..."); " is 125.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,IsIgnoringBranches,The length of the statement  "		Trace.TraceInformation ("   if you want to enable branch support' use the command:" + Environment.NewLine + "    git config --local " + GitTfsConstants.IgnoreBranches + " false"); " is 179.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,ProcessChangeset,The length of the statement  "				log.Log += "\n" + GitTfsConstants.GitTfsPrefix + "-" + CamelCaseToDelimitedStringConverter.Convert (checkinNote.Name' "-") + ": " + checkinNote.Value; " is 150.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The length of the statement  "	var tfsRemote = FindOrInitTfsRemoteOfChangeset (parentChangesetId' mergeChangeset' renameResult' out omittedParentBranch); " is 122.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The length of the statement  "	if (tfsRemote != null && string.Compare (tfsRemote.TfsRepositoryPath' TfsRepositoryPath' StringComparison.InvariantCultureIgnoreCase) != 0) { " is 141.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The length of the statement  "			var fetchResult = ((GitTfsRemote)tfsRemote).FetchWithMerge (-1' stopOnFailMergeCommit' parentChangesetId' renameResult); " is 120.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "	var remote = Repository.ReadAllTfsRemotes ().FirstOrDefault (r => parentChangeset.Changes.Any (c => r.GetPathInGitRepo (c.Item.ServerItem) != null)); " is 149.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "		if (mergeChangeset && tfsBranch != null && Repository.GetConfig (GitTfsConstants.IgnoreNotInitBranches) == true.ToString ()) { " is 126.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "			Trace.TraceInformation ("error: branch not found. Verify that all the folders have been converted to branches (or something else :().\n\tpath {0}"' tfsPath); " is 157.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FetchChangesets,The length of the statement  "	Trace.WriteLine (RemoteRef + ": Getting changesets from " + lowerBoundChangesetId + " to " + lastVersion + " ..."' "info"); " is 123.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,FetchChangesets,The length of the statement  "	return _globals.Repository.GetSubtrees (this).SelectMany (x => Tfs.GetChangesets (x.TfsRepositoryPath' lowerBoundChangesetId' x' lastVersion' byLots)).OrderBy (x => x.Summary.ChangesetId); " is 188.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,GetLatestChangeset,The length of the statement  "	var changesetId = _globals.Repository.GetSubtrees (this).Select (x => Tfs.GetLatestChangeset (x)).Max (x => x.Summary.ChangesetId); " is 131.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Unshelve,The length of the statement  "		Trace.TraceInformation ("warning: Parent changeset C" + parentId + " not found." + " Trying to apply the shelveset on the current commit..."); " is 142.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Shelve,The length of the statement  "	WithWorkspace (parentChangeset' workspace => Shelve (shelvesetName' head' parentChangeset' options' evaluateCheckinPolicies' workspace)); " is 137.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Shelve,The length of the statement  "	workspace.Shelve (shelvesetName' evaluateCheckinPolicies' options' () => Repository.GetCommitMessage (head' parentChangeset.GitCommit)); " is 136.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,Checkin,The length of the statement  "	WithWorkspace (parentChangeset' workspace => changeset = Checkin (head' parentChangeset.GitCommit' workspace' options' sourceTfsPath)); " is 135.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,WithWorkspace,The length of the statement  "		Tfs.WithWorkspace (WorkingDirectory' this' subtrees.Select (x => new Tuple<string' string> (x.TfsRepositoryPath' x.Prefix))' parentChangeset' action); " is 150.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,MatchesTfsUrl,The length of the statement  "	return TfsUrl.Equals (tfsUrl' StringComparison.OrdinalIgnoreCase) || Aliases.Contains (tfsUrl' StringComparison.OrdinalIgnoreCase); " is 131.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitBranch,The length of the statement  "	return InitTfsBranch (remoteOptions' tfsRepositoryPath' rootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult); " is 129.
Long Statement,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitTfsBranch,The length of the statement  "	string gitBranchName = ExtractGitBranchNameFromTfsRepositoryPath (string.IsNullOrWhiteSpace (gitBranchNameExpected) ? tfsRepositoryPath : gitBranchNameExpected); " is 161.
Long Statement,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,GetTree,The length of the statement  "	return GetFullTree ().Where (item => item.Item.ItemType == TfsItemType.File && !Summary.Remote.ShouldSkip (item.FullName)); " is 123.
Long Statement,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,GetFullTree,The length of the statement  "		tfsItems = _changeset.VersionControlServer.GetItems (Summary.Remote.TfsRepositoryPath' _changeset.ChangesetId' TfsRecursionType.Full); " is 134.
Long Statement,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,GetFullTree,The length of the statement  "		tfsItems = Summary.Remote.TfsSubtreePaths.SelectMany (x => _changeset.VersionControlServer.GetItems (x' _changeset.ChangesetId' TfsRecursionType.Full)).ToArray (); " is 163.
Long Statement,Sep.Git.Tfs.Core.BranchVisitors,BranchTreeContainsPathVisitor,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\BranchVisitors\BranchTreeContainsPathVisitor.cs,Visit,The length of the statement  "	if (Found == false && ((_searchExactPath && _searchPath.ToLower () == childBranch.Path.ToLower ()) || (!_searchExactPath && _searchPath.ToLower ().IndexOf (childBranch.Path.ToLower ()) == 0))) { " is 194.
Long Statement,Sep.Git.Tfs.Core.TfsInterop,BranchExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\IBranch.cs,GetRootTfsBranchForRemotePath,The length of the statement  "	var branchTrees = branches.Aggregate (new Dictionary<string' BranchTree> (StringComparer.OrdinalIgnoreCase)' (dict' branch) => dict.Tap (d => d.Add (branch.Path' new BranchTree (branch)))); " is 189.
Long Statement,Sep.Git.Tfs.Core.TfsInterop,TfsPlugin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\TfsPlugin.cs,Find,The length of the statement  "		return pluginLoader.TryLoadVsPluginVersion (explicitVersion) ?? pluginLoader.Fail ("Unable to load TFS version specified in GIT_TFS_CLIENT (" + explicitVersion + ")!"); " is 168.
Long Statement,Sep.Git.Tfs.Core.TfsInterop,TfsPlugin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsInterop\TfsPlugin.cs,Find,The length of the statement  "	return pluginLoader.TryLoadVsPluginVersion ("2015"' true) ?? pluginLoader.TryLoadVsPluginVersion ("2013") ?? pluginLoader.TryLoadVsPluginVersion ("2012") ?? pluginLoader.TryLoadVsPluginVersion ("2010") ?? pluginLoader.TryLoadVsPluginVersion ("2015") ?? pluginLoader.Fail (); " is 274.
Long Statement,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The length of the statement  "			if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) { " is 192.
Long Statement,Sep.Git.Tfs.Util,ChangeSieve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\ChangeSieve.cs,GetChangesToApply,The length of the statement  "				compartments.Updated.Add (ApplicableChange.Update (change.GitPath' oldInfo != null ? oldInfo.Mode : Mode.NonExecutableFile)); " is 125.
Long Statement,Sep.Git.Tfs.Util,ChangeSieve,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\ChangeSieve.cs,GetPathBeforeRename,The length of the statement  "			var history = item.VersionControlServer.QueryHistory (item.ServerItem' item.ChangesetId' 0' TfsRecursionType.None' null' 1' previousChangeset' 1' true' false' false); " is 166.
Long Statement,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessWorkItemCommands,The length of the statement  "		checkinOptions.CheckinComment = GitTfsConstants.TfsWorkItemRegex.Replace (checkinOptions.CheckinComment' "").Trim (' '' '\r'' '\n'); " is 132.
Long Statement,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessCheckinNoteCommands,The length of the statement  "	checkinOptions.CheckinComment = GitTfsConstants.TfsReviewerRegex.Replace (checkinOptions.CheckinComment' "").Trim (' '' '\r'' '\n'); " is 132.
Long Statement,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessForceCommand,The length of the statement  "		checkinOptions.CheckinComment = GitTfsConstants.TfsForceRegex.Replace (checkinOptions.CheckinComment' "").Trim (' '' '\r'' '\n'); " is 129.
Long Statement,Sep.Git.Tfs.Util,CamelCaseToDelimitedStringConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CamelCaseToDelimitedStringConverter.cs,IsFirstCharacterOfNewWord,The length of the statement  "	return char.IsUpper (s [index]) && !char.IsUpper (s [index - 1]) || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && wordStartIndex == index - 2 || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && s.Length >= index + 2 && !char.IsUpper (s [index + 1]); " is 274.
Long Statement,Sep.Git.Tfs.Util,ExportMetadatasInitializer,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\ExportMetadatasInitializer.cs,InitializeRemote,The length of the statement  "					remote.ExportWorkitemsMapping.Add (oldWorkitem' new ExportWorkItem (values [1].Trim ()' String.Empty/* TODO: Read workitem title from TFS here if necessary */)); " is 161.
Long Statement,Sep.Git.Tfs.Util,ExportMetadatasInitializer,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\ExportMetadatasInitializer.cs,InitializeRemote,The length of the statement  "			throw new GitTfsException ("error: bad format of workitems mapping file! One line format should be: OldWorkItemId|NewWorkItemId"); " is 130.
Long Statement,Sep.Git.Tfs.Util,GitTfsCommandFactory,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\GitTfsCommandFactory.cs,CreateAliasMap,The length of the statement  "		var attribte = instance.ConcreteType.GetCustomAttributes (typeof(PluggableWithAliases)' true).Cast<PluggableWithAliases> ().FirstOrDefault (); " is 142.
Long Statement,Sep.Git.Tfs.Util,GitTfsCommandRunner,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\GitTfsCommandRunner.cs,Run,The length of the statement  "		var runMethods = command.GetType ().GetMethods ().Where (m => m.Name == "Run" && m.ReturnType == typeof(int)).Select (m => new { " is 128.
Long Statement,Sep.Git.Tfs.Util,GitTfsCommandRunner,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\GitTfsCommandRunner.cs,Run,The length of the statement  "		var defaultRunMethod = runMethods.FirstOrDefault (m => m.Parameters.Length == 1 && m.Parameters [0].ParameterType.IsAssignableFrom (args.GetType ())); " is 150.
Long Statement,SEP.Extensions,InspectExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\InspectExtensions.cs,InspectWithProperties,The length of the statement  "	inspected += string.Join ("'"' o.GetType ().GetProperties ().Select (p => " " + p.Name + "=" + InspectSimple (p.GetValue (o' null))).ToArray ()); " is 145.
Long Statement,SEP.Extensions,InspectExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\InspectExtensions.cs,InspectSimple,The length of the statement  "	return Inspect (obj' d => "{...}"' e => "[...]"' o => "#<" + InspectType (o.GetType ()) + ":0x" + o.GetHashCode ().ToString ("x") + ">"); " is 137.
Long Statement,SEP.Extensions,InspectExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\InspectExtensions.cs,InspectType,The length of the statement  "	return IsAnonymousType (type) ? InspectAnonymousType (type) : type.IsGenericType ? InspectGenericType (type) : type.FullName; " is 125.
Complex Conditional,Sep.Git.Tfs.Commands,Fetch,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Fetch.cs,DoFetch,The conditional expression  "!ForceFetch && remote.Repository.IsBare && remote.Repository.HasRef (GitRepository.ShortToLocalName (bareBranch)) && remote.MaxCommitHash != remote.Repository.GetCommit (bareBranch).Sha"  is complex.
Complex Conditional,Sep.Git.Tfs.Core.BranchVisitors,BranchTreeContainsPathVisitor,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\BranchVisitors\BranchTreeContainsPathVisitor.cs,Visit,The conditional expression  "Found == false && ((_searchExactPath && _searchPath.ToLower () == childBranch.Path.ToLower ()) || (!_searchExactPath && _searchPath.ToLower ().IndexOf (childBranch.Path.ToLower ()) == 0))"  is complex.
Complex Conditional,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The conditional expression  "match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)"  is complex.
Empty Catch Block,Sep.Git.Tfs.Core,GitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitTfsRemote.cs,InitHistory,The method has an empty catch block.
Empty Catch Block,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The method has an empty catch block.
Empty Catch Block,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The method has an empty catch block.
Magic Number,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,Run,The following statement contains a magic number: switch (command.ToLower ()) {  case "add":  	return DoAdd (args.ElementAtOrDefault (1) ?? ""' args.ElementAtOrDefault (2) ?? "");  case "pull":  	return DoPull (args.ElementAtOrDefault (1));  case "split":  	return DoSplit ();  default:  	Trace.TraceInformation ("Expected one of [add' pull' split]");  	return GitTfsExitCodes.InvalidArguments;  }  
Magic Number,Sep.Git.Tfs.Commands,Subtree,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Subtree.cs,Run,The following statement contains a magic number: return DoAdd (args.ElementAtOrDefault (1) ?? ""' args.ElementAtOrDefault (2) ?? "");  
Magic Number,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The following statement contains a magic number: foreach (var commit in commitsToCheckin) {  	var message = BuildCommitMessage (commit' !_checkinOptions.NoGenerateCheckinComment' currentParent);  	string target = commit.Sha;  	var parents = commit.Parents.Where (c => c.Sha != currentParent).ToArray ();  	string tfsRepositoryPathOfMergedBranch = _checkinOptions.NoMerge ? null : FindTfsRepositoryPathOfMergedBranch (tfsRemote' parents' target);  	var commitSpecificCheckinOptions = _checkinOptionsFactory.BuildCommitSpecificCheckinOptions (_checkinOptions' message' commit' _authors);  	Trace.TraceInformation ("Starting checkin of {0} '{1}'"' target.Substring (0' 8)' commitSpecificCheckinOptions.CheckinComment);  	try {  		newChangesetId = tfsRemote.Checkin (target' currentParent' parentChangeset' commitSpecificCheckinOptions' tfsRepositoryPathOfMergedBranch);  		var fetchResult = tfsRemote.FetchWithMerge (newChangesetId' false' parents.Select (c => c.Sha).ToArray ());  		if (fetchResult.NewChangesetCount != 1) {  			var lastCommit = _globals.Repository.FindCommitHashByChangesetId (newChangesetId);  			RebaseOnto (lastCommit' target);  			if (AutoRebase)  				tfsRemote.Repository.CommandNoisy ("rebase"' "--preserve-merges"' tfsRemote.RemoteRef);  			else  				throw new GitTfsException ("error: New TFS changesets were found. Rcheckin was not finished.");  		}  		currentParent = target;  		parentChangeset = new TfsChangesetInfo {  			ChangesetId = newChangesetId'  			GitCommit = tfsRemote.MaxCommitHash'  			Remote = tfsRemote  		};  		Trace.TraceInformation ("Done with {0}."' target);  	} catch (Exception) {  		if (newChangesetId != 0) {  			var lastCommit = _globals.Repository.FindCommitHashByChangesetId (newChangesetId);  			RebaseOnto (lastCommit' currentParent);  		}  		throw;  	}  }  
Magic Number,Sep.Git.Tfs.Commands,Rcheckin,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The following statement contains a magic number: Trace.TraceInformation ("Starting checkin of {0} '{1}'"' target.Substring (0' 8)' commitSpecificCheckinOptions.CheckinComment);  
Magic Number,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((_tfsUrl != null ? _tfsUrl.GetHashCode () : 0) * 397) ^ (_tfsRepositoryPath != null ? _tfsRepositoryPath.GetHashCode () : 0);  }  
Magic Number,Sep.Git.Tfs.Core,DerivedGitTfsRemote,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\DerivedGitTfsRemote.cs,GetHashCode,The following statement contains a magic number: return ((_tfsUrl != null ? _tfsUrl.GetHashCode () : 0) * 397) ^ (_tfsRepositoryPath != null ? _tfsRepositoryPath.GetHashCode () : 0);  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: if (bytesRead == 0) {  	return null;  } else if (bytesRead != 98) {  	throw new Exception ("Invalid input.");  }  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: if (bytesRead != 98) {  	throw new Exception ("Invalid input.");  }  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: if (block [97] == 'C' || block [97] == 'R') {  	nullBytesLeft = 3;  }  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: if (block [97] == 'C' || block [97] == 'R') {  	nullBytesLeft = 3;  }  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: if (block [97] == 'C' || block [97] == 'R') {  	nullBytesLeft = 3;  }  
Magic Number,Sep.Git.Tfs.Core,GitChangeInfo,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: nullBytesLeft = 3;  
Magic Number,Sep.Git.Tfs.Core,RemoteConfigConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: foreach (var entry in config) {  	var keyParts = entry.Key.Split ('.');  	if (keyParts.Length >= 3 && keyParts [0] == "tfs-remote") {  		// The branch name may contain dots ("maint-1.0.0") which must be considered since split on "."  		var id = string.Join ("."' keyParts' 1' keyParts.Length - 2);  		var key = keyParts.Last ();  		var remote = remotes.GetOrAdd (id);  		remote.Id = id;  		if (key == "url")  			remote.Url = entry.Value;  		else if (key == "repository")  			remote.Repository = entry.Value;  		else if (key == "username")  			remote.Username = entry.Value;  		else if (key == "password")  			remote.Password = entry.Value;  		else if (key == "ignore-paths")  			remote.IgnoreRegex = entry.Value;  		else if (key == "ignore-except")  			remote.IgnoreExceptRegex = entry.Value;  		else if (key == "legacy-urls")  			remote.Aliases = entry.Value.Split (''');  		else if (key == "autotag")  			remote.Autotag = bool.Parse (entry.Value);  	}  }  
Magic Number,Sep.Git.Tfs.Core,RemoteConfigConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: foreach (var entry in config) {  	var keyParts = entry.Key.Split ('.');  	if (keyParts.Length >= 3 && keyParts [0] == "tfs-remote") {  		// The branch name may contain dots ("maint-1.0.0") which must be considered since split on "."  		var id = string.Join ("."' keyParts' 1' keyParts.Length - 2);  		var key = keyParts.Last ();  		var remote = remotes.GetOrAdd (id);  		remote.Id = id;  		if (key == "url")  			remote.Url = entry.Value;  		else if (key == "repository")  			remote.Repository = entry.Value;  		else if (key == "username")  			remote.Username = entry.Value;  		else if (key == "password")  			remote.Password = entry.Value;  		else if (key == "ignore-paths")  			remote.IgnoreRegex = entry.Value;  		else if (key == "ignore-except")  			remote.IgnoreExceptRegex = entry.Value;  		else if (key == "legacy-urls")  			remote.Aliases = entry.Value.Split (''');  		else if (key == "autotag")  			remote.Autotag = bool.Parse (entry.Value);  	}  }  
Magic Number,Sep.Git.Tfs.Core,RemoteConfigConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: if (keyParts.Length >= 3 && keyParts [0] == "tfs-remote") {  	// The branch name may contain dots ("maint-1.0.0") which must be considered since split on "."  	var id = string.Join ("."' keyParts' 1' keyParts.Length - 2);  	var key = keyParts.Last ();  	var remote = remotes.GetOrAdd (id);  	remote.Id = id;  	if (key == "url")  		remote.Url = entry.Value;  	else if (key == "repository")  		remote.Repository = entry.Value;  	else if (key == "username")  		remote.Username = entry.Value;  	else if (key == "password")  		remote.Password = entry.Value;  	else if (key == "ignore-paths")  		remote.IgnoreRegex = entry.Value;  	else if (key == "ignore-except")  		remote.IgnoreExceptRegex = entry.Value;  	else if (key == "legacy-urls")  		remote.Aliases = entry.Value.Split (''');  	else if (key == "autotag")  		remote.Autotag = bool.Parse (entry.Value);  }  
Magic Number,Sep.Git.Tfs.Core,RemoteConfigConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: if (keyParts.Length >= 3 && keyParts [0] == "tfs-remote") {  	// The branch name may contain dots ("maint-1.0.0") which must be considered since split on "."  	var id = string.Join ("."' keyParts' 1' keyParts.Length - 2);  	var key = keyParts.Last ();  	var remote = remotes.GetOrAdd (id);  	remote.Id = id;  	if (key == "url")  		remote.Url = entry.Value;  	else if (key == "repository")  		remote.Repository = entry.Value;  	else if (key == "username")  		remote.Username = entry.Value;  	else if (key == "password")  		remote.Password = entry.Value;  	else if (key == "ignore-paths")  		remote.IgnoreRegex = entry.Value;  	else if (key == "ignore-except")  		remote.IgnoreExceptRegex = entry.Value;  	else if (key == "legacy-urls")  		remote.Aliases = entry.Value.Split (''');  	else if (key == "autotag")  		remote.Autotag = bool.Parse (entry.Value);  }  
Magic Number,Sep.Git.Tfs.Core,Mode,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\Mode.cs,ToFileMode,The following statement contains a magic number: return (LibGit2Sharp.Mode)Convert.ToInt32 (mode' 8);  
Magic Number,Sep.Git.Tfs.Core,Mode,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\Mode.cs,ToModeString,The following statement contains a magic number: return Convert.ToString ((int)mode' 8).PadLeft (6' '0');  
Magic Number,Sep.Git.Tfs.Core,Mode,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\Mode.cs,ToModeString,The following statement contains a magic number: return Convert.ToString ((int)mode' 8).PadLeft (6' '0');  
Magic Number,Sep.Git.Tfs.Core,GitHelpers,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\GitHelpers.cs,Close,The following statement contains a magic number: if (!process.WaitForExit ((int)TimeSpan.FromSeconds (10).TotalMilliseconds))  	throw new GitCommandException ("Command did not terminate."' process);  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,CopyTree,The following statement contains a magic number: if (tfsTreeEntries.Length == 0) {  	maxChangesetId = _changeset.ChangesetId;  } else {  	workspace.Get (_changeset.ChangesetId);  	foreach (var entry in tfsTreeEntries) {  		Add (entry.Item' entry.FullName' treeBuilder' workspace);  		maxChangesetId = Math.Max (maxChangesetId' entry.Item.ChangesetId);  		itemsCopied++;  		if (DateTime.Now - startTime > TimeSpan.FromSeconds (30)) {  			Trace.TraceInformation ("{0} objects created..."' itemsCopied);  			startTime = DateTime.Now;  		}  	}  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,CopyTree,The following statement contains a magic number: foreach (var entry in tfsTreeEntries) {  	Add (entry.Item' entry.FullName' treeBuilder' workspace);  	maxChangesetId = Math.Max (maxChangesetId' entry.Item.ChangesetId);  	itemsCopied++;  	if (DateTime.Now - startTime > TimeSpan.FromSeconds (30)) {  		Trace.TraceInformation ("{0} objects created..."' itemsCopied);  		startTime = DateTime.Now;  	}  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,CopyTree,The following statement contains a magic number: if (DateTime.Now - startTime > TimeSpan.FromSeconds (30)) {  	Trace.TraceInformation ("{0} objects created..."' itemsCopied);  	startTime = DateTime.Now;  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The following statement contains a magic number: if (_authors != null && _authors.Authors.ContainsKey (changesetToLog.Committer)) {  	name = _authors.Authors [changesetToLog.Committer].Name;  	email = _authors.Authors [changesetToLog.Committer].Email;  } else if (identity != null) {  	//This can be null if the user was deleted from AD.  	//We want to keep their original history around with as little   	//hassle to the end user as possible  	if (!string.IsNullOrWhiteSpace (identity.DisplayName))  		name = identity.DisplayName;  	if (!string.IsNullOrWhiteSpace (identity.MailAddress))  		email = identity.MailAddress;  } else if (!string.IsNullOrWhiteSpace (changesetToLog.Committer)) {  	string[] split = changesetToLog.Committer.Split ('\\');  	if (split.Length == 2) {  		name = split [1].ToLower ();  		email = string.Format ("{0}@{1}.tfs.local"' name' split [0].ToLower ());  	}  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The following statement contains a magic number: if (identity != null) {  	//This can be null if the user was deleted from AD.  	//We want to keep their original history around with as little   	//hassle to the end user as possible  	if (!string.IsNullOrWhiteSpace (identity.DisplayName))  		name = identity.DisplayName;  	if (!string.IsNullOrWhiteSpace (identity.MailAddress))  		email = identity.MailAddress;  } else if (!string.IsNullOrWhiteSpace (changesetToLog.Committer)) {  	string[] split = changesetToLog.Committer.Split ('\\');  	if (split.Length == 2) {  		name = split [1].ToLower ();  		email = string.Format ("{0}@{1}.tfs.local"' name' split [0].ToLower ());  	}  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (changesetToLog.Committer)) {  	string[] split = changesetToLog.Committer.Split ('\\');  	if (split.Length == 2) {  		name = split [1].ToLower ();  		email = string.Format ("{0}@{1}.tfs.local"' name' split [0].ToLower ());  	}  }  
Magic Number,Sep.Git.Tfs.Core,TfsChangeset,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The following statement contains a magic number: if (split.Length == 2) {  	name = split [1].ToLower ();  	email = string.Format ("{0}@{1}.tfs.local"' name' split [0].ToLower ());  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: while (line != null) {  	lineCount++;  	if (!line.StartsWith ("#")) {  		//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  		Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  		Match match = ex.Match (line);  		if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  			throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  		} else {  			//git svn doesn't trim' but maybe this should?  			string tfsUserId = match.Groups [1].Value;  			//.Trim();  			string name = match.Groups [2].Value;  			//.Trim();  			string email = match.Groups [3].Value;  			//.Trim();  			Author a = new Author (tfsUserId' name' email);  			if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  				_authorsByTfsUserId.Add (a.TfsUserId' a);  			if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  				_authorsByGitUserId.Add (a.GitUserId' a);  		}  	}  	line = authorsFileStream.ReadLine ();  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: while (line != null) {  	lineCount++;  	if (!line.StartsWith ("#")) {  		//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  		Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  		Match match = ex.Match (line);  		if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  			throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  		} else {  			//git svn doesn't trim' but maybe this should?  			string tfsUserId = match.Groups [1].Value;  			//.Trim();  			string name = match.Groups [2].Value;  			//.Trim();  			string email = match.Groups [3].Value;  			//.Trim();  			Author a = new Author (tfsUserId' name' email);  			if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  				_authorsByTfsUserId.Add (a.TfsUserId' a);  			if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  				_authorsByGitUserId.Add (a.GitUserId' a);  		}  	}  	line = authorsFileStream.ReadLine ();  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: while (line != null) {  	lineCount++;  	if (!line.StartsWith ("#")) {  		//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  		Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  		Match match = ex.Match (line);  		if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  			throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  		} else {  			//git svn doesn't trim' but maybe this should?  			string tfsUserId = match.Groups [1].Value;  			//.Trim();  			string name = match.Groups [2].Value;  			//.Trim();  			string email = match.Groups [3].Value;  			//.Trim();  			Author a = new Author (tfsUserId' name' email);  			if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  				_authorsByTfsUserId.Add (a.TfsUserId' a);  			if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  				_authorsByGitUserId.Add (a.GitUserId' a);  		}  	}  	line = authorsFileStream.ReadLine ();  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: while (line != null) {  	lineCount++;  	if (!line.StartsWith ("#")) {  		//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  		Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  		Match match = ex.Match (line);  		if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  			throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  		} else {  			//git svn doesn't trim' but maybe this should?  			string tfsUserId = match.Groups [1].Value;  			//.Trim();  			string name = match.Groups [2].Value;  			//.Trim();  			string email = match.Groups [3].Value;  			//.Trim();  			Author a = new Author (tfsUserId' name' email);  			if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  				_authorsByTfsUserId.Add (a.TfsUserId' a);  			if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  				_authorsByGitUserId.Add (a.GitUserId' a);  		}  	}  	line = authorsFileStream.ReadLine ();  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: while (line != null) {  	lineCount++;  	if (!line.StartsWith ("#")) {  		//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  		Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  		Match match = ex.Match (line);  		if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  			throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  		} else {  			//git svn doesn't trim' but maybe this should?  			string tfsUserId = match.Groups [1].Value;  			//.Trim();  			string name = match.Groups [2].Value;  			//.Trim();  			string email = match.Groups [3].Value;  			//.Trim();  			Author a = new Author (tfsUserId' name' email);  			if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  				_authorsByTfsUserId.Add (a.TfsUserId' a);  			if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  				_authorsByGitUserId.Add (a.GitUserId' a);  		}  	}  	line = authorsFileStream.ReadLine ();  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  	Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  	Match match = ex.Match (line);  	if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  		throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  	} else {  		//git svn doesn't trim' but maybe this should?  		string tfsUserId = match.Groups [1].Value;  		//.Trim();  		string name = match.Groups [2].Value;  		//.Trim();  		string email = match.Groups [3].Value;  		//.Trim();  		Author a = new Author (tfsUserId' name' email);  		if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  			_authorsByTfsUserId.Add (a.TfsUserId' a);  		if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  			_authorsByGitUserId.Add (a.GitUserId' a);  	}  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  	Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  	Match match = ex.Match (line);  	if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  		throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  	} else {  		//git svn doesn't trim' but maybe this should?  		string tfsUserId = match.Groups [1].Value;  		//.Trim();  		string name = match.Groups [2].Value;  		//.Trim();  		string email = match.Groups [3].Value;  		//.Trim();  		Author a = new Author (tfsUserId' name' email);  		if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  			_authorsByTfsUserId.Add (a.TfsUserId' a);  		if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  			_authorsByGitUserId.Add (a.GitUserId' a);  	}  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  	Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  	Match match = ex.Match (line);  	if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  		throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  	} else {  		//git svn doesn't trim' but maybe this should?  		string tfsUserId = match.Groups [1].Value;  		//.Trim();  		string name = match.Groups [2].Value;  		//.Trim();  		string email = match.Groups [3].Value;  		//.Trim();  		Author a = new Author (tfsUserId' name' email);  		if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  			_authorsByTfsUserId.Add (a.TfsUserId' a);  		if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  			_authorsByGitUserId.Add (a.GitUserId' a);  	}  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  	Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  	Match match = ex.Match (line);  	if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  		throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  	} else {  		//git svn doesn't trim' but maybe this should?  		string tfsUserId = match.Groups [1].Value;  		//.Trim();  		string name = match.Groups [2].Value;  		//.Trim();  		string email = match.Groups [3].Value;  		//.Trim();  		Author a = new Author (tfsUserId' name' email);  		if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  			_authorsByTfsUserId.Add (a.TfsUserId' a);  		if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  			_authorsByGitUserId.Add (a.GitUserId' a);  	}  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//regex pulled from git svn script here: https://github.com/git/git/blob/master/git-svn.perl  	Regex ex = new Regex (@"^(.+?|\(no author\))\s*=\s*(.+?)\s*<(.+)>\s*$");  	Match match = ex.Match (line);  	if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  		throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  	} else {  		//git svn doesn't trim' but maybe this should?  		string tfsUserId = match.Groups [1].Value;  		//.Trim();  		string name = match.Groups [2].Value;  		//.Trim();  		string email = match.Groups [3].Value;  		//.Trim();  		Author a = new Author (tfsUserId' name' email);  		if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  			_authorsByTfsUserId.Add (a.TfsUserId' a);  		if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  			_authorsByGitUserId.Add (a.GitUserId' a);  	}  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  	throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  } else {  	//git svn doesn't trim' but maybe this should?  	string tfsUserId = match.Groups [1].Value;  	//.Trim();  	string name = match.Groups [2].Value;  	//.Trim();  	string email = match.Groups [3].Value;  	//.Trim();  	Author a = new Author (tfsUserId' name' email);  	if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  		_authorsByTfsUserId.Add (a.TfsUserId' a);  	if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  		_authorsByGitUserId.Add (a.GitUserId' a);  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  	throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  } else {  	//git svn doesn't trim' but maybe this should?  	string tfsUserId = match.Groups [1].Value;  	//.Trim();  	string name = match.Groups [2].Value;  	//.Trim();  	string email = match.Groups [3].Value;  	//.Trim();  	Author a = new Author (tfsUserId' name' email);  	if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  		_authorsByTfsUserId.Add (a.TfsUserId' a);  	if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  		_authorsByGitUserId.Add (a.GitUserId' a);  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  	throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  } else {  	//git svn doesn't trim' but maybe this should?  	string tfsUserId = match.Groups [1].Value;  	//.Trim();  	string name = match.Groups [2].Value;  	//.Trim();  	string email = match.Groups [3].Value;  	//.Trim();  	Author a = new Author (tfsUserId' name' email);  	if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  		_authorsByTfsUserId.Add (a.TfsUserId' a);  	if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  		_authorsByGitUserId.Add (a.GitUserId' a);  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  	throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  } else {  	//git svn doesn't trim' but maybe this should?  	string tfsUserId = match.Groups [1].Value;  	//.Trim();  	string name = match.Groups [2].Value;  	//.Trim();  	string email = match.Groups [3].Value;  	//.Trim();  	Author a = new Author (tfsUserId' name' email);  	if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  		_authorsByTfsUserId.Add (a.TfsUserId' a);  	if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  		_authorsByGitUserId.Add (a.GitUserId' a);  }  
Magic Number,Sep.Git.Tfs.Util,AuthorsFile,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace (match.Groups [1].Value) || string.IsNullOrWhiteSpace (match.Groups [2].Value) || string.IsNullOrWhiteSpace (match.Groups [3].Value)) {  	throw new GitTfsException ("Invalid format of Authors file on line " + lineCount + ".");  } else {  	//git svn doesn't trim' but maybe this should?  	string tfsUserId = match.Groups [1].Value;  	//.Trim();  	string name = match.Groups [2].Value;  	//.Trim();  	string email = match.Groups [3].Value;  	//.Trim();  	Author a = new Author (tfsUserId' name' email);  	if (!_authorsByTfsUserId.ContainsKey (a.TfsUserId))  		_authorsByTfsUserId.Add (a.TfsUserId' a);  	if (!_authorsByGitUserId.ContainsKey (a.GitUserId))  		_authorsByGitUserId.Add (a.GitUserId' a);  }  
Magic Number,Sep.Git.Tfs.Util,CamelCaseToDelimitedStringConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CamelCaseToDelimitedStringConverter.cs,IsFirstCharacterOfNewWord,The following statement contains a magic number: return char.IsUpper (s [index]) && !char.IsUpper (s [index - 1]) || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && wordStartIndex == index - 2 || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && s.Length >= index + 2 && !char.IsUpper (s [index + 1]);  
Magic Number,Sep.Git.Tfs.Util,CamelCaseToDelimitedStringConverter,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CamelCaseToDelimitedStringConverter.cs,IsFirstCharacterOfNewWord,The following statement contains a magic number: return char.IsUpper (s [index]) && !char.IsUpper (s [index - 1]) || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && wordStartIndex == index - 2 || char.IsUpper (s [index]) && char.IsUpper (s [index - 1]) && s.Length >= index + 2 && !char.IsUpper (s [index + 1]);  
Missing Default,Sep.Git.Tfs.Util,CheckinOptionsExtensions,F:\newReposMay17\git-tfs_git-tfs\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessCheckinNoteCommands,The following switch statement is missing a default case: switch (match.Groups ["type"].Value) {  case "code":  	Trace.TraceInformation ("Code reviewer: {0}"' reviewer);  	checkinOptions.CheckinNotes.Add ("Code Reviewer"' reviewer);  	break;  case "security":  	Trace.TraceInformation ("Security reviewer: {0}"' reviewer);  	checkinOptions.CheckinNotes.Add ("Security Reviewer"' reviewer);  	break;  case "performance":  	Trace.TraceInformation ("Performance reviewer: {0}"' reviewer);  	checkinOptions.CheckinNotes.Add ("Performance Reviewer"' reviewer);  	break;  }  
