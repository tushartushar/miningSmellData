Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,Cyclomatic complexity of the method is 9
Complex Method,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,Cyclomatic complexity of the method is 9
Complex Method,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,FindCommitByChangesetId,Cyclomatic complexity of the method is 13
Complex Method,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,GetPathInGitRepo,Cyclomatic complexity of the method is 9
Complex Method,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,ProcessMergeChangeset,Cyclomatic complexity of the method is 8
Complex Method,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,ProcessChangeset,Cyclomatic complexity of the method is 17
Complex Method,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,Cyclomatic complexity of the method is 8
Complex Method,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,InitTfsBranch,Cyclomatic complexity of the method is 10
Complex Method,GitTfs.Core,RemoteConfigConverter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\RemoteConfigConverter.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,Cyclomatic complexity of the method is 10
Complex Method,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Checkin,Cyclomatic complexity of the method is 10
Complex Method,GitTfs.Util,ChangeSieve,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\ChangeSieve.cs,GetChangesToApply,Cyclomatic complexity of the method is 10
Complex Method,GitTfs.Util,CheckinOptionsExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessWorkItemCommands,Cyclomatic complexity of the method is 8
Complex Method,GitTfs.Extensions,InspectExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\InspectExtensions.cs,Inspect,Cyclomatic complexity of the method is 9
Long Parameter List,GitTfs.Commands,Branch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Branch.cs,Branch,The method has 5 parameters. Parameters: globals' helper' cleanup' initBranch' rcheckin
Long Parameter List,GitTfs.Commands,Init,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,Init,The method has 5 parameters. Parameters: remoteOptions' initOptions' globals' gitHelper' authorsFileHelper
Long Parameter List,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The method has 5 parameters. Parameters: tfsBranchPath' gitBranchNameExpected' creationBranchData' defaultRemote' fetchResult
Long Parameter List,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,FetchRemote,The method has 5 parameters. Parameters: tfsRemote' stopOnFailMergeCommit' createBranch' renameResult' startingChangesetId
Long Parameter List,GitTfs,GitTfs,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfs.cs,GitTfs,The method has 8 parameters. Parameters: commandFactory' help' container' gitTfsVersionProvider' runner' globals' bootstrapper' authorsFileHelper
Long Parameter List,GitTfs.Core,CheckinPolicyEvaluator,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\CheckinPolicyEvaluator.cs,EvaluateCheckin,The method has 5 parameters. Parameters: workspace' pendingChanges' comment' checkinNote' workItemInfo
Long Parameter List,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,InitBranch,The method has 6 parameters. Parameters: remoteOptions' tfsRepositoryPath' shaRootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult
Long Parameter List,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,Unshelve,The method has 5 parameters. Parameters: a' b' c' h' force
Long Parameter List,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,Shelve,The method has 5 parameters. Parameters: shelvesetName' treeish' parentChangeset' options' evaluateCheckinPolicies
Long Parameter List,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,Checkin,The method has 5 parameters. Parameters: head' parent' parentChangeset' options' sourceTfsPath
Long Parameter List,GitTfs.Core,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Ext.cs,ForEachRetry,The method has 5 parameters. Parameters: source' action' retryCount' retryInterval' parallelizeActions
Long Parameter List,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,CreateTag,The method has 6 parameters. Parameters: name' sha' comment' Owner' emailOwner' creationDate
Long Parameter List,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,CreateNote,The method has 5 parameters. Parameters: sha' content' owner' emailOwner' creationDate
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,GitTfsRemote,The method has 6 parameters. Parameters: info' repository' remoteOptions' globals' tfsHelper' properties
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FetchWithMerge,The method has 5 parameters. Parameters: mergeChangesetId' stopOnFailMergeCommit' lastChangesetIdToFetch' renameResult' parentCommitsHashes
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The method has 5 parameters. Parameters: parentChangesetId' stopOnFailMergeCommit' mergeChangeset' renameResult' omittedParentBranch
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Unshelve,The method has 5 parameters. Parameters: shelvesetOwner' shelvesetName' destinationBranch' ignorableErrorHandler' force
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Shelve,The method has 5 parameters. Parameters: shelvesetName' head' parentChangeset' options' evaluateCheckinPolicies
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Shelve,The method has 6 parameters. Parameters: shelvesetName' head' parentChangeset' options' evaluateCheckinPolicies' workspace
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Checkin,The method has 5 parameters. Parameters: head' parent' parentChangeset' options' sourceTfsPath
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Checkin,The method has 5 parameters. Parameters: head' parent' workspace' options' sourceTfsPath
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,InitBranch,The method has 6 parameters. Parameters: remoteOptions' tfsRepositoryPath' rootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult
Long Parameter List,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,InitTfsBranch,The method has 7 parameters. Parameters: remoteOptions' tfsRepositoryPath' rootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult' ignoreRestricted
Long Parameter List,GitTfs.Core,IGitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitRepository.cs,CreateTag,The method has 6 parameters. Parameters: name' sha' comment' Owner' emailOwner' creationDate
Long Parameter List,GitTfs.Core,IGitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitRepository.cs,CreateNote,The method has 5 parameters. Parameters: sha' content' owner' emailOwner' creationDate
Long Parameter List,GitTfs.Core,IGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitTfsRemote.cs,InitBranch,The method has 6 parameters. Parameters: remoteOptions' tfsRepositoryPath' rootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult
Long Parameter List,GitTfs.Core,IGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitTfsRemote.cs,Unshelve,The method has 5 parameters. Parameters: shelvesetOwner' shelvesetName' destinationBranch' ignorableErrorHandler' force
Long Parameter List,GitTfs.Core,IGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitTfsRemote.cs,Shelve,The method has 5 parameters. Parameters: shelvesetName' treeish' parentChangeset' options' evaluateCheckinPolicies
Long Parameter List,GitTfs.Core,IGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\IGitTfsRemote.cs,Checkin,The method has 5 parameters. Parameters: head' parent' parentChangeset' options' sourceTfsPath
Long Parameter List,GitTfs.Core,ITfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\ITfsChangeset.cs,Apply,The method has 5 parameters. Parameters: lastCommit' treeBuilder' workspace' initialTree' ignorableErrorHandler
Long Parameter List,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,Apply,The method has 5 parameters. Parameters: lastCommit' treeBuilder' workspace' initialTree' ignorableErrorHandler
Long Parameter List,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,TfsWorkspace,The method has 7 parameters. Parameters: workspace' localDirectory' contextVersion' remote' checkinOptions' tfsHelper' policyEvaluator
Long Parameter List,GitTfs.Core.TfsInterop,ITfsHelper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\ITfsHelper.cs,GetChangesets,The method has 5 parameters. Parameters: path' startVersion' remote' lastVersion' byLots
Long Parameter List,GitTfs.Core.TfsInterop,ITfsHelper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\ITfsHelper.cs,WithWorkspace,The method has 5 parameters. Parameters: localDirectory' remote' mappings' versionToFetch' action
Long Parameter List,GitTfs.Core.TfsInterop,IVersionControlServer,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\IVersionControlServer.cs,QueryHistory,The method has 11 parameters. Parameters: path' version' deletionId' recursion' user' versionFrom' versionTo' maxCount' includeChanges' slotMode' includeDownloadInfo
Long Parameter List,GitTfs.Core.TfsInterop,IWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\IWorkspace.cs,EvaluateCheckin,The method has 7 parameters. Parameters: options' allChanges' changes' comment' author' checkinNote' workItemChanges
Long Parameter List,GitTfs.Core.TfsInterop,IWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\IWorkspace.cs,Checkin,The method has 7 parameters. Parameters: changes' comment' author' checkinNote' workItemChanges' policyOverrideInfo' overrideGatedCheckIn
Long Identifier,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the parameter tfsRepositoryPathParentBranchFound is 34.
Long Identifier,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the parameter tfsRepositoryPathOfMergedBranch is 31.
Long Identifier,GitTfs,GitTfsConstants,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfsConstants.cs,,The length of the parameter GitTfsPolicyOverrideCommentPrefix is 33.
Long Identifier,GitTfs,GitTfsConstants,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfsConstants.cs,,The length of the parameter WorkItemAssociateRegexConfigKey is 31.
Long Identifier,GitTfs,GitTfsExitCodes,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfsExitCodes.cs,,The length of the parameter SomeDataCouldNotHaveBeenRetrieved is 33.
Long Statement,GitTfs.Commands,Branch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Branch.cs,VerifyCloneAllRepository,The length of the statement  "            if (_globals.Repository.ReadTfsRemote(GitTfsConstants.DefaultRepositoryId).TfsRepositoryPath == GitTfsConstants.TfsRoot) " is 120.
Long Statement,GitTfs.Commands,Branch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Branch.cs,VerifyCloneAllRepository,The length of the statement  "                throw new GitTfsException("error: you can't use the 'branch' command when you have cloned the whole repository '$/' !"); " is 120.
Long Statement,GitTfs.Commands,Branch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Branch.cs,CreateRemote,The length of the statement  "            remote.Tfs.CreateBranch(remote.TfsRepositoryPath' tfsPath' commit.ChangesetId' Comment ?? "Creation branch " + tfsPath); " is 120.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,Run,The length of the statement  "                        string msg = string.Format("warning: Something went wrong while cleaning file after internal error (See below).\n    Can't clean up files because of IOException:\n{0}\n"' e.IndentExceptionMessage()); " is 199.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,Run,The length of the statement  "                        string msg = string.Format("warning: Something went wrong while cleaning file after internal error (See below).\n    Can't clean up files because of UnauthorizedAccessException:\n{0}\n"' e.IndentExceptionMessage()); " is 215.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,Run,The length of the statement  "                throw new GitTfsException("error: a problem occurred when trying to clone the repository. Try to solve the problem described below.\nIn any case' after' try to continue using command `git tfs " " is 193.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                        .WithRecommendation("To discover which branch to clone' you could use the command :\ngit tfs list-remote-branches " + remote.TfsUrl); " is 133.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                        Trace.TraceInformation("info: no TFS root found !\n\nPS:perhaps you should convert your trunk folder into a branch in TFS."); " is 125.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                        throw new GitTfsException("error: cloning the whole repository or too high in the repository path doesn't permit to manage branches!\n" + cloneMsg); " is 148.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                    Trace.TraceWarning("warning: you are going to clone the whole repository or too high in the repository path !\n" + cloneMsg); " is 125.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                            + "   => If you want to manage branches with git-tfs' clone {0} with '--branches=all' option instead...)"' tfsTrunkRepositoryPath); " is 131.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                        Trace.TraceWarning("warning: you are going to clone a subdirectory of a branch and won't be able to manage branches :(\n" " is 121.
Long Statement,GitTfs.Commands,Clone,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Clone.cs,VerifyTfsPathToClone,The length of the statement  "                            + "   => If you want to manage branches with git-tfs' clone " + tfsTrunkRepositoryPath + " with '--branches=all' option instead...)"); " is 134.
Long Statement,GitTfs.Commands,Fetch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Fetch.cs,DoFetch,The length of the statement  "            // in that case tfs fetch will retrieve same changes again unnecessarily. To prevent it we will scan tree from HEAD and see if newer changesets from " is 148.
Long Statement,GitTfs.Commands,Help,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Help.cs,Run,The length of the statement  "            Trace.TraceInformation("\nFind more help in our online help : https://github.com/git-tfs/git-tfs/blob/master/doc/commands/" + GetCommandName(command) + ".md"); " is 159.
Long Statement,GitTfs.Commands,Info,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Info.cs,DescribeTfsRemotes,The length of the statement  "            Trace.TraceInformation("               {0} - {1} @ {2}"' remote.RemoteRef' remote.MaxCommitHash' remote.MaxChangesetId); " is 120.
Long Statement,GitTfs.Commands,Init,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,VerifyGitUserConfig,The length of the statement  "                throw new GitTfsException("Git-tfs requires that the user data in git config should be set. Please configure them before using git-tfs" " is 135.
Long Statement,GitTfs.Commands,Init,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,VerifyGitUserConfig,The length of the statement  "                                          + Environment.NewLine + "For help on how to set user git config' see https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup"); " is 139.
Long Statement,GitTfs.Commands,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,SuggestPaths,The length of the statement  "                yield return "Cloning an entire TFS repository is not supported. Try using a subdirectory of the root (e.g. $/MyProject)."; " is 123.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "                var tfsRepositoryPathParentBranchFound = allRemotes.FirstOrDefault(r => r.TfsRepositoryPath.ToLower() == ParentBranch.ToLower()); " is 129.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "                    throw new GitTfsException("error: The Tfs parent branch '" + ParentBranch + "' can not be found in the Git repository\nPlease init it first and try again...\n"); " is 161.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,CloneBranch,The length of the statement  "                creationBranchData = defaultRemote.Tfs.GetRootChangesetForBranch(tfsBranchPath' -1' tfsRepositoryPathParentBranchFound.TfsRepositoryPath); " is 138.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "                var cbd = new BranchCreationDatas() { RootChangesetId = rootBranch.SourceBranchChangesetId' TfsRepositoryPath = rootBranch.TfsBranchPath }; " is 139.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "                branchTfsRemote = defaultRemote.InitBranch(_remoteOptions' cbd.TfsRepositoryPath' cbd.RootChangesetId' !NoFetch' cbd.GitBranchNameExpected' fetchResult); " is 153.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitBranchSupportingRename,The length of the statement  "                    fetchResult = FetchRemote(branchTfsRemote' false' !DontCreateGitBranch && !rootBranch.IsRenamedBranch' fetchResult' rootBranch.TargetBranchChangesetId); " is 152.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,CloneAll,The length of the statement  "                return InitializeBranches(defaultRemote' childBranchesToInit) ? GitTfsExitCodes.OK : GitTfsExitCodes.SomeDataCouldNotHaveBeenRetrieved; " is 135.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,GetChildBranchesToInit,The length of the statement  "                throw new GitTfsException("error: The use of the option '--branches=all' to init all the branches is only possible when 'git tfs clone' was done from the trunk!!! '" " is 165.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,GetChildBranchesToInit,The length of the statement  "            return rootBranch.GetAllChildrenOfBranch(defaultRemote.TfsRepositoryPath).Select(b => new BranchDatas { TfsRepositoryPath = b.Path }).ToList(); " is 143.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "                    TfsRemote = _globals.Repository.ReadAllTfsRemotes().FirstOrDefault(r => r.TfsRepositoryPath == childBranchPath.TfsRepositoryPath) " is 129.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "            branchesToProcess.Add(new BranchDatas { TfsRepositoryPath = defaultRemote.TfsRepositoryPath' TfsRemote = defaultRemote' RootChangesetId = -1 }); " is 144.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "                            tfsBranch.TfsRemote = InitBranchSupportingRename(tfsBranch.TfsRepositoryPath' null' tfsBranch.CreationBranchData' defaultRemote' " is 128.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "                Trace.TraceInformation("\nPlease report this case to the git-tfs developers! (report here : https://github.com/git-tfs/git-tfs/issues/461 )"); " is 142.
Long Statement,GitTfs.Commands,InitBranch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\InitBranch.cs,InitializeBranches,The length of the statement  "                Trace.TraceInformation("\nPlease report this case to the git-tfs developers! (report here : https://github.com/git-tfs/git-tfs/issues )"); " is 138.
Long Statement,GitTfs.Commands,Labels,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Labels.cs,CreateLabelsForTfsBranch,The length of the statement  "                Trace.WriteLine("LabelId:" + label.Id + "/ChangesetId:" + label.ChangesetId + "/LabelName:" + label.Name + "/Owner:" + label.Owner); " is 132.
Long Statement,GitTfs.Commands,ListRemoteBranches,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\ListRemoteBranches.cs,Run,The length of the statement  "            string convertBranchMessage = "  -> Open 'Source Control Explorer' and for each folder corresponding to a branch' right click on the folder and select 'Branching and Merging' > 'Convert to branch'."; " is 199.
Long Statement,GitTfs.Commands,ListRemoteBranches,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\ListRemoteBranches.cs,Run,The length of the statement  "                Trace.TraceInformation("\n\nPS:if your branch is not listed here' perhaps you should convert its containing folder into a branch in TFS:"); " is 139.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,PerformRCheckin,The length of the statement  "                throw new GitTfsException("error: You have local changes; rebase-workflow checkin only possible with clean working directory.") " is 127.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,PerformRCheckin,The length of the statement  "            IEnumerable<GitCommit> commitsToCheckin = _globals.Repository.FindParentCommits(refToCheckin' parentChangeset.Remote.MaxCommitHash); " is 132.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "                var commitSpecificCheckinOptions = _checkinOptionsFactory.BuildCommitSpecificCheckinOptions(_checkinOptions' message' commit' _authors); " is 136.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "                Trace.TraceInformation("Starting checkin of {0} '{1}'"' target.Substring(0' 8)' commitSpecificCheckinOptions.CheckinComment); " is 125.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "                    newChangesetId = tfsRemote.Checkin(target' currentParent' parentChangeset' commitSpecificCheckinOptions' tfsRepositoryPathOfMergedBranch); " is 138.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The length of the statement  "                    parentChangeset = new TfsChangesetInfo { ChangesetId = newChangesetId' GitCommit = tfsRemote.MaxCommitHash' Remote = tfsRemote }; " is 129.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "                    Trace.TraceWarning("warning: only 1 parent is supported by TFS for a merge changeset. The other parents won't be materialized in the TFS merge!"); " is 146.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "                                .WithRecommendation("check in all the commits of the tfs merged branch in TFS before trying to check in a merge commit"' " is 120.
Long Statement,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,FindTfsRepositoryPathOfMergedBranch,The length of the statement  "                        Trace.TraceWarning("warning: the parent " + gitParent + " does not belong to a TFS tracked branch (not checked in TFS) and will be ignored!"); " is 142.
Long Statement,GitTfs.Commands,ResetRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "                throw new GitTfsException("error : the commit where you want to reset the tfs remote does not belong to a tfs remote!"); " is 120.
Long Statement,GitTfs.Commands,ResetRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "                    throw new GitTfsException("error : the commit where you want to reset the tfs remote does not belong to the current tfs remote \"" " is 130.
Long Statement,GitTfs.Commands,ResetRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\ResetRemote.cs,Run,The length of the statement  "            Trace.TraceInformation("Note: remember to use the '--force' option when doing the next 'fetch' to force git-tfs to fetch again the changesets!"); " is 145.
Long Statement,GitTfs.Commands,Shelve,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Shelve.cs,Run,The length of the statement  "                var shelveSpecificCheckinOptions = _checkinOptionsFactory.BuildShelveSetSpecificCheckinOptions(_checkinOptions' message); " is 121.
Long Statement,GitTfs.Commands,Shelve,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Shelve.cs,Run,The length of the statement  "                changeset.Remote.Shelve(shelvesetName' referenceToShelve' changeset' shelveSpecificCheckinOptions' EvaluateCheckinPolicies); " is 124.
Long Statement,GitTfs.Commands,Subtree,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Subtree.cs,DoAdd,The length of the statement  "                owner = _globals.Repository.ReadAllTfsRemotes().FirstOrDefault(x => string.IsNullOrEmpty(x.TfsRepositoryPath) && !x.IsSubtree); " is 127.
Long Statement,GitTfs.Commands,Subtree,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Subtree.cs,DoPull,The length of the statement  "            remoteId = remoteId ?? string.Format(GitTfsConstants.RemoteSubtreeFormat' _globals.RemoteId ?? GitTfsConstants.DefaultRepositoryId' Prefix); " is 140.
Long Statement,GitTfs.Commands,Subtree,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Subtree.cs,DoSplit,The length of the statement  "            var owners = _globals.Repository.GetLastParentTfsCommits("HEAD").Where(x => !x.Remote.IsSubtree && x.Remote.TfsRepositoryPath == null).ToList(); " is 144.
Long Statement,GitTfs.Commands,Subtree,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Subtree.cs,DoSplit,The length of the statement  "            foreach (var subtree in _globals.Repository.ReadAllTfsRemotes().Where(x => x.IsSubtree && string.Equals(x.Prefix' Prefix))) " is 123.
Long Statement,GitTfs.Commands,TreeVerifier,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Verify.cs,Verify,The length of the statement  "            var tfsTree = changeset.Remote.GetChangeset(changeset.ChangesetId).GetTree().ToDictionary(entry => entry.FullName.ToLowerInvariant()); " is 134.
Long Statement,GitTfs.Commands,TreeVerifier,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Verify.cs,Verify,The length of the statement  "            var gitTree = changeset.Remote.Repository.GetCommit(changeset.GitCommit).GetTree().ToDictionary(entry => entry.Entry.Path.ToLowerInvariant()); " is 142.
Long Statement,GitTfs,GitTfs,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfs.cs,ParseAuthorsAndSave,The length of the statement  "                Trace.TraceWarning("         Verify the file :" + Path.Combine(_globals.GitDir' AuthorsFile.GitTfsCachedAuthorsFileName)); " is 122.
Long Statement,GitTfs,GitTfs,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "                    throw new Exception("This command must be run inside a git repository!\nGIT_DIR=" + _globals.GitDir + " explicitly set' but it is not a directory."); " is 149.
Long Statement,GitTfs,GitTfs,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "                git.WrapGitCommandErrors("This command must be run inside a git repository!\nAlready at top level' but " + gitDir + " not found."' " is 130.
Long Statement,GitTfs,GitTfs,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\GitTfs.cs,AssertValidGitRepository,The length of the statement  "                    throw new Exception("This command must be run inside a git repository!\n" + gitDir + " still not found after going to " + cdUp); " is 128.
Long Statement,GitTfs,Program,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Program.cs,ReportInternalException,The length of the statement  "                    Trace.TraceError("error running command: " + gitCommandException.Process.StartInfo.FileName + " " + gitCommandException.Process.StartInfo.Arguments); " is 149.
Long Statement,GitTfs.Core,Bootstrapper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Bootstrapper.cs,GetRemoteId,The length of the statement  "                Trace.TraceInformation("info: '" + changeset.Remote.TfsRepositoryPath + "' will be bootstraped as your main remote..."); " is 120.
Long Statement,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,GetHashCode,The length of the statement  "                return ((_tfsUrl != null ? _tfsUrl.GetHashCode() : 0) * 397) ^ (_tfsRepositoryPath != null ? _tfsRepositoryPath.GetHashCode() : 0); " is 131.
Long Statement,GitTfs.Core,DirectoryTidier,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DirectoryTidier.cs,Dispose,The length of the statement  "            _filesInTfs = _getInitialTfsTree().Where(entry => entry.Item.ItemType == TfsItemType.File).Select(entry => entry.FullName.ToLowerInvariant()).ToList(); " is 151.
Long Statement,GitTfs.Core,GitHelpers,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitHelpers.cs,Close,The length of the statement  "                throw new GitCommandException(string.Format("Command exited with error code: {0}\n{1}"' process.ExitCode' process.StandardErrorString)' process); " is 145.
Long Statement,GitTfs.Core,GitHelpers,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitHelpers.cs,WrapGitCommandErrors,The length of the statement  "                throw new Exception(string.Format(exceptionMessage' e.Process.StartInfo.FileName + " " + e.Process.StartInfo.Arguments' e.Process.ExitCode)' e); " is 144.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,GetGitRemoteBranches,The length of the statement  "            var references = _repository.Branches.Where(b => b.IsRemote && b.FriendlyName.StartsWith(gitRemote) && !b.FriendlyName.EndsWith("/HEAD")); " is 138.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,ReadTfsRemotes,The length of the statement  "            _repository.Config.Set("tfs.touch"' "1"); // reload configuration' because `git tfs init` and `git tfs clone` use Process.Start to update the config' so _repository's copy is out of date. " is 187.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,TryParseChangesetInfo,The length of the statement  "                commitInfo.Remote = ReadTfsRemote(match.Groups["url"].Value' match.Groups["repository"].Success ? match.Groups["repository"].Value : null); " is 139.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,FindCommitByChangesetId,The length of the statement  "            Trace.WriteLine((commit == null) ? " => Commit " + changesetId + " not found!" : " => Commit " + changesetId + " found! hash: " + commit.Sha); " is 142.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,GetSubtrees,The length of the statement  "            return ReadAllTfsRemotes().Where(x => x.IsSubtree && string.Equals(x.OwningRemoteId' owner.Id' StringComparison.InvariantCultureIgnoreCase)); " is 141.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,FindParentCommits,The length of the statement  "                new CommitFilter() { IncludeReachableFrom = @from' ExcludeReachableFrom = to' SortBy = CommitSortStrategies.Reverse' FirstParentOnly = true }) " is 142.
Long Statement,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,CommitGitIgnore,The length of the statement  "            var signature = new Signature("git-tfs"' "git-tfs@noreply.com"' new DateTimeOffset(2000' 1' 1' 0' 0' 0' new TimeSpan(0))); " is 122.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FetchWithMerge,The length of the statement  "                    var parentSha = (renameResult != null && renameResult.IsProcessingRenameChangeset) ? renameResult.LastParentCommitBeforeRename : MaxCommitHash; " is 143.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,ProcessChangeset,The length of the statement  "                        log.Log += "\n" + GitTfsConstants.GitTfsPrefix + "-" + CamelCaseToDelimitedStringConverter.Convert(checkinNote.Name' "-") + ": " + checkinNote.Value; " is 149.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The length of the statement  "            var tfsRemote = FindOrInitTfsRemoteOfChangeset(parentChangesetId' mergeChangeset' renameResult' out omittedParentBranch); " is 121.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindRemoteAndFetch,The length of the statement  "            if (tfsRemote != null && string.Compare(tfsRemote.TfsRepositoryPath' TfsRepositoryPath' StringComparison.InvariantCultureIgnoreCase) != 0) " is 138.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "            var remote = Repository.ReadAllTfsRemotes().FirstOrDefault(r => parentChangeset.Changes.Any(c => r.GetPathInGitRepo(c.Item.ServerItem) != null)); " is 145.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "                    string.Equals(Repository.GetConfig(GitTfsConstants.IgnoreNotInitBranches)' true.ToString()' StringComparison.InvariantCultureIgnoreCase)) " is 137.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The length of the statement  "                    Trace.TraceInformation("error: branch not found. Verify that all the folders have been converted to branches (or something else :().\n\tpath {0}"' tfsPath); " is 156.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,GetLatestChangeset,The length of the statement  "            var changesetId = _globals.Repository.GetSubtrees(this).Select(x => Tfs.GetLatestChangeset(x)).Max(x => x.Summary.ChangesetId); " is 127.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Shelve,The length of the statement  "            WithWorkspace(parentChangeset' workspace => Shelve(shelvesetName' head' parentChangeset' options' evaluateCheckinPolicies' workspace)); " is 135.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Shelve,The length of the statement  "            workspace.Shelve(shelvesetName' evaluateCheckinPolicies' options' () => Repository.GetCommitMessage(head' parentChangeset.GitCommit)); " is 134.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,Checkin,The length of the statement  "            WithWorkspace(parentChangeset' workspace => changeset = Checkin(head' parentChangeset.GitCommit' workspace' options' sourceTfsPath)); " is 133.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,WithWorkspace,The length of the statement  "                Tfs.WithWorkspace(WorkingDirectory' this' subtrees.Select(x => new Tuple<string' string>(x.TfsRepositoryPath' x.Prefix))' parentChangeset' action); " is 147.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,MatchesTfsUrl,The length of the statement  "            return TfsUrl.Equals(tfsUrl' StringComparison.OrdinalIgnoreCase) || Aliases.Contains(tfsUrl' StringComparison.OrdinalIgnoreCase); " is 129.
Long Statement,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,InitBranch,The length of the statement  "            return InitTfsBranch(remoteOptions' tfsRepositoryPath' rootChangesetId' fetchParentBranch' gitBranchNameExpected' renameResult); " is 128.
Long Statement,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,GetTree,The length of the statement  "            return GetFullTree().Where(item => item.Item.ItemType == TfsItemType.File && !Summary.Remote.ShouldSkip(item.FullName)); " is 120.
Long Statement,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,GetFullTree,The length of the statement  "                tfsItems = _changeset.VersionControlServer.GetItems(Summary.Remote.TfsRepositoryPath' _changeset.ChangesetId' TfsRecursionType.Full); " is 133.
Long Statement,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,GetFullTree,The length of the statement  "                tfsItems = Summary.Remote.TfsSubtreePaths.SelectMany(x => _changeset.VersionControlServer.GetItems(x' _changeset.ChangesetId' TfsRecursionType.Full)).ToArray(); " is 160.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "            shelveset.Comment = string.IsNullOrWhiteSpace(_checkinOptions.CheckinComment) && !_checkinOptions.NoGenerateCheckinComment ? generateCheckinComment() : _checkinOptions.CheckinComment; " is 183.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "                foreach (var message in _policyEvaluator.EvaluateCheckin(_workspace' pendingChanges' shelveset.Comment' null' shelveset.WorkItemInfo).Messages) " is 143.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Shelve,The length of the statement  "            _workspace.Shelve(shelveset' pendingChanges' _checkinOptions.Force ? TfsShelvingOptions.Replace : TfsShelvingOptions.None); " is 123.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,CheckinTool,The length of the statement  "            var newChangesetId = _tfsHelper.ShowCheckinDialog(_workspace' pendingChanges' GetWorkItemCheckedInfos()' checkinComment); " is 121.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Checkin,The length of the statement  "            var checkinProblems = _policyEvaluator.EvaluateCheckin(_workspace' pendingChanges' checkinComment' checkinNote' workItemInfos); " is 127.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Checkin,The length of the statement  "                        Trace.TraceInformation("Note: If the checkin policy fails because the assemblies failed to load' please run the file `enable_checkin_policies_support.bat` in the git-tfs directory and try again."); " is 197.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Checkin,The length of the statement  "                var newChangeset = _workspace.Checkin(pendingChanges' checkinComment' options.AuthorTfsUserId' checkinNote' workItemInfos' policyOverride' options.OverrideGatedCheckIn); " is 169.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,LaunchGatedCheckinBuild,The length of the statement  "            Trace.TraceInformation("Due to a gated check-in' a shelveset '" + shelvesetName + "' containing your changes has been created and need to be built before it can be committed."); " is 177.
Long Statement,GitTfs.Core,TfsWorkspace,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWorkspace.cs,Delete,The length of the statement  "            if (deleted != 1) throw new Exception("One item should have been deleted' but actually deleted " + deleted + " items."); " is 120.
Long Statement,GitTfs.Core,TfsWriter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsWriter.cs,WriteWith,The length of the statement  "                        Trace.TraceInformation("Basing from parent '{0}:{1}'' use -i to override"' lastChangeSet.Remote.Id' lastChangeSet.ChangesetId); " is 127.
Long Statement,GitTfs.Core.TfsInterop,BranchExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsInterop\IBranch.cs,GetRootTfsBranchForRemotePath,The length of the statement  "            var branchTrees = branches.Aggregate(new Dictionary<string' BranchTree>(StringComparer.OrdinalIgnoreCase)' (dict' branch) => dict.Tap(d => d.Add(branch.Path' new BranchTree(branch)))); " is 184.
Long Statement,GitTfs.Util,AuthorsFile,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\AuthorsFile.cs,Parse,The length of the statement  "                    if (match.Groups.Count != 4 || string.IsNullOrWhiteSpace(match.Groups[1].Value) || string.IsNullOrWhiteSpace(match.Groups[2].Value) || " is 134.
Long Statement,GitTfs.Util,CheckinOptionsExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessWorkItemCommands,The length of the statement  "                checkinOptions.CheckinComment = GitTfsConstants.TfsWorkItemRegex.Replace(checkinOptions.CheckinComment' "").Trim(' '' '\r'' '\n'); " is 130.
Long Statement,GitTfs.Util,CheckinOptionsExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessCheckinNoteCommands,The length of the statement  "            checkinOptions.CheckinComment = GitTfsConstants.TfsReviewerRegex.Replace(checkinOptions.CheckinComment' "").Trim(' '' '\r'' '\n'); " is 130.
Long Statement,GitTfs.Util,CheckinOptionsExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessForceCommand,The length of the statement  "                checkinOptions.CheckinComment = GitTfsConstants.TfsForceRegex.Replace(checkinOptions.CheckinComment' "").Trim(' '' '\r'' '\n'); " is 127.
Long Statement,GitTfs.Util,ExportMetadatasInitializer,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\ExportMetadatasInitializer.cs,InitializeRemote,The length of the statement  "                    throw new GitTfsException("error: bad format of workitems mapping file! One line format should be: OldWorkItemId|NewWorkItemId"); " is 129.
Long Statement,GitTfs.Util,GitTfsCommandRunner,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\GitTfsCommandRunner.cs,Run,The length of the statement  "                var runMethods = command.GetType().GetMethods().Where(m => m.Name == "Run" && m.ReturnType == typeof(int)).Select(m => new { Method = m' Parameters = m.GetParameters() }); " is 171.
Long Statement,GitTfs.Util,GitTfsCommandRunner,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\GitTfsCommandRunner.cs,Run,The length of the statement  "                var defaultRunMethod = runMethods.FirstOrDefault(m => m.Parameters.Length == 1 && m.Parameters[0].ParameterType.IsAssignableFrom(args.GetType())); " is 146.
Long Statement,GitTfs.Extensions,InspectExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\InspectExtensions.cs,InspectType,The length of the statement  "            return IsAnonymousType(type) ? InspectAnonymousType(type) : type.IsGenericType ? InspectGenericType(type) : type.FullName; " is 122.
Complex Conditional,GitTfs.Commands,Fetch,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Fetch.cs,DoFetch,The conditional expression  "!ForceFetch &&                  remote.Repository.IsBare &&                  remote.Repository.HasRef(GitRepository.ShortToLocalName(bareBranch)) &&                  remote.MaxCommitHash != remote.Repository.GetCommit(bareBranch).Sha"  is complex.
Complex Conditional,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,FindOrInitTfsRemoteOfChangeset,The conditional expression  "mergeChangeset && tfsBranch != null && !string.IsNullOrEmpty(filterRegex)                      && Regex.IsMatch(tfsBranch.Path' filterRegex' RegexOptions.IgnoreCase)"  is complex.
Complex Conditional,GitTfs.Core.BranchVisitors,BranchTreeContainsPathVisitor,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\BranchVisitors\BranchTreeContainsPathVisitor.cs,Visit,The conditional expression  "Found == false                  && ((_searchExactPath && _searchPath.ToLower() == childBranch.Path.ToLower())                  || (!_searchExactPath && _searchPath.ToLower().IndexOf(childBranch.Path.ToLower()) == 0))"  is complex.
Complex Conditional,GitTfs.Util,AuthorsFile,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\AuthorsFile.cs,Parse,The conditional expression  "match.Groups.Count != 4 || string.IsNullOrWhiteSpace(match.Groups[1].Value) || string.IsNullOrWhiteSpace(match.Groups[2].Value) ||                          string.IsNullOrWhiteSpace(match.Groups[3].Value)"  is complex.
Empty Catch Block,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,InitHistory,The method has an empty catch block.
Empty Catch Block,GitTfs.Core,TfsChangeset,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\TfsChangeset.cs,MakeNewLogEntry,The method has an empty catch block.
Magic Number,GitTfs.Commands,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,ToGitBranchNameFromTfsRepositoryPath,The following statement contains a magic number: string gitBranchNameExpected = tfsRepositoryPath.IndexOf("$/") == 0                  ? tfsRepositoryPath.Remove(0' tfsRepositoryPath.IndexOf('/'' 2) + 1)                  : tfsRepositoryPath;
Magic Number,GitTfs.Commands,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Init.cs,ToTfsTeamProjectRepositoryPath,The following statement contains a magic number: var index = tfsRepositoryPath.IndexOf('/'' 2);
Magic Number,GitTfs.Commands,Rcheckin,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Rcheckin.cs,_PerformRCheckinQuick,The following statement contains a magic number: Trace.TraceInformation("Starting checkin of {0} '{1}'"' target.Substring(0' 8)' commitSpecificCheckinOptions.CheckinComment);
Magic Number,GitTfs.Commands,Subtree,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Commands\Subtree.cs,Run,The following statement contains a magic number: switch (command.ToLower())              {                  case "add":                      return DoAdd(args.ElementAtOrDefault(1) ?? ""' args.ElementAtOrDefault(2) ?? "");                    case "pull":                      return DoPull(args.ElementAtOrDefault(1));                    case "split":                      return DoSplit();                    default:                      Trace.TraceInformation("Expected one of [add' pull' split]");                      return GitTfsExitCodes.InvalidArguments;              }
Magic Number,GitTfs.Core,Bootstrapper,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Bootstrapper.cs,GetRemoteId,The following statement contains a magic number: var expectedRemoteId = changeset.Remote.TfsRepositoryPath.Substring(2).Trim('/');
Magic Number,GitTfs.Core,DerivedGitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\DerivedGitTfsRemote.cs,GetHashCode,The following statement contains a magic number: return ((_tfsUrl != null ? _tfsUrl.GetHashCode() : 0) * 397) ^ (_tfsRepositoryPath != null ? _tfsRepositoryPath.GetHashCode() : 0);
Magic Number,GitTfs.Core,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Ext.cs,ForEachRetry,The following statement contains a magic number: ForEachRetry(source' action' 10' retryInterval' parallelizeActions);
Magic Number,GitTfs.Core,Ext,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Ext.cs,ForEachRetry,The following statement contains a magic number: ForEachRetry(source' action' 10' TimeSpan.FromSeconds(1)' parallelizeActions);
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: char[] block = new char[98];
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: var bytesRead = reader.ReadBlock(block' 0' 98);
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: var nullBytesLeft = 2;
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: nullBytesLeft = 3;
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: block[97] == 'C' || block[97] == 'R'
Magic Number,GitTfs.Core,GitChangeInfo,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitChangeInfo.cs,GetDiffTreeLine,The following statement contains a magic number: block[97] == 'C' || block[97] == 'R'
Magic Number,GitTfs.Core,GitHelpers,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitHelpers.cs,Close,The following statement contains a magic number: !process.WaitForExit((int)TimeSpan.FromSeconds(10).TotalMilliseconds)
Magic Number,GitTfs.Core,GitRepository,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitRepository.cs,CommitGitIgnore,The following statement contains a magic number: var signature = new Signature("git-tfs"' "git-tfs@noreply.com"' new DateTimeOffset(2000' 1' 1' 0' 0' 0' new TimeSpan(0)));
Magic Number,GitTfs.Core,GitTfsRemote,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\GitTfsRemote.cs,IsIgnoringBranches,The following statement contains a magic number: var isIgnoringBranchesDetected = Repository.ReadAllTfsRemotes().Count() < 2;
Magic Number,GitTfs.Core,Mode,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Mode.cs,ToFileMode,The following statement contains a magic number: return (LibGit2Sharp.Mode)Convert.ToInt32(mode' 8);
Magic Number,GitTfs.Core,Mode,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Mode.cs,ToModeString,The following statement contains a magic number: return Convert.ToString((int)mode' 8).PadLeft(6' '0');
Magic Number,GitTfs.Core,Mode,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\Mode.cs,ToModeString,The following statement contains a magic number: return Convert.ToString((int)mode' 8).PadLeft(6' '0');
Magic Number,GitTfs.Core,RemoteConfigConverter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: var id = string.Join("."' keyParts' 1' keyParts.Length - 2);
Magic Number,GitTfs.Core,RemoteConfigConverter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Core\RemoteConfigConverter.cs,Load,The following statement contains a magic number: keyParts.Length >= 3 && keyParts[0] == "tfs-remote"
Magic Number,GitTfs.Util,AuthorsFile,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: match.Groups.Count != 4 || string.IsNullOrWhiteSpace(match.Groups[1].Value) || string.IsNullOrWhiteSpace(match.Groups[2].Value) ||                          string.IsNullOrWhiteSpace(match.Groups[3].Value)
Magic Number,GitTfs.Util,AuthorsFile,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: match.Groups.Count != 4 || string.IsNullOrWhiteSpace(match.Groups[1].Value) || string.IsNullOrWhiteSpace(match.Groups[2].Value) ||                          string.IsNullOrWhiteSpace(match.Groups[3].Value)
Magic Number,GitTfs.Util,AuthorsFile,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\AuthorsFile.cs,Parse,The following statement contains a magic number: match.Groups.Count != 4 || string.IsNullOrWhiteSpace(match.Groups[1].Value) || string.IsNullOrWhiteSpace(match.Groups[2].Value) ||                          string.IsNullOrWhiteSpace(match.Groups[3].Value)
Magic Number,GitTfs.Util,CamelCaseToDelimitedStringConverter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CamelCaseToDelimitedStringConverter.cs,IsFirstCharacterOfNewWord,The following statement contains a magic number: return char.IsUpper(s[index]) && !char.IsUpper(s[index - 1]) ||                     char.IsUpper(s[index]) && char.IsUpper(s[index - 1]) && wordStartIndex == index - 2 ||                     char.IsUpper(s[index]) && char.IsUpper(s[index - 1]) && s.Length >= index + 2 && !char.IsUpper(s[index + 1]);
Magic Number,GitTfs.Util,CamelCaseToDelimitedStringConverter,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CamelCaseToDelimitedStringConverter.cs,IsFirstCharacterOfNewWord,The following statement contains a magic number: return char.IsUpper(s[index]) && !char.IsUpper(s[index - 1]) ||                     char.IsUpper(s[index]) && char.IsUpper(s[index - 1]) && wordStartIndex == index - 2 ||                     char.IsUpper(s[index]) && char.IsUpper(s[index - 1]) && s.Length >= index + 2 && !char.IsUpper(s[index + 1]);
Missing Default,GitTfs.Util,CheckinOptionsExtensions,D:\research\architectureSmells\repos\git-tfs_git-tfs\src\GitTfs\Util\CheckinOptionsExtensions.cs,ProcessCheckinNoteCommands,The following switch statement is missing a default case: switch (match.Groups["type"].Value)                      {                          case "code":                              Trace.TraceInformation("Code reviewer: {0}"' reviewer);                              checkinOptions.CheckinNotes.Add("Code Reviewer"' reviewer);                              break;                          case "security":                              Trace.TraceInformation("Security reviewer: {0}"' reviewer);                              checkinOptions.CheckinNotes.Add("Security Reviewer"' reviewer);                              break;                          case "performance":                              Trace.TraceInformation("Performance reviewer: {0}"' reviewer);                              checkinOptions.CheckinNotes.Add("Performance Reviewer"' reviewer);                              break;                      }
