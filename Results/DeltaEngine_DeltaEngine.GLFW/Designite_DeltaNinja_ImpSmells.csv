Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,OnButtonClicked,Cyclomatic complexity of the method is 10
Complex Method,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,Update,Cyclomatic complexity of the method is 16
Complex Method,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,Cyclomatic complexity of the method is 27
Complex Method,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,Reset,Cyclomatic complexity of the method is 11
Complex Method,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,OnPauseButtonClicked,Cyclomatic complexity of the method is 12
Long Parameter List,DeltaNinja.Entities,Logo,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\Logo.cs,Logo,The method has 5 parameters.
Long Parameter List,DeltaNinja.UI,Number,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\Number.cs,Number,The method has 9 parameters.
Long Parameter List,DeltaNinja.UI,NumberFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\NumberFactory.cs,CreateNumber,The method has 8 parameters.
Long Statement,DeltaNinja.Entities,LogoFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\LogoFactory.cs,Create,The length of the statement  "	float r = direction > 0 ? random.Get (0' view.Width - position.X - doubleWidth) : random.Get (0' position.X - doubleWidth); " is 123.
Long Statement,DeltaNinja.Entities,Logo,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\Logo.cs,CheckForSlicing,The length of the statement  "	if (!sideStatus.HasFlag (Sides.Bottom) && CheckIfLineIntersectsLine (start' end' DrawArea.BottomLeft' DrawArea.BottomRight)) " is 124.
Long Statement,DeltaNinja.Entities,Logo,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\Logo.cs,CheckForSlicing,The length of the statement  "	if (!sideStatus.HasFlag (Sides.Right) && CheckIfLineIntersectsLine (start' end' DrawArea.TopRight' DrawArea.BottomRight)) " is 121.
Magic Number,DeltaNinja.Entities,LogoFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\LogoFactory.cs,Create,The following statement contains a magic number: if (random.Get (1' 100) >= 30)  	direction *= -1;  
Magic Number,DeltaNinja.Entities,LogoFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Entities\LogoFactory.cs,Create,The following statement contains a magic number: if (random.Get (1' 100) >= 30)  	direction *= -1;  
Magic Number,DeltaNinja.Pages,HudScene,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\HudScene.cs,HudScene,The following statement contains a magic number: levelNumber = numberFactory.CreateNumber (this' center' levelCaption.DrawArea.Bottom' 0.022f' Alignment.Center' 2' DefaultColors.Gray);  
Magic Number,DeltaNinja.Pages,HudScene,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\HudScene.cs,HudScene,The following statement contains a magic number: errorIcons = new Sprite[3];  
Magic Number,DeltaNinja.Pages,HomePage,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\HomePage.cs,HomePage,The following statement contains a magic number: AddLogoLink ("DeltaEngineLink"' "http://deltaengine.net/"' 0.07f' -2);  
Magic Number,DeltaNinja.Pages,HomePage,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\HomePage.cs,HomePage,The following statement contains a magic number: AddLogoLink ("CodePlexLink"' "http://deltaninja.codeplex.com/"' 0.07f' 2);  
Magic Number,DeltaNinja.Pages,HomePage,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\HomePage.cs,HomePage,The following statement contains a magic number: aboutBox.RenderLayer = 9000;  
Magic Number,DeltaNinja.Pages,BasePage,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Pages\BasePage.cs,AddButton,The following statement contains a magic number: button.RenderLayer = 9000;  
Magic Number,DeltaNinja.UI,Number,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\Number.cs,SetValue,The following statement contains a magic number: for (int i = 0; i < n; i++)  	digits.Insert (0' digitCount > 0 ? 0 : 10);  
Magic Number,DeltaNinja.UI,Number,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\Number.cs,SetValue,The following statement contains a magic number: digits.Insert (0' digitCount > 0 ? 0 : 10);  
Magic Number,DeltaNinja.UI,NumberFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\NumberFactory.cs,NumberFactory,The following statement contains a magic number: for (int digit = 0; digit < 10; digit++)  	materials [digit] = new Material (ShaderFlags.Position2DColoredTextured' digit.ToString (CultureInfo.InvariantCulture));  
Magic Number,DeltaNinja.UI,NumberFactory,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\NumberFactory.cs,NumberFactory,The following statement contains a magic number: materials [10] = new Material (ShaderFlags.Position2DColoredTextured' "Empty");  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,Game,The following statement contains a magic number: window.ViewportPixelSize = new Size (1280' 720);  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,Game,The following statement contains a magic number: window.ViewportPixelSize = new Size (1280' 720);  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,SwitchWindowMode,The following statement contains a magic number: if (window.IsFullscreen)  	window.SetWindowed ();  else  	window.SetFullscreen (new Size (1920' 1080));  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,SwitchWindowMode,The following statement contains a magic number: if (window.IsFullscreen)  	window.SetWindowed ();  else  	window.SetFullscreen (new Size (1920' 1080));  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,SwitchWindowMode,The following statement contains a magic number: window.SetFullscreen (new Size (1920' 1080));  
Magic Number,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,SwitchWindowMode,The following statement contains a magic number: window.SetFullscreen (new Size (1920' 1080));  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (waveCount > 0) {  	match.CreateLogos (waveLogoCount);  	waveCount--;  	if (waveCount == 0)  		waveIndex++;  }  else if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: if (match.LogoCount == 0) {  	var random = Randomizer.Current;  	int max = match.CurrentLevel + 1;  	int min = max < 4 ? 1 : max - 5;  	int count = random.Get (min' max);  	waveLogoCount = 1;  	switch (waveIndex) {  	case 0:  	case 4:  		waveCount = match.CurrentLevel;  		break;  	case 1:  		match.CreateLogos (count);  		waveIndex++;  		break;  	case 2:  		waveCount = max;  		break;  	case 3:  		match.CreateLogos (max < 5 ? max : 5);  		waveIndex++;  		break;  	case 5:  		waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  		waveCount = count;  		break;  	case 6:  		match.NextLevel ();  		waveTimeout -= 0.05f;  		waveIndex = 0;  		break;  	}  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: match.CreateLogos (max < 5 ? max : 5);  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: match.CreateLogos (max < 5 ? max : 5);  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  
Magic Number,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following statement contains a magic number: waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  
Magic Number,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,AddError,The following statement contains a magic number: if (score.Errors < 3)  	return true;  
Magic Number,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,ClearEntities,The following statement contains a magic number: foreach (var tip in PointsTips.ToArray ())  	if (tip.Time + 1500 < GlobalTime.Current.Milliseconds) {  		tip.Reset ();  		PointsTips.Remove (tip);  	}  
Magic Number,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,ClearEntities,The following statement contains a magic number: if (tip.Time + 1500 < GlobalTime.Current.Milliseconds) {  	tip.Reset ();  	PointsTips.Remove (tip);  }  
Magic Number,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,ClearEntities,The following statement contains a magic number: foreach (var flag in ErrorFlags.ToArray ())  	if (flag.Time + 1500 < GlobalTime.Current.Milliseconds) {  		flag.IsActive = false;  		ErrorFlags.Remove (flag);  	}  
Magic Number,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,ClearEntities,The following statement contains a magic number: if (flag.Time + 1500 < GlobalTime.Current.Milliseconds) {  	flag.IsActive = false;  	ErrorFlags.Remove (flag);  }  
Magic Number,DeltaNinja,Program,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Program.cs,Program,The following statement contains a magic number: Settings.Current.Resolution = new Size (1280' 720);  
Magic Number,DeltaNinja,Program,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Program.cs,Program,The following statement contains a magic number: Settings.Current.Resolution = new Size (1280' 720);  
Missing Default,DeltaNinja.UI,Number,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\UI\Number.cs,RefreshPosition,The following switch statement is missing a default case: switch (align) {  case Alignment.Center:  	x -= (digitWidth * sprites.Count) / 2f;  	break;  case Alignment.Right:  	x -= (digitWidth * sprites.Count);  	break;  }  
Missing Default,DeltaNinja,Game,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Game.cs,OnButtonClicked,The following switch statement is missing a default case: switch (code) {  case MenuButton.Home:  	ShowHome ();  	break;  case MenuButton.NewGame:  case MenuButton.Retry:  	StartNewGame ();  	break;  case MenuButton.Exit:  	Exit ();  	break;  }  
Missing Default,DeltaNinja,GameLogic,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\GameLogic.cs,CheckWave,The following switch statement is missing a default case: switch (waveIndex) {  case 0:  case 4:  	waveCount = match.CurrentLevel;  	break;  case 1:  	match.CreateLogos (count);  	waveIndex++;  	break;  case 2:  	waveCount = max;  	break;  case 3:  	match.CreateLogos (max < 5 ? max : 5);  	waveIndex++;  	break;  case 5:  	waveLogoCount = match.CurrentLevel % 3 == 0 ? 2 : 1;  	waveCount = count;  	break;  case 6:  	match.NextLevel ();  	waveTimeout -= 0.05f;  	waveIndex = 0;  	break;  }  
Missing Default,DeltaNinja,Match,C:\repos\DeltaEngine_DeltaEngine.GLFW\Samples\DeltaNinja\Match.cs,OnPauseButtonClicked,The following switch statement is missing a default case: switch (code) {  case (MenuButton.Resume):  	SwitchPause ();  	break;  case (MenuButton.NewGame):  	SwitchPause ();  	Reset ();  	Start ();  	break;  case (MenuButton.Abort):  	SwitchPause ();  	EndGame (true);  	break;  }  
