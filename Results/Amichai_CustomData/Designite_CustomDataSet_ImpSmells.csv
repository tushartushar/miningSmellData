Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,Cyclomatic complexity of the method is 26
Magic Number,CustomDataSet,DataUtil,C:\repos\Amichai_CustomData\CustomDataSet\DataUtil.cs,RemoveTask,The following statement contains a magic number: r.Visibility = 2;  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: foreach (var h in hits) {  	if (h < StartTime) {  		continue;  	}  	DateTime binIdx;  	switch (this.SelectedBinType) {  	case binType.Day:  		binIdx = Floor (h' TimeSpan.FromDays (1));  		break;  	case binType.Month:  		binIdx = Floor (h' TimeSpan.FromDays (30));  		break;  	case binType.Year:  		binIdx = Floor (h' TimeSpan.FromDays (365));  		break;  	case binType.Second:  		binIdx = Floor (h' TimeSpan.FromSeconds (1));  		break;  	case binType.Minute:  		binIdx = Floor (h' TimeSpan.FromMinutes (1));  		break;  	case binType.Hour:  		binIdx = Floor (h' TimeSpan.FromHours (1));  		break;  	default:  		throw new Exception ();  	}  	if (!idxCounter.ContainsKey (binIdx)) {  		idxCounter [binIdx] = 1;  	}  	else {  		idxCounter [binIdx]++;  	}  }  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: foreach (var h in hits) {  	if (h < StartTime) {  		continue;  	}  	DateTime binIdx;  	switch (this.SelectedBinType) {  	case binType.Day:  		binIdx = Floor (h' TimeSpan.FromDays (1));  		break;  	case binType.Month:  		binIdx = Floor (h' TimeSpan.FromDays (30));  		break;  	case binType.Year:  		binIdx = Floor (h' TimeSpan.FromDays (365));  		break;  	case binType.Second:  		binIdx = Floor (h' TimeSpan.FromSeconds (1));  		break;  	case binType.Minute:  		binIdx = Floor (h' TimeSpan.FromMinutes (1));  		break;  	case binType.Hour:  		binIdx = Floor (h' TimeSpan.FromHours (1));  		break;  	default:  		throw new Exception ();  	}  	if (!idxCounter.ContainsKey (binIdx)) {  		idxCounter [binIdx] = 1;  	}  	else {  		idxCounter [binIdx]++;  	}  }  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: switch (this.SelectedBinType) {  case binType.Day:  	binIdx = Floor (h' TimeSpan.FromDays (1));  	break;  case binType.Month:  	binIdx = Floor (h' TimeSpan.FromDays (30));  	break;  case binType.Year:  	binIdx = Floor (h' TimeSpan.FromDays (365));  	break;  case binType.Second:  	binIdx = Floor (h' TimeSpan.FromSeconds (1));  	break;  case binType.Minute:  	binIdx = Floor (h' TimeSpan.FromMinutes (1));  	break;  case binType.Hour:  	binIdx = Floor (h' TimeSpan.FromHours (1));  	break;  default:  	throw new Exception ();  }  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: switch (this.SelectedBinType) {  case binType.Day:  	binIdx = Floor (h' TimeSpan.FromDays (1));  	break;  case binType.Month:  	binIdx = Floor (h' TimeSpan.FromDays (30));  	break;  case binType.Year:  	binIdx = Floor (h' TimeSpan.FromDays (365));  	break;  case binType.Second:  	binIdx = Floor (h' TimeSpan.FromSeconds (1));  	break;  case binType.Minute:  	binIdx = Floor (h' TimeSpan.FromMinutes (1));  	break;  case binType.Hour:  	binIdx = Floor (h' TimeSpan.FromHours (1));  	break;  default:  	throw new Exception ();  }  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: binIdx = Floor (h' TimeSpan.FromDays (30));  
Magic Number,CustomDataSet,DataView,C:\repos\Amichai_CustomData\CustomDataSet\DataView.xaml.cs,AddSeries,The following statement contains a magic number: binIdx = Floor (h' TimeSpan.FromDays (365));  
Magic Number,CustomDataSet,MainWindow,C:\repos\Amichai_CustomData\CustomDataSet\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: foreach (var t in db.Tasks.Where (i => i.Visibility != 2)) {  	this.TaskSet.Add (new ButtonTask () {  		ID = t.ID'  		CompletedAfter = t.CompletedAfter.Value'  		CompletionDisabled = TimeSpan.FromTicks (t.CompletionDisabled.Value)'  		Description = t.Description'  		HitCount = t.HitCount'  		HitDisabled = TimeSpan.FromTicks (t.HitDisabled.Value)'  		Name = t.Name'  		Visibility = t.Visibility  	});  }  
