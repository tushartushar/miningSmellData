Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SpeakEasy.IntegrationTests,BasicAsyncHttpMethods,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\BasicAsyncHttpMethods.cs,ShouldGetCollection,The following statement contains a magic number: Assert.Equal(2' products.Count);
Magic Number,SpeakEasy.IntegrationTests,BasicAsyncHttpMethods,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\BasicAsyncHttpMethods.cs,ShouldBeAbleToUseNumericResponseCodes,The following statement contains a magic number: var success = await client                  .Post("search"' new { username = "unknown-username" })                  .Is(422);
Magic Number,SpeakEasy.IntegrationTests,BasicAsyncHttpMethods,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\BasicAsyncHttpMethods.cs,ShouldUseAdditionalSegmentsAsQueryParamsWhenBodySpecified,The following statement contains a magic number: var success = await client                  .Put(new { }' "products/:id/reservations"' new { id = 1' priceIncrease = 500 })                  .Is(HttpStatusCode.Created);
Magic Number,SpeakEasy.IntegrationTests,UploadingDownloadingFiles,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\UploadingDownloadingFiles.cs,ShouldDownloadFileAsByteArray,The following statement contains a magic number: var contents = await client.Get("invoices/:id"' new { id = 5 })                  .OnOk()                  .AsByteArray();
Magic Number,SpeakEasy.IntegrationTests,UploadingDownloadingFiles,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\UploadingDownloadingFiles.cs,ShouldDownloadFileAsFile,The following statement contains a magic number: var file = await client.Get("invoices/:id"' new { id = 5 })                  .OnOk()                  .AsFile();
Magic Number,SpeakEasy.IntegrationTests,UploadingDownloadingFiles,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\UploadingDownloadingFiles.cs,ShouldUploadOneFileByteArray,The following statement contains a magic number: Assert.Equal(3' result.Parameters.Length);
Magic Number,SpeakEasy.IntegrationTests,UploadingDownloadingFiles,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\UploadingDownloadingFiles.cs,ShouldUploadManyFileByteArray,The following statement contains a magic number: var result = await client                  .Post(files' "invoices"' new { id = 123 })                  .On(HttpStatusCode.OK)                  .As<FileUploadResult>();
Magic Number,SpeakEasy.IntegrationTests,UploadingDownloadingFiles,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\UploadingDownloadingFiles.cs,ShouldUploadManyFileByteArray,The following statement contains a magic number: Assert.Equal(3' result.TextFileInfos.Length);
Magic Number,SpeakEasy.IntegrationTests.Controllers,MiddlewareController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\MiddlewareController.cs,Get,The following statement contains a magic number: return new ContentResult              {                  Content = header'                  ContentType = "text/plain"'                  StatusCode = 200              };
Magic Number,SpeakEasy.IntegrationTests.Controllers,MiddlewareController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\MiddlewareController.cs,Get,The following statement contains a magic number: return new ContentResult              {                  Content = userAgent'                  ContentType = "text/plain"'                  StatusCode = 200              };
Magic Number,SpeakEasy.IntegrationTests.Controllers,ProductsController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\ProductsController.cs,ProductsController,The following statement contains a magic number: products = new[]              {                  new Product { Id = 1' Name = "Chocolate Cake"' Category = "Foods" }'                  new Product { Id = 2' Name = "Ice cream"' Category = "Foods" }              };
Magic Number,SpeakEasy.IntegrationTests.Controllers,ProductsController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\ProductsController.cs,GetOverview,The following statement contains a magic number: return new ContentResult              {                  Content = "a super string"'                  ContentType = "text/plain"'                  StatusCode = 200              };
Magic Number,SpeakEasy.IntegrationTests.Controllers,ProductsController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\ProductsController.cs,Post,The following statement contains a magic number: return CreatedAtRoute(nameof(GetProduct)' new { id = 33 }' product);
Magic Number,SpeakEasy.IntegrationTests.Controllers,ReservationsController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\ReservationsController.cs,Put,The following statement contains a magic number: return StatusCode(201);
Magic Number,SpeakEasy.IntegrationTests.Controllers,ReservationsController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\ReservationsController.cs,Put,The following statement contains a magic number: priceIncrease > 100
Magic Number,SpeakEasy.IntegrationTests.Controllers,SearchController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\SearchController.cs,Post,The following statement contains a magic number: return StatusCode(422);
Missing Default,SpeakEasy.IntegrationTests.Controllers,InvoicesController,D:\research\architectureSmells\repos\jonnii_SpeakEasy\src\SpeakEasy.IntegrationTests\Controllers\InvoicesController.cs,Post,The following switch statement is missing a default case: switch (contentDisposition)                  {                      case var disposition when MultipartRequestHelper.HasAttachment(disposition):                          fileInfos.Add(await GetTextFileInfo(section' contentDisposition).ConfigureAwait(false));                          break;                        case var disposition when MultipartRequestHelper.HasFormDataContentDisposition(disposition):                            var (key' value) = await GetKeyAndValue(section' contentDisposition).ConfigureAwait(false);                            formAccumulator.Append(key' value);                            if (formAccumulator.ValueCount > DefaultFormOptions.ValueCountLimit)                          {                              throw new InvalidDataException($"Form key count limit {DefaultFormOptions.ValueCountLimit} exceeded.");                          }                            break;                  }
