Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,Cyclomatic complexity of the method is 9
Complex Method,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,Cyclomatic complexity of the method is 9
Complex Method,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PossibleMoves,Cyclomatic complexity of the method is 26
Complex Method,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckMiddleForMove,Cyclomatic complexity of the method is 8
Complex Method,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,Cyclomatic complexity of the method is 32
Long Parameter List,ProjectNMM.Model,ArtificialIntelligence,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ArtificialIntelligence.cs,ChoseRandomPlaystone,The method has 5 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The method has 5 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckHorizontalForMill,The method has 6 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckVerticalForMill,The method has 6 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PossibleMoves,The method has 5 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckCornerForMove,The method has 5 parameters.
Long Parameter List,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckMiddleForMove,The method has 5 parameters.
Long Statement,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,The length of the statement  "	if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6 || _boardStates [_boardStates.Count - 1].PlaystonesPlayer2 > 6) { " is 129.
Long Statement,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The length of the statement  "		if (!AreMovesPossible (CurrentPlayer' CurrentPlaystones) && !(ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3)) { " is 144.
Long Statement,ProjectNMM.Model,ModelControl,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelControl.cs,ExecuteMachineStep,The length of the statement  "		ArtificialIntelligence.ChoseRandomPlaystone (_gameHandler.NotCurrentPlayer' Playstones' ref index1' ref index2' _random); " is 121.
Long Statement,ProjectNMM.Model,ModelControl,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelControl.cs,ExecuteMachineStep,The length of the statement  "	else if (!_gameHandler.GameHasStarted || (MoveIsActive && ModelHelpFunctions.CountPlaystoneStates (PlaystoneState.Selectable' Playstones) > 0)) { " is 145.
Long Statement,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The length of the statement  "	if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0)) " is 257.
Long Statement,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The length of the statement  "	if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1)) " is 257.
Long Statement,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The length of the statement  "	if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2)) " is 257.
Complex Conditional,ProjectNMM.Model,ModelControl,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelControl.cs,SaveGame,The conditional expression  "path == "" || !_gameHandler.GameHasStarted || _gameHandler.Game.MoveIsActive || !GameInProgress"  is complex.
Complex Conditional,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The conditional expression  "(index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0)"  is complex.
Complex Conditional,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The conditional expression  "(index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1)"  is complex.
Complex Conditional,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The conditional expression  "(index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2)"  is complex.
Complex Conditional,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,RemoveSpecialCharacters,The conditional expression  "(c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '.' || c == '_' || c == ' '"  is complex.
Magic Number,ProjectNMM.Model,ArtificialIntelligence,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ArtificialIntelligence.cs,ChoseRandomPlaystone,The following statement contains a magic number: while (true) {  	int i = rnd.Next (7)' j = rnd.Next (7);  	if (playstones [i' j] == state) {  		index1 = i;  		index2 = j;  		break;  	}  }  
Magic Number,ProjectNMM.Model,ArtificialIntelligence,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ArtificialIntelligence.cs,ChoseRandomPlaystone,The following statement contains a magic number: while (true) {  	int i = rnd.Next (7)' j = rnd.Next (7);  	if (playstones [i' j] == state) {  		index1 = i;  		index2 = j;  		break;  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,BoardState,The following statement contains a magic number: Playstones = new PlaystoneState[7' 7];  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,BoardState,The following statement contains a magic number: Playstones = new PlaystoneState[7' 7];  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,Clone,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		newState.Playstones [i' j] = Playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,Clone,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		newState.Playstones [i' j] = Playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,Clone,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	newState.Playstones [i' j] = Playstones [i' j];  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: SerializablePlaystones = new PlaystoneState[49];  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		SerializablePlaystones [i * 7 + j] = Playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		SerializablePlaystones [i * 7 + j] = Playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		SerializablePlaystones [i * 7 + j] = Playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: for (int j = 0; j < 7; j++) {  	SerializablePlaystones [i * 7 + j] = Playstones [i' j];  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: for (int j = 0; j < 7; j++) {  	SerializablePlaystones [i * 7 + j] = Playstones [i' j];  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToNormalArray,The following statement contains a magic number: SerializablePlaystones [i * 7 + j] = Playstones [i' j];  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToDimensionalArray,The following statement contains a magic number: foreach (PlaystoneState serPlaystone in SerializablePlaystones) {  	index2++;  	if (index2 >= 7) {  		index2 = 0;  		index1++;  	}  	Playstones [index1' index2] = serPlaystone;  }  
Magic Number,ProjectNMM.Model,BoardState,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameData.cs,ChangeToDimensionalArray,The following statement contains a magic number: if (index2 >= 7) {  	index2 = 0;  	index1++;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,The following statement contains a magic number: if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6 || _boardStates [_boardStates.Count - 1].PlaystonesPlayer2 > 6) {  	Game.GameIsOver = true;  	CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  	if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6)  		Game.Winner = PlaystoneState.Player1;  	else  		Game.Winner = PlaystoneState.Player2;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,The following statement contains a magic number: if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6 || _boardStates [_boardStates.Count - 1].PlaystonesPlayer2 > 6) {  	Game.GameIsOver = true;  	CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  	if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6)  		Game.Winner = PlaystoneState.Player1;  	else  		Game.Winner = PlaystoneState.Player2;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,The following statement contains a magic number: if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6 || _boardStates [_boardStates.Count - 1].PlaystonesPlayer2 > 6) {  	Game.GameIsOver = true;  	CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  	if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6)  		Game.Winner = PlaystoneState.Player1;  	else  		Game.Winner = PlaystoneState.Player2;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,PlaystoneChanged,The following statement contains a magic number: if (_boardStates [_boardStates.Count - 1].PlaystonesPlayer1 > 6)  	Game.Winner = PlaystoneState.Player1;  else  	Game.Winner = PlaystoneState.Player2;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,UndoLastTurn,The following statement contains a magic number: if (!GameHasStarted || _boardStates.Count < 2 || Game.GameIsOver)  	return;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,SetPlaystone,The following statement contains a magic number: if (LegimateTurns > 16) {  	GameHasStarted = true;  	LegimateTurns = 0;  	BoardState tmpState = _boardStates [_boardStates.Count - 1].Clone ();  	Game.BoardStates = new List<BoardState> ();  	Game.BoardStates.Add (tmpState);  	_boardStates = Game.BoardStates;  	ModelHelpFunctions.ReplacePlaystoneStates (PlaystoneState.Selectable' PlaystoneState.Neutral' CurrentPlaystones);  }  else  	LegimateTurns++;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (!Game.MoveIsActive && CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Move playstone  	// If the player cannot move' he loses  	if (!AreMovesPossible (CurrentPlayer' CurrentPlaystones) && !(ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3)) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoMovesPossible;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	// The player can jump if he has only 3 playstones left  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	NextStep (index1' index2' CurrentPlaystones [index1' index2]);  	CurrentPlayer = NotCurrentPlayer;  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) <= 3)  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones' true);  	else  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	Game.MoveIsActive = true;  	LastTurnWasMill = false;  	return;  }  else if (!Game.MoveIsActive) {  	// Wrong playstone chosen  	CurrentPlayerEvent = GameEvent.InvalidPlaystone;  	return;  }  else if (CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Calculate possible moves  	ModelHelpFunctions.ReplacePlaystoneStates (PlaystoneState.Selectable' PlaystoneState.Neutral' CurrentPlaystones);  	PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	return;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (!Game.MoveIsActive && CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Move playstone  	// If the player cannot move' he loses  	if (!AreMovesPossible (CurrentPlayer' CurrentPlaystones) && !(ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3)) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoMovesPossible;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	// The player can jump if he has only 3 playstones left  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	NextStep (index1' index2' CurrentPlaystones [index1' index2]);  	CurrentPlayer = NotCurrentPlayer;  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) <= 3)  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones' true);  	else  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	Game.MoveIsActive = true;  	LastTurnWasMill = false;  	return;  }  else if (!Game.MoveIsActive) {  	// Wrong playstone chosen  	CurrentPlayerEvent = GameEvent.InvalidPlaystone;  	return;  }  else if (CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Calculate possible moves  	ModelHelpFunctions.ReplacePlaystoneStates (PlaystoneState.Selectable' PlaystoneState.Neutral' CurrentPlaystones);  	PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	return;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (!Game.MoveIsActive && CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Move playstone  	// If the player cannot move' he loses  	if (!AreMovesPossible (CurrentPlayer' CurrentPlaystones) && !(ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3)) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoMovesPossible;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	// The player can jump if he has only 3 playstones left  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3) {  		Game.GameIsOver = true;  		CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  		Game.Winner = NotCurrentPlayer;  		return;  	}  	NextStep (index1' index2' CurrentPlaystones [index1' index2]);  	CurrentPlayer = NotCurrentPlayer;  	if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) <= 3)  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones' true);  	else  		PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	Game.MoveIsActive = true;  	LastTurnWasMill = false;  	return;  }  else if (!Game.MoveIsActive) {  	// Wrong playstone chosen  	CurrentPlayerEvent = GameEvent.InvalidPlaystone;  	return;  }  else if (CurrentPlaystones [index1' index2] == CurrentPlayer) {  	// Calculate possible moves  	ModelHelpFunctions.ReplacePlaystoneStates (PlaystoneState.Selectable' PlaystoneState.Neutral' CurrentPlaystones);  	PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  	Game.InactiveMoveIndex1 = index1;  	Game.InactiveMoveIndex2 = index2;  	return;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (!AreMovesPossible (CurrentPlayer' CurrentPlaystones) && !(ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3)) {  	Game.GameIsOver = true;  	CurrentPlayerEvent = GameEvent.GameOverNoMovesPossible;  	Game.Winner = NotCurrentPlayer;  	return;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) < 3) {  	Game.GameIsOver = true;  	CurrentPlayerEvent = GameEvent.GameOverNoPlaystonesLeft;  	Game.Winner = NotCurrentPlayer;  	return;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,MovePlaystone,The following statement contains a magic number: if (ModelHelpFunctions.CountPlaystoneStates (CurrentPlayer' CurrentPlaystones) <= 3)  	PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones' true);  else  	PossibleMoves (index1' index2' CurrentPlayer' CurrentPlaystones);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,RemovePlaystone,The following statement contains a magic number: if (_boardStates.Count >= 2)  	_boardStates [_boardStates.Count - 1].BeforeLastTurnWasMill = true;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 == 3) {  	if (index2 <= 2)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index2 >= 4)  		isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckVerticalForMill (index2' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  else if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 <= 2)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 >= 4)  	isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckHorizontalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index2 == 3) {  	if (index1 <= 2)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  	else if (index1 >= 4)  		isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  	if (isMill)  		return true;  	if (CheckHorizontalForMill (index1' playerToCheck' playstones' checkPartial))  		return true;  	else  		return false;  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 <= 2)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  else if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 0' 2);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: if (index1 >= 4)  	isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,IsMill,The following statement contains a magic number: isMill = CheckVerticalForMill (3' playerToCheck' playstones' checkPartial' 4' 6);  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckHorizontalForMill,The following statement contains a magic number: if (tmpInt == 2 && checkPartial)  	return true;  else if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckHorizontalForMill,The following statement contains a magic number: if (tmpInt == 2 && checkPartial)  	return true;  else if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckHorizontalForMill,The following statement contains a magic number: if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckVerticalForMill,The following statement contains a magic number: if (tmpInt == 2 && checkPartial)  	return true;  else if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckVerticalForMill,The following statement contains a magic number: if (tmpInt == 2 && checkPartial)  	return true;  else if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckVerticalForMill,The following statement contains a magic number: if (tmpInt == 3)  	return true;  else  	return false;  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,AreMovesPossible,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == activePlayer) {  			PlaystoneState['] stones = ModelHelpFunctions.CopyPlaystoneStates (playstones);  			PossibleMoves (i' j' activePlayer' stones);  			if (ModelHelpFunctions.CountPlaystoneStates (PlaystoneState.Selectable' stones) > 0)  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,AreMovesPossible,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == activePlayer) {  			PlaystoneState['] stones = ModelHelpFunctions.CopyPlaystoneStates (playstones);  			PossibleMoves (i' j' activePlayer' stones);  			if (ModelHelpFunctions.CountPlaystoneStates (PlaystoneState.Selectable' stones) > 0)  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,AreMovesPossible,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (playstones [i' j] == activePlayer) {  		PlaystoneState['] stones = ModelHelpFunctions.CopyPlaystoneStates (playstones);  		PossibleMoves (i' j' activePlayer' stones);  		if (ModelHelpFunctions.CountPlaystoneStates (PlaystoneState.Selectable' stones) > 0)  			return true;  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesInMills,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == player) {  			if (IsMill (i' j' player' playstones))  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesInMills,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == player) {  			if (IsMill (i' j' player' playstones))  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesInMills,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (playstones [i' j] == player) {  		if (IsMill (i' j' player' playstones))  			return true;  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesNotInMills,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == player) {  			if (!IsMill (i' j' player' playstones))  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesNotInMills,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == player) {  			if (!IsMill (i' j' player' playstones))  				return true;  		}  	}  }  
Magic Number,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,ArePlaystonesNotInMills,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (playstones [i' j] == player) {  		if (!IsMill (i' j' player' playstones))  			return true;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [0' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [0' 6] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 6] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 6] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [6' 6] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [6' 6] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [6' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [6' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [6' 0] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 0] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [1' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [1' 5] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 5] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 5] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [5' 5] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [5' 5] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [5' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [5' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [5' 1] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 1] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [2' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 4] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 3] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [4' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,InitializePlaystoneStates,The following statement contains a magic number: playstones [3' 2] = defaultValue;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,SetPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		playstones [i' j] = state;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,SetPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		playstones [i' j] = state;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,SetPlaystoneStates,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	playstones [i' j] = state;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,ReplacePlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == stateOld)  			playstones [i' j] = stateNew;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,ReplacePlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == stateOld)  			playstones [i' j] = stateNew;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,ReplacePlaystoneStates,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (playstones [i' j] == stateOld)  		playstones [i' j] = stateNew;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CountPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == state)  			tmpInt++;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CountPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (playstones [i' j] == state)  			tmpInt++;  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CountPlaystoneStates,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (playstones [i' j] == state)  		tmpInt++;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CopyPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		stones [i' j] = playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CopyPlaystoneStates,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		stones [i' j] = playstones [i' j];  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,CopyPlaystoneStates,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	stones [i' j] = playstones [i' j];  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 0 && index2 == 0) || (index1 == 0 && index2 == 3) || (index1 == 0 && index2 == 6) || (index1 == 3 && index2 == 6) || (index1 == 6 && index2 == 6) || (index1 == 6 && index2 == 3) || (index1 == 6 && index2 == 0) || (index1 == 3 && index2 == 0))  	return BoardSquare.OutterSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 1 && index2 == 1) || (index1 == 1 && index2 == 3) || (index1 == 1 && index2 == 5) || (index1 == 3 && index2 == 5) || (index1 == 5 && index2 == 5) || (index1 == 5 && index2 == 3) || (index1 == 5 && index2 == 1) || (index1 == 3 && index2 == 1))  	return BoardSquare.MiddleSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetSquare,The following statement contains a magic number: if ((index1 == 2 && index2 == 2) || (index1 == 2 && index2 == 3) || (index1 == 2 && index2 == 4) || (index1 == 3 && index2 == 4) || (index1 == 4 && index2 == 4) || (index1 == 4 && index2 == 3) || (index1 == 4 && index2 == 2) || (index1 == 3 && index2 == 2))  	return BoardSquare.InnerSquare;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: switch (GetSquare (index1' index2)) {  case BoardSquare.OutterSquare:  	if (index1 == 0 && index2 == 0)  		return SquarePosition.TopLeft;  	if (index1 == 0 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 0 && index2 == 6)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 6)  		return SquarePosition.Right;  	if (index1 == 6 && index2 == 6)  		return SquarePosition.BottomRight;  	if (index1 == 6 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 6 && index2 == 0)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 0)  		return SquarePosition.Left;  	break;  case BoardSquare.MiddleSquare:  	if (index1 == 1 && index2 == 1)  		return SquarePosition.TopLeft;  	if (index1 == 1 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 1 && index2 == 5)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 5)  		return SquarePosition.Right;  	if (index1 == 5 && index2 == 5)  		return SquarePosition.BottomRight;  	if (index1 == 5 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 5 && index2 == 1)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 1)  		return SquarePosition.Left;  	break;  case BoardSquare.InnerSquare:  	if (index1 == 2 && index2 == 2)  		return SquarePosition.TopLeft;  	if (index1 == 2 && index2 == 3)  		return SquarePosition.TopMiddle;  	if (index1 == 2 && index2 == 4)  		return SquarePosition.TopRight;  	if (index1 == 3 && index2 == 4)  		return SquarePosition.Right;  	if (index1 == 4 && index2 == 4)  		return SquarePosition.BottomRight;  	if (index1 == 4 && index2 == 3)  		return SquarePosition.BottomMiddle;  	if (index1 == 4 && index2 == 2)  		return SquarePosition.BottomLeft;  	if (index1 == 3 && index2 == 2)  		return SquarePosition.Left;  	break;  default:  	break;  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 0 && index2 == 3)  	return SquarePosition.TopMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 0 && index2 == 6)  	return SquarePosition.TopRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 6)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 6)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 6 && index2 == 6)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 6 && index2 == 6)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 6 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 6 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 6 && index2 == 0)  	return SquarePosition.BottomLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 0)  	return SquarePosition.Left;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 1 && index2 == 3)  	return SquarePosition.TopMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 1 && index2 == 5)  	return SquarePosition.TopRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 5)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 5)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 5 && index2 == 5)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 5 && index2 == 5)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 5 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 5 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 5 && index2 == 1)  	return SquarePosition.BottomLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 1)  	return SquarePosition.Left;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 2)  	return SquarePosition.TopLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 2)  	return SquarePosition.TopLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 3)  	return SquarePosition.TopMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 3)  	return SquarePosition.TopMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 4)  	return SquarePosition.TopRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 2 && index2 == 4)  	return SquarePosition.TopRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 4)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 4)  	return SquarePosition.Right;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 4)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 4)  	return SquarePosition.BottomRight;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 3)  	return SquarePosition.BottomMiddle;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 2)  	return SquarePosition.BottomLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 4 && index2 == 2)  	return SquarePosition.BottomLeft;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 2)  	return SquarePosition.Left;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetPosition,The following statement contains a magic number: if (index1 == 3 && index2 == 2)  	return SquarePosition.Left;  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetIndexes,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (GetSquare (i' j) == square && GetPosition (i' j) == position) {  			index1 = i;  			index2 = j;  			return;  		}  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetIndexes,The following statement contains a magic number: for (int i = 0; i <= 6; i++) {  	for (int j = 0; j <= 6; j++) {  		if (GetSquare (i' j) == square && GetPosition (i' j) == position) {  			index1 = i;  			index2 = j;  			return;  		}  	}  }  
Magic Number,ProjectNMM.Model,ModelHelpFunctions,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\ModelHelpFunctions.cs,GetIndexes,The following statement contains a magic number: for (int j = 0; j <= 6; j++) {  	if (GetSquare (i' j) == square && GetPosition (i' j) == position) {  		index1 = i;  		index2 = j;  		return;  	}  }  
Missing Default,ProjectNMM.Model,GameFlowHandler,C:\repos\TeamK_ProjectNMM\ProjectNMM.Model\GameFlowHandler.cs,CheckMiddleForMove,The following switch statement is missing a default case: switch (square) {  case BoardSquare.OutterSquare:  case BoardSquare.InnerSquare:  	CheckPositionForMove (playstones' BoardSquare.MiddleSquare' ModelHelpFunctions.GetPosition (index1' index2));  	break;  case BoardSquare.MiddleSquare:  	CheckPositionForMove (playstones' BoardSquare.OutterSquare' ModelHelpFunctions.GetPosition (index1' index2));  	CheckPositionForMove (playstones' BoardSquare.InnerSquare' ModelHelpFunctions.GetPosition (index1' index2));  	break;  }  
