Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mehdime.Entity,DbContextCollection,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextCollection.cs,CommitAsync,Cyclomatic complexity of the method is 8
Complex Method,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScope,Cyclomatic complexity of the method is 10
Complex Method,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScopeAsync,Cyclomatic complexity of the method is 10
Complex Method,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,Dispose,Cyclomatic complexity of the method is 8
Long Statement,Mehdime.Entity,DbContextCollection,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextCollection.cs,Commit,The length of the statement  "                throw new InvalidOperationException("You can't call Commit() or Rollback() more than once on a DbContextCollection. All the changes in the DbContext instances managed by this collection have already been saved or rollback and all database transactions have been completed and closed. If you wish to make more data changes' create a new DbContextCollection and make your changes there."); " is 387.
Long Statement,Mehdime.Entity,DbContextCollection,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextCollection.cs,CommitAsync,The length of the statement  "                throw new InvalidOperationException("You can't call Commit() or Rollback() more than once on a DbContextCollection. All the changes in the DbContext instances managed by this collection have already been saved or rollback and all database transactions have been completed and closed. If you wish to make more data changes' create a new DbContextCollection and make your changes there."); " is 387.
Long Statement,Mehdime.Entity,DbContextCollection,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextCollection.cs,Rollback,The length of the statement  "                throw new InvalidOperationException("You can't call Commit() or Rollback() more than once on a DbContextCollection. All the changes in the DbContext instances managed by this collection have already been saved or rollback and all database transactions have been completed and closed. If you wish to make more data changes' create a new DbContextCollection and make your changes there."); " is 387.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,SaveChanges,The length of the statement  "                throw new InvalidOperationException("You cannot call SaveChanges() more than once on a DbContextScope. A DbContextScope is meant to encapsulate a business transaction: create the scope at the start of the business transaction and then call SaveChanges() at the end. Calling SaveChanges() mid-way through a business transaction doesn't make sense and most likely mean that you should refactor your service method into two separate service method that each create their own DbContextScope and each implement a single business transaction."); " is 539.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,SaveChangesAsync,The length of the statement  "                throw new InvalidOperationException("You cannot call SaveChanges() more than once on a DbContextScope. A DbContextScope is meant to encapsulate a business transaction: create the scope at the start of the business transaction and then call SaveChanges() at the end. Calling SaveChanges() mid-way through a business transaction doesn't make sense and most likely mean that you should refactor your service method into two separate service method that each create their own DbContextScope and each implement a single business transaction."); " is 539.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScope,The length of the statement  "                    _parentScope._dbContexts.InitializedDbContexts.Values.SingleOrDefault(parentContext => parentContext.GetType() == contextInCurrentScope.GetType()) " is 146.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScope,The length of the statement  "                    continue; // No DbContext of this type has been created in the parent scope yet. So no need to refresh anything for this DbContext type. " is 136.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScopeAsync,The length of the statement  "                    _parentScope._dbContexts.InitializedDbContexts.Values.SingleOrDefault(parentContext => parentContext.GetType() == contextInCurrentScope.GetType()) " is 146.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,RefreshEntitiesInParentScopeAsync,The length of the statement  "                                await correspondingParentContext.ObjectContext.RefreshAsync(RefreshMode.StoreWins' stateInParentScope.Entity).ConfigureAwait(false); " is 132.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,Dispose,The length of the statement  "                throw new InvalidOperationException("DbContextScope instances must be disposed of in the order in which they were created!"); " is 125.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,Dispose,The length of the statement  "                    var message = @"PROGRAMMING ERROR - When attempting to dispose a DbContextScope' we found that our parent DbContextScope has already been disposed! This means that someone started a parallel flow of execution (e.g. created a TPL task' created a thread or enqueued a work item on the ThreadPool) within the context of a DbContextScope without suppressing the ambient context first.  " is 380.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,Dispose,The length of the statement  "3) Change the code so that the ambient context is suppressed before the parallel task is created. You can do this with IDbContextScopeFactory.SuppressAmbientContext() (wrap the parallel task creation code block in this).  " is 220.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,GetAmbientScope,The length of the statement  "                return null; // Either no ambient context has been set or we've crossed an app domain boundary and have (intentionally) lost the ambient context " is 144.
Long Statement,Mehdime.Entity,DbContextScope,C:\repos\mehdime_DbContextScope\Mehdime.Entity\Implementations\DbContextScope.cs,GetAmbientScope,The length of the statement  "            System.Diagnostics.Debug.WriteLine("Programming error detected. Found a reference to an ambient DbContextScope in the CallContext but didn't have an instance for it in our DbContextScopeInstances table. This most likely means that this DbContextScope instance wasn't disposed of properly. DbContextScope instance must always be disposed. Review the code for any DbContextScope instance used outside of a 'using' block and fix it so that all DbContextScope instances are disposed of."); " is 485.
