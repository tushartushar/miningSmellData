Implementation smell,Namespace,Class,File,Method,Description
Long Method,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The method has 119 lines of code.
Complex Method,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,Cyclomatic complexity of the method is 9
Long Parameter List,SemanticDatabaseReceptor,FieldValue,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,FieldValue,The method has 5 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,InsertIfRecordDoesntExist,The method has 5 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryUniqueness,The method has 6 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,BuildUniqueQueryStatement,The method has 5 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,Preprocess,The method has 5 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,FixupBaseType,The method has 7 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryType,The method has 5 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,CreateSqlStatement,The method has 9 parameters.
Long Parameter List,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,BuildQuery,The method has 6 parameters.
Long Statement,SemanticDatabaseReceptor,PostgresIO,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\PostgresIO.cs,GetColumns,The length of the statement  "	cmd.CommandText = "select column_name' data_type' character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = " + tableName.SingleQuote (); " is 155.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,UserConfigurationUpdated,The length of the statement  "	// TODO: Most of this (verifying a list of protocols) is probaby a rather common thing to do.  Move into STS as "VerifyProtocolsExist". " is 135.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ProcessCarrier,The length of the statement  "	// TODO: This is a major kludge.  What we need to do is change Action to a Func' returning true of the base handler processed the carrier. " is 138.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,CreateTableFieldValueList,The length of the statement  "		tfvEntry.FieldValues.Add (new FieldValue (tfvEntry' fieldName' null' child.Element.Struct.Unique' FieldValueType.SemanticType)); " is 128.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ProcessSTS,The length of the statement  "	// This is very similar to an ST without child ST's' but here we also use ST's that are designated as unique to build the composite key. " is 136.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ArbitrateUniqueness,The length of the statement  "		List<IFullyQualifiedNativeType> fieldValues = rsys.SemanticTypeSystem.GetFullyQualifiedNativeTypeValues (signal' sts.DeclTypeName' false); " is 138.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ArbitrateUniqueness,The length of the statement  "		// Note that a unique semantic element will automatically set the unique field for its native type children' subchildren' etc. " is 126.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ArbitrateUniqueness,The length of the statement  "		List<IFullyQualifiedNativeType> fieldValues = rsys.SemanticTypeSystem.GetFullyQualifiedNativeTypeValues (signal' sts.DeclTypeName' false).Where (fqnt => fqnt.NativeType.UniqueField).ToList (); " is 192.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,Insert,The length of the statement  "	List<IFullyQualifiedNativeType> ntFieldValues = rsys.SemanticTypeSystem.GetFullyQualifiedNativeTypeValues (signal' sts.DeclTypeName' false); " is 140.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,BuildUniqueQueryStatement,The length of the statement  "		sb.Append (String.Join (" and "' fkValues.Where (fk => fk.UniqueField || allFKs).Select (fk => dbio.Delimited (fk.FieldName) + " = @" + fk.FieldName))); " is 152.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,AddParametersToCommand,The length of the statement  "		fkValues.Where (fk => fk.UniqueField || allFKs).ForEach (fk => cmd.Parameters.Add (dbio.CreateParameter (fk.FieldName' fk.ID))); " is 128.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,Preprocess,The length of the statement  "		// The # of records.  The query string will be "top [x] [ST]" so we separate out [x] because it's between the first two spaces encountered in the string. " is 153.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "			Dictionary<string' List<Tuple<ISemanticTypeStruct' ISemanticTypeStruct>>> stSemanticTypes = new Dictionary<string' List<Tuple<ISemanticTypeStruct' ISemanticTypeStruct>>> (); " is 173.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "			Dictionary<TypeIntersection' List<ISemanticTypeStruct>> typeIntersectionStructs = new Dictionary<TypeIntersection' List<ISemanticTypeStruct>> (); " is 145.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "			bool parent0ElementUnique = parent0.SemanticElements.Any (se => se.Name == sharedStruct.DeclTypeName && se.UniqueField); " is 120.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// If the shared structure is a unique field in both parent structures' then we can do then join with the FK_ID's rather than the underlying data. " is 146.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// IMPORTANT: Where the parent tables in the "on" statement are the parents of the respective shared structure' not the root query structure name (which just so happens to be the same in this case.) " is 198.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// If there is NOT a unique key at either or both ends' then we have to drill into all native types at the joined structure level for both query paths' which would look like: " is 174.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// "join [one of the tables] on Url1.Value = Url2.Value [and...]" where the and aggregates all the NT values shared between the two query paths. " is 144.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// If both reference a non-unique structure' we get an intersection' but then we need to check the parent to see if the element is unique for both paths. " is 153.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// TODO: At the moment' we just pick the first shared structure.  At some point we want to pick one that can work with FK's first' then NT unique key values if we can't find an FK join. " is 185.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// TODO: If there's more than one shared structure' try an pick the one that is unique or who's parent is a unique element. " is 123.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// The shared struct may not be the immediate child of parent0' therefore we need to drill into parent0 to find this child. " is 123.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				bool parent1ElementUnique = parent1.SemanticElements.Any (se => se.Name == sharedStruct.DeclTypeName && se.UniqueField); " is 120.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "				// If the shared structure is unique' or the elements referencing the structure are unique in both parents' then we can use the FK ID between the two parent ST's to join the structures. " is 185.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "					// TODO: We use a left join here because we want to include records from the first table that may not match with the second table.  This should be user definable' perhaps the way Oracle used to do it with the "+" to indicate a left join rather than an inner join. " is 263.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "					// TODO: The root table name of the second table (parent1) doesn't need an "as" because it will only be referenced once (like in the "from" clause for parent0)' however' this means  " is 180.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "						// The right side should' in this case' be the ID' not an FK' as the left side is joining to the actual table rather than both referencing a common shared FK. " is 158.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "						joins0.Add ("left join " + parent1.DeclTypeName + " on " + parent1.DeclTypeName + ".FK_" + sharedStruct.DeclTypeName + "ID = " + rightSideTableName + ".ID"); " is 157.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "						joins0.Add ("left join " + parent1.DeclTypeName + " on " + parent1.DeclTypeName + ".FK_" + sharedStruct.DeclTypeName + "ID = " + rightSideTableName + ".FK_" + sharedStruct.DeclTypeName + "ID"); " is 193.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryDatabase,The length of the statement  "			string sqlQuery = "select " + String.Join ("' "' fields0) + " \r\nfrom " + sts0.DeclTypeName + " \r\n" + String.Join (" \r\n"' joins0); " is 135.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ReadResults,The length of the statement  "			// Now create a custom type if it doesn't already exist.  The custom type name is formed from the type names in the join. " is 121.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "	// This requires that we process joins 1..n in a specific order to ensure that joins to ST's are first defined' then referenced. " is 128.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "			List<string> sharedStructTypeNames = stSemanticTypes [types [baseIdx]].Select (t1 => t1.Item1.DeclTypeName).Intersect (stSemanticTypes [types [idx]].Select (t2 => t2.Item1.DeclTypeName)).ToList (); " is 197.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "			// Returns a list of intersecting ST's between the base ST and another ST where the struct itself has semantic elements' as these can be joined using their FK's. " is 161.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "			List<ISemanticTypeStruct> sharedStructs = stSemanticTypes [types [baseIdx]].Select (t1 => t1.Item1).Intersect (stSemanticTypes [types [idx]].Select (t2 => t2.Item1)).Where (st => st.SemanticElements.Count > 0).ToList (); " is 220.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "				// Loosen our requirement' as we can include structs with no SE sub-types but whose parent elements are both designated as unique. " is 130.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "				sharedStructs = stSemanticTypes [types [baseIdx]].Select (t1 => t1.Item1).Intersect (stSemanticTypes [types [idx]].Select (t2 => t2.Item1)).ToList (); " is 150.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,GetJoinOrder,The length of the statement  "				// List<ISemanticTypeStruct> sharedStructs = stSemanticTypes[types[baseIdx]].Select(t1 => t1.Item1).Intersect(stSemanticTypes[types[idx]].Select(t2 => t2.Item1)).ToList(); " is 171.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,QueryType,The length of the statement  "	string sqlQuery = CreateSqlStatement (signal' sts' fields' joins' fqntAliases' whereClause' orderBy' maxRecords' out parameters); " is 129.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,CreateSqlStatement,The length of the statement  "	string sqlQuery = "select " + String.Join ("' "' fields) + " \r\nfrom " + sts.DeclTypeName + " \r\n" + String.Join (" \r\n"' joins); " is 132.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ParseOrderBy,The length of the statement  "				EmitException ("The order by field " + orderByField + " cannot be resolved to a single native type.  It requires further specification to disambiguate from other semantic types."); " is 180.
Long Statement,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,BuildQuery,The length of the statement  "		joins.Add ("left join " + childsts.DeclTypeName + " as " + asChildName + " on " + asChildName + ".ID = " + parentName + ".FK_" + childsts.DeclTypeName + "ID"); " is 159.
Empty Catch Block,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,Terminate,The method has an empty catch block.
Empty Catch Block,SemanticDatabaseReceptor,SQLiteIO,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SQLiteIO.cs,Close,The method has an empty catch block.
Magic Number,SemanticDatabaseReceptor,SemanticDatabase,F:\newReposMay17\cliftonm_HOPE\Receptors\SemanticDatabaseReceptor\SemanticDatabaseReceptor.cs,ParseWhereClause,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (where.Contains ("@" + i)) {  		parameters [i.ToString ()] = GetValue (signal' "Param" + i);  	}  }  
