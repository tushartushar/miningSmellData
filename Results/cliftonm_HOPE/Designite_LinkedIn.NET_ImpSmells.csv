Implementation smell,Namespace,Class,File,Method,Description
Long Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The method has 113 lines of code.
Long Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The method has 151 lines of code.
Long Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The method has 106 lines of code.
Long Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildFullProfile,The method has 103 lines of code.
Long Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildBasicProfile,The method has 117 lines of code.
Complex Method,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseObject,Cyclomatic complexity of the method is 20
Complex Method,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseValue,Cyclomatic complexity of the method is 11
Complex Method,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,Cyclomatic complexity of the method is 18
Complex Method,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,Cyclomatic complexity of the method is 25
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareSearchParams,Cyclomatic complexity of the method is 14
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareBucketsParams,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareFacetsParams,Cyclomatic complexity of the method is 44
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,Cyclomatic complexity of the method is 54
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGetUpdatesFields,Cyclomatic complexity of the method is 20
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGroupFields,Cyclomatic complexity of the method is 18
Complex Method,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGroupPostFields,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetMembers,Cyclomatic complexity of the method is 17
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetMember,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getMember,Cyclomatic complexity of the method is 11
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,Cyclomatic complexity of the method is 32
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getUpdates,Cyclomatic complexity of the method is 17
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,SendInvitation,Cyclomatic complexity of the method is 20
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,Cyclomatic complexity of the method is 13
Complex Method,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,ChangeGroupSettings,Cyclomatic complexity of the method is 11
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetAuthorizationUrl,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,Cyclomatic complexity of the method is 13
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,Cyclomatic complexity of the method is 13
Complex Method,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,Cyclomatic complexity of the method is 18
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildPerson,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildShare,Cyclomatic complexity of the method is 21
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupSettings,Cyclomatic complexity of the method is 15
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,Cyclomatic complexity of the method is 76
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,Cyclomatic complexity of the method is 48
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupComment,Cyclomatic complexity of the method is 11
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildJob,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,Cyclomatic complexity of the method is 47
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildFullProfile,Cyclomatic complexity of the method is 26
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPublication,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildVoluteerExpirience,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildEducation,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPatent,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildBasicProfile,Cyclomatic complexity of the method is 30
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPosition,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,Cyclomatic complexity of the method is 14
Complex Method,LinkedIn.NET.Updates,LinkedInUpdate,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInUpdate.cs,SetBaseValues,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET.Updates,LinkedInJobPostingUpdate,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInJobPostingUpdate.cs,BuildUpdate,Cyclomatic complexity of the method is 9
Long Statement,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The length of the statement  "					if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) { " is 134.
Long Statement,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseNumber,The length of the statement  "	success = Double.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 125.
Long Statement,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The length of the statement  "	var addFields = options.BasicProfileOptions.HasValues | options.EmailProfileOptions.HasValues | options.FullProfileOptions.HasValues; " is 133.
Long Statement,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The length of the statement  "			fields.Append ("positions:(id'title'summary'start-date'end-date'is-current'company:(id'name'type'size'industry'ticker))'"); " is 123.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if ((options.FacetFields.HasValues | options.BucketFields.HasValues) && (options.SearchSets & LinkedInSearchSets.Facets) != LinkedInSearchSets.Facets) " is 150.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetLocationValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Location) != LinkedInFacetTypes.Location) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetIndustryValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Industry) != LinkedInFacetTypes.Industry) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetLanguageValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Language) != LinkedInFacetTypes.Language) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetCurrentCompanyValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.CurrentCompany) != LinkedInFacetTypes.CurrentCompany) " is 145.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetPastCompanyValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.PastCompany) != LinkedInFacetTypes.PastCompany) " is 136.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetSchoolValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.School) != LinkedInFacetTypes.School) " is 121.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "		if (options.FacetNetworkValues != LinkedInFacetNetwork.None && (options.FacetTypes & LinkedInFacetTypes.Network) != LinkedInFacetTypes.Network) " is 143.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetUpdates,The length of the statement  "			return getUpdates (Utils.GET_UPDATES_BY_URL_URL.Replace ("$USER_URL$"' Utils.NormalizeUrl (options.Parameters.RequestBy))' options); " is 132.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getUpdates,The length of the statement  "			result = options.SortDirection == LinkedInUpdateSortDirection.Descending ? updates.OrderByDescending (u => u.UpdateDate) : updates.OrderBy (u => u.UpdateDate); " is 159.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getUpdates,The length of the statement  "			result = options.SortDirection == LinkedInUpdateSortDirection.Descending ? updates.OrderByDescending (u => u.UpdateKey) : updates.OrderBy (u => u.UpdateKey); " is 157.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getUpdates,The length of the statement  "			result = options.SortDirection == LinkedInUpdateSortDirection.Descending ? updates.OrderByDescending (u => u.UpdateType) : updates.OrderBy (u => u.UpdateType); " is 159.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,ShareUpdate,The length of the statement  "		var contentPresented = Utils.IsAnyString (options.Title' options.SubmittedUrl' options.SubmittedImageUrl' options.Description); " is 127.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,ShareUpdate,The length of the statement  "				return new LinkedInResponse<LinkedInShareResult> (new LinkedInShareResult (eKey.Value' eUrl.Value)' LinkedInResponseStatus.OK' null); " is 133.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetAllUpdateComments,The length of the statement  "			return new LinkedInResponse<IEnumerable<LinkedInComment>> (comments.AsEnumerable ()' LinkedInResponseStatus.OK' updateKey); " is 123.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetAllUpdateComments,The length of the statement  "		return new LinkedInResponse<IEnumerable<LinkedInComment>> (comments.AsEnumerable ()' LinkedInResponseStatus.OK' updateKey); " is 123.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The length of the statement  "	sb.Append (options.Role == LinkedInGroupPostRole.NotDefined ? Utils.GROUP_POSTS_URL.Replace ("{GROUP_ID}"' options.GroupId) : Utils.GROUP_MEMBER_POSTS_URL.Replace ("{GROUP_ID}"' options.GroupId)); " is 196.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,AddGroupPost,The length of the statement  "		if (!string.IsNullOrEmpty (options.SubmittedUrl) && !string.IsNullOrEmpty (options.SubmittedImageUrl) && !string.IsNullOrEmpty (options.ContentTitle) && !string.IsNullOrEmpty (options.ContentText)) { " is 199.
Long Statement,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,LikeUnlikeUpdate,The length of the statement  "		var body = like ? "<?xml version='1.0' encoding='UTF-8'?><is-liked>true</is-liked>" : "<?xml version='1.0' encoding='UTF-8'?><is-liked>false</is-liked>"; " is 153.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetAuthorizationUrl,The length of the statement  "	if ((options.Permissions & LinkedInPermissions.BasicProfile) == LinkedInPermissions.BasicProfile && (options.Permissions & LinkedInPermissions.FullProfile) != LinkedInPermissions.FullProfile) { " is 193.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "	var contentPresented = Utils.IsAnyString (options.Title' options.SubmittedUrl' options.SubmittedImageUrl' options.Description); " is 127.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "			throw new LinkedInMissingParameterException ("Share content's submitted image URL cannot be null or empty"' "SubmittedImageUrl"); " is 129.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "	var contentPresented = Utils.IsAnyString (options.Title' options.SubmittedUrl' options.SubmittedImageUrl' options.Description); " is 127.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "			throw new LinkedInMissingParameterException ("Share content's submitted image URL cannot be null or empty"' "SubmittedImageUrl"); " is 129.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,getComments,The length of the statement  "		return new LinkedInResponse<IEnumerable<LinkedInGroupComment>> (RequestRunner.GetPostComments (options)' LinkedInResponseStatus.OK' options.PostId); " is 148.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,getPosts,The length of the statement  "		return new LinkedInResponse<IEnumerable<LinkedInGroupPost>> (RequestRunner.GetGroupPosts (options)' LinkedInResponseStatus.OK' options.GroupId); " is 144.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMemberGroups,The length of the statement  "		sb.Append ("'membership-state'show-group-logo-in-profile'allow-messages-from-members'email-digest-frequency'email-announcements-from-managers'email-for-every-new-post)?start=0&count=250&oauth2_access_token="); " is 209.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMemberGroups,The length of the statement  "		return new LinkedInResponse<IEnumerable<LinkedInGroup>> (RequestRunner.GetMemberGroups (sb.ToString ()' options)' LinkedInResponseStatus.OK' null); " is 147.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetSuggestedGroups,The length of the statement  "		return new LinkedInResponse<IEnumerable<LinkedInGroup>> (RequestRunner.GetSuggestedGroups (sb.ToString ()' options)' LinkedInResponseStatus.OK' null); " is 150.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "			throw new LinkedInMissingParameterException ("Invitation's authorization name cannot be null or empty"' "AuthorizationName"); " is 125.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "			throw new LinkedInMissingParameterException ("Invitation's authorization value cannot be null or empty"' "AuthorizationValue"); " is 127.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "			throw new LinkedInMissingParameterException ("Invitation's recipient first name cannot be null or empty"' "RecipientFirstName"); " is 128.
Long Statement,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "			throw new LinkedInMissingParameterException ("Invitation's recipient last name cannot be null or empty"' "RecipientLastName"); " is 126.
Long Statement,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildShare,The length of the statement  "			liShare.VisibilityCode = xn.Value.Trim () == "anyone" ? LinkedInShareVisibilityCode.Anyone : LinkedInShareVisibilityCode.ConnectionsOnly; " is 137.
Long Statement,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The length of the statement  "				if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token")) " is 136.
Long Statement,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The length of the statement  "				if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired")) " is 158.
Long Statement,LinkedIn.NET.Groups,LinkedInGroup,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Groups\LinkedInGroup.cs,AddPost,The length of the statement  "	var contentPresented = Utils.IsAnyString (options.ContentTitle' options.ContentText' options.SubmittedUrl' options.SubmittedImageUrl); " is 134.
Long Statement,LinkedIn.NET.Groups,LinkedInGroupComment,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Groups\LinkedInGroupComment.cs,Delete,The length of the statement  "	if (!AvailableAction [LinkedInGroupCommentAction.Delete] && !AvailableAction [LinkedInGroupCommentAction.FlagAsInappropriate]) " is 126.
Complex Conditional,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,AddGroupPost,The conditional expression  "!string.IsNullOrEmpty (options.SubmittedUrl) && !string.IsNullOrEmpty (options.SubmittedImageUrl) && !string.IsNullOrEmpty (options.ContentTitle) && !string.IsNullOrEmpty (options.ContentText)"  is complex.
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: while (true) {  	if (index == json.Length) {  		break;  	}  	var c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			sb.Append ('"');  		} else if (c == '\\') {  			sb.Append ('\\');  		} else if (c == '/') {  			sb.Append ('/');  		} else if (c == 'b') {  			sb.Append ('\b');  		} else if (c == 'f') {  			sb.Append ('\f');  		} else if (c == 'n') {  			sb.Append ('\n');  		} else if (c == 'r') {  			sb.Append ('\r');  		} else if (c == 't') {  			sb.Append ('\t');  		} else if (c == 'u') {  			var remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			} else {  				break;  			}  		}  	} else {  		sb.Append (c);  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: while (true) {  	if (index == json.Length) {  		break;  	}  	var c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			sb.Append ('"');  		} else if (c == '\\') {  			sb.Append ('\\');  		} else if (c == '/') {  			sb.Append ('/');  		} else if (c == 'b') {  			sb.Append ('\b');  		} else if (c == 'f') {  			sb.Append ('\f');  		} else if (c == 'n') {  			sb.Append ('\n');  		} else if (c == 'r') {  			sb.Append ('\r');  		} else if (c == 't') {  			sb.Append ('\t');  		} else if (c == 'u') {  			var remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			} else {  				break;  			}  		}  	} else {  		sb.Append (c);  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: while (true) {  	if (index == json.Length) {  		break;  	}  	var c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			sb.Append ('"');  		} else if (c == '\\') {  			sb.Append ('\\');  		} else if (c == '/') {  			sb.Append ('/');  		} else if (c == 'b') {  			sb.Append ('\b');  		} else if (c == 'f') {  			sb.Append ('\f');  		} else if (c == 'n') {  			sb.Append ('\n');  		} else if (c == 'r') {  			sb.Append ('\r');  		} else if (c == 't') {  			sb.Append ('\t');  		} else if (c == 'u') {  			var remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			} else {  				break;  			}  		}  	} else {  		sb.Append (c);  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		sb.Append ('"');  	} else if (c == '\\') {  		sb.Append ('\\');  	} else if (c == '/') {  		sb.Append ('/');  	} else if (c == 'b') {  		sb.Append ('\b');  	} else if (c == 'f') {  		sb.Append ('\f');  	} else if (c == 'n') {  		sb.Append ('\n');  	} else if (c == 'r') {  		sb.Append ('\r');  	} else if (c == 't') {  		sb.Append ('\t');  	} else if (c == 'u') {  		var remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		} else {  			break;  		}  	}  } else {  	sb.Append (c);  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		sb.Append ('"');  	} else if (c == '\\') {  		sb.Append ('\\');  	} else if (c == '/') {  		sb.Append ('/');  	} else if (c == 'b') {  		sb.Append ('\b');  	} else if (c == 'f') {  		sb.Append ('\f');  	} else if (c == 'n') {  		sb.Append ('\n');  	} else if (c == 'r') {  		sb.Append ('\r');  	} else if (c == 't') {  		sb.Append ('\t');  	} else if (c == 'u') {  		var remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		} else {  			break;  		}  	}  } else {  	sb.Append (c);  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		sb.Append ('"');  	} else if (c == '\\') {  		sb.Append ('\\');  	} else if (c == '/') {  		sb.Append ('/');  	} else if (c == 'b') {  		sb.Append ('\b');  	} else if (c == 'f') {  		sb.Append ('\f');  	} else if (c == 'n') {  		sb.Append ('\n');  	} else if (c == 'r') {  		sb.Append ('\r');  	} else if (c == 't') {  		sb.Append ('\t');  	} else if (c == 'u') {  		var remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		} else {  			break;  		}  	}  } else {  	sb.Append (c);  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '"') {  	sb.Append ('"');  } else if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '"') {  	sb.Append ('"');  } else if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '"') {  	sb.Append ('"');  } else if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	sb.Append ('\\');  } else if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == '/') {  	sb.Append ('/');  } else if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	sb.Append ('\b');  } else if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	sb.Append ('\f');  } else if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	sb.Append ('\n');  } else if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	sb.Append ('\r');  } else if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 't') {  	sb.Append ('\t');  } else if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	var remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	} else {  		break;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  } else {  	break;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  } else {  	break;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	sb.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  } else {  	break;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  	return "";  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The following statement contains a magic number: index += 4;  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Tokens.TOKEN_FALSE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Tokens.TOKEN_FALSE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Tokens.TOKEN_FALSE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Tokens.TOKEN_FALSE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Tokens.TOKEN_FALSE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Tokens.TOKEN_FALSE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Tokens.TOKEN_FALSE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Tokens.TOKEN_FALSE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Tokens.TOKEN_FALSE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 5;  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Tokens.TOKEN_TRUE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Tokens.TOKEN_TRUE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Tokens.TOKEN_TRUE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Tokens.TOKEN_TRUE;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Tokens.TOKEN_TRUE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Tokens.TOKEN_TRUE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Tokens.TOKEN_TRUE;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 4;  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Tokens.TOKEN_NULL;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Tokens.TOKEN_NULL;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Tokens.TOKEN_NULL;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Tokens.TOKEN_NULL;  	}  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Tokens.TOKEN_NULL;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Tokens.TOKEN_NULL;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Tokens.TOKEN_NULL;  }  
Magic Number,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 4;  
Magic Number,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The following statement contains a magic number: if (addFields) {  	if (fields.Length > 2)  		fields.Length -= 1;  	fields.Append (")");  }  
Magic Number,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The following statement contains a magic number: if (fields.Length > 2)  	fields.Length -= 1;  
Magic Number,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetPostComments,The following statement contains a magic number: while (true) {  	var request = new StringBuilder (sb.ToString ());  	request.Append ("start=");  	request.Append (start);  	request.Append ("&");  	request.Append ("count=");  	request.Append (10);  	request.Append ("&");  	request.Append ("oauth2_access_token=");  	request.Append (Singleton.Instance.AccessToken);  	var responseString = Utils.MakeRequest (request.ToString ()' "GET");  	var xdoc = XDocument.Parse (responseString);  	var xroot = xdoc.Root;  	if (xroot == null || xroot.Attribute ("total") == null || !xroot.Elements ("comment").Any ())  		break;  	var total = Convert.ToInt32 (xroot.Attribute ("total").Value.Trim ());  	var count = xroot.Attribute ("count") == null ? total : Convert.ToInt32 (xroot.Attribute ("count").Value.Trim ());  	fetched += count;  	comments.AddRange (xroot.Elements ("comment").Select (Utils.BuildGroupComment));  	if (fetched >= total)  		break;  	start += count;  }  
Magic Number,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetPostComments,The following statement contains a magic number: request.Append (10);  
Magic Number,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The following statement contains a magic number: while (true) {  	var request = new StringBuilder (sb.ToString ());  	request.Append ("start=");  	request.Append (start);  	request.Append ("&");  	request.Append ("count=");  	request.Append (10);  	request.Append ("&");  	request.Append ("oauth2_access_token=");  	request.Append (Singleton.Instance.AccessToken);  	var responseString = Utils.MakeRequest (request.ToString ()' "GET");  	var xdoc = XDocument.Parse (responseString);  	var xroot = xdoc.Root;  	if (xroot == null || xroot.Attribute ("total") == null || !xroot.Elements ("post").Any ())  		break;  	var total = Convert.ToInt32 (xroot.Attribute ("total").Value.Trim ());  	var count = xroot.Attribute ("count") == null ? total : Convert.ToInt32 (xroot.Attribute ("count").Value.Trim ());  	fetched += count;  	posts.AddRange (xroot.Elements ("post").Select (Utils.BuildGroupPost));  	if (fetched >= total)  		break;  	start += count;  }  
Magic Number,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The following statement contains a magic number: request.Append (10);  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,ParseResponse,The following statement contains a magic number: foreach (var arr2 in arr1.Select (s => s.Split ('=')).Where (arr2 => arr2.Length == 2)) {  	nvc.Add (arr2 [0].Trim ()' arr2 [1].Trim ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	try {  		var xdoc = XDocument.Parse (reader.ReadToEnd ());  		var xroot = xdoc.Root;  		if (xroot == null)  			return result;  		var xStatus = xroot.Element ("status");  		var xMessage = xroot.Element ("message");  		if (xStatus == null || xMessage == null)  			return result;  		switch (Convert.ToInt32 (xStatus.Value)) {  		case 400:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  		case 401:  			if (xMessage.Value.ToLower ().Contains ("expired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("ssl required"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  			break;  		case 403:  			if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  		case 404:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  		case 500:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  		}  		return result;  	} catch (Exception) {  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  	}  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	try {  		var xdoc = XDocument.Parse (reader.ReadToEnd ());  		var xroot = xdoc.Root;  		if (xroot == null)  			return result;  		var xStatus = xroot.Element ("status");  		var xMessage = xroot.Element ("message");  		if (xStatus == null || xMessage == null)  			return result;  		switch (Convert.ToInt32 (xStatus.Value)) {  		case 400:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  		case 401:  			if (xMessage.Value.ToLower ().Contains ("expired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("ssl required"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  			break;  		case 403:  			if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  		case 404:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  		case 500:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  		}  		return result;  	} catch (Exception) {  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  	}  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	try {  		var xdoc = XDocument.Parse (reader.ReadToEnd ());  		var xroot = xdoc.Root;  		if (xroot == null)  			return result;  		var xStatus = xroot.Element ("status");  		var xMessage = xroot.Element ("message");  		if (xStatus == null || xMessage == null)  			return result;  		switch (Convert.ToInt32 (xStatus.Value)) {  		case 400:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  		case 401:  			if (xMessage.Value.ToLower ().Contains ("expired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("ssl required"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  			break;  		case 403:  			if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  		case 404:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  		case 500:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  		}  		return result;  	} catch (Exception) {  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  	}  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	try {  		var xdoc = XDocument.Parse (reader.ReadToEnd ());  		var xroot = xdoc.Root;  		if (xroot == null)  			return result;  		var xStatus = xroot.Element ("status");  		var xMessage = xroot.Element ("message");  		if (xStatus == null || xMessage == null)  			return result;  		switch (Convert.ToInt32 (xStatus.Value)) {  		case 400:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  		case 401:  			if (xMessage.Value.ToLower ().Contains ("expired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("ssl required"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  			break;  		case 403:  			if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  		case 404:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  		case 500:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  		}  		return result;  	} catch (Exception) {  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  	}  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	try {  		var xdoc = XDocument.Parse (reader.ReadToEnd ());  		var xroot = xdoc.Root;  		if (xroot == null)  			return result;  		var xStatus = xroot.Element ("status");  		var xMessage = xroot.Element ("message");  		if (xStatus == null || xMessage == null)  			return result;  		switch (Convert.ToInt32 (xStatus.Value)) {  		case 400:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  		case 401:  			if (xMessage.Value.ToLower ().Contains ("expired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("ssl required"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  			break;  		case 403:  			if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  			if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  				return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  		case 404:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  		case 500:  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  		}  		return result;  	} catch (Exception) {  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  	}  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: try {  	var xdoc = XDocument.Parse (reader.ReadToEnd ());  	var xroot = xdoc.Root;  	if (xroot == null)  		return result;  	var xStatus = xroot.Element ("status");  	var xMessage = xroot.Element ("message");  	if (xStatus == null || xMessage == null)  		return result;  	switch (Convert.ToInt32 (xStatus.Value)) {  	case 400:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  	case 401:  		if (xMessage.Value.ToLower ().Contains ("expired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("ssl required"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  		break;  	case 403:  		if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  	case 404:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  	case 500:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  	}  	return result;  } catch (Exception) {  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: try {  	var xdoc = XDocument.Parse (reader.ReadToEnd ());  	var xroot = xdoc.Root;  	if (xroot == null)  		return result;  	var xStatus = xroot.Element ("status");  	var xMessage = xroot.Element ("message");  	if (xStatus == null || xMessage == null)  		return result;  	switch (Convert.ToInt32 (xStatus.Value)) {  	case 400:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  	case 401:  		if (xMessage.Value.ToLower ().Contains ("expired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("ssl required"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  		break;  	case 403:  		if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  	case 404:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  	case 500:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  	}  	return result;  } catch (Exception) {  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: try {  	var xdoc = XDocument.Parse (reader.ReadToEnd ());  	var xroot = xdoc.Root;  	if (xroot == null)  		return result;  	var xStatus = xroot.Element ("status");  	var xMessage = xroot.Element ("message");  	if (xStatus == null || xMessage == null)  		return result;  	switch (Convert.ToInt32 (xStatus.Value)) {  	case 400:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  	case 401:  		if (xMessage.Value.ToLower ().Contains ("expired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("ssl required"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  		break;  	case 403:  		if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  	case 404:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  	case 500:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  	}  	return result;  } catch (Exception) {  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: try {  	var xdoc = XDocument.Parse (reader.ReadToEnd ());  	var xroot = xdoc.Root;  	if (xroot == null)  		return result;  	var xStatus = xroot.Element ("status");  	var xMessage = xroot.Element ("message");  	if (xStatus == null || xMessage == null)  		return result;  	switch (Convert.ToInt32 (xStatus.Value)) {  	case 400:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  	case 401:  		if (xMessage.Value.ToLower ().Contains ("expired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("ssl required"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  		break;  	case 403:  		if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  	case 404:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  	case 500:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  	}  	return result;  } catch (Exception) {  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: try {  	var xdoc = XDocument.Parse (reader.ReadToEnd ());  	var xroot = xdoc.Root;  	if (xroot == null)  		return result;  	var xStatus = xroot.Element ("status");  	var xMessage = xroot.Element ("message");  	if (xStatus == null || xMessage == null)  		return result;  	switch (Convert.ToInt32 (xStatus.Value)) {  	case 400:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  	case 401:  		if (xMessage.Value.ToLower ().Contains ("expired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("ssl required"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  		break;  	case 403:  		if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  		if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  			return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  	case 404:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  	case 500:  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  	}  	return result;  } catch (Exception) {  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' reader.ReadToEnd ());  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
Magic Number,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
Missing Default,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseValue,The following switch statement is missing a default case: switch (lookAhead (json' index)) {  case Tokens.TOKEN_STRING:  	return parseString (json' ref index' ref success);  case Tokens.TOKEN_NUMBER:  	return parseNumber (json' ref index' ref success);  case Tokens.TOKEN_CURLY_OPEN:  	return parseObject (json' ref index' ref success);  case Tokens.TOKEN_TRUE:  	nextToken (json' ref index);  	return true;  case Tokens.TOKEN_FALSE:  	nextToken (json' ref index);  	return false;  case Tokens.TOKEN_NULL:  	nextToken (json' ref index);  	return null;  case Tokens.TOKEN_NONE:  	break;  }  
Missing Default,LinkedIn.NET,Json,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return Tokens.TOKEN_CURLY_OPEN;  case '}':  	return Tokens.TOKEN_CURLY_CLOSE;  case '[':  	return Tokens.TOKEN_BRACKET_OPEN;  case ']':  	return Tokens.TOKEN_BRACKET_CLOSE;  case ''':  	return Tokens.TOKEN_COMMA;  case '"':  	return Tokens.TOKEN_STRING;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return Tokens.TOKEN_NUMBER;  case ':':  	return Tokens.TOKEN_COLON;  }  
Missing Default,LinkedIn.NET,RequestFields,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareFacetsParams,The following switch statement is missing a default case: switch (f) {  case LinkedInFacetLanguage.English:  	sb.Append ("en'");  	break;  case LinkedInFacetLanguage.Russian:  	sb.Append ("ru'");  	break;  case LinkedInFacetLanguage.French:  	sb.Append ("fr'");  	break;  case LinkedInFacetLanguage.German:  	sb.Append ("de'");  	break;  case LinkedInFacetLanguage.Italian:  	sb.Append ("it'");  	break;  case LinkedInFacetLanguage.Portuguese:  	sb.Append ("pt'");  	break;  case LinkedInFacetLanguage.Spanish:  	sb.Append ("es'");  	break;  case LinkedInFacetLanguage.Others:  	sb.Append ("_o'");  	break;  }  
Missing Default,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetMembers,The following switch statement is missing a default case: switch (p.GetBy) {  case LinkedInGetMemberBy.Self:  	sb.Append ("~");  	break;  case LinkedInGetMemberBy.Id:  	sb.Append ("id=");  	sb.Append (p.RequestBy);  	break;  case LinkedInGetMemberBy.Url:  	sb.Append ("url=");  	sb.Append (Utils.NormalizeUrl (p.RequestBy));  	break;  }  
Missing Default,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The following switch statement is missing a default case: switch (options.Sort) {  case LinkedinSearchResultsOrder.Distance:  	sb.Append ("sort=distance&");  	break;  case LinkedinSearchResultsOrder.Recommenders:  	sb.Append ("sort=recommenders&");  	break;  case LinkedinSearchResultsOrder.Relevance:  	sb.Append ("sort=relevance&");  	break;  }  
Missing Default,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,SendInvitation,The following switch statement is missing a default case: switch (options.InvitationType) {  case LinkedInInvitationType.InviteById:  	message.Append ("<person path='/people/id=");  	message.Append (Utils.EscapeXml (options.RecipientId));  	message.Append ("' />");  	break;  case LinkedInInvitationType.InviteByEmail:  	message.Append ("<person path='/people/email=");  	message.Append (Utils.EscapeXml (options.RecipientEmail));  	message.Append ("'>");  	message.Append ("<first-name>");  	message.Append (Utils.EscapeXml (options.RecipientFirstName));  	message.Append ("</first-name>");  	message.Append ("<last-name>");  	message.Append (Utils.EscapeXml (options.RecipientLastName));  	message.Append ("</last-name>");  	message.Append ("</person>");  	break;  }  
Missing Default,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The following switch statement is missing a default case: switch (options.Role) {  case LinkedInGroupPostRole.Creator:  	sb.Append ("role=creator&");  	break;  case LinkedInGroupPostRole.Commenter:  	sb.Append ("role=commenter&");  	break;  case LinkedInGroupPostRole.Follower:  	sb.Append ("role=follower&");  	break;  }  
Missing Default,LinkedIn.NET,RequestRunner,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,ChangeGroupSettings,The following switch statement is missing a default case: switch (settings.EmailDigestFrequency) {  case LinkedInEmailDigestFrequency.Daily:  	request.Append ("daily");  	break;  case LinkedInEmailDigestFrequency.None:  	request.Append ("none");  	break;  case LinkedInEmailDigestFrequency.Weekly:  	request.Append ("weekly");  	break;  }  
Missing Default,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,The following switch statement is missing a default case: switch (options.Parameters.GetBy) {  case LinkedInGetMemberBy.Id:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingMemberIdException ("Member Id is not set"' "RequestBy");  	break;  case LinkedInGetMemberBy.Url:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingProfileUrlException ("User profile url is not set"' "RequestBy");  	if (!Uri.IsWellFormedUriString (options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))  		throw new LinkedInInvalidProfileUrlException ("Invalid user profile url"' "RequestBy");  	break;  }  
Missing Default,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,The following switch statement is missing a default case: switch (options.Parameters.GetBy) {  case LinkedInGetMemberBy.Id:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingMemberIdException ("Member Id is not set"' "RequestBy");  	break;  case LinkedInGetMemberBy.Url:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingProfileUrlException ("User profile url is not set"' "RequestBy");  	if (!Uri.IsWellFormedUriString (options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))  		throw new LinkedInInvalidProfileUrlException ("Invalid user profile url"' "RequestBy");  	break;  }  
Missing Default,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,The following switch statement is missing a default case: switch (options.Parameters.GetBy) {  case LinkedInGetMemberBy.Id:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingMemberIdException ("Member Id is not set"' "RequestBy");  	break;  case LinkedInGetMemberBy.Url:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingProfileUrlException ("User profile url is not set"' "RequestBy");  	if (!Uri.IsWellFormedUriString (options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))  		throw new LinkedInInvalidProfileUrlException ("Invalid user profile url"' "RequestBy");  	break;  }  
Missing Default,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,The following switch statement is missing a default case: switch (options.Parameters.GetBy) {  case LinkedInGetMemberBy.Id:  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingMemberIdException ("Member Id is not set"' "RequestBy");  	break;  case LinkedInGetMemberBy.Url:  	//LinkedInGetMemberBy.Url  	if (string.IsNullOrEmpty (options.Parameters.RequestBy))  		throw new LinkedInMissingProfileUrlException ("User profile url is not set"' "RequestBy");  	if (!Uri.IsWellFormedUriString (options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))  		throw new LinkedInInvalidProfileUrlException ("Invalid user profile url"' "RequestBy");  	break;  }  
Missing Default,LinkedIn.NET,LinkedInClient,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The following switch statement is missing a default case: switch (options.InvitationType) {  case LinkedInInvitationType.InviteById:  	if (string.IsNullOrEmpty (options.RecipientId))  		throw new LinkedInMissingParameterException ("Invitation's recipient ID cannot be null or empty"' "RecipientId");  	if (string.IsNullOrEmpty (options.AuthorizationName))  		throw new LinkedInMissingParameterException ("Invitation's authorization name cannot be null or empty"' "AuthorizationName");  	if (string.IsNullOrEmpty (options.AuthorizationValue))  		throw new LinkedInMissingParameterException ("Invitation's authorization value cannot be null or empty"' "AuthorizationValue");  	break;  case LinkedInInvitationType.InviteByEmail:  	if (string.IsNullOrEmpty (options.RecipientEmail))  		throw new LinkedInMissingParameterException ("Invitation's recipient email cannot be null or empty"' "RecipientEmail");  	if (string.IsNullOrEmpty (options.RecipientFirstName))  		throw new LinkedInMissingParameterException ("Invitation's recipient first name cannot be null or empty"' "RecipientFirstName");  	if (string.IsNullOrEmpty (options.RecipientLastName))  		throw new LinkedInMissingParameterException ("Invitation's recipient last name cannot be null or empty"' "RecipientLastName");  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupSettings,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "none":  	liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.None;  	break;  case "daily":  	liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.Daily;  	break;  case "weekly":  	liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.Weekly;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "blocked":  	liGroup.MembershipState = LinkedInGroupRelationship.Blocked;  	break;  case "non-member":  	liGroup.MembershipState = LinkedInGroupRelationship.NonMember;  	break;  case "awaiting-confirmation":  	liGroup.MembershipState = LinkedInGroupRelationship.AwaitingConfirmation;  	break;  case "awaiting-parent-group-confirmation":  	liGroup.MembershipState = LinkedInGroupRelationship.AwaitingParentGroupConfirmation;  	break;  case "member":  	liGroup.MembershipState = LinkedInGroupRelationship.Member;  	break;  case "moderator":  	liGroup.MembershipState = LinkedInGroupRelationship.Moderator;  	break;  case "manager":  	liGroup.MembershipState = LinkedInGroupRelationship.Manager;  	break;  case "owner":  	liGroup.MembershipState = LinkedInGroupRelationship.Owner;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "add-post":  	liGroup.AvailableAction [LinkedInGroupAction.AddPost] = true;  	break;  case "leave":  	liGroup.AvailableAction [LinkedInGroupAction.Leave] = true;  	break;  case "view-posts":  	liGroup.AvailableAction [LinkedInGroupAction.ViewPosts] = true;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "alumni":  	liGroup.Category = LinkedInGroupCategory.Alumni;  	break;  case "corporate":  	liGroup.Category = LinkedInGroupCategory.Corporate;  	break;  case "conference":  	liGroup.Category = LinkedInGroupCategory.Conference;  	break;  case "network":  	liGroup.Category = LinkedInGroupCategory.Network;  	break;  case "philanthropic":  	liGroup.Category = LinkedInGroupCategory.Philantropic;  	break;  case "professional":  	liGroup.Category = LinkedInGroupCategory.Professional;  	break;  case "other":  	liGroup.Category = LinkedInGroupCategory.Other;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xn.Value.Trim ()) {  case "standard":  	liPost.PostType = LinkedInGroupPostType.Standard;  	break;  case "news":  	liPost.PostType = LinkedInGroupPostType.News;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xn.Value.Trim ()) {  case "discussion":  	liPost.Category = LinkedInGroupPostCategory.Discussion;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "add-comment":  	liPost.AvailableAction [LinkedInGroupPostAction.AddComment] = true;  	break;  case "flag-as-inappropriate":  case "delete":  	liPost.AvailableAction [LinkedInGroupPostAction.FlagAsInappropriate] = true;  	break;  case "categorize-as-job":  	liPost.AvailableAction [LinkedInGroupPostAction.CategorizeAsJob] = true;  	break;  case "categorize-as-promotion":  	liPost.AvailableAction [LinkedInGroupPostAction.CategorizeAsPromotion] = true;  	break;  case "follow":  case "unfollow":  	liPost.AvailableAction [LinkedInGroupPostAction.Follow] = true;  	break;  case "like":  case "unlike":  	liPost.AvailableAction [LinkedInGroupPostAction.Like] = true;  	break;  case "reply-privately":  	liPost.AvailableAction [LinkedInGroupPostAction.ReplyPrivately] = true;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupComment,The following switch statement is missing a default case: switch (xc.Value.Trim ()) {  case "flag-as-inappropriate":  	liComment.AvailableAction [LinkedInGroupCommentAction.FlagAsInappropriate] = true;  	break;  case "delete":  	liComment.AvailableAction [LinkedInGroupCommentAction.Delete] = true;  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,The following switch statement is missing a default case: switch (updType) {  case "CONN":  	update = new LinkedInConnectionMemberUpdate ();  	break;  case "NCON":  case "CCEM":  	update = new LinkedInConnectionUpdate ();  	break;  case "SHAR":  	update = new LinkedInShareUpdate ();  	break;  case "STAT":  	update = new LinkedInStatusUpdate ();  	break;  case "VIRL":  	update = new LinkedInViralUpdate ();  	break;  case "JGRP":  	update = new LinkedInGroupUpdate ();  	break;  case "APPS":  case "APPM":  	update = new LinkedInApplicationUpdate ();  	break;  case "PICU":  	update = new LinkedInPictureUpdate ();  	break;  case "PROF":  	update = new LinkedInPositionUpdate ();  	break;  case "PRFX":  	update = new LinkedInExtendedProfileUpdate ();  	break;  case "PREC":  case "SVPR":  	update = new LinkedInRecommendationUpdate ();  	break;  case "JOBP":  	update = new LinkedInJobPostingUpdate ();  	break;  case "CMPY":  	switch (getCompanyUpdateType (xu)) {  	case CompanyUpdateType.Profile:  		update = new LinkedInCompanyProfileUpdate ();  		break;  	case CompanyUpdateType.Status:  		update = new LinkedInCompanyStatusUpdate ();  		break;  	case CompanyUpdateType.Job:  		update = new LinkedInCompanyJobUpdate ();  		break;  	case CompanyUpdateType.Person:  		update = new LinkedInCompanyPersonUpdate ();  		break;  	}  	break;  case "MSFC":  	update = new LinkedInStartFollowCompanyUpdate ();  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,The following switch statement is missing a default case: switch (getCompanyUpdateType (xu)) {  case CompanyUpdateType.Profile:  	update = new LinkedInCompanyProfileUpdate ();  	break;  case CompanyUpdateType.Status:  	update = new LinkedInCompanyStatusUpdate ();  	break;  case CompanyUpdateType.Job:  	update = new LinkedInCompanyJobUpdate ();  	break;  case CompanyUpdateType.Person:  	update = new LinkedInCompanyPersonUpdate ();  	break;  }  
Missing Default,LinkedIn.NET,Utils,F:\newReposMay17\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following switch statement is missing a default case: switch (Convert.ToInt32 (xStatus.Value)) {  case 400:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.BadRequest' xMessage.Value);  case 401:  	if (xMessage.Value.ToLower ().Contains ("expired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.ExpiredToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("invalid access token") || xMessage.Value.ToLower ().Contains ("unable to verify access token"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InvalidAccessToken' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("ssl required"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.SslRequired' xMessage.Value);  	break;  case 403:  	if (xMessage.Value.ToLower ().Contains ("throttle limit for calls to this resource"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.TrottleLimitReached' xMessage.Value);  	if (xMessage.Value.ToLower ().Contains ("unauthorized change of forum type") || xMessage.Value.ToLower ().Contains ("anetauthexception: applicationrequired"))  		return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnauthorizedAction' xMessage.Value);  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.UnparsedWebException' xMessage.Value);  case 404:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.PageNotFound' xMessage.Value);  case 500:  	return new Tuple<LinkedInResponseStatus' string> (LinkedInResponseStatus.InternalServerError' xMessage.Value);  }  
