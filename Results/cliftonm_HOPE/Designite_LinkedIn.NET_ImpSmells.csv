Implementation smell,Namespace,Class,File,Method,Description
Long Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareFacetsParams,The method has 110 lines of code.
Long Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The method has 118 lines of code.
Long Method,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The method has 109 lines of code.
Long Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The method has 164 lines of code.
Long Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The method has 116 lines of code.
Long Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildFullProfile,The method has 106 lines of code.
Long Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildBasicProfile,The method has 125 lines of code.
Complex Method,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseObject,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,Cyclomatic complexity of the method is 18
Complex Method,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,Cyclomatic complexity of the method is 15
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareSearchParams,Cyclomatic complexity of the method is 14
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareBucketsParams,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareFacetsParams,Cyclomatic complexity of the method is 28
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,Cyclomatic complexity of the method is 54
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGetUpdatesFields,Cyclomatic complexity of the method is 20
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGroupFields,Cyclomatic complexity of the method is 18
Complex Method,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGroupPostFields,Cyclomatic complexity of the method is 13
Complex Method,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,Cyclomatic complexity of the method is 27
Complex Method,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,getUpdates,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetAuthorizationUrl,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildPerson,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildShare,Cyclomatic complexity of the method is 21
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupSettings,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,Cyclomatic complexity of the method is 40
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,Cyclomatic complexity of the method is 25
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupComment,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildJob,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,Cyclomatic complexity of the method is 19
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildFullProfile,Cyclomatic complexity of the method is 26
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPublication,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildVoluteerExpirience,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildEducation,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPatent,Cyclomatic complexity of the method is 12
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildBasicProfile,Cyclomatic complexity of the method is 30
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,buildPosition,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,Cyclomatic complexity of the method is 14
Complex Method,LinkedIn.NET.Updates,LinkedInCompanyPersonUpdate,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInCompanyPersonUpdate.cs,BuildUpdate,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET.Updates,LinkedInCompanyProfileUpdate,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInCompanyProfileUpdate.cs,BuildUpdate,Cyclomatic complexity of the method is 9
Complex Method,LinkedIn.NET.Updates,LinkedInUpdate,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInUpdate.cs,SetBaseValues,Cyclomatic complexity of the method is 10
Complex Method,LinkedIn.NET.Updates,LinkedInExtendedProfileUpdate,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInExtendedProfileUpdate.cs,BuildUpdate,Cyclomatic complexity of the method is 8
Complex Method,LinkedIn.NET.Updates,LinkedInJobPostingUpdate,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Updates\LinkedInJobPostingUpdate.cs,BuildUpdate,Cyclomatic complexity of the method is 11
Long Statement,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseNumber,The length of the statement  "            success = Double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The length of the statement  "                    fields.Append("positions:(id'title'summary'start-date'end-date'is-current'company:(id'name'type'size'industry'ticker))'"); " is 122.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetLocationValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Location) != LinkedInFacetTypes.Location) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetIndustryValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Industry) != LinkedInFacetTypes.Industry) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetLanguageValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.Language) != LinkedInFacetTypes.Language) " is 127.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetCurrentCompanyValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.CurrentCompany) != LinkedInFacetTypes.CurrentCompany) " is 145.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetPastCompanyValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.PastCompany) != LinkedInFacetTypes.PastCompany) " is 136.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetSchoolValues.Count > 0 && (options.FacetTypes & LinkedInFacetTypes.School) != LinkedInFacetTypes.School) " is 121.
Long Statement,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The length of the statement  "                if (options.FacetNetworkValues != LinkedInFacetNetwork.None && (options.FacetTypes & LinkedInFacetTypes.Network) != LinkedInFacetTypes.Network) " is 143.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "                    throw new LinkedInMissingParameterException("Share content's submitted image URL cannot be null or empty"' "SubmittedImageUrl"); " is 128.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,ShareUpdate,The length of the statement  "                    throw new LinkedInMissingParameterException("Share content's submitted image URL cannot be null or empty"' "SubmittedImageUrl"); " is 128.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMemberGroups,The length of the statement  "                sb.Append("'membership-state'show-group-logo-in-profile'allow-messages-from-members'email-digest-frequency'email-announcements-from-managers'email-for-every-new-post)?start=0&count=250&oauth2_access_token="); " is 208.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "                        throw new LinkedInMissingParameterException("Invitation's authorization name cannot be null or empty"' "AuthorizationName"); " is 124.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "                        throw new LinkedInMissingParameterException("Invitation's authorization value cannot be null or empty"' "AuthorizationValue"); " is 126.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "                        throw new LinkedInMissingParameterException("Invitation's recipient first name cannot be null or empty"' "RecipientFirstName"); " is 127.
Long Statement,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The length of the statement  "                        throw new LinkedInMissingParameterException("Invitation's recipient last name cannot be null or empty"' "RecipientLastName"); " is 125.
Long Statement,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The length of the statement  "                            if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token")) " is 132.
Long Statement,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The length of the statement  "                            if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired")) " is 154.
Long Statement,LinkedIn.NET.Groups,LinkedInGroupComment,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Groups\LinkedInGroupComment.cs,Delete,The length of the statement  "            if (!AvailableAction[LinkedInGroupCommentAction.Delete] && !AvailableAction[LinkedInGroupCommentAction.FlagAsInappropriate]) " is 124.
Complex Conditional,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'"  is complex.
Complex Conditional,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'"  is complex.
Complex Conditional,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The conditional expression  "json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'"  is complex.
Complex Conditional,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,AddGroupPost,The conditional expression  "!string.IsNullOrEmpty(options.SubmittedUrl) && !string.IsNullOrEmpty(options.SubmittedImageUrl) &&                      !string.IsNullOrEmpty(options.ContentTitle) && !string.IsNullOrEmpty(options.ContentText)"  is complex.
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 5;
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: remainingLength >= 5
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 4;
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: remainingLength >= 4
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: index += 4;
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'
Magic Number,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following statement contains a magic number: remainingLength >= 4
Magic Number,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareMemberFields,The following statement contains a magic number: fields.Length > 2
Magic Number,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareGetUpdatesFields,The following statement contains a magic number: var unixDate = new DateTime(1970' 1' 1);
Magic Number,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetPostComments,The following statement contains a magic number: request.Append(10);
Magic Number,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The following statement contains a magic number: request.Append(10);
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,ParseResponse,The following statement contains a magic number: arr1.Select(s => s.Split('=')).Where(arr2 => arr2.Length == 2)
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
Magic Number,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following statement contains a magic number: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
Missing Default,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,parseValue,The following switch statement is missing a default case: switch (lookAhead(json' index))              {                  case Tokens.TOKEN_STRING:                      return parseString(json' ref index' ref success);                  case Tokens.TOKEN_NUMBER:                      return parseNumber(json' ref index' ref success);                  case Tokens.TOKEN_CURLY_OPEN:                      return parseObject(json' ref index' ref success);                  case Tokens.TOKEN_TRUE:                      nextToken(json' ref index);                      return true;                  case Tokens.TOKEN_FALSE:                      nextToken(json' ref index);                      return false;                  case Tokens.TOKEN_NULL:                      nextToken(json' ref index);                      return null;                  case Tokens.TOKEN_NONE:                      break;              }
Missing Default,LinkedIn.NET,Json,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Json.cs,nextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return Tokens.TOKEN_CURLY_OPEN;                  case '}':                      return Tokens.TOKEN_CURLY_CLOSE;                  case '[':                      return Tokens.TOKEN_BRACKET_OPEN;                  case ']':                      return Tokens.TOKEN_BRACKET_CLOSE;                  case ''':                      return Tokens.TOKEN_COMMA;                  case '"':                      return Tokens.TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return Tokens.TOKEN_NUMBER;                  case ':':                      return Tokens.TOKEN_COLON;              }
Missing Default,LinkedIn.NET,RequestFields,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestFields.cs,PrepareFacetsParams,The following switch statement is missing a default case: switch (f)                          {                              case LinkedInFacetLanguage.English:                                  sb.Append("en'");                                  break;                              case LinkedInFacetLanguage.Russian:                                  sb.Append("ru'");                                  break;                              case LinkedInFacetLanguage.French:                                  sb.Append("fr'");                                  break;                              case LinkedInFacetLanguage.German:                                  sb.Append("de'");                                  break;                              case LinkedInFacetLanguage.Italian:                                  sb.Append("it'");                                  break;                              case LinkedInFacetLanguage.Portuguese:                                  sb.Append("pt'");                                  break;                              case LinkedInFacetLanguage.Spanish:                                  sb.Append("es'");                                  break;                              case LinkedInFacetLanguage.Others:                                  sb.Append("_o'");                                  break;                          }
Missing Default,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetMembers,The following switch statement is missing a default case: switch (p.GetBy)                      {                          case LinkedInGetMemberBy.Self:                              sb.Append("~");                              break;                          case LinkedInGetMemberBy.Id:                              sb.Append("id=");                              sb.Append(p.RequestBy);                              break;                          case LinkedInGetMemberBy.Url:                              sb.Append("url=");                              sb.Append(Utils.NormalizeUrl(p.RequestBy));                              break;                      }
Missing Default,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetSearchResult,The following switch statement is missing a default case: switch (options.Sort)                  {                      case LinkedinSearchResultsOrder.Distance:                          sb.Append("sort=distance&");                          break;                      case LinkedinSearchResultsOrder.Recommenders:                          sb.Append("sort=recommenders&");                          break;                      case LinkedinSearchResultsOrder.Relevance:                          sb.Append("sort=relevance&");                          break;                  }
Missing Default,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,SendInvitation,The following switch statement is missing a default case: switch (options.InvitationType)                  {                      case LinkedInInvitationType.InviteById:                          message.Append("<person path='/people/id=");                          message.Append(Utils.EscapeXml(options.RecipientId));                          message.Append("' />");                          break;                      case LinkedInInvitationType.InviteByEmail:                          message.Append("<person path='/people/email=");                          message.Append(Utils.EscapeXml(options.RecipientEmail));                          message.Append("'>");                          message.Append("<first-name>");                          message.Append(Utils.EscapeXml(options.RecipientFirstName));                          message.Append("</first-name>");                          message.Append("<last-name>");                          message.Append(Utils.EscapeXml(options.RecipientLastName));                          message.Append("</last-name>");                          message.Append("</person>");                          break;                  }
Missing Default,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,GetGroupPosts,The following switch statement is missing a default case: switch (options.Role)              {                  case LinkedInGroupPostRole.Creator:                      sb.Append("role=creator&");                      break;                  case LinkedInGroupPostRole.Commenter:                      sb.Append("role=commenter&");                      break;                  case LinkedInGroupPostRole.Follower:                      sb.Append("role=follower&");                      break;              }
Missing Default,LinkedIn.NET,RequestRunner,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\RequestRunner.cs,ChangeGroupSettings,The following switch statement is missing a default case: switch (settings.EmailDigestFrequency)                  {                      case LinkedInEmailDigestFrequency.Daily:                          request.Append("daily");                          break;                      case LinkedInEmailDigestFrequency.None:                          request.Append("none");                          break;                      case LinkedInEmailDigestFrequency.Weekly:                          request.Append("weekly");                          break;                  }
Missing Default,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,The following switch statement is missing a default case: switch (options.Parameters.GetBy)              {                  case LinkedInGetMemberBy.Id:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingMemberIdException("Member Id is not set"' "RequestBy");                      break;                  case LinkedInGetMemberBy.Url:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingProfileUrlException("User profile url is not set"' "RequestBy");                      if (                          !Uri.IsWellFormedUriString(options.Parameters.RequestBy'                              UriKind.RelativeOrAbsolute))                          throw new LinkedInInvalidProfileUrlException("Invalid user profile url"' "RequestBy");                      break;              }
Missing Default,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetMember,The following switch statement is missing a default case: switch (options.Parameters.GetBy)              {                  case LinkedInGetMemberBy.Id:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingMemberIdException("Member Id is not set"' "RequestBy");                      break;                  case LinkedInGetMemberBy.Url:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingProfileUrlException("User profile url is not set"' "RequestBy");                      if (!Uri.IsWellFormedUriString(options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))                          throw new LinkedInInvalidProfileUrlException("Invalid user profile url"' "RequestBy");                      break;              }
Missing Default,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,The following switch statement is missing a default case: switch (options.Parameters.GetBy)              {                  case LinkedInGetMemberBy.Id:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingMemberIdException("Member Id is not set"' "RequestBy");                      break;                  case LinkedInGetMemberBy.Url:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingProfileUrlException("User profile url is not set"'                              "RequestBy");                      if (                          !Uri.IsWellFormedUriString(options.Parameters.RequestBy'                              UriKind.RelativeOrAbsolute))                          throw new LinkedInInvalidProfileUrlException("Invalid user profile url"'                              "RequestBy");                      break;              }
Missing Default,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,GetUpdates,The following switch statement is missing a default case: switch (options.Parameters.GetBy)              {                  case LinkedInGetMemberBy.Id:                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingMemberIdException("Member Id is not set"' "RequestBy");                      break;                  case LinkedInGetMemberBy.Url:    //LinkedInGetMemberBy.Url                      if (string.IsNullOrEmpty(options.Parameters.RequestBy))                          throw new LinkedInMissingProfileUrlException("User profile url is not set"'                              "RequestBy");                      if (!Uri.IsWellFormedUriString(options.Parameters.RequestBy' UriKind.RelativeOrAbsolute))                          throw new LinkedInInvalidProfileUrlException("Invalid user profile url"' "RequestBy");                      break;              }
Missing Default,LinkedIn.NET,LinkedInClient,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\LinkedInClient.cs,SendInvitation,The following switch statement is missing a default case: switch (options.InvitationType)              {                  case LinkedInInvitationType.InviteById:                      if (string.IsNullOrEmpty(options.RecipientId))                          throw new LinkedInMissingParameterException("Invitation's recipient ID cannot be null or empty"' "RecipientId");                      if (string.IsNullOrEmpty(options.AuthorizationName))                          throw new LinkedInMissingParameterException("Invitation's authorization name cannot be null or empty"' "AuthorizationName");                      if (string.IsNullOrEmpty(options.AuthorizationValue))                          throw new LinkedInMissingParameterException("Invitation's authorization value cannot be null or empty"' "AuthorizationValue");                      break;                  case LinkedInInvitationType.InviteByEmail:                      if (string.IsNullOrEmpty(options.RecipientEmail))                          throw new LinkedInMissingParameterException("Invitation's recipient email cannot be null or empty"' "RecipientEmail");                      if (string.IsNullOrEmpty(options.RecipientFirstName))                          throw new LinkedInMissingParameterException("Invitation's recipient first name cannot be null or empty"' "RecipientFirstName");                      if (string.IsNullOrEmpty(options.RecipientLastName))                          throw new LinkedInMissingParameterException("Invitation's recipient last name cannot be null or empty"' "RecipientLastName");                      break;              }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupSettings,The following switch statement is missing a default case: switch (xc.Value.Trim())                      {                          case "none":                              liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.None;                              break;                          case "daily":                              liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.Daily;                              break;                          case "weekly":                              liSettings.EmailDigestFrequency = LinkedInEmailDigestFrequency.Weekly;                              break;                      }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim())                          {                              case "blocked":                                  liGroup.MembershipState = LinkedInGroupRelationship.Blocked;                                  break;                              case "non-member":                                  liGroup.MembershipState = LinkedInGroupRelationship.NonMember;                                  break;                              case "awaiting-confirmation":                                  liGroup.MembershipState = LinkedInGroupRelationship.AwaitingConfirmation;                                  break;                              case "awaiting-parent-group-confirmation":                                  liGroup.MembershipState = LinkedInGroupRelationship.AwaitingParentGroupConfirmation;                                  break;                              case "member":                                  liGroup.MembershipState = LinkedInGroupRelationship.Member;                                  break;                              case "moderator":                                  liGroup.MembershipState = LinkedInGroupRelationship.Moderator;                                  break;                              case "manager":                                  liGroup.MembershipState = LinkedInGroupRelationship.Manager;                                  break;                              case "owner":                                  liGroup.MembershipState = LinkedInGroupRelationship.Owner;                                  break;                          }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim())                          {                              case "add-post":                                  liGroup.AvailableAction[LinkedInGroupAction.AddPost] = true;                                  break;                              case "leave":                                  liGroup.AvailableAction[LinkedInGroupAction.Leave] = true;                                  break;                              case "view-posts":                                  liGroup.AvailableAction[LinkedInGroupAction.ViewPosts] = true;                                  break;                          }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroup,The following switch statement is missing a default case: switch (xc.Value.Trim())                      {                          case "alumni":                              liGroup.Category = LinkedInGroupCategory.Alumni;                              break;                          case "corporate":                              liGroup.Category = LinkedInGroupCategory.Corporate;                              break;                          case "conference":                              liGroup.Category = LinkedInGroupCategory.Conference;                              break;                          case "network":                              liGroup.Category = LinkedInGroupCategory.Network;                              break;                          case "philanthropic":                              liGroup.Category = LinkedInGroupCategory.Philantropic;                              break;                          case "professional":                              liGroup.Category = LinkedInGroupCategory.Professional;                              break;                          case "other":                              liGroup.Category = LinkedInGroupCategory.Other;                              break;                      }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xn.Value.Trim())                      {                          case "standard":                              liPost.PostType = LinkedInGroupPostType.Standard;                              break;                          case "news":                              liPost.PostType = LinkedInGroupPostType.News;                              break;                      }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xn.Value.Trim())                      {                          case "discussion":                              liPost.Category = LinkedInGroupPostCategory.Discussion;                              break;                      }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupPost,The following switch statement is missing a default case: switch (xc.Value.Trim())                          {                              case "add-comment":                                  liPost.AvailableAction[LinkedInGroupPostAction.AddComment] = true;                                  break;                              case "flag-as-inappropriate":                              case "delete":                                  liPost.AvailableAction[LinkedInGroupPostAction.FlagAsInappropriate] = true;                                  break;                              case "categorize-as-job":                                  liPost.AvailableAction[LinkedInGroupPostAction.CategorizeAsJob] = true;                                  break;                              case "categorize-as-promotion":                                  liPost.AvailableAction[LinkedInGroupPostAction.CategorizeAsPromotion] = true;                                  break;                              case "follow":                              case "unfollow":                                  liPost.AvailableAction[LinkedInGroupPostAction.Follow] = true;                                  break;                              case "like":                              case "unlike":                                  liPost.AvailableAction[LinkedInGroupPostAction.Like] = true;                                  break;                              case "reply-privately":                                  liPost.AvailableAction[LinkedInGroupPostAction.ReplyPrivately] = true;                                  break;                          }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildGroupComment,The following switch statement is missing a default case: switch (xc.Value.Trim())                  {                      case "flag-as-inappropriate":                          liComment.AvailableAction[LinkedInGroupCommentAction.FlagAsInappropriate] = true;                          break;                      case "delete":                          liComment.AvailableAction[LinkedInGroupCommentAction.Delete] = true;                          break;                  }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,The following switch statement is missing a default case: switch (updType)              {                  case "CONN":                      update = new LinkedInConnectionMemberUpdate();                      break;                  case "NCON":                  case "CCEM":                      update = new LinkedInConnectionUpdate();                      break;                  case "SHAR":                      update = new LinkedInShareUpdate();                      break;                  case "STAT":                      update = new LinkedInStatusUpdate();                      break;                  case "VIRL":                      update = new LinkedInViralUpdate();                      break;                  case "JGRP":                      update = new LinkedInGroupUpdate();                      break;                  case "APPS":                  case "APPM":                      update = new LinkedInApplicationUpdate();                      break;                  case "PICU":                      update = new LinkedInPictureUpdate();                      break;                  case "PROF":                      update = new LinkedInPositionUpdate();                      break;                  case "PRFX":                      update = new LinkedInExtendedProfileUpdate();                      break;                  case "PREC":                  case "SVPR":                      update = new LinkedInRecommendationUpdate();                      break;                  case "JOBP":                      update = new LinkedInJobPostingUpdate();                      break;                  case "CMPY":                      switch (getCompanyUpdateType(xu))                      {                          case CompanyUpdateType.Profile:                              update = new LinkedInCompanyProfileUpdate();                              break;                          case CompanyUpdateType.Status:                              update = new LinkedInCompanyStatusUpdate();                              break;                          case CompanyUpdateType.Job:                              update = new LinkedInCompanyJobUpdate();                              break;                          case CompanyUpdateType.Person:                              update = new LinkedInCompanyPersonUpdate();                              break;                      }                      break;                  case "MSFC":                      update = new LinkedInStartFollowCompanyUpdate();                      break;              }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,BuildUpdate,The following switch statement is missing a default case: switch (getCompanyUpdateType(xu))                      {                          case CompanyUpdateType.Profile:                              update = new LinkedInCompanyProfileUpdate();                              break;                          case CompanyUpdateType.Status:                              update = new LinkedInCompanyStatusUpdate();                              break;                          case CompanyUpdateType.Job:                              update = new LinkedInCompanyJobUpdate();                              break;                          case CompanyUpdateType.Person:                              update = new LinkedInCompanyPersonUpdate();                              break;                      }
Missing Default,LinkedIn.NET,Utils,D:\research\architectureSmells\repos\cliftonm_HOPE\LinkedIn.NET\Utils.cs,GetResponseError,The following switch statement is missing a default case: switch (Convert.ToInt32(xStatus.Value))                      {                          case 400:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.BadRequest'                                  xMessage.Value);                          case 401:                              if (xMessage.Value.ToLower().Contains("expired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.ExpiredToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("invalid access token") || xMessage.Value.ToLower().Contains("unable to verify access token"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InvalidAccessToken'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("ssl required"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.SslRequired'                                  xMessage.Value);                              break;                          case 403:                              if (xMessage.Value.ToLower().Contains("throttle limit for calls to this resource"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.TrottleLimitReached'                                  xMessage.Value);                              if (xMessage.Value.ToLower().Contains("unauthorized change of forum type") || xMessage.Value.ToLower().Contains("anetauthexception: applicationrequired"))                                  return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnauthorizedAction'                                      xMessage.Value);                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.UnparsedWebException'                                  xMessage.Value);                          case 404:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.PageNotFound'                                  xMessage.Value);                          case 500:                              return new Tuple<LinkedInResponseStatus' string>(LinkedInResponseStatus.InternalServerError'                                  xMessage.Value);                      }
