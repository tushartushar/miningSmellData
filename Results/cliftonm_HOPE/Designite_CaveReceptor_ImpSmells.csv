Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,SayWhoIsNextToUs,The length of the statement  "			CreateCarrier("Text"' (outSignal) => outSignal.Value = "Passages lead to " + String.Join("' "' caveNeighbors.Select(cn => cn.ToString()))); " is 139.
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddReceiveProtocol".
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddReceiveProtocol".
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddReceiveProtocol".
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The constructor "CaveReceptor" calls a virtual method "AddEmitProtocol".
Magic Number,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,CaveReceptor,The following statement contains a magic number: caveNeighbors = new int[3];
Magic Number,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,ProcessCarrier,The following statement contains a magic number: if (carrier.Protocol.DeclTypeName == "HW_YouAre")  			{  				// Save our cave # and neighbor cave numbers.  				caveNumber = carrier.Signal.CaveNumber;  				caveNeighbors[0] = carrier.Signal.AdjoiningCave1;  				caveNeighbors[1] = carrier.Signal.AdjoiningCave2;  				caveNeighbors[2] = carrier.Signal.AdjoiningCave3;    				hasBottomlessPit = carrier.Signal.HasBottomlessPit;  				hasSuperBats = carrier.Signal.HasSuperBats;  				hasWumpus = carrier.Signal.HasWumpus;  				hasPlayer = carrier.Signal.HasPlayer;    				// Configure emitters and listeners.  				UpdateEmitters();  				UpdateListeners();    				if (hasPlayer)  				{  					SayWhoIsNextToUs();  					AskAboutOurNeighbors();  					TalkToPlayer();  				}  			}  			else if (carrier.Protocol.DeclTypeName.StartsWith("HW_Announce"))  			{  				if (hasBottomlessPit)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I feel a draft!");  				}    				if (hasSuperBats)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I hear flapping!");							  				}    				if (hasWumpus)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I smell a Wumpus!");  				}  			}  			else if (carrier.Protocol.DeclTypeName == "HW_MoveTo")  			{  				if (carrier.Signal.NewCaveNumber == caveNumber)  				{  					hasPlayer = true;  					  					if (CheckCaveState())  					{  						SayWhoIsNextToUs();  						AskAboutOurNeighbors();  						TalkToPlayer();  					}  				}  				else  				{  					hasPlayer = false;  				}  			}  			else if (carrier.Protocol.DeclTypeName == "HW_ShootInto")  			{  				if (hasPlayer)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "Ouch!  You shot yourself!!!!!!!!");  					CreateCarrier("HW_GameState"' (outSignal) => outSignal.PlayerShotSelf = true);  				}  				// This is my cave the hunter is shooting into!  				else if (hasWumpus)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "Ouch!  You shot the Wumpus!!!!!!!!");  					CreateCarrier("HW_GameState"' (outSignal) => outSignal.WumpusIsDead = true);  				}  				else  				{  					int arrowLife = carrier.Signal.RemainingLife;  					--arrowLife;    					if (arrowLife > 0)  					{  						// The arrow continues to a random room.  						CreateCarrier("HW_ShootInto"' (signal) =>  						{  							signal.CaveNumber = caveNeighbors[rnd.Next(3)];  							signal.RemainingLife = arrowLife;  						});  					}  				}  			}
Magic Number,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,ProcessCarrier,The following statement contains a magic number: if (carrier.Protocol.DeclTypeName == "HW_YouAre")  			{  				// Save our cave # and neighbor cave numbers.  				caveNumber = carrier.Signal.CaveNumber;  				caveNeighbors[0] = carrier.Signal.AdjoiningCave1;  				caveNeighbors[1] = carrier.Signal.AdjoiningCave2;  				caveNeighbors[2] = carrier.Signal.AdjoiningCave3;    				hasBottomlessPit = carrier.Signal.HasBottomlessPit;  				hasSuperBats = carrier.Signal.HasSuperBats;  				hasWumpus = carrier.Signal.HasWumpus;  				hasPlayer = carrier.Signal.HasPlayer;    				// Configure emitters and listeners.  				UpdateEmitters();  				UpdateListeners();    				if (hasPlayer)  				{  					SayWhoIsNextToUs();  					AskAboutOurNeighbors();  					TalkToPlayer();  				}  			}  			else if (carrier.Protocol.DeclTypeName.StartsWith("HW_Announce"))  			{  				if (hasBottomlessPit)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I feel a draft!");  				}    				if (hasSuperBats)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I hear flapping!");							  				}    				if (hasWumpus)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "I smell a Wumpus!");  				}  			}  			else if (carrier.Protocol.DeclTypeName == "HW_MoveTo")  			{  				if (carrier.Signal.NewCaveNumber == caveNumber)  				{  					hasPlayer = true;  					  					if (CheckCaveState())  					{  						SayWhoIsNextToUs();  						AskAboutOurNeighbors();  						TalkToPlayer();  					}  				}  				else  				{  					hasPlayer = false;  				}  			}  			else if (carrier.Protocol.DeclTypeName == "HW_ShootInto")  			{  				if (hasPlayer)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "Ouch!  You shot yourself!!!!!!!!");  					CreateCarrier("HW_GameState"' (outSignal) => outSignal.PlayerShotSelf = true);  				}  				// This is my cave the hunter is shooting into!  				else if (hasWumpus)  				{  					CreateCarrier("Text"' (outSignal) => outSignal.Value = "Ouch!  You shot the Wumpus!!!!!!!!");  					CreateCarrier("HW_GameState"' (outSignal) => outSignal.WumpusIsDead = true);  				}  				else  				{  					int arrowLife = carrier.Signal.RemainingLife;  					--arrowLife;    					if (arrowLife > 0)  					{  						// The arrow continues to a random room.  						CreateCarrier("HW_ShootInto"' (signal) =>  						{  							signal.CaveNumber = caveNeighbors[rnd.Next(3)];  							signal.RemainingLife = arrowLife;  						});  					}  				}  			}
Magic Number,HuntTheWumpus,CaveReceptor,C:\repos\cliftonm_HOPE\Receptors\HuntTheWumpus\CaveReceptor\CaveReceptor.cs,TalkToPlayer,The following statement contains a magic number: CreateCarrier("HW_Player"' (outSignal) =>  				{  					outSignal.CaveNumber = caveNumber;  					outSignal.AdjoiningCave1 = caveNeighbors[0];  					outSignal.AdjoiningCave2 = caveNeighbors[1];  					outSignal.AdjoiningCave3 = caveNeighbors[2];  				});
