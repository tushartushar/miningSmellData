Implementation smell,Namespace,Class,File,Method,Description
Long Method,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ProcessPage,The method has 125 lines of code.
Long Statement,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ProcessPage,The length of the statement  "								// Don't dispose of the stream or the image' otherwise the viewer (or any other process) will not have valid image data. " is 120.
Virtual Method Call from Constructor,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ApodScraper,The constructor "ApodScraper" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ApodScraper,The constructor "ApodScraper" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ApodScraper,The constructor "ApodScraper" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ApodScraper,The constructor "ApodScraper" calls a virtual method "AddReceiveProtocol".
Virtual Method Call from Constructor,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ApodScraper,The constructor "ApodScraper" calls a virtual method "AddReceiveProtocol".
Empty Catch Block,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ProcessPage,The method has an empty catch block.
Magic Number,APODScraperReceptor,ApodScraper,C:\repos\cliftonm_HOPE\Receptors\APODScraperReceptor\ApodScraper.cs,ProcessPage,The following statement contains a magic number: if (html == null)  			{  				EmitException("Page load error: " + url);  			}  			else  			{  				doc.LoadHtml(html);    				string keywords = String.Empty;  				string imageURL = String.Empty;  				string title = String.Empty;  				string explanation = String.Empty;    				try  				{  					keywords = doc.DocumentNode.SelectNodes("/html/head/meta[@name='keywords']")[0].Attributes["content"].Value;  				}  				catch  				{  					// Not a critical error.  				}    				try  				{  					imageURL = doc.DocumentNode.SelectNodes("//img")[0].Attributes["src"].Value;  				}  				catch(Exception ex)  				{  					// TODO: Change to log  					EmitException(ex);  				}    				if (String.IsNullOrEmpty(imageURL))  				{  					// There is no image.  Perhaps a video (see http://apod.nasa.gov/apod/ap140526.html as an example.)  					// Anyways' we cannot continue.  					// LogImage(url' null' keywords' null' null' errors);  					return;  				}    				int idx;    				try  				{  					// The title is immediately following the image' embedded in various tags but before "Explanation" and before "Credit:"  					// Basically' we want to find the first non-markup text.  					idx = html.ToLower().IndexOf("<img");					// must find the img tag first.  					idx += html.Substring(idx).IndexOf("</a>");		// find the end of the image.  					idx += 4;  					bool foundTitle = false;    					while (!foundTitle)  					{  						if (html[idx] == '<')  						{  							while (html[idx] != '>') ++idx;  							++idx;  						}    						while ((html[idx] == ' ') || (html[idx] == '\n'))  						{  							++idx;  						}    						if (html[idx] != '<')  						{  							foundTitle = true;  						}  					}    					int endIdx = html.Substring(idx).IndexOf('<');  					title = html.Substring(idx' endIdx).Trim();  				}  				catch (Exception ex)  				{  					// TODO: Change to log  					EmitException(ex);  					// errors.Add("Problem with title" + "\r\n" + ex.Message);  				}    				try  				{  					// Get the explanation.  This is everything until a <p>  					idx = html.IndexOf("Explanation:");  					idx += html.Substring(idx).IndexOf(">");		// find the closing tag of whatever is decorating "Explanation:"  					++idx;  					int endIdx = html.Substring(idx).IndexOf("<p>");  					explanation = html.Substring(idx' endIdx);  					explanation = explanation.Replace('\n'' ' ').Trim();  				}  				catch (Exception ex)  				{  					// TODO: Change to log  					EmitException(ex);  					// errors.Add("Problem with explanation" + "\r\n" + ex.Message);  				}    				if (!String.IsNullOrEmpty(imageURL))  				{  					try  					{  						Image img = await Task.Run(() =>  							{  								// DO NOT CLOSE THE STREAM UNTIL THE IMAGE HAS BEEN SAVED.  								// http://stackoverflow.com/questions/1053052/a-generic-error-occurred-in-gdi-jpeg-image-to-memorystream  								// http://stackoverflow.com/questions/10077219/download-image-from-url-in-c-sharp  								WebClient webClient = new WebClient();  								byte[] data = webClient.DownloadData("http://apod.nasa.gov/apod/" + imageURL);  								MemoryStream stream = new MemoryStream(data);  								Image imgdata = Image.FromStream(stream);  								// Don't dispose of the stream or the image' otherwise the viewer (or any other process) will not have valid image data.  								/*  								// Save the big image.  								string imgfn = ImagesFolder + "\\" + imageURL.RightOfRightmostOf('/');  								img.Save(imgfn);  								img.Dispose();  								stream.Dispose();  								 */  								webClient.Dispose();    								return imgdata;  							});      						// Put it out there into the wild.  						// EmitImageFile(fn);  						EmitImage(img' title' explanation' url);    						// LogImage(url' fn' keywords' title' explanation' errors);    					}  					catch (Exception ex)  					{  						EmitException(ex);  						// errors.Add("Problem loading image from site." + "\r\n" + ex.Message);  					}  				}  			}
