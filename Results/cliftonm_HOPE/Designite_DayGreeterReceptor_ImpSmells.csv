Implementation smell,Namespace,Class,File,Method,Description
Long Method,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The method has 117 lines of code.
Complex Method,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,Cyclomatic complexity of the method is 19
Complex Method,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,Cyclomatic complexity of the method is 11
Complex Method,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,Cyclomatic complexity of the method is 14
Long Statement,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The length of the statement  "						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one) " is 123.
Long Statement,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The length of the statement  "			string[] numbersArr = new string[] { "one"' "two"' "three"' "four"' "five"' "six"' "seven"' "eight"' "nine"' "ten"' "eleven"' "twelve"' "thirteen"' "fourteen"' "fifteen"' "sixteen"' "seventeen"' "eighteen"' "nineteen" }; " is 220.
Long Statement,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The length of the statement  "			string[] suffixesArr = new string[] { "thousand"' "million"' "billion"' "trillion"' "quadrillion"' "quintillion"' "sextillion"' "septillion"' "octillion"' "nonillion"' "decillion"' "undecillion"' "duodecillion"' "tredecillion"' "Quattuordecillion"' "Quindecillion"' "Sexdecillion"' "Septdecillion"' "Octodecillion"' "Novemdecillion"' "Vigintillion" }; " is 351.
Virtual Method Call from Constructor,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,DayGreeter,The constructor "DayGreeter" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,DayGreeter,The constructor "DayGreeter" calls a virtual method "AddEmitProtocol".
Virtual Method Call from Constructor,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,DayGreeter,The constructor "DayGreeter" calls a virtual method "AddReceiveProtocol".
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following statement contains a magic number: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: splitter.Length == 2
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following statement contains a magic number: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: int power = (suffixesArr.Length + 1) * 3;
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: double pow = Math.Pow(10' power);
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: words += NumWords(Math.Floor(n / pow)) + " " + suffixesArr[(power / 3) - 1] + "' ";
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n % Math.Pow(10' power) > 0
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: power -= 3;
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: power > 3
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: words += NumWords(Math.Floor(n / 1000)) + " thousand' ";
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n % 1000 > 0
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n %= 1000;
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n >= 1000
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: words += NumWords(Math.Floor(n / 100)) + " hundred";
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n %= 100;
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: (int)n / 100 > 0
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: words += tensArr[(int)n / 10 - 2];
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: words += tensArr[(int)n / 10 - 2];
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: n %= 10;
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: (int)n / 10 > 1
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: (n < 20) && (n > 0)
Magic Number,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWords,The following statement contains a magic number: 0 <= n && n <= 999
Missing Default,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,Parse,The following switch statement is missing a default case: switch (token.ToLower().LeftOf(':'))  				{  					case "dayperiod":  						if (now.Hour < 12)  						{  							tokenValue = "Morning";  						}  						else if (now.Hour < 18)  						{  							tokenValue = "Afternoon";  						}  						else  						{  							tokenValue = "Evening";  						}  						break;    					case "dayofweek":  						tokenValue = now.DayOfWeek.ToString();  						break;    					case "month":  						tokenValue = now.ToString("MMMM"' CultureInfo.InvariantCulture);  						break;    					case "dateofmonth":  						tokenValue = now.Day.ToString();  						break;    					case "hour12":  						int h = now.Hour;    						if (h == 0)  						{  							// midnight to 0:59 is' for example "oh thirty" for 0:30  							tokenValue = "oh";  						}  						else if (h == 12)  						{  							// specific case for noon to 12:59.  							tokenValue = "twelve";  						}  						else  						{  							// Otherwise' back to 1-11.  							tokenValue = NumWordsWrapper(h % 12);  						}  						break;    					case "minute":  						if (now.Minute > 0)  						{  							tokenValue = NumWordsWrapper(now.Minute);    							// No minutes reported at all if exactly 0' example: nine AM for 9:00  							if (now.Minute < 10)  							{  								// oh-five' so we output' for example: "nine oh five" for 9:05.  								tokenValue = "oh " + tokenValue;  							}  						}  						break;    					case "ampm":  						tokenValue = ((now.Hour >=12) ? "PM" : "AM");  						break;    					case "feed":  						{  							// left of '''  							string url = token.RightOf(':').LeftOf(''');  							int numItems = Int32.MaxValue;  							  							if (token.Contains("'"))  							{  								numItems = Convert.ToInt32(token.RightOf('''));  								CreateCarrier("RSSFeedUrl"' signal =>  									{  										signal.FeedUrl.Value = url;  										signal.MaxItems = numItems;  										signal.Tag = groupGuid.ToString();  									});  							}    							break;  						}  					  					case "group":  						// Everything in this section will be rendered once the request (which we don't know what it is' but there needs to be one)  						// is completed.  						inGroup = true;  						groupGuid = Guid.NewGuid();  						sbGroup = new StringBuilder();  						break;    					case "/group":  						left = left.Trim();			// Remove any CRLF's.  TODO: Kludgy!    						inGroup = false;  						groups[groupGuid.ToString()] = sbGroup;  						break;  				}
Missing Default,DayGreeterReceptor,DayGreeter,D:\research\architectureSmells\repos\cliftonm_HOPE\Receptors\Fun Stuff\DayGreeterReceptor\DayGreeter.cs,NumWordsWrapper,The following switch statement is missing a default case: switch (counter)  				{  					case 1: words += NumWords(decPart) + " tenths"; break;  					case 2: words += NumWords(decPart) + " hundredths"; break;  					case 3: words += NumWords(decPart) + " thousandths"; break;  					case 4: words += NumWords(decPart) + " ten-thousandths"; break;  					case 5: words += NumWords(decPart) + " hundred-thousandths"; break;  					case 6: words += NumWords(decPart) + " millionths"; break;  					case 7: words += NumWords(decPart) + " ten-millionths"; break;  				}
