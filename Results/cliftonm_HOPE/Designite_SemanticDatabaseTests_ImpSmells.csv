Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SemanticDatabaseTests,Helpers,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\Helpers.cs,CreateNativeType,The length of the statement  "			sts.NativeTypes.Add(new Clifton.SemanticTypeSystem.NativeType() { Name = name' ImplementingType = type' UniqueField = unique }); " is 128.
Long Statement,SemanticDatabaseTests,Helpers,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\Helpers.cs,CreateSemanticElement,The length of the statement  "			sts.SemanticElements.Add(new Clifton.SemanticTypeSystem.SemanticElement() { Name = subtypeName' UniqueField = unique }); " is 120.
Long Statement,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,InitRestaurantLatLonUniqueChildST,The length of the statement  "			SemanticTypeStruct stsLatLon = Helpers.CreateSemanticType("LatLon"' true' decls' structs);			// child ST LatLon is declared to be unique. " is 137.
Long Statement,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,InitRestaurantLatLonUniqueParentSTElement,The length of the statement  "			SemanticTypeStruct stsLatLon = Helpers.CreateSemanticType("LatLon"' false' decls' structs);			// child ST LatLon is declared to NOT be unique. " is 142.
Long Statement,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,ThreeSemanticTypesJoinTest,The length of the statement  "			// "http://www.codeproject.com"; ; ""		<-- notice the Visited portion is null' however the "displayed" portion is NOT null. " is 123.
Empty Catch Block,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,DropTable,The method has an empty catch block.
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleNonUniqueInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "LatLon"' signal =>  				{  					signal.latitude = 1.0;  					signal.longitude = 2.0;  				});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleNonUniqueInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 LatLon records.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleUniqueFieldsInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "LatLon"' signal =>  			{  				signal.latitude = 1.0;  				signal.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleUniqueSTInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "LatLon"' signal =>  			{  				signal.latitude = 1.0;  				signal.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelNonUniqueSTInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "Restaurant"' signal =>  			{  				signal.LatLon.latitude = 1.0;  				signal.LatLon.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelNonUniqueSTInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 LatLon record.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelNonUniqueSTInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 Restaurant records.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueChildSTInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "Restaurant"' signal =>  			{  				signal.LatLon.latitude = 1.0;  				signal.LatLon.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueChildSTInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 Restaurant records.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueSTElementInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "Restaurant"' signal =>  			{  				signal.LatLon.latitude = 1.0;  				signal.LatLon.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueSTElementInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 LatLon records.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueSTElementInsert,The following statement contains a magic number: Assert.AreEqual(2' count' "Expected 2 Restaurant records.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueElementAndChildSTInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "Restaurant"' signal =>  			{  				signal.LatLon.latitude = 1.0;  				signal.LatLon.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoLevelUniqueParentSTInsert,The following statement contains a magic number: ICarrier carrier = Helpers.CreateCarrier(rsys' "Restaurant"' signal =>  			{  				signal.LatLon.latitude = 1.0;  				signal.LatLon.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleQuery,The following statement contains a magic number: ICarrier latLonCarrier = Helpers.CreateCarrier(rsys' "LatLon"' signal =>  			{  				signal.latitude = 1.0;  				signal.longitude = 2.0;  			});
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,SimpleQuery,The following statement contains a magic number: Assert.AreEqual(2.0' retSignal.longitude' "Wrong data for longitude.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,TwoStructureJoinTest,The following statement contains a magic number: Assert.AreEqual(2' queuedCarriers.Count' "Expected two signals to be returned.");
Magic Number,SemanticDatabaseTests,SemanticDatabaseTest,D:\research\architectureSmells\repos\cliftonm_HOPE\UnitTests\SemanticDatabaseTests\SemanticDatabaseTest.cs,ThreeSemanticTypesJoinTest,The following statement contains a magic number: Assert.AreEqual(2' queuedCarriers.Count' "Expected two signals to be returned.");
