Implementation smell,Namespace,Class,File,Method,Description
Complex Method,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,BuildHeader,Cyclomatic complexity of the method is 14
Complex Method,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,AddAttachment,Cyclomatic complexity of the method is 10
Complex Method,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,SetAddressFields,Cyclomatic complexity of the method is 17
Complex Method,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,AddBodypart,Cyclomatic complexity of the method is 12
Complex Method,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseMIMEParts,Cyclomatic complexity of the method is 11
Complex Method,S22.Mail,SerializableMailMessage,C:\repos\smiley22_S22.Mail\SerializableMailMessage\SerializableMailMessage.cs,SerializableMailMessage,Cyclomatic complexity of the method is 13
Long Statement,S22.Imap,ContentDispositionTypeMap,C:\repos\smiley22_S22.Mail\ContentDisposition.cs,fromString,The length of the statement  "	Dictionary<string' ContentDispositionType> Map = new Dictionary<string' ContentDispositionType> (StringComparer.OrdinalIgnoreCase) { " is 132.
Long Statement,S22.Imap,ContentTransferEncodingMap,C:\repos\smiley22_S22.Mail\ContentTransferEncoding.cs,fromString,The length of the statement  "	Dictionary<string' ContentTransferEncoding> Map = new Dictionary<string' ContentTransferEncoding> (StringComparer.OrdinalIgnoreCase) { " is 134.
Long Statement,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,BuildHeader,The length of the statement  "		string contentType = (m.Attachments.Count == 0 ? "multipart/alternative" : "multipart/mixed") + "; boundary=" + GenerateContentBoundary (); " is 139.
Long Statement,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The length of the statement  "		Match m = Regex.Match (a.Trim ()' @"(.*)\s*<?([A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2'4})>?"' RegexOptions.IgnoreCase | RegexOptions.RightToLeft); " is 141.
Long Statement,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,AddBodypart,The length of the statement  "	Encoding encoding = part.Parameters.ContainsKey ("Charset") ? Util.GetEncoding (part.Parameters ["Charset"]) : Encoding.ASCII; " is 126.
Long Statement,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,CreateAttachment,The length of the statement  "		attachment.ContentType = new System.Net.Mime.ContentType (part.Type.ToString ().ToLower () + "/" + part.Subtype.ToLower ()); " is 124.
Complex Conditional,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,QEncode,The conditional expression  "c < 32 || c == '=' || c == '_' || c == '?' || c > 126"  is complex.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,FromHeader,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,CreateAttachment,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,CreateAlternateView,The method has an empty catch block.
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,QEncode,The following statement contains a magic number: foreach (char c in chars) {  	if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  		builder.Append (string.Format ("={0:X2}"' (int)c));  	else if (c == ' ')  		builder.Append ('_');  	else  		builder.Append (c);  }  
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,QEncode,The following statement contains a magic number: foreach (char c in chars) {  	if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  		builder.Append (string.Format ("={0:X2}"' (int)c));  	else if (c == ' ')  		builder.Append ('_');  	else  		builder.Append (c);  }  
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,QEncode,The following statement contains a magic number: if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  	builder.Append (string.Format ("={0:X2}"' (int)c));  else if (c == ' ')  	builder.Append ('_');  else  	builder.Append (c);  
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,QEncode,The following statement contains a magic number: if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  	builder.Append (string.Format ("={0:X2}"' (int)c));  else if (c == ' ')  	builder.Append ('_');  else  	builder.Append (c);  
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,AddAttachment,The following statement contains a magic number: using (MemoryStream memstream = new MemoryStream ()) {  	int bytesRead;  	byte[] buffer = new byte[4096];  	while ((bytesRead = view.ContentStream.Read (buffer' 0' buffer.Length)) > 0) {  		memstream.Write (buffer' 0' bytesRead);  	}  	string str = Convert.ToBase64String (memstream.ToArray ());  	StringReader reader = new StringReader (str);  	char[] line = new char[76];  	int read;  	while ((read = reader.Read (line' 0' line.Length)) > 0)  		builder.AppendLine (new string (line' 0' read));  }  
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Mail\MailMessage.cs,AddAttachment,The following statement contains a magic number: using (MemoryStream memstream = new MemoryStream ()) {  	int bytesRead;  	byte[] buffer = new byte[4096];  	while ((bytesRead = view.ContentStream.Read (buffer' 0' buffer.Length)) > 0) {  		memstream.Write (buffer' 0' bytesRead);  	}  	string str = Convert.ToBase64String (memstream.ToArray ());  	StringReader reader = new StringReader (str);  	char[] line = new char[76];  	int read;  	while ((read = reader.Read (line' 0' line.Length)) > 0)  		builder.AppendLine (new string (line' 0' read));  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: try {  	MatchCollection matches = Regex.Matches (field' "([\\w\\-]+)=\"?([\\w\\-\\/\\.]+)");  	foreach (Match m in matches)  		coll.Add (m.Groups [1].Value' m.Groups [2].Value);  	Match mvalue = Regex.Match (field' @"^\s*([\w\/]+)");  	coll.Add ("value"' mvalue.Success ? mvalue.Groups [1].Value : "");  }  catch {  	// We don't want this to blow up on the user with weird mails so  	// just return an empty collection.  	coll.Add ("value"' String.Empty);  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: foreach (Match m in matches)  	coll.Add (m.Groups [1].Value' m.Groups [2].Value);  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: coll.Add (m.Groups [1].Value' m.Groups [2].Value);  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: foreach (string a in addr) {  	Match m = Regex.Match (a.Trim ()' @"(.*)\s*<?([A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2'4})>?"' RegexOptions.IgnoreCase | RegexOptions.RightToLeft);  	if (m.Success) {  		// The above regex will erroneously match some illegal (very rare)  		// local-parts. RFC-compliant validation is not worth the effort  		// at all' so just wrap this in a try/catch block in case  		// MailAddress' ctor complains.  		try {  			mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  		}  		catch {  		}  	}  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: if (m.Success) {  	// The above regex will erroneously match some illegal (very rare)  	// local-parts. RFC-compliant validation is not worth the effort  	// at all' so just wrap this in a try/catch block in case  	// MailAddress' ctor complains.  	try {  		mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  	}  	catch {  	}  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: try {  	mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  }  catch {  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,ParseAddressList,The following statement contains a magic number: mails.Add (new MailAddress (m.Groups [2].Value' m.Groups [1].Value));  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,BodypartFromMIME,The following statement contains a magic number: if (m.Success) {  	p.Type = ContentTypeMap.fromString (m.Groups [1].Value);  	p.Subtype = m.Groups [2].Value;  }  
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Mail\MessageBuilder.cs,BodypartFromMIME,The following statement contains a magic number: p.Subtype = m.Groups [2].Value;  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,IsASCII,The following statement contains a magic number: return s.ToCharArray ().All (c => c < 127);  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else if (value [i] == '_') {  				m.WriteByte (Convert.ToByte (' '));  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid Q-encoded " + "string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else if (value [i] == '_') {  			m.WriteByte (Convert.ToByte (' '));  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else if (value [i] == '_') {  		m.WriteByte (Convert.ToByte (' '));  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else if (value [i] == '_') {  	m.WriteByte (Convert.ToByte (' '));  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: m.WriteByte (Convert.ToByte (hex' 16));  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QDecode,The following statement contains a magic number: i = i + 2;  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: try {  	using (MemoryStream m = new MemoryStream ()) {  		for (int i = 0; i < value.Length; i++) {  			if (value [i] == '=') {  				string hex = value.Substring (i + 1' 2);  				m.WriteByte (Convert.ToByte (hex' 16));  				i = i + 2;  			}  			else {  				m.WriteByte (Convert.ToByte (value [i]));  			}  		}  		return encoding.GetString (m.ToArray ());  	}  }  catch {  	throw new FormatException ("value is not a valid quoted-printable " + "encoded string");  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: using (MemoryStream m = new MemoryStream ()) {  	for (int i = 0; i < value.Length; i++) {  		if (value [i] == '=') {  			string hex = value.Substring (i + 1' 2);  			m.WriteByte (Convert.ToByte (hex' 16));  			i = i + 2;  		}  		else {  			m.WriteByte (Convert.ToByte (value [i]));  		}  	}  	return encoding.GetString (m.ToArray ());  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '=') {  		string hex = value.Substring (i + 1' 2);  		m.WriteByte (Convert.ToByte (hex' 16));  		i = i + 2;  	}  	else {  		m.WriteByte (Convert.ToByte (value [i]));  	}  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: if (value [i] == '=') {  	string hex = value.Substring (i + 1' 2);  	m.WriteByte (Convert.ToByte (hex' 16));  	i = i + 2;  }  else {  	m.WriteByte (Convert.ToByte (value [i]));  }  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: m.WriteByte (Convert.ToByte (hex' 16));  
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Mail\Util.cs,QPDecode,The following statement contains a magic number: i = i + 2;  
