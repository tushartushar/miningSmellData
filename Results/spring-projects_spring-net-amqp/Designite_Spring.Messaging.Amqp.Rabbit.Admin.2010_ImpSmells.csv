Implementation smell,Namespace,Class,File,Method,Description
Long Method,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,StartNode,The method has 126 lines of code.
Complex Method,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,StartNode,Cyclomatic complexity of the method is 11
Long Parameter List,Spring.Messaging.Amqp.Rabbit.Admin,IRabbitBrokerOperations,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\IRabbitBrokerOperations.cs,SetPermissions,The method has 5 parameters. Parameters: username' configure' read' write' vhostPath
Long Parameter List,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,SetPermissions,The method has 5 parameters. Parameters: username' configure' read' write' vhostPath
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,QueueInfo,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\QueueInfo.cs,ToString,The length of the statement  "                    "Transactions: {0}' AcksUncommitted: {1}' Consumers: {2}' Pid: {3}' Durable: {4}' Messages: {5}' Memory: {6}' AutoDelete: {7}' MessagesReady: {8}' Arguments: {9}' Name: {10}' MessagesUnacknowledged: {11}' MessageUncommitted: {12}"'  " is 231.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,AddUser,The length of the statement  "{ this.ExecuteAndConvertRpc<object>("rabbit_auth_backend_internal"' "add_user"' this.GetBytes(username)' this.GetBytes(password)); }" is 132.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,ChangeUserPassword,The length of the statement  "{ this.ExecuteAndConvertRpc<object>("rabbit_auth_backend_internal"' "change_password"' this.GetBytes(username)' this.GetBytes(newPassword)); }" is 142.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,StartNode,The length of the statement  "                    "Depending on your platform it might help to set RABBITMQ_LOG_BASE and RABBITMQ_MNESIA_BASE System properties to an empty directory."; " is 134.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,ExecuteAndConvertRpc,The length of the statement  "                AssertUtils.State(values.Length == 2' "The module adapter should be a map from 'module%function' to 'module%function'. " + "This one contained [" + adapter + "] which cannot be parsed to a module' function pair."); " is 214.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitControlErlangConverter,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitControlErlangConverter.cs,RegisterConverter,The length of the statement  "                AssertUtils.State(values.Length == 2' "The module adapter should be a map from 'module%function' to 'module%function'. " + "This one contained [" + adapter + "] which cannot be parsed to a module' function pair."); " is 214.
Long Statement,Spring.Messaging.Amqp.Rabbit.Admin,RabbitStatus,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitStatus.cs,ToString,The length of the statement  "{ return string.Format("IsAlive: {0}' IsRunning: {1}' IsReady: {2}' RunningApplications: {3}' Nodes: {4}' RunningNodes: {5}"' this.IsAlive' this.IsRunning' this.IsReady' this.runningApplications' this.nodes' this.runningNodes); }" is 229.
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,RabbitBrokerAdmin,The following statement contains a magic number: AssertUtils.State(parts.Length == 2' @"The node name should be in the form alivename@host' e.g. rabbit@myserver");
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,WaitForState,The following statement contains a magic number: if (!callable.Invoke(status))              {                  Logger.Info("Waiting for broker to enter state: " + state);                  var tokenSource = new CancellationTokenSource();                  var token = tokenSource.Token;                  var started = Task.Factory.StartNew(                      () =>                      {                          var internalstatus = this.GetStatus();                          while (!callable.Invoke(internalstatus) && !token.IsCancellationRequested)                          {                              // Any less than 1000L and we tend to clog up the socket?                              Thread.Sleep(500);                              internalstatus = this.GetStatus();                              Logger.Info(string.Format("WaitForState: Internal Status: {0}"' internalstatus));                          }                            return internalstatus;                      }'                       token);                    try                  {                      var result = started.Wait((int)this.timeout' token);                      Thread.Sleep(500);                        if (!result)                      {                          tokenSource.Cancel();                      }                        status = started.Result;                        // This seems to help... really it just means we didn't get the right status data                      // Thread.Sleep(500);                  }                  catch (Exception e)                  {                      Logger.Error("error occurred waiting for result"' e);                      try                      {                          tokenSource.Cancel(true);                      }                      catch (Exception ex)                      {                          Logger.Error("Error occurred cancelling task"' ex);                      }                  }                    if (!callable.Invoke(status))                  {                      Logger.Error("Rabbit broker not in " + state + " state after timeout. Stopping process.");                      this.StopNode();                      return false;                  }                  else                  {                      Logger.Info("Finished waiting for broker to enter state: " + state);                      if (Logger.IsDebugEnabled)                      {                          Logger.Info("Status: " + status);                      }                        return true;                  }              }              else              {                  Logger.Info("Broker already in state: " + state);              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,WaitForState,The following statement contains a magic number: if (!callable.Invoke(status))              {                  Logger.Info("Waiting for broker to enter state: " + state);                  var tokenSource = new CancellationTokenSource();                  var token = tokenSource.Token;                  var started = Task.Factory.StartNew(                      () =>                      {                          var internalstatus = this.GetStatus();                          while (!callable.Invoke(internalstatus) && !token.IsCancellationRequested)                          {                              // Any less than 1000L and we tend to clog up the socket?                              Thread.Sleep(500);                              internalstatus = this.GetStatus();                              Logger.Info(string.Format("WaitForState: Internal Status: {0}"' internalstatus));                          }                            return internalstatus;                      }'                       token);                    try                  {                      var result = started.Wait((int)this.timeout' token);                      Thread.Sleep(500);                        if (!result)                      {                          tokenSource.Cancel();                      }                        status = started.Result;                        // This seems to help... really it just means we didn't get the right status data                      // Thread.Sleep(500);                  }                  catch (Exception e)                  {                      Logger.Error("error occurred waiting for result"' e);                      try                      {                          tokenSource.Cancel(true);                      }                      catch (Exception ex)                      {                          Logger.Error("Error occurred cancelling task"' ex);                      }                  }                    if (!callable.Invoke(status))                  {                      Logger.Error("Rabbit broker not in " + state + " state after timeout. Stopping process.");                      this.StopNode();                      return false;                  }                  else                  {                      Logger.Info("Finished waiting for broker to enter state: " + state);                      if (Logger.IsDebugEnabled)                      {                          Logger.Info("Status: " + status);                      }                        return true;                  }              }              else              {                  Logger.Info("Broker already in state: " + state);              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitBrokerAdmin,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitBrokerAdmin.cs,ExecuteAndConvertRpc,The following statement contains a magic number: if (this.moduleAdapter.ContainsKey(key))              {                  var adapter = this.moduleAdapter[key];                  var values = adapter.Split("%".ToCharArray());                  AssertUtils.State(values.Length == 2' "The module adapter should be a map from 'module%function' to 'module%function'. " + "This one contained [" + adapter + "] which cannot be parsed to a module' function pair.");                  module = values[0];                  function = values[1];              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitControlErlangConverter,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitControlErlangConverter.cs,RegisterConverter,The following statement contains a magic number: if (this.moduleAdapter.ContainsKey(key))              {                  var adapter = this.moduleAdapter[key];                  var values = adapter.Split("%".ToCharArray());                  AssertUtils.State(values.Length == 2' "The module adapter should be a map from 'module%function' to 'module%function'. " + "This one contained [" + adapter + "] which cannot be parsed to a module' function pair.");                  module = values[0];                  function = values[1];              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,RabbitStatusConverter,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitControlErlangConverter.cs,ExtractApplications,The following statement contains a magic number: foreach (var appDescription in appList)              {                  var appDescriptionTuple = (OtpErlangTuple)appDescription;                  var name = appDescriptionTuple.elementAt(0).ToString();                  var description = appDescriptionTuple.elementAt(1).ToString();                  var version = appDescriptionTuple.elementAt(2).ToString();                  applications.Add(new Application(name' description' version));              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,QueueInfoAllConverter,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitControlErlangConverter.cs,FromErlang,The following statement contains a magic number: if (erlangObject is OtpErlangList)              {                  var erlangList = (OtpErlangList)erlangObject;                  foreach (var element in erlangList)                  {                      var queueInfo = new QueueInfo();                      var itemList = (OtpErlangList)element;                      foreach (var item in itemList)                      {                          var tuple = (OtpErlangTuple)item;                          if (tuple.arity() == 2)                          {                              var key = tuple.elementAt(0).ToString();                              var value = tuple.elementAt(1);                              switch (ToQueueInfoField(key))                              {                                  case QueueInfoField.name:                                      queueInfo.Name = this.ExtractNameValueFromTuple((OtpErlangTuple)value);                                      break;                                  case QueueInfoField.transactions:                                      queueInfo.Transactions = ExtractLong(value);                                      break;                                  case QueueInfoField.acks_uncommitted:                                      queueInfo.AcksUncommitted = ExtractLong(value);                                      break;                                  case QueueInfoField.consumers:                                      queueInfo.Consumers = ExtractLong(value);                                      break;                                  case QueueInfoField.pid:                                      queueInfo.Pid = ExtractPid(value);                                      break;                                  case QueueInfoField.durable:                                      queueInfo.Durable = this.ExtractAtomBoolean(value);                                      break;                                  case QueueInfoField.messages:                                      queueInfo.Messages = ExtractLong(value);                                      break;                                  case QueueInfoField.memory:                                      queueInfo.Memory = ExtractLong(value);                                      break;                                  case QueueInfoField.auto_delete:                                      queueInfo.AutoDelete = this.ExtractAtomBoolean(value);                                      break;                                  case QueueInfoField.messages_ready:                                      queueInfo.MessagesReady = ExtractLong(value);                                      break;                                  case QueueInfoField.arguments:                                      var list = (OtpErlangList)value;                                      if (list != null)                                      {                                          var args = new string[list.arity()];                                          for (var i = 0; i < list.arity(); i++)                                          {                                              var obj = list.elementAt(i);                                              args[i] = obj.ToString();                                          }                                            queueInfo.Arguments = args;                                      }                                        break;                                  case QueueInfoField.messages_unacknowledged:                                      queueInfo.MessagesUnacknowledged = ExtractLong(value);                                      break;                                  case QueueInfoField.messages_uncommitted:                                      queueInfo.MessageUncommitted = ExtractLong(value);                                      break;                                  default:                                      break;                              }                          }                      }                        queueInfoList.Add(queueInfo);                  }              }
Magic Number,Spring.Messaging.Amqp.Rabbit.Admin,QueueInfoAllConverter,C:\repos\spring-projects_spring-net-amqp\src\Spring.Messaging.Amqp.Rabbit.Admin\Admin\RabbitControlErlangConverter.cs,ExtractNameValueFromTuple,The following statement contains a magic number: object nameElement = value.elementAt(3);
