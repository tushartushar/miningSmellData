Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetSchemaTableWithHeadersTest,Cyclomatic complexity of the method is 9
Complex Method,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,Cyclomatic complexity of the method is 8
Complex Method,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,Cyclomatic complexity of the method is 9
Complex Method,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,Cyclomatic complexity of the method is 9
Long Parameter List,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The method has 5 parameters. Parameters: recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize
Long Parameter List,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The method has 7 parameters. Parameters: recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' sequentialAccess' action
Long Parameter List,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The method has 7 parameters. Parameters: csv' fieldIndex' badRecordIndex' badFieldIndex' expectedErrorPosition' sequentialAccess' action
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' true' MissingFieldAction.ParseError); " is 131.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' true' MissingFieldAction.ReplaceByEmpty); " is 135.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' true' MissingFieldAction.ReplaceByNull); " is 134.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' false' MissingFieldAction.ParseError); " is 132.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' false' MissingFieldAction.ReplaceByEmpty); " is 136.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "            CheckMissingFieldUnquoted(recordCount' fieldCount' badRecordIndex' badFieldIndex' bufferSize' false' MissingFieldAction.ReplaceByNull); " is 135.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The length of the statement  "                        CheckMissingFieldValueUnquoted(csv' badFieldIndex' badRecordIndex' badFieldIndex' expectedErrorPosition' sequentialAccess' action); " is 131.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The length of the statement  "                Assert.AreEqual(badRecordIndex' ex.CurrentRecordIndex' message' ex.CurrentRecordIndex' ex.CurrentFieldIndex' ex.CurrentPosition' sequentialAccess' action); " is 155.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The length of the statement  "                Assert.IsTrue(fieldIndex >= badFieldIndex' message' ex.CurrentRecordIndex' ex.CurrentFieldIndex' ex.CurrentPosition' sequentialAccess' action); " is 143.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The length of the statement  "                Assert.AreEqual(expectedErrorPosition' ex.CurrentPosition' message' ex.CurrentRecordIndex' ex.CurrentFieldIndex' ex.CurrentPosition' sequentialAccess' action); " is 159.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The length of the statement  "                Assert.AreEqual(csv.CurrentRecordIndex.ToString() + fieldIndex.ToString()' s' message' csv.CurrentRecordIndex' fieldIndex' -1' sequentialAccess' action); " is 153.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldValueUnquoted,The length of the statement  "                        Assert.Fail("Failed to throw ParseError. - " + message' csv.CurrentRecordIndex' fieldIndex' -1' sequentialAccess' action); " is 122.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,ParseErrorBeforeInitializeTest,The length of the statement  "            const string data = "\"0022 - SKABELON\";\"\"Tandremstrammer\";\"\";\"0'00\";\"\"\n\"15907\";\"\"BOLT TIL 2-05-405\";\"\";\"42'50\";\"4027816159070\"\n\"19324\";\"FJEDER TIL 2-05-405\";\"\";\"14'50\";\"4027816193241\""; " is 219.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The length of the statement  "                    throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex)); " is 124.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest8,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest16,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '\r'' '"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest18,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest21,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest22,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '\r'' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 122.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest23,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest27,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\''' '\''' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest28,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\0'' '\\'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest31,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest32,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest33,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\\'' '#'' ValueTrimmingOptions.None)) " is 121.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The length of the statement  "            const string data = "\"Chicane\"' \"Love on the Run\"' \"Knight Rider\"' \"This field contains a comma' but it doesn't matter as the field is quoted\"\r\n" + " is 157.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The length of the statement  "                      "\"Samuel Barber\"' \"Adagio for Strings\"' \"Classical\"' \"This field contains a double quote character' \"\"' but it doesn't matter as it is escaped\""; " is 155.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The length of the statement  "            using (var csv = new CsvReader(new System.IO.StringReader(data)' false' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest39,The length of the statement  "            using (var csv = new CsvReader(new StringReader("00'01'   \n10'11'   ")' false' CsvReader.DefaultDelimiter' CsvReader.DefaultQuote' CsvReader.DefaultEscape' CsvReader.DefaultComment' ValueTrimmingOptions.UnquotedOnly' 1)) " is 221.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest41,The length of the statement  "            using (var csv = new CsvReader(new StringReader("First record          'Second record")' false' CsvReader.DefaultDelimiter' CsvReader.DefaultQuote' CsvReader.DefaultEscape' CsvReader.DefaultComment' ValueTrimmingOptions.UnquotedOnly' 16)) " is 238.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,TrimFieldValuesTest,The length of the statement  "            using (var csv = new CsvReader(new StringReader(data)' false' CsvReader.DefaultDelimiter' CsvReader.DefaultQuote' CsvReader.DefaultEscape' CsvReader.DefaultComment' trimmingOptions)) " is 182.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestCopyCurrentRecordTo1WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestCopyCurrentRecordTo2WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestCopyCurrentRecordTo3WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestCopyCurrentRecordTo4WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestCopyCurrentRecordTo5WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer10WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer1WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer2WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer3WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer4WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer5WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer6WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer7WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer8WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ArgumentTestIndexer9WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,CachedNoHeaderWithNullRemovalStreamReader,The length of the statement  "            var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes("12345678;Hello\r\n78945612;World"))' false' Encoding.ASCII' ';'); " is 131.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,CopyCurrentRecordToTest1WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,FieldCountTest1WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest1WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,HasHeader_HeaderDoesNotExistWithNullRemovalStreamReader,The length of the statement  "            using (var csvReader = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 135.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,HasHeader_HeaderExistsWithNullRemovalStreamReader,The length of the statement  "            using (var csvReader = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 135.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,HasHeader_NullFieldHeadersWithNullRemovalStreamReader,The length of the statement  "            using (var csvReader = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes("Value1'Value2"))' false' Encoding.ASCII)) " is 120.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,HasHeader_NullHeaderWithNullRemovalStreamReader,The length of the statement  "            using (var csvReader = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes("Header1'Header2\r\nValue1'Value2"))' true' Encoding.ASCII)) " is 138.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,IndexerTest1WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,IndexerTest2WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,IndexerTest3WithNullRemovalStreamReader,The length of the statement  "                using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,IterationTest1WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,IterationTest2WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest1WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest2WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest3WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest4WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest5WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest16WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '\r'' '"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 160.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest18WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest21WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest22WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '\r'' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 153.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest23WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest27WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\''' '\''' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 160.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest28WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\0'' '\\'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest2WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '"'' '"'' '#'' ValueTrimmingOptions.None)) " is 150.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest31WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest32WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest33WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\\'' '#'' ValueTrimmingOptions.None)) " is 152.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The length of the statement  "            const string data = "\"Chicane\"' \"Love on the Run\"' \"Knight Rider\"' \"This field contains a comma' but it doesn't matter as the field is quoted\"\r\n" + " is 157.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The length of the statement  "                                "\"Samuel Barber\"' \"Adagio for Strings\"' \"Classical\"' \"This field contains a double quote character' \"\"' but it doesn't matter as it is escaped\""; " is 155.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 160.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest36WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' true' Encoding.ASCII)) " is 129.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest37WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(CsvReaderSampleData.SampleData1))' false' Encoding.ASCII)) " is 130.
Long Statement,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest8WithNullRemovalStreamReader,The length of the statement  "            using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII' '''' '\"'' '\"'' '#'' ValueTrimmingOptions.UnquotedOnly)) " is 160.
Long Statement,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullInTheMiddle,The length of the statement  "            var expected = new string('a'' numberOfNull) + string.Format(template' numberOfNull) + new string('a'' size - numberOfNull * 2); " is 128.
Long Statement,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullAtBothEnds,The length of the statement  "            var expected = string.Format(template' numberOfNull) + new string('a'' numberOfNull * 2) + string.Format(template' numberOfNull); " is 129.
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertByteArray,The following statement contains a magic number: var expected = new byte[] { 1' 2' 3 };
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertByteArray,The following statement contains a magic number: var expected = new byte[] { 1' 2' 3 };
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,ColumnTests,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\ColumnTests.cs,ConvertDateTime,The following statement contains a magic number: var expected = new DateTime(2013' 8' 14' 12' 35' 10);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetSchemaTableWithHeadersTest,The following statement contains a magic number: switch (index)                      {                          case 0:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["BaseColumnName"]);                              break;                          case 1:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["BaseColumnName"]);                              break;                          case 2:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["BaseColumnName"]);                              break;                          case 3:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["BaseColumnName"]);                              break;                          case 4:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["BaseColumnName"]);                              break;                          case 5:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["BaseColumnName"]);                              break;                          default:                              throw new IndexOutOfRangeException();                      }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetSchemaTableWithHeadersTest,The following statement contains a magic number: switch (index)                      {                          case 0:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["BaseColumnName"]);                              break;                          case 1:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["BaseColumnName"]);                              break;                          case 2:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["BaseColumnName"]);                              break;                          case 3:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["BaseColumnName"]);                              break;                          case 4:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["BaseColumnName"]);                              break;                          case 5:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["BaseColumnName"]);                              break;                          default:                              throw new IndexOutOfRangeException();                      }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetSchemaTableWithHeadersTest,The following statement contains a magic number: switch (index)                      {                          case 0:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["BaseColumnName"]);                              break;                          case 1:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["BaseColumnName"]);                              break;                          case 2:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["BaseColumnName"]);                              break;                          case 3:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["BaseColumnName"]);                              break;                          case 4:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["BaseColumnName"]);                              break;                          case 5:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["BaseColumnName"]);                              break;                          default:                              throw new IndexOutOfRangeException();                      }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetSchemaTableWithHeadersTest,The following statement contains a magic number: switch (index)                      {                          case 0:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header0' column["BaseColumnName"]);                              break;                          case 1:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header1' column["BaseColumnName"]);                              break;                          case 2:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' column["BaseColumnName"]);                              break;                          case 3:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' column["BaseColumnName"]);                              break;                          case 4:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' column["BaseColumnName"]);                              break;                          case 5:                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["ColumnName"]);                              Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' column["BaseColumnName"]);                              break;                          default:                              throw new IndexOutOfRangeException();                      }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetDateTimeTest,The following statement contains a magic number: var value = new DateTime(2001' 1' 1);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetNameTest,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' reader.GetName(2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetNameTest,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' reader.GetName(3));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetNameTest,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' reader.GetName(4));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetNameTest,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' reader.GetName(5));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetOrdinalTest,The following statement contains a magic number: Assert.AreEqual(2' reader.GetOrdinal(CsvReaderSampleData.SampleData1Header2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetOrdinalTest,The following statement contains a magic number: Assert.AreEqual(3' reader.GetOrdinal(CsvReaderSampleData.SampleData1Header3));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetOrdinalTest,The following statement contains a magic number: Assert.AreEqual(4' reader.GetOrdinal(CsvReaderSampleData.SampleData1Header4));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,GetOrdinalTest,The following statement contains a magic number: Assert.AreEqual(5' reader.GetOrdinal(CsvReaderSampleData.SampleData1Header5));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,IndexerByFieldNameTest,The following statement contains a magic number: values[2] = (string) reader[CsvReaderSampleData.SampleData1Header2];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,IndexerByFieldNameTest,The following statement contains a magic number: values[3] = (string) reader[CsvReaderSampleData.SampleData1Header3];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,IndexerByFieldNameTest,The following statement contains a magic number: values[4] = (string) reader[CsvReaderSampleData.SampleData1Header4];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderIDataReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderIDataReaderTest.cs,IndexerByFieldNameTest,The following statement contains a magic number: values[5] = (string) reader[CsvReaderSampleData.SampleData1Header5];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,CheckMissingFieldUnquoted,The following statement contains a magic number: var capacity = recordCount * (fieldCount * 2 + fieldCount - 1) + recordCount;
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest1,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 2' CsvReader.DefaultBufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest2,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest2,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest2,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest2,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest2,The following statement contains a magic number: CheckMissingFieldUnquoted(4' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest3,The following statement contains a magic number: CheckMissingFieldUnquoted(3' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest3,The following statement contains a magic number: CheckMissingFieldUnquoted(3' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest3,The following statement contains a magic number: CheckMissingFieldUnquoted(3' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest3,The following statement contains a magic number: CheckMissingFieldUnquoted(3' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldUnquotedTest3,The following statement contains a magic number: CheckMissingFieldUnquoted(3' 4' 2' 3' 16);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldAllQuotedFields_Issue_12,The following statement contains a magic number: var buffer = new string[2];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest1,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest1,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest1,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest2,The following statement contains a magic number: var ep = ParseException<MissingFieldCsvException>(data' 11);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest2,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 1)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest2,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 1)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest3,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest3,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest3,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 22)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest4,The following statement contains a magic number: var ep = ParseException<MissingFieldCsvException>(data' 11);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest4,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 1)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingFieldQuotedTest4,The following statement contains a magic number: !(ep.CurrentRecordIndex == 2 && ep.CurrentFieldIndex == 2 && ep.CurrentPosition == 1)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingDelimiterAfterQuotedFieldTest1,The following statement contains a magic number: !(ep.CurrentRecordIndex == 0 && ep.CurrentFieldIndex == 1 && ep.CurrentPosition == 11)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,MissingDelimiterAfterQuotedFieldTest2,The following statement contains a magic number: !(ep.CurrentRecordIndex == 1 && ep.CurrentFieldIndex == 1 && ep.CurrentPosition == 29)
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,ParseErrorBeforeInitializeTest,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,ParseErrorBeforeInitializeTest,The following statement contains a magic number: Assert.AreEqual("14'50"' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,ParseErrorBeforeInitializeTest,The following statement contains a magic number: Assert.AreEqual("4027816193241"' csv[4]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderMalformedTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderMalformedTest.cs,LastFieldEmptyFollowedByMissingFieldsOnNextRecord,The following statement contains a magic number: var record = new string[5];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: Assert.AreEqual(2' csv.GetFieldIndex(SampleData1Header2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: Assert.AreEqual(3' csv.GetFieldIndex(SampleData1Header3));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: Assert.AreEqual(4' csv.GetFieldIndex(SampleData1Header4));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: Assert.AreEqual(5' csv.GetFieldIndex(SampleData1Header5));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: string[] fields = new string[6];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: Assert.IsTrue(fields.Length - startIndex >= 6);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderSampleData,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderSampleData.cs,CheckSampleData1,The following statement contains a magic number: switch (index)              {                  case 0:                      Assert.AreEqual(SampleData1Header0' fields[startIndex]);                      Assert.AreEqual(SampleData1Header1' fields[startIndex + 1]);                      Assert.AreEqual(SampleData1Header2' fields[startIndex + 2]);                      Assert.AreEqual(SampleData1Header3' fields[startIndex + 3]);                      Assert.AreEqual(SampleData1Header4' fields[startIndex + 4]);                      Assert.AreEqual(SampleData1Header5' fields[startIndex + 5]);                      break;                    case 1:                      Assert.AreEqual("John"' fields[startIndex]);                      Assert.AreEqual("Doe"' fields[startIndex + 1]);                      Assert.AreEqual("120 jefferson st."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 2:                      Assert.AreEqual("Jack"' fields[startIndex]);                      Assert.AreEqual("McGinnis"' fields[startIndex + 1]);                      Assert.AreEqual("220 hobo Av."' fields[startIndex + 2]);                      Assert.AreEqual("Phila"' fields[startIndex + 3]);                      Assert.AreEqual("PA"' fields[startIndex + 4]);                      Assert.AreEqual("09119"' fields[startIndex + 5]);                      break;                    case 3:                      Assert.AreEqual(@"John ""Da Man"""' fields[startIndex]);                      Assert.AreEqual("Repici"' fields[startIndex + 1]);                      Assert.AreEqual("120 Jefferson St."' fields[startIndex + 2]);                      Assert.AreEqual("Riverside"' fields[startIndex + 3]);                      Assert.AreEqual("NJ"' fields[startIndex + 4]);                      Assert.AreEqual("08075"' fields[startIndex + 5]);                      break;                    case 4:                      Assert.AreEqual("Stephen"' fields[startIndex]);                      Assert.AreEqual("Tyler"' fields[startIndex + 1]);                      Assert.AreEqual(@"7452 Terrace ""At the Plaza"" road"' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("91234"' fields[startIndex + 5]);                      break;                    case 5:                      Assert.AreEqual(""' fields[startIndex]);                      Assert.AreEqual("Blankman"' fields[startIndex + 1]);                      Assert.AreEqual(""' fields[startIndex + 2]);                      Assert.AreEqual("SomeTown"' fields[startIndex + 3]);                      Assert.AreEqual("SD"' fields[startIndex + 4]);                      Assert.AreEqual("00298"' fields[startIndex + 5]);                      break;                    case 6:                      Assert.AreEqual(@"Joan ""the bone""' Anne"' fields[startIndex]);                      Assert.AreEqual("Jet"' fields[startIndex + 1]);                      Assert.AreEqual("9th' at Terrace plc"' fields[startIndex + 2]);                      Assert.AreEqual("Desert City"' fields[startIndex + 3]);                      Assert.AreEqual("CO"' fields[startIndex + 4]);                      Assert.AreEqual("00123"' fields[startIndex + 5]);                      break;                    default:                      throw new IndexOutOfRangeException(string.Format("Specified recordIndex is '{0}'. Possible range is [0' 5]."' recordIndex));              }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ArgumentTestCtor4,The following statement contains a magic number: Assert.AreEqual(123' csv.BufferSize);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest2,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest2,The following statement contains a magic number: Assert.AreEqual(" 3 "' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest4,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest4,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest4,The following statement contains a magic number: Assert.AreEqual(""' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(1024);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(9);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(14);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(39);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(166);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5,The following statement contains a magic number: Checkdata5(194);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5_RandomBufferSizes,The following statement contains a magic number: Checkdata5(random.Next(1' 512));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest5_RandomBufferSizes,The following statement contains a magic number: i < 1000
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest6,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest8,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest8,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest9,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest16,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest20,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest22,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest22,The following statement contains a magic number: Assert.AreEqual(string.Empty' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest27,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest27,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest29,The following statement contains a magic number: var data = new string('a'' 75) + "'" + new string('b'' 75);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest29,The following statement contains a magic number: var data = new string('a'' 75) + "'" + new string('b'' 75);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest29,The following statement contains a magic number: Assert.AreEqual(new string('a'' 75)' csv[0]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest29,The following statement contains a magic number: Assert.AreEqual(new string('b'' 75)' csv[1]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest29,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest32,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest32,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest32,The following statement contains a magic number: Assert.AreEqual(2' csv.CurrentRecordIndex);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest32,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual("Knight Rider"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual("This field contains a comma' but it doesn't matter as the field is quoted"' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual("Classical"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual("This field contains a double quote character' \"' but it doesn't matter as it is escaped"' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest34,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest35,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest38,The following statement contains a magic number: Assert.AreEqual("ghi"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest39,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest39,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest40,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest41,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,MissingFieldException,The following statement contains a magic number: Assert.Throws<MissingFieldCsvException>(() => { var x = csv[2]; });
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest44,The following statement contains a magic number: Assert.Throws<MalformedCsvException>(() =>              {                  using (var csv = new CsvReader(new StringReader(data)' false))                  {                      csv.MaxQuotedFieldLength = 10;                      csv.ReadNextRecord();                  }              });
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,ParsingTest45,The following statement contains a magic number: csv.MaxQuotedFieldLength = 11;
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,UnicodeParsingTest1,The following statement contains a magic number: var raw = new char[65536 - 13];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,UnicodeParsingTest1,The following statement contains a magic number: var raw = new char[65536 - 13];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,UnicodeParsingTest1,The following statement contains a magic number: raw[i] = (char)(i + 14);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,UnicodeParsingTest1,The following statement contains a magic number: raw[44 - 14] = ' ';
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,UnicodeParsingTest1,The following statement contains a magic number: raw[44 - 14] = ' ';
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' headers[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' headers[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' headers[4]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' headers[5]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(2' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(3' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header3));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(4' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header4));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeadersTest2,The following statement contains a magic number: Assert.AreEqual(5' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header5));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: Assert.AreEqual(8' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: Assert.AreEqual("aaa"' headers[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: new int[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: new int[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: new int[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: new int[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,GetFieldHeaders_WithEmptyHeaderNames,The following statement contains a magic number: new int[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,OverrideColumnValueTest,The following statement contains a magic number: Assert.AreEqual("ghi"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,MoveToTest4,The following statement contains a magic number: Assert.IsTrue(csv.MoveTo(2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderTest.cs,MoveToTest4,The following statement contains a magic number: Assert.AreEqual(2' csv.CurrentRecordIndex);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(8' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("aaa"' headers[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: new[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: new[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: new[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: new[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeaders_WithEmptyHeaderNamesWithNullRemovalStreamReader,The following statement contains a magic number: new[] { 0' 1' 2' 4' 5' 6' 7 }
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header2' headers[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header3' headers[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header4' headers[4]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(CsvReaderSampleData.SampleData1Header5' headers[5]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(3' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header3));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(4' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header4));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,GetFieldHeadersTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(5' csv.GetFieldIndex(CsvReaderSampleData.SampleData1Header5));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest4WithNullRemovalStreamReader,The following statement contains a magic number: Assert.IsTrue(csv.MoveTo(2));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,MoveToTest4WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.CurrentRecordIndex);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest16WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest20WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest22WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest22WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(string.Empty' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest27WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest27WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest29WithNullRemovalStreamReader,The following statement contains a magic number: var data = new string('a'' 75) + "'" + new string('b'' 75);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest29WithNullRemovalStreamReader,The following statement contains a magic number: var data = new string('a'' 75) + "'" + new string('b'' 75);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest29WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(new string('a'' 75)' csv[0]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest29WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(new string('b'' 75)' csv[1]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest29WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest2WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(" 3 "' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest32WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest32WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest32WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.CurrentRecordIndex);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest32WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("Knight Rider"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("This field contains a comma' but it doesn't matter as the field is quoted"' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("Classical"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("This field contains a double quote character' \"' but it doesn't matter as it is escaped"' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest34WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest35WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest38WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("ghi"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest39WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest39WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest40WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest41WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest43WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest44WithNullRemovalStreamReader,The following statement contains a magic number: Assert.Throws<MalformedCsvException>(() =>              {                  using (var csv = new CsvReader(new MemoryStream(Encoding.ASCII.GetBytes(data))' false' Encoding.ASCII))                  {                      csv.MaxQuotedFieldLength = 10;                      csv.ReadNextRecord();                  }              });
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest45WithNullRemovalStreamReader,The following statement contains a magic number: csv.MaxQuotedFieldLength = 11;
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest4WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(4' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest4WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(""' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest4WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(""' csv[3]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5_RandomBufferSizesWithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(random.Next(1' 512));
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5_RandomBufferSizesWithNullRemovalStreamReader,The following statement contains a magic number: i < 1000
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(1024);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(9);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(14);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(39);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(166);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest5WithNullRemovalStreamReader,The following statement contains a magic number: Checkdata5(194);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest6WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest8WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual("3"' csv[2]);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest8WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(3' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,ParsingTest9WithNullRemovalStreamReader,The following statement contains a magic number: Assert.AreEqual(2' csv.FieldCount);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,UnicodeParsingTest1WithNullRemovalStreamReader,The following statement contains a magic number: var raw = new char[65536 - 13];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,UnicodeParsingTest1WithNullRemovalStreamReader,The following statement contains a magic number: var raw = new char[65536 - 13];
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,UnicodeParsingTest1WithNullRemovalStreamReader,The following statement contains a magic number: raw[i] = (char)(i + 14);
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,UnicodeParsingTest1WithNullRemovalStreamReader,The following statement contains a magic number: raw[44 - 14] = ' ';
Magic Number,LumenWorks.Framework.Tests.Unit.IO.Csv,CsvReaderWithNullRemovalTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\Csv\CsvReaderWithNullRemovalTest.cs,UnicodeParsingTest1WithNullRemovalStreamReader,The following statement contains a magic number: raw[44 - 14] = ' ';
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputContainsOnlyNull,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullPrefix,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullSuffix,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullInTheMiddle,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullInTheMiddle,The following statement contains a magic number: var expected = new string('a'' numberOfNull) + string.Format(template' numberOfNull) + new string('a'' size - numberOfNull * 2);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullAtBothEnds,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullAtBothEnds,The following statement contains a magic number: var expected = string.Format(template' numberOfNull) + new string('a'' numberOfNull * 2) + string.Format(template' numberOfNull);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullAtBothEnds,The following statement contains a magic number: i < numberOfNull || i >= numberOfNull * 3
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithFewerThanThresholdNullBytes,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithExactThresholdNullBytes,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullBytesAboveThresholdFromLastInBuffer,The following statement contains a magic number: var buffer   = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullBytesAboveThresholdFromLastInBuffer,The following statement contains a magic number: expected = new string('a'' 4095) + string.Format(template' numberOfNull) + new string('a'' size - 4095 - numberOfNull);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullBytesAboveThresholdFromLastInBuffer,The following statement contains a magic number: expected = new string('a'' 4095) + string.Format(template' numberOfNull) + new string('a'' size - 4095 - numberOfNull);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullBytesAboveThresholdFromLastInBuffer,The following statement contains a magic number: i >= 4095 && i < 4095 + numberOfNull
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithNullBytesAboveThresholdFromLastInBuffer,The following statement contains a magic number: i >= 4095 && i < 4095 + numberOfNull
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: var size          = 4096 * 4096;
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: var size          = 4096 * 4096;
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: int numberOfNull = maxNull < 2 ? maxNull : rand.Next(1' Math.Min(maxNull' size - inputIndex));
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: numberOfNull < 60
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: numberOfNull >= 60 && addMark
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: var numberOfChar = rand.Next(1' Math.Min(10' size - inputIndex));
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: var readCount = nullRemovalStream.Read(buffer' 0' 4096);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: readCount = nullRemovalStream.Read(buffer' 0' 4096);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,TestInputWithRandomNullBytes,The following statement contains a magic number: Assert.True(maxNull < 60 ? totalRead == size : totalRead < size);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,ReadFromNullRemovalStream,The following statement contains a magic number: var readCount = nullRemovalStream.Read(buffer' 0' 4096);
Magic Number,LumenWorks.Framework.Tests.Unit.IO,NullRemovalStreamTest,C:\research\architectureSmells\repos\phatcher_CsvReader\code\LumenWorks.Framework.Tests.Unit\IO\NullRemovalStreamTest.cs,ReadFromNullRemovalStream,The following statement contains a magic number: readCount = nullRemovalStream.Read(buffer' 0' 4096);
