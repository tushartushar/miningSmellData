Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,RegexCapture,Cyclomatic complexity of the method is 10
Complex Method,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,CheckLookahead,Cyclomatic complexity of the method is 13
Complex Method,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,RegexCharacter,Cyclomatic complexity of the method is 46
Complex Method,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,Cyclomatic complexity of the method is 29
Complex Method,RegularExpressionScratchpad,RegexExpression,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexExpression.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,ProcessLibraryTask,Cyclomatic complexity of the method is 8
Long Statement,RegularExpressionScratchpad,RegexExpression,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexExpression.cs,Parse,The length of the statement  "		if (buffer.IgnorePatternWhitespace && ((buffer.Current == ' ') || (buffer.Current == '\r') || (buffer.Current == '\n') || (buffer.Current == '\t'))) { " is 150.
Long Statement,RegularExpressionScratchpad,AboutForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\AboutForm.cs,GetFileVersion,The length of the statement  "	Version ver = new Version (versionInfo.FileMajorPart' versionInfo.FileMinorPart' versionInfo.FileBuildPart' versionInfo.FilePrivatePart); " is 137.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchText,The length of the statement  "	if (text.Length > 3 && this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase) > 0) { " is 127.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchText,The length of the statement  "			this.richTextBoxTarget.Select (this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase)' text.Length); " is 143.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchTextSource,The length of the statement  "	if (text.Length > 3 && this.richTextBoxSource.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase) > 0) { " is 124.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchTextSource,The length of the statement  "		this.searchStartPosition = this.richTextBoxSource.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase); " is 122.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchTextSource,The length of the statement  "		this.richTextBoxSource.Select (this.richTextBoxTarget.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase)' text.Length); " is 140.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,toolStripButtonResetText_Click,The length of the statement  "	this.richTextBoxSource.SelectionFont = new Font (this.richTextBoxSource.Font.Name' this.richTextBoxSource.Font.Size' FontStyle.Regular); " is 136.
Long Statement,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,toolStripButtonResetText_Click,The length of the statement  "	this.richTextBoxTarget.SelectionFont = new Font (this.richTextBoxTarget.Font.Name' this.richTextBoxTarget.Font.Size' FontStyle.Regular); " is 136.
Long Statement,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,LoadRegularExpressionLibrary,The length of the statement  "		MessageBox.Show ("There was en error loading the Regular Expression Library: " + Environment.NewLine + ex.Message' "Library Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 176.
Long Statement,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,ParseAndReplaceFile,The length of the statement  "	using (StreamWriter streamWriter = new StreamWriter (parseFile.FullName.Replace ("dbo.p_Service"' string.Empty).Replace (".StoredProcedure"' string.Empty)' false)) { " is 165.
Long Statement,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,Match,The length of the statement  "		this.textBoxInput.SelectionFont = new Font (this.textBoxInput.Font.Name' this.textBoxInput.Font.Size' FontStyle.Regular); " is 121.
Complex Conditional,RegularExpressionScratchpad,RegexExpression,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexExpression.cs,Parse,The conditional expression  "buffer.IgnorePatternWhitespace && ((buffer.Current == ' ') || (buffer.Current == '\r') || (buffer.Current == '\n') || (buffer.Current == '\t'))"  is complex.
Virtual Method Call from Constructor,RegularExpressionScratchpad,RegexRef,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexRef.cs,RegexRef,The constructor "RegexRef" calls a virtual method "ToString".
Magic Number,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,ToString,The following statement contains a magic number: checked {  	string result = this.description;  	if (this.expression != null) {  		result += "\r\n" + this.expression.ToString (indent + 2) + new string (' '' indent) + "End Capture";  	}  	return result;  }  
Magic Number,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,ToString,The following statement contains a magic number: if (this.expression != null) {  	result += "\r\n" + this.expression.ToString (indent + 2) + new string (' '' indent) + "End Capture";  }  
Magic Number,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,ToString,The following statement contains a magic number: result += "\r\n" + this.expression.ToString (indent + 2) + new string (' '' indent) + "End Capture";  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (this.character == null) {  	bool decoded = this.CheckBackReference (buffer);  	if (!decoded) {  		// TODO: Handle other items below:  		switch (buffer.Current) {  		case 'u':  			buffer.MoveNext ();  			string unicode = buffer.String.Substring (0' 4);  			this.character = "Unicode " + unicode;  			buffer.Offset += 4;  			break;  		case ' ':  			this.character = "' ' (space)";  			this.special = false;  			buffer.MoveNext ();  			break;  		case 'c':  			buffer.MoveNext ();  			this.character = "CTRL-" + buffer.Current;  			buffer.MoveNext ();  			break;  		case 'x':  			buffer.MoveNext ();  			string number = buffer.String.Substring (0' 2);  			this.character = "Hex " + number;  			buffer.Offset += 2;  			break;  		default:  			this.character = new string (buffer.Current' 1);  			this.special = false;  			buffer.MoveNext ();  			break;  		}  	}  }  else {  	this.special = true;  	buffer.MoveNext ();  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (this.character == null) {  	bool decoded = this.CheckBackReference (buffer);  	if (!decoded) {  		// TODO: Handle other items below:  		switch (buffer.Current) {  		case 'u':  			buffer.MoveNext ();  			string unicode = buffer.String.Substring (0' 4);  			this.character = "Unicode " + unicode;  			buffer.Offset += 4;  			break;  		case ' ':  			this.character = "' ' (space)";  			this.special = false;  			buffer.MoveNext ();  			break;  		case 'c':  			buffer.MoveNext ();  			this.character = "CTRL-" + buffer.Current;  			buffer.MoveNext ();  			break;  		case 'x':  			buffer.MoveNext ();  			string number = buffer.String.Substring (0' 2);  			this.character = "Hex " + number;  			buffer.Offset += 2;  			break;  		default:  			this.character = new string (buffer.Current' 1);  			this.special = false;  			buffer.MoveNext ();  			break;  		}  	}  }  else {  	this.special = true;  	buffer.MoveNext ();  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (this.character == null) {  	bool decoded = this.CheckBackReference (buffer);  	if (!decoded) {  		// TODO: Handle other items below:  		switch (buffer.Current) {  		case 'u':  			buffer.MoveNext ();  			string unicode = buffer.String.Substring (0' 4);  			this.character = "Unicode " + unicode;  			buffer.Offset += 4;  			break;  		case ' ':  			this.character = "' ' (space)";  			this.special = false;  			buffer.MoveNext ();  			break;  		case 'c':  			buffer.MoveNext ();  			this.character = "CTRL-" + buffer.Current;  			buffer.MoveNext ();  			break;  		case 'x':  			buffer.MoveNext ();  			string number = buffer.String.Substring (0' 2);  			this.character = "Hex " + number;  			buffer.Offset += 2;  			break;  		default:  			this.character = new string (buffer.Current' 1);  			this.special = false;  			buffer.MoveNext ();  			break;  		}  	}  }  else {  	this.special = true;  	buffer.MoveNext ();  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (this.character == null) {  	bool decoded = this.CheckBackReference (buffer);  	if (!decoded) {  		// TODO: Handle other items below:  		switch (buffer.Current) {  		case 'u':  			buffer.MoveNext ();  			string unicode = buffer.String.Substring (0' 4);  			this.character = "Unicode " + unicode;  			buffer.Offset += 4;  			break;  		case ' ':  			this.character = "' ' (space)";  			this.special = false;  			buffer.MoveNext ();  			break;  		case 'c':  			buffer.MoveNext ();  			this.character = "CTRL-" + buffer.Current;  			buffer.MoveNext ();  			break;  		case 'x':  			buffer.MoveNext ();  			string number = buffer.String.Substring (0' 2);  			this.character = "Hex " + number;  			buffer.Offset += 2;  			break;  		default:  			this.character = new string (buffer.Current' 1);  			this.special = false;  			buffer.MoveNext ();  			break;  		}  	}  }  else {  	this.special = true;  	buffer.MoveNext ();  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (!decoded) {  	// TODO: Handle other items below:  	switch (buffer.Current) {  	case 'u':  		buffer.MoveNext ();  		string unicode = buffer.String.Substring (0' 4);  		this.character = "Unicode " + unicode;  		buffer.Offset += 4;  		break;  	case ' ':  		this.character = "' ' (space)";  		this.special = false;  		buffer.MoveNext ();  		break;  	case 'c':  		buffer.MoveNext ();  		this.character = "CTRL-" + buffer.Current;  		buffer.MoveNext ();  		break;  	case 'x':  		buffer.MoveNext ();  		string number = buffer.String.Substring (0' 2);  		this.character = "Hex " + number;  		buffer.Offset += 2;  		break;  	default:  		this.character = new string (buffer.Current' 1);  		this.special = false;  		buffer.MoveNext ();  		break;  	}  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (!decoded) {  	// TODO: Handle other items below:  	switch (buffer.Current) {  	case 'u':  		buffer.MoveNext ();  		string unicode = buffer.String.Substring (0' 4);  		this.character = "Unicode " + unicode;  		buffer.Offset += 4;  		break;  	case ' ':  		this.character = "' ' (space)";  		this.special = false;  		buffer.MoveNext ();  		break;  	case 'c':  		buffer.MoveNext ();  		this.character = "CTRL-" + buffer.Current;  		buffer.MoveNext ();  		break;  	case 'x':  		buffer.MoveNext ();  		string number = buffer.String.Substring (0' 2);  		this.character = "Hex " + number;  		buffer.Offset += 2;  		break;  	default:  		this.character = new string (buffer.Current' 1);  		this.special = false;  		buffer.MoveNext ();  		break;  	}  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (!decoded) {  	// TODO: Handle other items below:  	switch (buffer.Current) {  	case 'u':  		buffer.MoveNext ();  		string unicode = buffer.String.Substring (0' 4);  		this.character = "Unicode " + unicode;  		buffer.Offset += 4;  		break;  	case ' ':  		this.character = "' ' (space)";  		this.special = false;  		buffer.MoveNext ();  		break;  	case 'c':  		buffer.MoveNext ();  		this.character = "CTRL-" + buffer.Current;  		buffer.MoveNext ();  		break;  	case 'x':  		buffer.MoveNext ();  		string number = buffer.String.Substring (0' 2);  		this.character = "Hex " + number;  		buffer.Offset += 2;  		break;  	default:  		this.character = new string (buffer.Current' 1);  		this.special = false;  		buffer.MoveNext ();  		break;  	}  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: if (!decoded) {  	// TODO: Handle other items below:  	switch (buffer.Current) {  	case 'u':  		buffer.MoveNext ();  		string unicode = buffer.String.Substring (0' 4);  		this.character = "Unicode " + unicode;  		buffer.Offset += 4;  		break;  	case ' ':  		this.character = "' ' (space)";  		this.special = false;  		buffer.MoveNext ();  		break;  	case 'c':  		buffer.MoveNext ();  		this.character = "CTRL-" + buffer.Current;  		buffer.MoveNext ();  		break;  	case 'x':  		buffer.MoveNext ();  		string number = buffer.String.Substring (0' 2);  		this.character = "Hex " + number;  		buffer.Offset += 2;  		break;  	default:  		this.character = new string (buffer.Current' 1);  		this.special = false;  		buffer.MoveNext ();  		break;  	}  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: switch (buffer.Current) {  case 'u':  	buffer.MoveNext ();  	string unicode = buffer.String.Substring (0' 4);  	this.character = "Unicode " + unicode;  	buffer.Offset += 4;  	break;  case ' ':  	this.character = "' ' (space)";  	this.special = false;  	buffer.MoveNext ();  	break;  case 'c':  	buffer.MoveNext ();  	this.character = "CTRL-" + buffer.Current;  	buffer.MoveNext ();  	break;  case 'x':  	buffer.MoveNext ();  	string number = buffer.String.Substring (0' 2);  	this.character = "Hex " + number;  	buffer.Offset += 2;  	break;  default:  	this.character = new string (buffer.Current' 1);  	this.special = false;  	buffer.MoveNext ();  	break;  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: switch (buffer.Current) {  case 'u':  	buffer.MoveNext ();  	string unicode = buffer.String.Substring (0' 4);  	this.character = "Unicode " + unicode;  	buffer.Offset += 4;  	break;  case ' ':  	this.character = "' ' (space)";  	this.special = false;  	buffer.MoveNext ();  	break;  case 'c':  	buffer.MoveNext ();  	this.character = "CTRL-" + buffer.Current;  	buffer.MoveNext ();  	break;  case 'x':  	buffer.MoveNext ();  	string number = buffer.String.Substring (0' 2);  	this.character = "Hex " + number;  	buffer.Offset += 2;  	break;  default:  	this.character = new string (buffer.Current' 1);  	this.special = false;  	buffer.MoveNext ();  	break;  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: switch (buffer.Current) {  case 'u':  	buffer.MoveNext ();  	string unicode = buffer.String.Substring (0' 4);  	this.character = "Unicode " + unicode;  	buffer.Offset += 4;  	break;  case ' ':  	this.character = "' ' (space)";  	this.special = false;  	buffer.MoveNext ();  	break;  case 'c':  	buffer.MoveNext ();  	this.character = "CTRL-" + buffer.Current;  	buffer.MoveNext ();  	break;  case 'x':  	buffer.MoveNext ();  	string number = buffer.String.Substring (0' 2);  	this.character = "Hex " + number;  	buffer.Offset += 2;  	break;  default:  	this.character = new string (buffer.Current' 1);  	this.special = false;  	buffer.MoveNext ();  	break;  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: switch (buffer.Current) {  case 'u':  	buffer.MoveNext ();  	string unicode = buffer.String.Substring (0' 4);  	this.character = "Unicode " + unicode;  	buffer.Offset += 4;  	break;  case ' ':  	this.character = "' ' (space)";  	this.special = false;  	buffer.MoveNext ();  	break;  case 'c':  	buffer.MoveNext ();  	this.character = "CTRL-" + buffer.Current;  	buffer.MoveNext ();  	break;  case 'x':  	buffer.MoveNext ();  	string number = buffer.String.Substring (0' 2);  	this.character = "Hex " + number;  	buffer.Offset += 2;  	break;  default:  	this.character = new string (buffer.Current' 1);  	this.special = false;  	buffer.MoveNext ();  	break;  }  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: buffer.Offset += 4;  
Magic Number,RegularExpressionScratchpad,RegexCharacter,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCharacter.cs,DecodeEscape,The following statement contains a magic number: buffer.Offset += 2;  
Magic Number,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchText,The following statement contains a magic number: if (text.Length > 3 && this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase) > 0) {  	while (this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase) > 0) {  		this.richTextBoxTarget.Select (this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase)' text.Length);  		this.richTextBoxTarget.SelectionColor = Color.Red;  		this.richTextBoxTarget.SelectionBackColor = Color.Yellow;  		this.richTextBoxTarget.SelectionFont = new Font ("Arial"' this.richTextBoxTarget.Font.Size' FontStyle.Bold);  		position = this.richTextBoxTarget.Text.IndexOf (text' position' StringComparison.InvariantCultureIgnoreCase) + 1;  	}  }  
Magic Number,RegularExpressionScratchpad,MatcherForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MatcherForm.cs,MatchTextSource,The following statement contains a magic number: if (text.Length > 3 && this.richTextBoxSource.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase) > 0) {  	this.searchStartPosition = this.richTextBoxSource.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase);  	this.richTextBoxSource.Select (this.richTextBoxTarget.Text.IndexOf (text' start' StringComparison.InvariantCultureIgnoreCase)' text.Length);  	this.richTextBoxSource.SelectionColor = Color.Red;  	this.richTextBoxSource.SelectionBackColor = Color.Yellow;  	this.richTextBoxSource.SelectionFont = new Font ("Arial"' this.richTextBoxTarget.Font.Size' FontStyle.Bold);  }  
Magic Number,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,ReplaceText,The following statement contains a magic number: try {  	Regex regex = this.CreateRegex ();  	string[] strings;  	// if checked' pass all lines as a single block  	if (this.checkBoxTreatAsSingleString.Checked) {  		strings = new string[1];  		strings [0] = this.textBoxInput.Text;  	}  	else {  		strings = Regex.Split (this.textBoxInput.Text' @"\r\n");  		// strings = Strings.Text.Split('\n\r');  	}  	StringBuilder outString = new StringBuilder ();  	string replace = this.textBoxReplacement.Text;  	foreach (string s in strings) {  		outString.Append (regex.Replace (s' replace));  	}  	this.textBoxInput.SelectionColor = Color.Black;  	this.textBoxInput.SelectionFont = new Font ("Arial"' 10' FontStyle.Regular);  	this.textBoxInput.Text = outString.ToString ();  }  catch (Exception ex) {  	this.ShowException (ex);  	return;  }  
Magic Number,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,ReplaceText,The following statement contains a magic number: this.textBoxInput.SelectionFont = new Font ("Arial"' 10' FontStyle.Regular);  
Magic Number,RegularExpressionScratchpad,MainForm,C:\repos\mikefourie_RegularExpressionScratchpad\Forms\MainForm.cs,ShowException,The following statement contains a magic number: this.textBoxInput.SelectionFont = new Font ("Arial"' 10' FontStyle.Bold);  
Missing Default,RegularExpressionScratchpad,RegexCapture,C:\repos\mikefourie_RegularExpressionScratchpad\Classes\RegexCapture.cs,CheckLookahead,The following switch statement is missing a default case: switch (match.Groups ["Assertion"].Value) {  case "=":  	this.description = "zero-width positive lookahead";  	break;  case "!":  	this.description = "zero-width negative lookahead";  	break;  case "<=":  	this.description = "zero-width positive lookbehind";  	break;  case "<!":  	this.description = "zero-width negative lookbehind";  	break;  }  
