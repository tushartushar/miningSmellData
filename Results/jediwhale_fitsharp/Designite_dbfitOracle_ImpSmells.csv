Implementation smell,Namespace,Class,File,Method,Description
Long Statement,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The length of the statement  "		throw new ApplicationException ("Cannot read list of parameters for " + procName + " - check spelling and access privileges"); " is 126.
Long Statement,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllColumns,The length of the statement  "		throw new ApplicationException ("Cannot read list of columns for " + tableOrViewName + " - check spelling and access privileges"); " is 130.
Long Statement,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The length of the statement  "		allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType); " is 132.
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length == 3) {  	qry += " owner=:0 and package_name=:1 and object_name=:2 ";  } else if (qualifiers.Length == 2) {  	qry += @" ((owner=:0 and package_name is null and object_name=:1) or  					(owner=user and package_name=:0 and object_name=:1))";  } else {  	qry += @"  					(owner=user and package_name is null and object_name=:0)";  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length == 3) {  	qry += " owner=:0 and package_name=:1 and object_name=:2 ";  } else if (qualifiers.Length == 2) {  	qry += @" ((owner=:0 and package_name is null and object_name=:1) or  					(owner=user and package_name=:0 and object_name=:1))";  } else {  	qry += @"  					(owner=user and package_name is null and object_name=:0)";  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length == 2) {  	qry += @" ((owner=:0 and package_name is null and object_name=:1) or  					(owner=user and package_name=:0 and object_name=:1))";  } else {  	qry += @"  					(owner=user and package_name is null and object_name=:0)";  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length < 3) {  	qry += @" union all 						select " + cols + @" from all_arguments' all_synonyms			 						where data_level=0 and all_synonyms.owner='PUBLIC' and all_arguments.owner=table_owner and ";  	if (qualifiers.Length == 2) {  		// package  		qry += " package_name=table_name and synonym_name=:0 and object_name=:1 ";  	} else {  		qry += " package_name is null and object_name=table_name and synonym_name=:0 ";  	}  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length < 3) {  	qry += @" union all 						select " + cols + @" from all_arguments' all_synonyms			 						where data_level=0 and all_synonyms.owner='PUBLIC' and all_arguments.owner=table_owner and ";  	if (qualifiers.Length == 2) {  		// package  		qry += " package_name=table_name and synonym_name=:0 and object_name=:1 ";  	} else {  		qry += " package_name is null and object_name=table_name and synonym_name=:0 ";  	}  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllProcedureParameters,The following statement contains a magic number: if (qualifiers.Length == 2) {  	// package  	qry += " package_name=table_name and synonym_name=:0 and object_name=:1 ";  } else {  	qry += " package_name is null and object_name=table_name and synonym_name=:0 ";  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,GetAllColumns,The following statement contains a magic number: if (qualifiers.Length == 2) {  	qry += " owner=:0 and table_name=:1 ";  } else {  	qry += @"  					(owner=user and table_name=:0)";  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : reader.GetInt32 (2);  	String direction = reader.GetString (3);  	OracleParameter dp = new OracleParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (paramName != null) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.OracleType = GetDBType (dataType);  	if (length > 0) {  		dp.Size = length;  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : reader.GetInt32 (2);  	String direction = reader.GetString (3);  	OracleParameter dp = new OracleParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (paramName != null) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.OracleType = GetDBType (dataType);  	if (length > 0) {  		dp.Size = length;  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : reader.GetInt32 (2);  	String direction = reader.GetString (3);  	OracleParameter dp = new OracleParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (paramName != null) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.OracleType = GetDBType (dataType);  	if (length > 0) {  		dp.Size = length;  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : reader.GetInt32 (2);  	String direction = reader.GetString (3);  	OracleParameter dp = new OracleParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (paramName != null) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.OracleType = GetDBType (dataType);  	if (length > 0) {  		dp.Size = length;  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: if (length > 0) {  	dp.Size = length;  } else {  	if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  		dp.Size = 4000;  }  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  	dp.Size = 4000;  
Magic Number,dbfit,OracleEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitOracle\OracleEnvironment.cs,ReadIntoParams,The following statement contains a magic number: dp.Size = 4000;  
