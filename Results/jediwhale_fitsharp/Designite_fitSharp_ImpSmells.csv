Implementation smell,Namespace,Class,File,Method,Description
Complex Method,fitSharp.Fit.Operators,CompareDefault,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareDefault.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,fitSharp.Fit.Operators,WrapDefault,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\WrapDefault.cs,Wrap,Cyclomatic complexity of the method is 11
Complex Method,fitSharp.Fit.Runner,SuiteRunner,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\SuiteRunner.cs,RunFolder,Cyclomatic complexity of the method is 8
Complex Method,fitSharp.Fit.Runner,HtmlString,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\TestPageDecoration.cs,HtmlString,Cyclomatic complexity of the method is 8
Complex Method,fitSharp.Slim.Operators,ComposeException,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,Compose,Cyclomatic complexity of the method is 8
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,Check,The method has 5 parameters. Parameters: processor' systemUnderTest' memberName' parameters' expectedCell
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,Execute,The method has 5 parameters. Parameters: processor' systemUnderTest' memberName' parameters' targetCell
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,ExecuteWithThrow,The method has 5 parameters. Parameters: processor' target' memberName' parameters' targetCell
Long Parameter List,fitSharp.Fit.Runner,StoryTestFolder,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFolder.cs,StoryTestFolder,The method has 6 parameters. Parameters: memory' theInputPath' theOutputPath' theSelection' theFolderModel' theParentFolder
Long Parameter List,fitSharp.Machine.Exception,ParseException<T>,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Exception\ParseException.cs,ParseException,The method has 5 parameters. Parameters: memberName' type' index' subject' inner
Long Statement,fitSharp.Fit.Fixtures,Define,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\Define.cs,Interpret,The length of the statement  "            var name = processor.ParseTree<Cell' MemberName>(new EnumeratedTree<Cell>(table.Branches[0].Branches.Skip(1).Alternate())); " is 123.
Long Statement,fitSharp.Fit.Model,TestCounts,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Model\TestCounts.cs,Subtract,The length of the statement  "            foreach (var cellStatus in other.counts.Keys) result.counts[cellStatus] = result.GetCount(cellStatus) - other.GetCount(cellStatus); " is 131.
Long Statement,fitSharp.Fit.Operators,CheckEmpty,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckEmpty.cs,Check,The length of the statement  "                actualCell.Value.Text.Length == 0 ? "blank" : actualCell.Value.Text); // slightly quirky behavior from original fitnesse.net " is 124.
Long Statement,fitSharp.Fit.Operators,CompareDefault,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareDefault.cs,ArraysAreEqual,The length of the statement  "                if (!AreEqual(new TypedValue(a1.GetValue(i)' a1.GetType().GetElementType())' new TypedValue(a2.GetValue(i)' a2.GetType().GetElementType())' null)) " is 146.
Long Statement,fitSharp.Fit.Operators,CompareException,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareException.cs,Compare,The length of the statement  "            var exceptionContent = expected.Value.Text.Substring("exception[".Length' expected.Value.Text.Length - ("exception[".Length + 1)); " is 130.
Long Statement,fitSharp.Fit.Operators,FindMemberPattern,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\FindMemberPattern.cs,FindMember,The length of the statement  "            var member = query.FindMatchingMember(instance.Type' new PatternMemberMatcher(Processor' instance.Value' query.Specification))  " is 126.
Long Statement,fitSharp.Fit.Operators,PatternMemberMatcher,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\FindMemberPattern.cs,Match,The length of the statement  "                    var attribute = (MemberPatternAttribute)Attribute.GetCustomAttribute(memberInfo' typeof (MemberPatternAttribute)' true); " is 120.
Long Statement,fitSharp.Fit.Operators,PatternMemberMatcher,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\FindMemberPattern.cs,Match,The length of the statement  "                    return new Maybe<RuntimeMember>(new PatternRuntimeMember(processor' runtimeMemberFactory.MakeMember(instance)' parameters)); " is 124.
Long Statement,fitSharp.Fit.Operators,PatternRuntimeMember,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\FindMemberPattern.cs,Invoke,The length of the statement  "                    throw new InvalidMethodException(string.Format("Member pattern for {0} has {1} parameters."' baseMember.Name' patternParameters.Length)); " is 137.
Long Statement,fitSharp.Fit.Operators,ParseBoolean,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseBoolean.cs,ImpliesTrue,The length of the statement  "            return ourYIdentifier.Equals(possibleTrue) || ourYesIdentifier.Equals(possibleTrue) || ourTrueIdentifier.Equals(possibleTrue); " is 126.
Long Statement,fitSharp.Fit.Operators,ParseBoolean,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseBoolean.cs,ImpliesFalse,The length of the statement  "                ourNIdentifier.Equals(possibleFalse) || ourNoIdentifier.Equals(possibleFalse) || ourFalseIdentifier.Equals(possibleFalse); " is 122.
Long Statement,fitSharp.Fit.Runner,FolderRunner,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\FolderRunner.cs,Run,The length of the statement  "            return new SuiteRunnerShell(memory' reporter' m => new CellProcessorBase(m' m.GetItem<CellOperators>())).Run(commandLineArguments' memory); " is 139.
Long Statement,fitSharp.Fit.Runner,StoryTestFile,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFile.cs,WriteTest,The length of the statement  "            myFolderModel.MakeFile(outputFile' HtmlDecorator.AddToStart(ResultComment(result.TestCounts)' AddStyleSheetLink(result.Content))); " is 130.
Long Statement,fitSharp.Fit.Runner,StoryTestFolder,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFolder.cs,CreateChildSuite,The length of the statement  "            var folder = new StoryTestFolder(memory' inputFolder' Path.Combine(OutputPath' relativeFolderPath)' mySelection' myFolderModel' this); " is 134.
Long Statement,fitSharp.Machine.Application,SuiteConfiguration,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,LoadNode,The length of the statement  "            new BasicProcessor().InvokeWithThrow(AliasType(typeName' methodNode.Name)' new MemberName(AliasMethod(typeName' methodNode.Name))' NodeParameters(methodNode)); " is 159.
Long Statement,fitSharp.Machine.Engine,Operators<T;P>,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\Operators.cs,CreateOperator,The length of the statement  "            return (Operator<T' P>)(Processor == null ? new BasicProcessor(createMemory).Create(operatorName).Value : Processor.Create(operatorName).Value); " is 144.
Long Statement,fitSharp.Machine.Engine,ParameterList<T>,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,ParseParameterValue,The length of the statement  "                throw new ParseException<T>(member.Name' member.GetParameterType(parameterIndex)' parameterIndex+1' parameter.Value' e); " is 120.
Long Statement,fitSharp.Machine.Engine,MethodMember,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMember.cs,TryInvoke,The length of the statement  "            return new TypedValue(result' Info.ReturnType != typeof(void) && result != null ? result.GetType() : Info.ReturnType); //todo: push this into TypedValue " is 152.
Long Statement,fitSharp.Machine.Model,IdentifierName,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Model\IdentifierName.cs,Matches,The length of the statement  "                ? string.Equals(MatchName.Replace("_"' string.Empty)' name.Replace("_"' string.Empty)' StringComparison.OrdinalIgnoreCase) " is 122.
Long Statement,fitSharp.Parser,LexicalAnalyzer,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlTables.cs,FindPosition,The length of the statement  "                int start = IndexOfSkipComments(myInput' "<" + theToken' myPosition' Math.Min(EndPosition' myInput.Length) - myPosition); " is 121.
Long Statement,fitSharp.Parser,Substring,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\Substring.cs,TruncateAfter,The length of the statement  "            return new Substring(source' start' source.IndexOf(match' start' length' StringComparison.Ordinal) - start + match.Length); " is 123.
Long Statement,fitSharp.Parser,TextTableScanner,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\TextTableScanner.cs,MakeQuotedWord,The length of the statement  "            var result = new Token(TokenType.Word' source.Until(() => source.Type == CharacterType.Quote && source.Content == quote)); " is 122.
Long Statement,fitSharp.Slim.Operators,ComposeDictionary,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeDictionary.cs,Compose,The length of the statement  "                result.AppendFormat("\t<tr class=\"hash_row\">{2}\t\t<td class=\"hash_key\">{0}</td>{2}\t\t<td class=\"hash_value\">{1}</td>{2}\t</tr>{2}"' " is 139.
Long Statement,fitSharp.Slim.Operators,ComposeException,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,Compose,The length of the statement  "                return FormatException<MemberMissingException>(instance' e => string.Format("NO_METHOD_IN_CLASS {0} {1}"' e.MemberName' e.Type)); " is 129.
Long Statement,fitSharp.Slim.Operators,ComposeException,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,Compose,The length of the statement  "                return FormatException<InstructionException>(instance' e => string.Format("MALFORMED_INSTRUCTION {0}"' List(e.Instruction))); " is 125.
Long Statement,fitSharp.Slim.Operators,InvokeInstructionBase,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\InvokeInstructionBase.cs,InvokeMember,The length of the statement  "            TypedValue result = Processor.Invoke(target' new MemberName(parameters.ValueAt(memberIndex + 1))' ParameterTree(parameters' memberIndex + 2)); " is 142.
Empty Catch Block,fitSharp.Fit.Engine,InterpretFlow,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\InterpretFlow.cs,ProcessFlowRow,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Fixtures,FileSystem,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\FileSystem.cs,MakeEmptyFolder,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,CheckDefault,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckDefault.cs,Check,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,CheckVolatile,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckVolatile.cs,Check,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Ensure,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Not,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Show,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,ShowAs,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,DoCheckOperation,The method has an empty catch block.
Empty Catch Block,fitSharp.Machine.Engine,ApplicationUnderTest,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ApplicationUnderTest.cs,AddOptionalAssembly,The method has an empty catch block.
Empty Catch Block,fitSharp.Machine.Engine,Assemblies,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ApplicationUnderTest.cs,LoadWellKnownAssemblies,The method has an empty catch block.
Empty Catch Block,fitSharp.Parser,LexicalAnalyzer,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlTables.cs,PeekEnd,The method has an empty catch block.
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (cellCount < 2) throw MakeException("missing cells");
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals(identifier)) {                  cells.ValueAt(1).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);                  if (cellCount < 3) throw MakeException("missing cells");                  cells.ValueAt(2).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);                  return processor.ParseTree(typeof (Type)' cells.Branches[2]).Value;              }
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals(identifier)) {                  cells.ValueAt(1).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);                  if (cellCount < 3) throw MakeException("missing cells");                  cells.ValueAt(2).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);                  return processor.ParseTree(typeof (Type)' cells.Branches[2]).Value;              }
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals(identifier)) {                  cells.ValueAt(1).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);                  if (cellCount < 3) throw MakeException("missing cells");                  cells.ValueAt(2).SetAttribute(CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);                  return processor.ParseTree(typeof (Type)' cells.Branches[2]).Value;              }
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,EvaluateNew,The following statement contains a magic number: if (cells.Branches.Count < 2) throw MakeException("missing cells");
Magic Number,fitSharp.Fit.Engine,MethodPhrase,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,EvaluateNew,The following statement contains a magic number: return processor.Create(cells.Branches[1]' cells.Skip(2)).Value;
Magic Number,fitSharp.Fit.Fixtures,ConfigureFixture,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\ConfigureFixture.cs,Interpret,The following statement contains a magic number: if (table.Branches[0].Branches.Count > 2) {                  var currentRow = table.Branches[0].Skip(2);                  Execute(processor' facility' currentRow);              }
Magic Number,fitSharp.Fit.Fixtures,ConfigureFixture,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\ConfigureFixture.cs,Interpret,The following statement contains a magic number: if (table.Branches[0].Branches.Count > 2) {                  var currentRow = table.Branches[0].Skip(2);                  Execute(processor' facility' currentRow);              }
Magic Number,fitSharp.Fit.Fixtures,UseFixture,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,Interpret,The following statement contains a magic number: if (firstRow.Branches.Count < 2) throw new TableStructureException("Missing cells for use.");
Magic Number,fitSharp.Fit.Fixtures,UseFixture,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: if (firstRow.Branches.Count > 2) {                  var adapter = fixture as MutableDomainAdapter;                  if (adapter != null) {                      var parent = processor.CallStack.DomainAdapter.GetValueAs<DomainAdapter>();                      adapter.SetSystemUnderTest(new MethodPhrase(firstRow.Skip(2)).Evaluate(parent' processor));                  }              }
Magic Number,fitSharp.Fit.Fixtures,UseFixture,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: if (firstRow.Branches.Count > 2) {                  var adapter = fixture as MutableDomainAdapter;                  if (adapter != null) {                      var parent = processor.CallStack.DomainAdapter.GetValueAs<DomainAdapter>();                      adapter.SetSystemUnderTest(new MethodPhrase(firstRow.Skip(2)).Evaluate(parent' processor));                  }              }
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new CheckVolatile()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new FindMemberQueryable()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new InvokeFlowKeyword()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new InvokeLiteral()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new ParseArray()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new ParseByteArray()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new ParseNullArray()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new ParseSymbol()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new CompareError()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new CompareException()' 2);
Magic Number,fitSharp.Fit.Operators,CellOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add(new CompareFail()' 2);
Magic Number,fitSharp.Fit.Operators,CheckSymbolSave,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckSymbolSave.cs,Check,The following statement contains a magic number: Processor.Get<Symbols>().Save(expectedCell.Value.Content.Substring(2)' value);
Magic Number,fitSharp.Fit.Operators,CompareEndsWith,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareEndsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring(2' text.Length - 2);
Magic Number,fitSharp.Fit.Operators,CompareEndsWith,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareEndsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring(2' text.Length - 2);
Magic Number,fitSharp.Fit.Operators,CompareException,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareException.cs,Compare,The following statement contains a magic number: if (IsMessageOnly(exceptionContent)) {                  return actualException.Message == exceptionContent.Substring(1' exceptionContent.Length - 2);              }
Magic Number,fitSharp.Fit.Operators,CompareRegEx,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareRegEx.cs,Compare,The following statement contains a magic number: var expectedPattern = new Regex(compareValue.Substring(1' compareValue.Length-2));
Magic Number,fitSharp.Fit.Operators,CompareStartsWith,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareStartsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring(0' text.Length - 2);
Magic Number,fitSharp.Fit.Operators,CompareSubstring,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareSubstring.cs,GetExpected,The following statement contains a magic number: return cell.Substring(2' cell.Length - 4);
Magic Number,fitSharp.Fit.Operators,CompareSubstring,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareSubstring.cs,GetExpected,The following statement contains a magic number: return cell.Substring(2' cell.Length - 4);
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Name,The following statement contains a magic number: if (row.Branches.Count < 3) {                  throw new TableStructureException("missing cells for name.");              }
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Name,The following statement contains a magic number: var namedValue = withIdentifier.Equals(row.Branches[2].Value.Text)                                      ? new MethodPhrase(row.Skip(2)).Evaluate(interpreter' Processor)                                      : interpreter.ExecuteFlowRowMethod(Processor' row.Skip(1));
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Name,The following statement contains a magic number: var namedValue = withIdentifier.Equals(row.Branches[2].Value.Text)                                      ? new MethodPhrase(row.Skip(2)).Evaluate(interpreter' Processor)                                      : interpreter.ExecuteFlowRowMethod(Processor' row.Skip(1));
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,GetMethodCellRange,The following statement contains a magic number: if (row.Branches.Count < 2) {                  throw new FitFailureException("Missing cells for embedded method");              }
Magic Number,fitSharp.Fit.Operators,Parameters,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeProcedure.cs,Substitute,The following statement contains a magic number: var i = 2;
Magic Number,fitSharp.Fit.Operators,Parameters,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeProcedure.cs,Substitute,The following statement contains a magic number: foreach (var parameterValue in values.Branches) {                      if (source.Value != null && names.ValueAt(i).Text == source.Value.Text) {                          return copy.Make(parameterValue);                      }                      i += 2;                  }
Magic Number,fitSharp.Fit.Operators,ParseByteArray,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: input = input.Substring(2);
Magic Number,fitSharp.Fit.Operators,ParseByteArray,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: var result = new byte[input.Length / 2];
Magic Number,fitSharp.Fit.Operators,ParseByteArray,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {                  string currentByte = input.Substring(i' 2);                  result[i/2] = Byte.Parse(currentByte' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,fitSharp.Fit.Operators,ParseByteArray,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {                  string currentByte = input.Substring(i' 2);                  result[i/2] = Byte.Parse(currentByte' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,fitSharp.Fit.Operators,ParseByteArray,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {                  string currentByte = input.Substring(i' 2);                  result[i/2] = Byte.Parse(currentByte' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,fitSharp.Fit.Operators,ParseMemberName,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,MakeMemberName,The following statement contains a magic number: if (ofPosition > 0 && ofPosition < name.Length - 4) {                  var genericType = name.Substring(ofPosition + 4);                  var baseName = name.Substring(0' ofPosition);                  return new MemberName(name' baseName' MakeGenericTypes(new[] {genericType}));              }
Magic Number,fitSharp.Fit.Operators,ParseMemberName,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,MakeMemberName,The following statement contains a magic number: if (ofPosition > 0 && ofPosition < name.Length - 4) {                  var genericType = name.Substring(ofPosition + 4);                  var baseName = name.Substring(0' ofPosition);                  return new MemberName(name' baseName' MakeGenericTypes(new[] {genericType}));              }
Magic Number,fitSharp.Fit.Operators,ParseQuotedString,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseQuotedString.cs,Parse,The following statement contains a magic number: return new TypedValue(content.Substring(1' content.Length - 2));
Magic Number,fitSharp.Fit.Operators,ParseSymbol,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseSymbol.cs,Parse,The following statement contains a magic number: var symbol = parameters.Value.Content.Substring(2);
Magic Number,fitSharp.Fit.Runner,HtmlString,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Runner\TestPageDecoration.cs,HtmlString,The following statement contains a magic number: if (myBodyStart < 0 && myHeadEnd > 0) myBodyStart = myHeadEnd + 6;
Magic Number,fitSharp.Fit.Service,BindingFactory,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Service\BindingFactory.cs,Make,The following statement contains a magic number: if (member == null && name.StartsWith(newIdentifier' StringComparison.OrdinalIgnoreCase)) {  		        return new CreateBinding(processor' adapter' name.Substring(4));  		    }
Magic Number,fitSharp.Fit.Service,XmlResultWriter,C:\repos\jediwhale_fitsharp\source\fitSharp\Fit\Service\XmlResultWriter.cs,EncodeForXml,The following statement contains a magic number: foreach (char c in input) {                  if (c < 32 && !char.IsWhiteSpace(c)) {                      output.AppendFormat("&#{0};"' (int) c);                  }                  else {                      output.Append(c);                  }              }
Magic Number,fitSharp.Machine.Engine,MemberSpecification,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\MemberSpecification.cs,MatchesGetSetName,The following statement contains a magic number: return new IdentifierName(identifier.MatchName.Substring(3)).Matches(name);
Magic Number,fitSharp.Machine.Engine,ParameterList<T>,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,GetNamedParameterList,The following statement contains a magic number: for (int i = 0; i < parameterNames.Count; i++) {                  for (int j = 0; j < parameterNames.Count; j++) {                      var parameterNameId = new IdentifierName(parameterNames[j]);                      if (!parameterNameId.Matches(member.GetParameterName(i))) continue;                      result[i] = ParseParameterValue(member' instance' parameters.Branches[2*j + 1]' i);                  }              }
Magic Number,fitSharp.Parser,Characters,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith("\\")) {                  Type = CharacterType.Letter;                  current = current.Skip(1).Truncate(1);              }              else if (current.StartsWith("[\n")) {                  Type = CharacterType.BeginCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n]")) {                  Type = CharacterType.EndCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n")) {                  Type = CharacterType.Newline;                  current = current.Truncate(1);              }              else if (current.StartsWith("\"") || current.StartsWith("'")) {                  Type = CharacterType.Quote;                  current = current.Truncate(1);              }              else if (current.StartsWith("|")) {                  Type = CharacterType.Separator;                  current = current.Truncate(1);              }              else if (current.StartsWith(TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.BeginTest;                  current = current.Truncate(5);              }              else if (current.StartsWith("@test"' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.EndTest;                  current = current.Truncate(5);              }              else if (char.IsWhiteSpace(current[0])) {                  Type = CharacterType.WhiteSpace;                  current = current.Truncate(1);              }              else if (current.StartsWith("<br"' StringComparison.OrdinalIgnoreCase)                  && current.Contains(">")) {                  Type = CharacterType.Newline;                  current = current.TruncateAfter(">");              }              else {                  Type = CharacterType.Letter;                  current = current.Truncate(1);              }
Magic Number,fitSharp.Parser,Characters,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith("\\")) {                  Type = CharacterType.Letter;                  current = current.Skip(1).Truncate(1);              }              else if (current.StartsWith("[\n")) {                  Type = CharacterType.BeginCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n]")) {                  Type = CharacterType.EndCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n")) {                  Type = CharacterType.Newline;                  current = current.Truncate(1);              }              else if (current.StartsWith("\"") || current.StartsWith("'")) {                  Type = CharacterType.Quote;                  current = current.Truncate(1);              }              else if (current.StartsWith("|")) {                  Type = CharacterType.Separator;                  current = current.Truncate(1);              }              else if (current.StartsWith(TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.BeginTest;                  current = current.Truncate(5);              }              else if (current.StartsWith("@test"' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.EndTest;                  current = current.Truncate(5);              }              else if (char.IsWhiteSpace(current[0])) {                  Type = CharacterType.WhiteSpace;                  current = current.Truncate(1);              }              else if (current.StartsWith("<br"' StringComparison.OrdinalIgnoreCase)                  && current.Contains(">")) {                  Type = CharacterType.Newline;                  current = current.TruncateAfter(">");              }              else {                  Type = CharacterType.Letter;                  current = current.Truncate(1);              }
Magic Number,fitSharp.Parser,Characters,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith("\\")) {                  Type = CharacterType.Letter;                  current = current.Skip(1).Truncate(1);              }              else if (current.StartsWith("[\n")) {                  Type = CharacterType.BeginCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n]")) {                  Type = CharacterType.EndCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n")) {                  Type = CharacterType.Newline;                  current = current.Truncate(1);              }              else if (current.StartsWith("\"") || current.StartsWith("'")) {                  Type = CharacterType.Quote;                  current = current.Truncate(1);              }              else if (current.StartsWith("|")) {                  Type = CharacterType.Separator;                  current = current.Truncate(1);              }              else if (current.StartsWith(TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.BeginTest;                  current = current.Truncate(5);              }              else if (current.StartsWith("@test"' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.EndTest;                  current = current.Truncate(5);              }              else if (char.IsWhiteSpace(current[0])) {                  Type = CharacterType.WhiteSpace;                  current = current.Truncate(1);              }              else if (current.StartsWith("<br"' StringComparison.OrdinalIgnoreCase)                  && current.Contains(">")) {                  Type = CharacterType.Newline;                  current = current.TruncateAfter(">");              }              else {                  Type = CharacterType.Letter;                  current = current.Truncate(1);              }
Magic Number,fitSharp.Parser,Characters,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith("\\")) {                  Type = CharacterType.Letter;                  current = current.Skip(1).Truncate(1);              }              else if (current.StartsWith("[\n")) {                  Type = CharacterType.BeginCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n]")) {                  Type = CharacterType.EndCell;                  current = current.Truncate(2);              }              else if (current.StartsWith("\n")) {                  Type = CharacterType.Newline;                  current = current.Truncate(1);              }              else if (current.StartsWith("\"") || current.StartsWith("'")) {                  Type = CharacterType.Quote;                  current = current.Truncate(1);              }              else if (current.StartsWith("|")) {                  Type = CharacterType.Separator;                  current = current.Truncate(1);              }              else if (current.StartsWith(TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.BeginTest;                  current = current.Truncate(5);              }              else if (current.StartsWith("@test"' StringComparison.OrdinalIgnoreCase)) {                  Type = CharacterType.EndTest;                  current = current.Truncate(5);              }              else if (char.IsWhiteSpace(current[0])) {                  Type = CharacterType.WhiteSpace;                  current = current.Truncate(1);              }              else if (current.StartsWith("<br"' StringComparison.OrdinalIgnoreCase)                  && current.Contains(">")) {                  Type = CharacterType.Newline;                  current = current.TruncateAfter(">");              }              else {                  Type = CharacterType.Letter;                  current = current.Truncate(1);              }
Magic Number,fitSharp.Parser,TextOutput,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlString.cs,Append,The following statement contains a magic number: while (!current.IsEmpty) {                      var input = current[0];                      if (isStandard && input != '\u00a0' && char.IsWhiteSpace(input)) {                          if (!myWhitespace) {                              myText.Append(' ');                              myLastTag = myLastTag + " ";                          }                          myWhitespace = true;                      }                      else {                          switch (input) {                              case '\u201c':                                  input = '"'; break;                              case '\u201d':                                  input = '"'; break;                              case '\u2018':                                  input = '\''; break;                              case '\u2019':                                  input = '\''; break;                              case '\u00a0':                                  input = ' '; break;                              case '&':                                  if (current.ContainsAt(1' "nbsp;")) {                                      input = ' ';                                      current = current.Skip(5);                                  }                                  break;                          }                          myText.Append(input);                          myWhitespace = false;                          myLastTag = string.Empty;                      }                      current = current.Skip(1);                  }
Magic Number,fitSharp.Parser,LexicalAnalyzer,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlTables.cs,IndexOfSkipComments,The following statement contains a magic number: if (commentIndex != -1 && commentIndex < valueIndex) {                      // From found comment' look for closing token                      int endCommentIndex = input.IndexOf("-->"' commentIndex + 4' StringComparison.Ordinal);                      if (endCommentIndex == -1) {                          // Unclosed comment                          return -1;                      }                        // If value is between opening and closing comment tokens' value is enclosed in a comment.                      // Find next value after said comment.                      if (endCommentIndex > valueIndex) {                          int afterComment = endCommentIndex + 3;                          return IndexOfSkipComments(input' value' afterComment' count - (afterComment - position));                      }                  }
Magic Number,fitSharp.Parser,LexicalAnalyzer,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlTables.cs,IndexOfSkipComments,The following statement contains a magic number: if (commentIndex != -1 && commentIndex < valueIndex) {                      // From found comment' look for closing token                      int endCommentIndex = input.IndexOf("-->"' commentIndex + 4' StringComparison.Ordinal);                      if (endCommentIndex == -1) {                          // Unclosed comment                          return -1;                      }                        // If value is between opening and closing comment tokens' value is enclosed in a comment.                      // Find next value after said comment.                      if (endCommentIndex > valueIndex) {                          int afterComment = endCommentIndex + 3;                          return IndexOfSkipComments(input' value' afterComment' count - (afterComment - position));                      }                  }
Magic Number,fitSharp.Parser,TextTables,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: while (scanner.Current.Type == TokenType.BeginCell || scanner.Current.Type == TokenType.Word) {                  var cell = makeTreeCell(scanner.Current.Content);                  cell.Value.SetAttribute(CellAttribute.StartTag' startTags[2]);                  cell.Value.SetAttribute(CellAttribute.EndTag' endTags[2]);                  if (scanner.Current.Type == TokenType.BeginCell) {                      MakeTables(cell);                  }                  else if (scanner.Current.Type == TokenType.Word) {                      cell.Value.SetAttribute(CellAttribute.Body' HttpUtility.HtmlEncode(scanner.Current.Content));                  }                  row.Add(cell);                  scanner.MoveNext();              }
Magic Number,fitSharp.Parser,TextTables,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: while (scanner.Current.Type == TokenType.BeginCell || scanner.Current.Type == TokenType.Word) {                  var cell = makeTreeCell(scanner.Current.Content);                  cell.Value.SetAttribute(CellAttribute.StartTag' startTags[2]);                  cell.Value.SetAttribute(CellAttribute.EndTag' endTags[2]);                  if (scanner.Current.Type == TokenType.BeginCell) {                      MakeTables(cell);                  }                  else if (scanner.Current.Type == TokenType.Word) {                      cell.Value.SetAttribute(CellAttribute.Body' HttpUtility.HtmlEncode(scanner.Current.Content));                  }                  row.Add(cell);                  scanner.MoveNext();              }
Magic Number,fitSharp.Slim.Model,SlimTree,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: while (start < input.Length - 1) {                  var endList = FindEndOfNestedList(input' start);                  if (input[start] == '[' && endList > start) {                      result.AddBranch(MakeTree(input.Substring(start' endList - start + 1)));                      start = endList + 3;                  }                  else {                      var end = input.IndexOf("' "' start);                      if (end < start) end = input.Length - 1;                      if (end >= start) result.AddBranch(MakeBranch(input.Substring(start' end - start)));                      start = end + 2;                  }              }
Magic Number,fitSharp.Slim.Model,SlimTree,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: while (start < input.Length - 1) {                  var endList = FindEndOfNestedList(input' start);                  if (input[start] == '[' && endList > start) {                      result.AddBranch(MakeTree(input.Substring(start' endList - start + 1)));                      start = endList + 3;                  }                  else {                      var end = input.IndexOf("' "' start);                      if (end < start) end = input.Length - 1;                      if (end >= start) result.AddBranch(MakeBranch(input.Substring(start' end - start)));                      start = end + 2;                  }              }
Magic Number,fitSharp.Slim.Model,SlimTree,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,FindEndOfNestedList,The following statement contains a magic number: if (endList < 0 && input[input.Length - 2] == ']') endList = input.Length - 2;
Magic Number,fitSharp.Slim.Model,SlimTree,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,FindEndOfNestedList,The following statement contains a magic number: if (endList < 0 && input[input.Length - 2] == ']') endList = input.Length - 2;
Magic Number,fitSharp.Slim.Operators,ExecuteAssign,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols>().Save(parameters.ValueAt(2)' parameters.ValueAt(3));
Magic Number,fitSharp.Slim.Operators,ExecuteAssign,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols>().Save(parameters.ValueAt(2)' parameters.ValueAt(3));
Magic Number,fitSharp.Slim.Operators,ExecuteCall,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteCall.cs,ExecuteOperation,The following statement contains a magic number: TypedValue result = InvokeMember(parameters' 2);
Magic Number,fitSharp.Slim.Operators,ExecuteCallAndAssign,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteCallAndAssign.cs,ExecuteOperation,The following statement contains a magic number: TypedValue result = InvokeMember(parameters' 3);
Magic Number,fitSharp.Slim.Operators,ExecuteCallAndAssign,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteCallAndAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols>().Save(parameters.ValueAt(2)' result.Value);
Magic Number,fitSharp.Slim.Operators,ExecuteImport,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteImport.cs,ExecuteOperation,The following statement contains a magic number: Processor.AddNamespace(parameters.ValueAt(2));
Magic Number,fitSharp.Slim.Operators,ExecuteMake,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,ExecuteOperation,The following statement contains a magic number: var singleSymbol = Processor.LoadSymbol(parameters.ValueAt(3));
Magic Number,fitSharp.Slim.Operators,ExecuteMake,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,ExecuteOperation,The following statement contains a magic number: var name = parameters.ValueAt(2);
Magic Number,fitSharp.Slim.Operators,ExecuteMake,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,CreateInstance,The following statement contains a magic number: var typeName = Processor.ParseTree<string' string>(parameters.Branches[3]);
Magic Number,fitSharp.Slim.Operators,ExecuteMake,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,CreateInstance,The following statement contains a magic number: return Processor.Create(typeName' ParameterTree(parameters' 4));
Magic Number,fitSharp.Slim.Operators,InvokeInstructionBase,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Operators\InvokeInstructionBase.cs,InvokeMember,The following statement contains a magic number: TypedValue result = Processor.Invoke(target' new MemberName(parameters.ValueAt(memberIndex + 1))' ParameterTree(parameters' memberIndex + 2));
Magic Number,fitSharp.Slim.Service,Document,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,Read,The following statement contains a magic number: if (IsList(input)) return ReadList(new DelimitedString(input.Substring(1' input.Length - 2)));
Magic Number,fitSharp.Slim.Service,Document,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith("[")                  && input.Length > 8                  && input.Substring(7' 1) == ":"                  && input.EndsWith("]")                  && int.TryParse(input.Substring(1' 6)' out result);
Magic Number,fitSharp.Slim.Service,Document,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith("[")                  && input.Length > 8                  && input.Substring(7' 1) == ":"                  && input.EndsWith("]")                  && int.TryParse(input.Substring(1' 6)' out result);
Magic Number,fitSharp.Slim.Service,Document,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith("[")                  && input.Length > 8                  && input.Substring(7' 1) == ":"                  && input.EndsWith("]")                  && int.TryParse(input.Substring(1' 6)' out result);
Magic Number,fitSharp.Slim.Service,SlimOperators,C:\repos\jediwhale_fitsharp\source\fitSharp\Slim\Service\SlimOperators.cs,SlimOperators,The following statement contains a magic number: Add(new ParseSymbol()' 2);
Missing Default,fitSharp.Machine.Application,SuiteConfiguration,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,AliasMethod,The following switch statement is missing a default case: switch (originalType.ToLowerInvariant()) {                  case "fit.assemblies":                      if (originalMethod == "add") return "addAssembly";                      break;                  case "fit.namespaces":                      if (originalMethod == "add") return "addNamespace";                      if (originalMethod == "remove") return "removeNamespace";                      break;                  case "fit.cellhandlers":                  case "fitlibrary.cellhandlers":                      if (originalMethod == "add") return "addCellHandler";                      if (originalMethod == "remove") return "removeCellHandler";                      break;              }
Missing Default,fitSharp.Machine.Application,SuiteConfiguration,C:\repos\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,AliasMethod,The following switch statement is missing a default case: switch (originalMethod) {                  case "addOperator":                      return "add";                  case "removeOperator":                      return "remove";                  case "AppConfigFile":                      return "ConfigurationFile";              }
Missing Default,fitSharp.Parser,TextOutput,C:\repos\jediwhale_fitsharp\source\fitSharp\Parser\HtmlString.cs,Append,The following switch statement is missing a default case: switch (input) {                              case '\u201c':                                  input = '"'; break;                              case '\u201d':                                  input = '"'; break;                              case '\u2018':                                  input = '\''; break;                              case '\u2019':                                  input = '\''; break;                              case '\u00a0':                                  input = ' '; break;                              case '&':                                  if (current.ContainsAt(1' "nbsp;")) {                                      input = ' ';                                      current = current.Skip(5);                                  }                                  break;                          }
