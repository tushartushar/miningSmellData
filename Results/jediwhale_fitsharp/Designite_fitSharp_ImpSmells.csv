Implementation smell,Namespace,Class,File,Method,Description
Complex Method,fitSharp.Fit.Engine,InterpretFlow,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\InterpretFlow.cs,ProcessFlowRow,Cyclomatic complexity of the method is 11
Complex Method,fitSharp.Fit.Runner,SuiteRunner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\SuiteRunner.cs,RunFolder,Cyclomatic complexity of the method is 9
Complex Method,fitSharp.Machine.Application,SuiteConfiguration,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,AliasMethod,Cyclomatic complexity of the method is 14
Complex Method,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,Cyclomatic complexity of the method is 12
Complex Method,fitSharp.Parser,HtmlString,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\HtmlString.cs,UnEscape,Cyclomatic complexity of the method is 8
Complex Method,fitSharp.Swim,ResultPage,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Swim\ResultPage.cs,ResultPage,Cyclomatic complexity of the method is 8
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,Check,The method has 5 parameters.
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,Execute,The method has 5 parameters.
Long Parameter List,fitSharp.Fit.Engine,CellProcessorExtension,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,ExecuteWithThrow,The method has 5 parameters.
Long Parameter List,fitSharp.Fit.Runner,StoryTestFolder,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFolder.cs,StoryTestFolder,The method has 6 parameters.
Long Parameter List,fitSharp.Machine.Exception,ParseException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Exception\ParseException.cs,ParseException,The method has 5 parameters.
Long Statement,fitSharp.Fit.Engine,FlowRow,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\FlowRow.cs,ExecuteMethod,The length of the statement  "	return processor.Execute (target' selector.SelectMethodCells (row)' selector.SelectParameterCells (row)' row.ValueAt (0)); " is 122.
Long Statement,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The length of the statement  "	return processor.Get<Symbols> ().HasValue (identifier) ? processor.Get<Symbols> ().GetValue (identifier) : fixture.ExecuteFlowRowMethod (processor' cells); " is 155.
Long Statement,fitSharp.Fit.Engine,CellProcessorExtension,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\CellProcessorExtension.cs,Check,The length of the statement  "	processor.Operate<CheckOperator> (CellOperationValue.Make (systemUnderTest' memberName' parameters' false)' expectedCell); " is 122.
Long Statement,fitSharp.Fit.Engine,InterpretFlow,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\InterpretFlow.cs,ProcessFlowRow,The length of the statement  "				processor.Operate<WrapOperator> (result).As<Interpreter> (i => ProcessRestOfTable (i' MakeTableWithRows (table' rowNumber)' false)); " is 132.
Long Statement,fitSharp.Fit.Fixtures,Compute,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\Compute.cs,Interpret,The length of the statement  "	new Traverse<Cell> ().Rows.Header (row => headerRow = row).Rows.Rest (row => ComputeRow (processor' row)).VisitTable (table); " is 125.
Long Statement,fitSharp.Fit.Fixtures,Compute,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\Compute.cs,ComputeRow,The length of the statement  "	var result = processor.Invoke (processor.CallStack.DomainAdapter' memberName' new EnumeratedTree<Cell> (parameterList)); " is 120.
Long Statement,fitSharp.Fit.Fixtures,ConfigureFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\ConfigureFixture.cs,Interpret,The length of the statement  "	var facility = processorIdentifier.Matches (table.ValueAt (0' 1).Text) ? processor : processor.Memory.GetItem (table.ValueAt (0' 1).Text); " is 138.
Long Statement,fitSharp.Fit.Fixtures,IncludeAction,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\IncludeAction.cs,PageFromCurrent,The length of the statement  "	String (pageSource.GetPageContent (processor.Get<Context> ().TestPagePath.WithSubPath (pageSource.MakePath (pageName)))); " is 121.
Long Statement,fitSharp.Fit.Fixtures,MatchValue,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\MatchValue.cs,Interpret,The length of the statement  "	new Traverse<Cell> ().Rows.First (row => selectValue = new ValuePhrase (row).Evaluate (processor)).Rows.All (row => SelectRow (processor' row)).VisitTable (table); " is 163.
Long Statement,fitSharp.Fit.Fixtures,Define,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\Define.cs,Interpret,The length of the statement  "	var name = processor.ParseTree<Cell' MemberName> (new EnumeratedTree<Cell> (table.Branches [0].Branches.Skip (1).Alternate ())); " is 128.
Long Statement,fitSharp.Fit.Operators,InvokeProcedure,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeProcedure.cs,Invoke,The length of the statement  "	var body = procedure.Branches [1].Branches [0].IsLeaf ? new CellTree (copy.Make (procedure' source => source.Branches.Skip (1)' parameters.Substitute)) : new CellTree (procedure.Branches [1].Branches [0].Branches.Select (branch => copy.Make (branch' parameters.Substitute))); " is 275.
Long Statement,fitSharp.Fit.Operators,ComposeStoryTestString,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ComposeStoryTestString.cs,Compose,The length of the statement  "		return new TextTables (new TextTableScanner (instance.ValueString' c => c == CharacterType.Letter)' MakeTreeCell).Parse (); " is 123.
Long Statement,fitSharp.Fit.Operators,ExecuteDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ExecuteDefault.cs,Execute,The length of the statement  "		result = Processor.Invoke (new TypedValue (targetObjectProvider != null ? targetObjectProvider.GetTargetObject () : systemUnderTest)' name' parameters); " is 152.
Long Statement,fitSharp.Fit.Operators,FindMemberPattern,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\FindMemberPattern.cs,FindMember,The length of the statement  "	var member = query.FindMatchingMember (instance.Type' new PatternMemberMatcher (Processor' instance.Value' query.Specification)).OrMaybe (() => query.FindMember (instance.Value)); " is 179.
Long Statement,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Name,The length of the statement  "	var namedValue = withIdentifier.Equals (row.Branches [2].Value.Text) ? new MethodPhrase (row.Skip (2)).Evaluate (interpreter' Processor) : interpreter.ExecuteFlowRowMethod (Processor' row.Skip (1)); " is 198.
Long Statement,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,DoCheckOperation,The length of the statement  "			Processor.Operate<CheckOperator> (CellOperationValue.Make (interpreter' interpreter.MethodRowSelector.SelectMethodCells (methodCells)' interpreter.MethodRowSelector.SelectParameterCells (methodCells)' isVolatile)' row.Last ()); " is 227.
Long Statement,fitSharp.Fit.Operators,ParseInterpreter,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseInterpreter.cs,MakeInterpreter,The length of the statement  "	classCell.SetAttribute (CellAttribute.Syntax' result.HasValueAs<Interpreter> () ? CellAttributeValue.SyntaxInterpreter : CellAttributeValue.SyntaxSUT); " is 151.
Long Statement,fitSharp.Fit.Operators,ParseStoryTestString,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseStoryTestString.cs,Parse,The length of the statement  "	return type == typeof(StoryTestString) ? new TypedValue (new StoryTestString (TestToString (parameters))) : new TypedValue (new StoryTableString (TableToString (parameters))); " is 175.
Long Statement,fitSharp.Fit.Operators,CompareFail,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareFail.cs,CanCompare,The length of the statement  "	return expected.Value.Text != null && failIdentifier.IsStartOf (expected.Value.Text) && expected.Value.Text.EndsWith ("]"); " is 123.
Long Statement,fitSharp.Fit.Operators,CompareFail,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareFail.cs,Compare,The length of the statement  "	string expectedText = expected.Value.Text.Substring ("fail[".Length' expected.Value.Text.Length - ("fail[".Length + 1)); " is 120.
Long Statement,fitSharp.Fit.Operators,CheckEmpty,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckEmpty.cs,Check,The length of the statement  "	expectedCell.Value.SetAttribute (CellAttribute.InformationSuffix' actualCell.Value.Text.Length == 0 ? "blank" : actualCell.Value.Text); " is 135.
Long Statement,fitSharp.Fit.Operators,CompareNumeric,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareNumeric.cs,CanCompare,The length of the statement  "	return !expected.Value.Text.StartsWith ("<<") && FindComparison (expected.Value.Text) != null && Array.IndexOf (numericTypes' actual.Type) >= 0; " is 144.
Long Statement,fitSharp.Fit.Operators,CompareNumeric,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareNumeric.cs,Compare,The length of the statement  "	int compare = actualValue is float || actualValue is double ? (Convert.ToDouble (actualValue) < Convert.ToDouble (expectedValue) ? -1 : (Convert.ToDouble (actualValue) > Convert.ToDouble (expectedValue) ? 1 : 0)) : decimal.Compare (Convert.ToDecimal (actualValue)' Convert.ToDecimal (expectedValue)); " is 300.
Long Statement,fitSharp.Fit.Operators,CompareException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareException.cs,Compare,The length of the statement  "	var exceptionContent = expected.Value.Text.Substring ("exception[".Length' expected.Value.Text.Length - ("exception[".Length + 1)); " is 131.
Long Statement,fitSharp.Fit.Operators,ParseSymbol,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseSymbol.cs,CanParse,The length of the statement  "	return parameters.Value != null && parameters.Value.Content.StartsWith ("<<") && !parameters.Value.Content.Contains ("'"); " is 122.
Long Statement,fitSharp.Fit.Operators,ParseSymbol,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseSymbol.cs,Parse,The length of the statement  "	var result = symbols.HasValue (symbol) ? MakeTypedValue (symbols.GetValue (symbol)' type) : new TypedValue (null' type); " is 120.
Long Statement,fitSharp.Fit.Operators,ParseSymbol,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseSymbol.cs,Parse,The length of the statement  "	parameters.Value.SetAttribute (CellAttribute.InformationSuffix' result.Value == null ? "null" : result.Value.ToString ()); " is 122.
Long Statement,fitSharp.Fit.Operators,ParseSymbol,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseSymbol.cs,MakeTypedValue,The length of the statement  "	return value == null || type.IsInstanceOfType (value) || value.GetType () != typeof(string) ? new TypedValue (value' type) : Processor.ParseString (type' value.ToString ()); " is 173.
Long Statement,fitSharp.Fit.Operators,ParseMemberName,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,Parse,The length of the statement  "	var nameParts = Processor.Get<Settings> ().BehaviorHas ("fitlibrary1") ? parameters.Leaves ().Aggregate (new StringBuilder ()' (t' cell) => AppendWithConversion (t' cell.Text)) : parameters.Leaves ().Aggregate (new StringBuilder ()' (t' cell) => Append (t' cell.Text)); " is 269.
Long Statement,fitSharp.Fit.Operators,ParseMemberName,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,AppendWithConversion,The length of the statement  "	return nameParts.Append (name.Aggregate (new StringBuilder ()' (t' character) => !specialCharacterConversion.ContainsKey (character) ? t.Append (character) : t.Append (specialCharacterConversion [character]))); " is 210.
Long Statement,fitSharp.Fit.Operators,CompareDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareDefault.cs,ArraysAreEqual,The length of the statement  "		if (!AreEqual (new TypedValue (a1.GetValue (i)' a1.GetType ().GetElementType ())' new TypedValue (a2.GetValue (i)' a2.GetType ().GetElementType ())' null)) " is 155.
Long Statement,fitSharp.Fit.Operators,ParseBoolean,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseBoolean.cs,ImpliesTrue,The length of the statement  "	return ourYIdentifier.Equals (possibleTrue) || ourYesIdentifier.Equals (possibleTrue) || ourTrueIdentifier.Equals (possibleTrue); " is 129.
Long Statement,fitSharp.Fit.Operators,ParseBoolean,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseBoolean.cs,ImpliesFalse,The length of the statement  "	return ourNIdentifier.Equals (possibleFalse) || ourNoIdentifier.Equals (possibleFalse) || ourFalseIdentifier.Equals (possibleFalse); " is 132.
Long Statement,fitSharp.Fit.Model,CallStack,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Model\CallStack.cs,GetSystemUnderTest,The length of the statement  "		candidate = new TypedValue (candidate.As<DomainAdapter' object> (domainAdapter => domainAdapter.SystemUnderTest' () => null)); " is 126.
Long Statement,fitSharp.Fit.Model,DeepCopy,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Model\DeepCopy.cs,Make,The length of the statement  "	var newCell = processor.MakeCell (original.Value == null ? string.Empty : original.Value.Text' string.Empty' branches (original).Select (branch => Make (branch' substitute))); " is 175.
Long Statement,fitSharp.Fit.Runner,FolderRunner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\FolderRunner.cs,Run,The length of the statement  "	return new SuiteRunnerShell (memory' reporter' m => new CellProcessorBase (m' m.GetItem<CellOperators> ())).Run (commandLineArguments' memory); " is 143.
Long Statement,fitSharp.Fit.Runner,HtmlDecorator,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\HtmlDecorator.cs,AddToStart,The length of the statement  "	return (scanner.Body.IsEmpty) ? newText + Environment.NewLine + existingText : scanner.Leader.ToString () + scanner.Element + Environment.NewLine + newText + scanner.Element.After; " is 180.
Long Statement,fitSharp.Fit.Runner,SuiteRunner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\SuiteRunner.cs,CreateResultWriter,The length of the statement  "		return new XmlResultWriter (memory.GetItem<Settings> ().XmlOutput' new FileSystemModel (memory.GetItem<Settings> ().CodePageNumber)); " is 133.
Long Statement,fitSharp.Fit.Runner,StoryTestFile,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFile.cs,WriteTest,The length of the statement  "	myFolderModel.MakeFile (outputFile' HtmlDecorator.AddToStart (ResultComment (result.TestCounts)' AddStyleSheetLink (result.Content))); " is 134.
Long Statement,fitSharp.Fit.Runner,StoryTestFile,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFile.cs,ResultComment,The length of the statement  "	return "<!--" + Clock.Instance.Now.ToString ("yyyy-MM-dd HH:mm:ss'") + counts.GetCount (TestStatus.Right) + "'" + counts.GetCount (TestStatus.Wrong) + "'" + counts.GetCount (TestStatus.Ignore) + "'" + counts.GetCount (TestStatus.Exception) + "--><!-- saved from url=(0014)about:internet -->"; " is 292.
Long Statement,fitSharp.Fit.Runner,StoryTestFolder,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Runner\StoryTestFolder.cs,CreateChildSuite,The length of the statement  "	var folder = new StoryTestFolder (memory' inputFolder' Path.Combine (OutputPath' relativeFolderPath)' mySelection' myFolderModel' this); " is 136.
Long Statement,fitSharp.IO,ElapsedTime,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\IO\ElapsedTime.cs,ToString,The length of the statement  "	return string.Format ("{0:####00}:{1:00}:{2:00}.{3:000}"' elapsed.TotalHours' elapsed.Minutes' elapsed.Seconds' elapsed.Milliseconds); " is 134.
Long Statement,fitSharp.Machine.Engine,BasicMemberMatcher,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\BasicMemberMatcher.cs,Matches,The length of the statement  "	return specification.MatchesParameterCount (runtimeMember) && specification.MatchesParameterTypes (runtimeMember) && specification.MatchesParameterNames (runtimeMember); " is 169.
Long Statement,fitSharp.Machine.Engine,MemberQuery,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\MemberQuery.cs,FindMatchingMember,The length of the statement  "	return FindMatchingMember (targetType' BindingFlags.Public' matcher).OrMaybe (() => FindMatchingMember (targetType' BindingFlags.NonPublic' matcher)); " is 150.
Long Statement,fitSharp.Machine.Engine,MethodMemberFactory,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMemberFactory.cs,MakeMember,The length of the statement  "	return Info.IsGenericMethod ? new MethodMember (specification.MakeGenericMethod (Info)' instance) : new MethodMember (info' instance); " is 134.
Long Statement,fitSharp.Machine.Engine,CreateDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\CreateDefault.cs,Create,The length of the statement  "	return parameters.Branches.Count == 0 ? CreateWithoutParameters (runtimeType) : CreateWithParameters (parameters' runtimeType); " is 127.
Long Statement,fitSharp.Machine.Engine,Culture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\Culture.cs,MakeCultureInfo,The length of the statement  "	return string.Equals (Name' "invariant"' StringComparison.InvariantCultureIgnoreCase) ? CultureInfo.InvariantCulture : CultureInfo.GetCultureInfo (Name); " is 153.
Long Statement,fitSharp.Machine.Engine,ParameterList,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,ParseParameterValue,The length of the statement  "		throw new ParseException<T> (member.Name' member.GetParameterType (parameterIndex)' parameterIndex + 1' parameter.Value' e); " is 124.
Long Statement,fitSharp.Machine.Engine,DefaultParse,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\DefaultParse.cs,Parse,The length of the statement  "	throw new InvalidOperationException (string.Format ("Can't parse {0} because it doesn't have a static Parse method"' type.FullName)); " is 133.
Long Statement,fitSharp.Machine.Engine,InvokeDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\InvokeDefault.cs,Invoke,The length of the statement  "		member = MemberQuery.FindInstance (Processor.FindMember' instance.Value' new MemberSpecification (memberName).WithParameterNames (parameterNames)); " is 147.
Long Statement,fitSharp.Machine.Engine,InvokeDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\InvokeDefault.cs,Invoke,The length of the statement  "		member = MemberQuery.FindInstance (Processor.FindMember' instance.Value' new MemberSpecification (memberName' parameterCount)); " is 127.
Long Statement,fitSharp.Machine.Engine,InvokeDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\InvokeDefault.cs,Invoke,The length of the statement  "	var parameterList = memberName.HasNamedParameters ? new ParameterList<T> (Processor).GetNamedParameterList (instance' parameters' member' parameterNames) : new ParameterList<T> (Processor).GetParameterList (instance' parameters' member); " is 237.
Long Statement,fitSharp.Machine.Engine,Operators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\Operators.cs,CreateOperator,The length of the statement  "	return (Operator<T' P>)(Processor == null ? new BasicProcessor (createMemory).Create (operatorName).Value : Processor.Create (operatorName).Value); " is 147.
Long Statement,fitSharp.Machine.Engine,Operators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\Operators.cs,CanDoOperation,The length of the statement  "	var member = MemberQuery.GetDirectInstance (candidate' new MemberSpecification ("Can" + operationName' parameters.Length)); " is 123.
Long Statement,fitSharp.Machine.Engine,ParseNullable,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParseNullable.cs,Parse,The length of the statement  "	return parameters.Value.Length > 0 && parameters.Value != "null" ? Processor.ParseTree (type.GetGenericArguments () [0]' parameters) : new TypedValue (null' type); " is 163.
Long Statement,fitSharp.Machine.Engine,ProcessorBase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\Processor.cs,Invoke,The length of the statement  "	return DoLoggedOperation (instance.Type != typeof(Logging) ? string.Format ("invoke {0} {1}"' instance.ValueString' memberName) : string.Empty' logging => { " is 156.
Long Statement,fitSharp.Machine.Engine,MethodMember,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMember.cs,TryInvoke,The length of the statement  "		result = type.InvokeMember (info.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.InvokeMethod | BindingFlags.Static' null' instance' parameters); " is 187.
Long Statement,fitSharp.Machine.Engine,MethodMember,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMember.cs,TryInvoke,The length of the statement  "	return new TypedValue (result' Info.ReturnType != typeof(void) && result != null ? result.GetType () : Info.ReturnType); " is 120.
Long Statement,fitSharp.Machine.Engine,FieldMember,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMember.cs,TryInvoke,The length of the statement  "	object result = type.InvokeMember (info.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | (parameters.Length == 0 ? BindingFlags.GetField : BindingFlags.SetField) | BindingFlags.Static' null' instance' parameters); " is 241.
Long Statement,fitSharp.Machine.Engine,PropertyMember,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeMember.cs,TryInvoke,The length of the statement  "	object result = type.InvokeMember (info.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | (parameters.Length == 0 ? BindingFlags.GetProperty : BindingFlags.SetProperty) | BindingFlags.Static' null' instance' parameters); " is 247.
Long Statement,fitSharp.Machine.Engine,RuntimeType,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeType.cs,FindStatic,The length of the statement  "	return new MemberQuery (new MemberSpecification (memberName' parameterTypes.Length).WithParameterTypes (parameterTypes)).StaticOnly ().FindMember (Type); " is 153.
Long Statement,fitSharp.Machine.Engine,RuntimeType,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeType.cs,GetConstructor,The length of the statement  "	foreach (var runtimeMember in new MemberQuery (new MemberSpecification (MemberName.Constructor' parameterCount)).FindMember (Type).Value) { " is 139.
Long Statement,fitSharp.Machine.Engine,RuntimeType,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\RuntimeType.cs,FindConstructor,The length of the statement  "	return new MemberQuery (new MemberSpecification (MemberName.Constructor' parameterTypes.Length).WithParameterTypes (parameterTypes)).FindMember (Type); " is 151.
Long Statement,fitSharp.Machine.Application,SuiteConfiguration,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,LoadNode,The length of the statement  "	new BasicProcessor ().InvokeWithThrow (AliasType (typeName' methodNode.Name)' new MemberName (AliasMethod (typeName' methodNode.Name))' NodeParameters (methodNode)); " is 165.
Long Statement,fitSharp.Machine.Application,Shell,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\Shell.cs,Run,The length of the statement  "		return !memory.HasItem<AppDomainSetup> () ? RunInCurrentDomain () : RunInNewDomain (memory.GetItem<AppDomainSetup> ()' commandLineArguments); " is 141.
Long Statement,fitSharp.Machine.Application,Shell,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\Shell.cs,RunInNewDomain,The length of the statement  "		var remoteShell = (Shell)newDomain.CreateInstanceAndUnwrap (Assembly.GetExecutingAssembly ().GetName ().Name' typeof(Shell).FullName); " is 134.
Long Statement,fitSharp.Machine.Application,Shell,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\Shell.cs,ParseArguments,The length of the statement  "	argumentParser.AddArgumentHandler ("c"' value => new SuiteConfiguration (memory).LoadXml (folderModel.GetPageContent (value))); " is 127.
Long Statement,fitSharp.Machine.Application,AssemblyLoadFailureHandler,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\AssemblyLoadFailureHandler.cs,EnableAssemblyResolutionHandling,The length of the statement  "		/* Add in the appropriate hooks for resolving Assemblies both during normal and reflection-only cases */AppDomain.CurrentDomain.AssemblyResolve += LoadFromSameFolder; " is 166.
Long Statement,fitSharp.Machine.Application,AssemblyLoadFailureHandler,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\AssemblyLoadFailureHandler.cs,LoadFromSameFolder,The length of the statement  "		/* Find the path that actually contains the DLL in question */var file = _folders.Select (f => Path.Combine (f' new AssemblyName (args.Name).Name + ".dll")).FirstOrDefault (f => File.Exists (f)); " is 195.
Long Statement,fitSharp.Machine.Model,IdentifierName,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Model\IdentifierName.cs,Matches,The length of the statement  "	return name.Contains ("_") ? string.Equals (MatchName.Replace ("_"' string.Empty)' name.Replace ("_"' string.Empty)' StringComparison.OrdinalIgnoreCase) : string.Equals (MatchName' name' StringComparison.OrdinalIgnoreCase); " is 223.
Long Statement,fitSharp.Fit.Service,InputBinding,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Service\Binding.cs,ShowActual,The length of the statement  "	cell.SetAttribute (CellAttribute.InformationSuffix' actual == null ? "null" : actual.ToString ().Length == 0 ? "blank" : actual.ToString ()); " is 141.
Long Statement,fitSharp.Parser,TextTableScanner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTableScanner.cs,MakeTestToken,The length of the statement  "	return source.AtEnd || source.Type == CharacterType.EndTest ? MakeEndOfTest () : source.Type == CharacterType.Newline ? MakeNewline () : source.Type == CharacterType.BeginCell ? MakeToken (TokenType.BeginCell) : source.Type == CharacterType.EndCell ? MakeToken (TokenType.EndCell) : source.Type == CharacterType.Quote ? MakeQuotedWord () : MakeDelimitedWord (); " is 361.
Long Statement,fitSharp.Parser,TextTableScanner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTableScanner.cs,MakeQuotedWord,The length of the statement  "	var result = new Token (TokenType.Word' source.Until (() => source.Type == CharacterType.Quote && source.Content == quote)); " is 124.
Long Statement,fitSharp.Parser,TextTableScanner,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTableScanner.cs,MakeDelimitedWord,The length of the statement  "	var result = new Token (TokenType.Word' source.Until (() => !isWordContent (source.Type)).TrimEnd ().Replace ('_'' ' ')); " is 121.
Long Statement,fitSharp.Parser,Substring,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Substring.cs,TruncateAfter,The length of the statement  "	return new Substring (source' start' source.IndexOf (match' start' length' StringComparison.Ordinal) - start + match.Length); " is 125.
Long Statement,fitSharp.Parser,Substring,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Substring.cs,Equals,The length of the statement  "	return (length == theOther.length ? string.Compare (source' start' theOther.source' theOther.start' length) == 0 : false); " is 122.
Long Statement,fitSharp.Slim.Operators,ComposeDictionary,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeDictionary.cs,Compose,The length of the statement  "		result.AppendFormat ("\t<tr class=\"hash_row\">{2}\t\t<td class=\"hash_key\">{0}</td>{2}\t\t<td class=\"hash_value\">{1}</td>{2}\t</tr>{2}"' keyValue.Key' keyValue.Value' Environment.NewLine); " is 192.
Long Statement,fitSharp.Slim.Operators,ComposeException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,WasAborted,The length of the statement  "	return result != null && (result.StartsWith ("__EXCEPTION__:ABORT_SLIM_TEST:") || result.StartsWith ("__EXCEPTION__:ABORT_SLIM_SUITE:")); " is 137.
Long Statement,fitSharp.Slim.Operators,ComposeException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,Compose,The length of the statement  "		return FormatException<MemberMissingException> (instance' e => string.Format ("NO_METHOD_IN_CLASS {0} {1}"' e.MemberName' e.Type)); " is 131.
Long Statement,fitSharp.Slim.Operators,ComposeException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ComposeException.cs,Compose,The length of the statement  "		return FormatException<InstructionException> (instance' e => string.Format ("MALFORMED_INSTRUCTION {0}"' List (e.Instruction))); " is 128.
Long Statement,fitSharp.Slim.Operators,InvokeInstructionBase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\InvokeInstructionBase.cs,CanInvoke,The length of the statement  "	return instance.Type == typeof(SlimInstruction) && (identifier.IsEmpty || (parameters.Branches.Count > 1 && identifier.Matches (parameters.ValueAt (1)))); " is 154.
Long Statement,fitSharp.Slim.Operators,InvokeInstructionBase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\InvokeInstructionBase.cs,InvokeMember,The length of the statement  "	TypedValue result = Processor.Invoke (target' new MemberName (parameters.ValueAt (memberIndex + 1))' ParameterTree (parameters' memberIndex + 2)); " is 146.
Long Statement,fitSharp.Slim.Operators,ExecuteMake,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,ExecuteOperation,The length of the statement  "	var newInstance = singleSymbol.IsObject && singleSymbol.Type != typeof(string) ? singleSymbol : CreateInstance (parameters); " is 124.
Long Statement,fitSharp.Slim.Operators,ParseDictionary,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ParseDictionary.cs,Parse,The length of the statement  "	return new TypedValue (table.Branches [0].Branches.Aggregate ((IDictionary)Activator.CreateInstance (type)' (dictionary' row) => { " is 130.
Long Statement,fitSharp.Slim.Operators,ParseDictionary,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ParseDictionary.cs,Parse,The length of the statement  "		dictionary.Add (Processor.Parse (type.GetGenericArguments () [0]' row.ValueAt (0).Text).Value' Processor.Parse (type.GetGenericArguments () [1]' row.ValueAt (1).Text).Value); " is 174.
Long Statement,fitSharp.Slim.Operators,ParseSymbol,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ParseSymbol.cs,ReplaceSymbols,The length of the statement  "		result.Append (Processor.Get<Symbols> ().HasValue (symbolName) ? Processor.Get<Symbols> ().GetValue (symbolName) : "$" + symbolName); " is 133.
Long Statement,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The length of the statement  "	return input.StartsWith ("[") && input.Length > 8 && input.Substring (7' 1) == ":" && input.EndsWith ("]") && int.TryParse (input.Substring (1' 6)' out result); " is 160.
Long Statement,fitSharp.Slim.Service,Interpreter,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Interpreter.cs,ExecuteInstructions,The length of the statement  "		var result = processor.Invoke (new SlimInstruction ()' new MemberName (string.Empty)' statement).GetValue<Tree<string>> (); " is 123.
Long Statement,fitSharp.Slim.Service,Service,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Service.cs,LoadSymbol,The length of the statement  "	return singleSymbolPattern.IsMatch (input) ? new TypedValue (this.Get<Symbols> ().GetValue (input.Substring (1))) : TypedValue.Void; " is 132.
Empty Catch Block,fitSharp.Fit.Engine,InterpretFlow,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\InterpretFlow.cs,ProcessFlowRow,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Fixtures,FileSystem,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\FileSystem.cs,MakeEmptyFolder,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,CheckVolatile,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckVolatile.cs,Check,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Ensure,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Not,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Show,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,ShowAs,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,DoCheckOperation,The method has an empty catch block.
Empty Catch Block,fitSharp.Fit.Operators,CheckDefault,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckDefault.cs,Check,The method has an empty catch block.
Empty Catch Block,fitSharp.IO,FileSystemModel,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\IO\FileSystemModel.cs,GetPageContent,The method has an empty catch block.
Empty Catch Block,fitSharp.IO,FileSystemModel,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\IO\FileSystemModel.cs,GetPageContent,The method has an empty catch block.
Empty Catch Block,fitSharp.Machine.Engine,ApplicationUnderTest,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ApplicationUnderTest.cs,AddOptionalAssembly,The method has an empty catch block.
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (cellCount < 2)  	throw MakeException ("missing cells");  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals (identifier)) {  	cells.ValueAt (1).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);  	if (cellCount < 3)  		throw MakeException ("missing cells");  	cells.ValueAt (2).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);  	return processor.ParseTree (typeof(Type)' cells.Branches [2]).Value;  }  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals (identifier)) {  	cells.ValueAt (1).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);  	if (cellCount < 3)  		throw MakeException ("missing cells");  	cells.ValueAt (2).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);  	return processor.ParseTree (typeof(Type)' cells.Branches [2]).Value;  }  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (typeIdentifier.Equals (identifier)) {  	cells.ValueAt (1).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxKeyword);  	if (cellCount < 3)  		throw MakeException ("missing cells");  	cells.ValueAt (2).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);  	return processor.ParseTree (typeof(Type)' cells.Branches [2]).Value;  }  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: if (cellCount < 3)  	throw MakeException ("missing cells");  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: cells.ValueAt (2).SetAttribute (CellAttribute.Syntax' CellAttributeValue.SyntaxSUT);  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,Evaluate,The following statement contains a magic number: return processor.ParseTree (typeof(Type)' cells.Branches [2]).Value;  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,EvaluateNew,The following statement contains a magic number: if (cells.Branches.Count < 2)  	throw MakeException ("missing cells");  
Magic Number,fitSharp.Fit.Engine,MethodPhrase,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Engine\MethodPhrase.cs,EvaluateNew,The following statement contains a magic number: return processor.Create (cells.Branches [1]' cells.Skip (2)).Value;  
Magic Number,fitSharp.Fit.Fixtures,ConfigureFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\ConfigureFixture.cs,Interpret,The following statement contains a magic number: if (table.Branches [0].Branches.Count > 2) {  	var currentRow = table.Branches [0].Skip (2);  	Execute (processor' facility' currentRow);  }  
Magic Number,fitSharp.Fit.Fixtures,ConfigureFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\ConfigureFixture.cs,Interpret,The following statement contains a magic number: if (table.Branches [0].Branches.Count > 2) {  	var currentRow = table.Branches [0].Skip (2);  	Execute (processor' facility' currentRow);  }  
Magic Number,fitSharp.Fit.Fixtures,UseFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,Interpret,The following statement contains a magic number: if (firstRow.Branches.Count < 2)  	throw new TableStructureException ("Missing cells for use.");  
Magic Number,fitSharp.Fit.Fixtures,UseFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: if (firstRow.Branches.Count > 2) {  	var adapter = fixture as MutableDomainAdapter;  	if (adapter != null) {  		var parent = processor.CallStack.DomainAdapter.GetValueAs<DomainAdapter> ();  		adapter.SetSystemUnderTest (new MethodPhrase (firstRow.Skip (2)).Evaluate (parent' processor));  	}  }  
Magic Number,fitSharp.Fit.Fixtures,UseFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: if (firstRow.Branches.Count > 2) {  	var adapter = fixture as MutableDomainAdapter;  	if (adapter != null) {  		var parent = processor.CallStack.DomainAdapter.GetValueAs<DomainAdapter> ();  		adapter.SetSystemUnderTest (new MethodPhrase (firstRow.Skip (2)).Evaluate (parent' processor));  	}  }  
Magic Number,fitSharp.Fit.Fixtures,UseFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: if (adapter != null) {  	var parent = processor.CallStack.DomainAdapter.GetValueAs<DomainAdapter> ();  	adapter.SetSystemUnderTest (new MethodPhrase (firstRow.Skip (2)).Evaluate (parent' processor));  }  
Magic Number,fitSharp.Fit.Fixtures,UseFixture,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Fixtures\UseFixture.cs,MakeNewFixture,The following statement contains a magic number: adapter.SetSystemUnderTest (new MethodPhrase (firstRow.Skip (2)).Evaluate (parent' processor));  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new CheckVolatile ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new FindMemberQueryable ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new InvokeFlowKeyword ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new InvokeLiteral ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new ParseArray ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new ParseByteArray ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new ParseNullArray ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new ParseSymbol ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new CompareError ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new CompareException ()' 2);  
Magic Number,fitSharp.Fit.Operators,CellOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CellOperators.cs,CellOperators,The following statement contains a magic number: Add (new CompareFail ()' 2);  
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,Name,The following statement contains a magic number: if (row.Branches.Count < 3) {  	throw new TableStructureException ("missing cells for name.");  }  
Magic Number,fitSharp.Fit.Operators,InvokeFlowKeyword,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\InvokeFlowKeyword.cs,GetMethodCellRange,The following statement contains a magic number: if (row.Branches.Count < 2) {  	throw new FitFailureException ("Missing cells for embedded method");  }  
Magic Number,fitSharp.Fit.Operators,CheckSymbolSave,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CheckSymbolSave.cs,Check,The following statement contains a magic number: Processor.Get<Symbols> ().Save (expectedCell.Value.Content.Substring (2)' value);  
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: input = input.Substring (2);  
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {  	string currentByte = input.Substring (i' 2);  	result [i / 2] = Byte.Parse (currentByte' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {  	string currentByte = input.Substring (i' 2);  	result [i / 2] = Byte.Parse (currentByte' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: for (int i = 0; i < input.Length; i += 2) {  	string currentByte = input.Substring (i' 2);  	result [i / 2] = Byte.Parse (currentByte' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: i += 2
Magic Number,fitSharp.Fit.Operators,ParseByteArray,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseByteArray.cs,Parse,The following statement contains a magic number: result [i / 2] = Byte.Parse (currentByte' System.Globalization.NumberStyles.HexNumber);  
Magic Number,fitSharp.Fit.Operators,CompareException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareException.cs,Compare,The following statement contains a magic number: if (IsMessageOnly (exceptionContent)) {  	return actualException.Message == exceptionContent.Substring (1' exceptionContent.Length - 2);  }  
Magic Number,fitSharp.Fit.Operators,CompareException,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareException.cs,Compare,The following statement contains a magic number: return actualException.Message == exceptionContent.Substring (1' exceptionContent.Length - 2);  
Magic Number,fitSharp.Fit.Operators,ParseQuotedString,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseQuotedString.cs,Parse,The following statement contains a magic number: return new TypedValue (content.Substring (1' content.Length - 2));  
Magic Number,fitSharp.Fit.Operators,ParseMemberName,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,MakeMemberName,The following statement contains a magic number: if (ofPosition > 0 && ofPosition < name.Length - 4) {  	var genericType = name.Substring (ofPosition + 4);  	var baseName = name.Substring (0' ofPosition);  	return new MemberName (name' baseName' MakeGenericTypes (new[] {  		genericType  	}));  }  
Magic Number,fitSharp.Fit.Operators,ParseMemberName,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\ParseMemberName.cs,MakeMemberName,The following statement contains a magic number: if (ofPosition > 0 && ofPosition < name.Length - 4) {  	var genericType = name.Substring (ofPosition + 4);  	var baseName = name.Substring (0' ofPosition);  	return new MemberName (name' baseName' MakeGenericTypes (new[] {  		genericType  	}));  }  
Magic Number,fitSharp.Fit.Operators,CompareEndsWith,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareEndsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring (2' text.Length - 2);  
Magic Number,fitSharp.Fit.Operators,CompareEndsWith,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareEndsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring (2' text.Length - 2);  
Magic Number,fitSharp.Fit.Operators,CompareStartsWith,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareStartsWith.cs,GetExpected,The following statement contains a magic number: return text.Substring (0' text.Length - 2);  
Magic Number,fitSharp.Fit.Operators,CompareSubstring,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareSubstring.cs,GetExpected,The following statement contains a magic number: return cell.Substring (2' cell.Length - 4);  
Magic Number,fitSharp.Fit.Operators,CompareSubstring,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Operators\CompareSubstring.cs,GetExpected,The following statement contains a magic number: return cell.Substring (2' cell.Length - 4);  
Magic Number,fitSharp.Machine.Engine,MemberSpecification,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\MemberSpecification.cs,MatchesGetSetName,The following statement contains a magic number: return new IdentifierName (identifier.MatchName.Substring (3)).Matches (name);  
Magic Number,fitSharp.Machine.Engine,ParameterList,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,GetNamedParameterList,The following statement contains a magic number: for (int i = 0; i < parameterNames.Count; i++) {  	for (int j = 0; j < parameterNames.Count; j++) {  		var parameterNameId = new IdentifierName (parameterNames [j]);  		if (!parameterNameId.Matches (member.GetParameterName (i)))  			continue;  		result [i] = ParseParameterValue (member' instance' parameters.Branches [2 * j + 1]' i);  	}  }  
Magic Number,fitSharp.Machine.Engine,ParameterList,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,GetNamedParameterList,The following statement contains a magic number: for (int j = 0; j < parameterNames.Count; j++) {  	var parameterNameId = new IdentifierName (parameterNames [j]);  	if (!parameterNameId.Matches (member.GetParameterName (i)))  		continue;  	result [i] = ParseParameterValue (member' instance' parameters.Branches [2 * j + 1]' i);  }  
Magic Number,fitSharp.Machine.Engine,ParameterList,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Engine\ParameterList.cs,GetNamedParameterList,The following statement contains a magic number: result [i] = ParseParameterValue (member' instance' parameters.Branches [2 * j + 1]' i);  
Magic Number,fitSharp.Fit.Service,BindingFactory,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Service\BindingFactory.cs,Make,The following statement contains a magic number: if (member == null && name.StartsWith (newIdentifier' StringComparison.OrdinalIgnoreCase)) {  	return new CreateBinding (processor' adapter' name.Substring (4));  }  
Magic Number,fitSharp.Fit.Service,BindingFactory,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Service\BindingFactory.cs,Make,The following statement contains a magic number: return new CreateBinding (processor' adapter' name.Substring (4));  
Magic Number,fitSharp.Fit.Service,XmlResultWriter,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Service\XmlResultWriter.cs,EncodeForXml,The following statement contains a magic number: foreach (char c in input) {  	if (c < 32 && !char.IsWhiteSpace (c)) {  		output.AppendFormat ("&#{0};"' (int)c);  	} else {  		output.Append (c);  	}  }  
Magic Number,fitSharp.Fit.Service,XmlResultWriter,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Fit\Service\XmlResultWriter.cs,EncodeForXml,The following statement contains a magic number: if (c < 32 && !char.IsWhiteSpace (c)) {  	output.AppendFormat ("&#{0};"' (int)c);  } else {  	output.Append (c);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\\")) {  	Type = CharacterType.Letter;  	current = current.Skip (1).Truncate (1);  } else if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\\")) {  	Type = CharacterType.Letter;  	current = current.Skip (1).Truncate (1);  } else if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\\")) {  	Type = CharacterType.Letter;  	current = current.Skip (1).Truncate (1);  } else if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\\")) {  	Type = CharacterType.Letter;  	current = current.Skip (1).Truncate (1);  } else if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("[\n")) {  	Type = CharacterType.BeginCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: current = current.Truncate (2);  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\n]")) {  	Type = CharacterType.EndCell;  	current = current.Truncate (2);  } else if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: current = current.Truncate (2);  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\n")) {  	Type = CharacterType.Newline;  	current = current.Truncate (1);  } else if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("\"") || current.StartsWith ("'")) {  	Type = CharacterType.Quote;  	current = current.Truncate (1);  } else if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("|")) {  	Type = CharacterType.Separator;  	current = current.Truncate (1);  } else if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith (TextStoryTestBegin' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.BeginTest;  	current = current.Truncate (5);  } else if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: current = current.Truncate (5);  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: if (current.StartsWith ("@test"' StringComparison.OrdinalIgnoreCase)) {  	Type = CharacterType.EndTest;  	current = current.Truncate (5);  } else if (char.IsWhiteSpace (current [0])) {  	Type = CharacterType.WhiteSpace;  	current = current.Truncate (1);  } else if (current.StartsWith ("<br"' StringComparison.OrdinalIgnoreCase) && current.Contains (">")) {  	Type = CharacterType.Newline;  	current = current.TruncateAfter (">");  } else {  	Type = CharacterType.Letter;  	current = current.Truncate (1);  }  
Magic Number,fitSharp.Parser,Characters,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\Characters.cs,MoveNext,The following statement contains a magic number: current = current.Truncate (5);  
Magic Number,fitSharp.Parser,TextTables,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: while (scanner.Current.Type == TokenType.BeginCell || scanner.Current.Type == TokenType.Word) {  	var cell = makeTreeCell (scanner.Current.Content);  	cell.Value.SetAttribute (CellAttribute.StartTag' startTags [2]);  	cell.Value.SetAttribute (CellAttribute.EndTag' endTags [2]);  	if (scanner.Current.Type == TokenType.BeginCell) {  		MakeTables (cell);  	} else if (scanner.Current.Type == TokenType.Word) {  		cell.Value.SetAttribute (CellAttribute.Body' HttpUtility.HtmlEncode (scanner.Current.Content));  	}  	row.Add (cell);  	scanner.MoveNext ();  }  
Magic Number,fitSharp.Parser,TextTables,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: while (scanner.Current.Type == TokenType.BeginCell || scanner.Current.Type == TokenType.Word) {  	var cell = makeTreeCell (scanner.Current.Content);  	cell.Value.SetAttribute (CellAttribute.StartTag' startTags [2]);  	cell.Value.SetAttribute (CellAttribute.EndTag' endTags [2]);  	if (scanner.Current.Type == TokenType.BeginCell) {  		MakeTables (cell);  	} else if (scanner.Current.Type == TokenType.Word) {  		cell.Value.SetAttribute (CellAttribute.Body' HttpUtility.HtmlEncode (scanner.Current.Content));  	}  	row.Add (cell);  	scanner.MoveNext ();  }  
Magic Number,fitSharp.Parser,TextTables,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: cell.Value.SetAttribute (CellAttribute.StartTag' startTags [2]);  
Magic Number,fitSharp.Parser,TextTables,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Parser\TextTables.cs,MakeCells,The following statement contains a magic number: cell.Value.SetAttribute (CellAttribute.EndTag' endTags [2]);  
Magic Number,fitSharp.Slim.Operators,ExecuteAssign,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols> ().Save (parameters.ValueAt (2)' parameters.ValueAt (3));  
Magic Number,fitSharp.Slim.Operators,ExecuteAssign,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols> ().Save (parameters.ValueAt (2)' parameters.ValueAt (3));  
Magic Number,fitSharp.Slim.Operators,ExecuteCallAndAssign,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteCallAndAssign.cs,ExecuteOperation,The following statement contains a magic number: Processor.Get<Symbols> ().Save (parameters.ValueAt (2)' result.Value);  
Magic Number,fitSharp.Slim.Operators,ExecuteImport,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteImport.cs,ExecuteOperation,The following statement contains a magic number: Processor.AddNamespace (parameters.ValueAt (2));  
Magic Number,fitSharp.Slim.Operators,ExecuteMake,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Operators\ExecuteMake.cs,CreateInstance,The following statement contains a magic number: return Processor.Create (typeName' ParameterTree (parameters' 4));  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: while (start < input.Length - 1) {  	var endList = FindEndOfNestedList (input' start);  	if (input [start] == '[' && endList > start) {  		result.AddBranch (MakeTree (input.Substring (start' endList - start + 1)));  		start = endList + 3;  	} else {  		var end = input.IndexOf ("' "' start);  		if (end < start)  			end = input.Length - 1;  		if (end >= start)  			result.AddBranch (MakeBranch (input.Substring (start' end - start)));  		start = end + 2;  	}  }  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: while (start < input.Length - 1) {  	var endList = FindEndOfNestedList (input' start);  	if (input [start] == '[' && endList > start) {  		result.AddBranch (MakeTree (input.Substring (start' endList - start + 1)));  		start = endList + 3;  	} else {  		var end = input.IndexOf ("' "' start);  		if (end < start)  			end = input.Length - 1;  		if (end >= start)  			result.AddBranch (MakeBranch (input.Substring (start' end - start)));  		start = end + 2;  	}  }  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: if (input [start] == '[' && endList > start) {  	result.AddBranch (MakeTree (input.Substring (start' endList - start + 1)));  	start = endList + 3;  } else {  	var end = input.IndexOf ("' "' start);  	if (end < start)  		end = input.Length - 1;  	if (end >= start)  		result.AddBranch (MakeBranch (input.Substring (start' end - start)));  	start = end + 2;  }  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: if (input [start] == '[' && endList > start) {  	result.AddBranch (MakeTree (input.Substring (start' endList - start + 1)));  	start = endList + 3;  } else {  	var end = input.IndexOf ("' "' start);  	if (end < start)  		end = input.Length - 1;  	if (end >= start)  		result.AddBranch (MakeBranch (input.Substring (start' end - start)));  	start = end + 2;  }  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: start = endList + 3;  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,MakeTree,The following statement contains a magic number: start = end + 2;  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,FindEndOfNestedList,The following statement contains a magic number: if (endList < 0 && input [input.Length - 2] == ']')  	endList = input.Length - 2;  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,FindEndOfNestedList,The following statement contains a magic number: if (endList < 0 && input [input.Length - 2] == ']')  	endList = input.Length - 2;  
Magic Number,fitSharp.Slim.Model,SlimTree,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Model\SlimTree.cs,FindEndOfNestedList,The following statement contains a magic number: endList = input.Length - 2;  
Magic Number,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,Read,The following statement contains a magic number: if (IsList (input))  	return ReadList (new DelimitedString (input.Substring (1' input.Length - 2)));  
Magic Number,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,Read,The following statement contains a magic number: return ReadList (new DelimitedString (input.Substring (1' input.Length - 2)));  
Magic Number,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith ("[") && input.Length > 8 && input.Substring (7' 1) == ":" && input.EndsWith ("]") && int.TryParse (input.Substring (1' 6)' out result);  
Magic Number,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith ("[") && input.Length > 8 && input.Substring (7' 1) == ":" && input.EndsWith ("]") && int.TryParse (input.Substring (1' 6)' out result);  
Magic Number,fitSharp.Slim.Service,Document,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\Document.cs,IsList,The following statement contains a magic number: return input.StartsWith ("[") && input.Length > 8 && input.Substring (7' 1) == ":" && input.EndsWith ("]") && int.TryParse (input.Substring (1' 6)' out result);  
Magic Number,fitSharp.Slim.Service,SlimOperators,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Slim\Service\SlimOperators.cs,SlimOperators,The following statement contains a magic number: Add (new ParseSymbol ()' 2);  
Missing Default,fitSharp.Machine.Application,SuiteConfiguration,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,AliasMethod,The following switch statement is missing a default case: switch (originalType.ToLowerInvariant ()) {  case "fit.assemblies":  	if (originalMethod == "add")  		return "addAssembly";  	break;  case "fit.namespaces":  	if (originalMethod == "add")  		return "addNamespace";  	if (originalMethod == "remove")  		return "removeNamespace";  	break;  case "fit.cellhandlers":  case "fitlibrary.cellhandlers":  	if (originalMethod == "add")  		return "addCellHandler";  	if (originalMethod == "remove")  		return "removeCellHandler";  	break;  }  
Missing Default,fitSharp.Machine.Application,SuiteConfiguration,F:\newReposMay17\jediwhale_fitsharp\source\fitSharp\Machine\Application\SuiteConfiguration.cs,AliasMethod,The following switch statement is missing a default case: switch (originalMethod) {  case "addOperator":  	return "add";  case "removeOperator":  	return "remove";  case "AppConfigFile":  	return "ConfigurationFile";  }  
