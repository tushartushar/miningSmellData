Implementation smell,Namespace,Class,File,Method,Description
Complex Method,fitlibrary.table,ParseTable,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Model\ParseTable.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,fitnesse.fitserver,FitServer,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Runner\FitServer.cs,ParseCommandLineArguments,Cyclomatic complexity of the method is 8
Long Parameter List,fit,Parse,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Model\Parse.cs,Parse,The method has 6 parameters. Parameters: text' theTag' theEnd' theLeader' theBody' theParts
Long Statement,fit,RowFixture,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Fixtures\RowFixture.cs,DoTable,The length of the statement  "            if (theTable.Parts.More == null) TestStatus.MarkException(theTable.Parts.Parts' new ApplicationException("Header row missing.")); " is 129.
Long Statement,fit,Parse,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Model\Parse.cs,DeepCopy,The length of the statement  "            return new Parse(Text' tag' End' Leader' body' (parts(this) == null ? null : parts(this).DeepCopy(substitute' more' parts))) { " is 126.
Long Statement,fitlibrary,XmlMatchStrategy,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Fixtures\XmlFixture.cs,ActualValues,The length of the statement  "                for (int i = 0; i < actuals.Length; i++) result[i] = new TypedValue(actuals[i]' actuals[i] == null ? typeof(void) : typeof(string)); " is 132.
Long Statement,fit.Operators,ListOperator,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Operators\ListOperator.cs,Check,The length of the statement  "            matcher.MarkCell(actualValue.GetActual<IEnumerable>(Processor).Cast<object>()' cell.Parts' 0); //todo: encapsulate part in celloperationcontext?? " is 145.
Magic Number,fit.Operators,FixtureTable,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Operators\FixtureTable.cs,SplitBody,The following statement contains a magic number: var result = new string[2];
Magic Number,fit.Operators,Expected,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Operators\FixtureTable.cs,Expected,The following statement contains a magic number: Node.SetBody(Node.Body.Substring(7));
Magic Number,fit.Runner,FitSocket,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Runner\FitSocket.cs,ReceiveInteger,The following statement contains a magic number: return Convert.ToInt32(channel.Read(10));
Magic Number,fit.Runner,Protocol,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Runner\Protocol.cs,FormatInteger,The following statement contains a magic number: return new String('0'' 10 - numberPartOfString.Length) + numberPartOfString;
Magic Number,fit.Service,Operators,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Service\Operators.cs,Operators,The following statement contains a magic number: Add(new InvokeFitKeyword()' 2);
Missing Default,fit,CellHandlerLoaderFixture,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Fixtures\CellHandlerLoaderFixture.cs,DoRow,The following switch statement is missing a default case: switch (GetTypeOfOperation(row))  			{  				case "load":  		            Load(row);  			        break;  				case "remove":  		            Remove(row);  			        break;                  case "reset":  			        Reset(row);  			        break;  			}
Missing Default,fitnesse.fitserver,FitServer,D:\research\architectureSmells\repos\jediwhale_fitsharp\source\fit\Runner\FitServer.cs,ParseCommandLineArguments,The following switch statement is missing a default case: switch (argumentPosition)  			        {  			            case ASSEMBLYLIST:                              memory.GetItem<ApplicationUnderTest>().AddAssemblies(new PathParser(t).AssemblyPaths);  			                break;  			            case HOST:  			                host = t;  			                break;  			            case PORT:  			                port = Int32.Parse(t);  			                break;  			            case SOCKET_TOKEN:  			                socketToken = t;  			                break;  			        }
