Implementation smell,Namespace,Class,File,Method,Description
Complex Method,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,Cyclomatic complexity of the method is 11
Complex Method,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,Cyclomatic complexity of the method is 11
Long Statement,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The length of the statement  "		allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType); " is 132.
Long Statement,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The length of the statement  "		throw new ApplicationException ("Cannot read columns/parameters for object " + objname + " - check spelling or access privileges "); " is 132.
Long Statement,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,GetConnectionString,The length of the statement  "	return String.Format ("data source={0};user id={1};password={2};database={3};"' dataSource' username' password' databaseName); " is 126.
Long Statement,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,GetAllProcedureParameters,The length of the statement  "	string retString = "select p.[name]' TYPE_NAME(p.system_type_id) as [Type]' p.max_length' p.is_output' p.is_cursor_ref' p.precision' p.scale from "; " is 148.
Long Statement,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The length of the statement  "		allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType); " is 132.
Long Statement,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The length of the statement  "		throw new ApplicationException ("Cannot read columns/parameters for object " + objname + " - check spelling or access privileges "); " is 132.
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : System.Convert.ToInt32 (reader [2]);  	String direction = (reader.IsDBNull (3)) ? "IN" : reader.GetString (3);  	byte precision = 0;  	byte scale = 0;  	if (!reader.IsDBNull (4))  		scale = System.Convert.ToByte (reader [4]);  	if (!reader.IsDBNull (5))  		precision = System.Convert.ToByte (reader [5]);  	SqlParameter dp = new SqlParameter ();  	dp.Direction = GetParameterDirection (direction);  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if (length > 0) {  		dp.Size = System.Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = 4000;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (!reader.IsDBNull (4))  	scale = System.Convert.ToByte (reader [4]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (!reader.IsDBNull (4))  	scale = System.Convert.ToByte (reader [4]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: scale = System.Convert.ToByte (reader [4]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (!reader.IsDBNull (5))  	precision = System.Convert.ToByte (reader [5]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (!reader.IsDBNull (5))  	precision = System.Convert.ToByte (reader [5]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: precision = System.Convert.ToByte (reader [5]);  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (length > 0) {  	dp.Size = System.Convert.ToInt32 (length);  } else {  	if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  		dp.Size = 4000;  }  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  	dp.Size = 4000;  
Magic Number,dbfit,SqlServer2000Environment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServer2000Environment.cs,ReadIntoParams,The following statement contains a magic number: dp.Size = 4000;  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,GetDbName,The following statement contains a magic number: if (objNameArr.Length == 3) {  	//the table is in another database  	return objNameArr [0] + ".";  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: while (reader.Read ()) {  	String paramName = (reader.IsDBNull (0)) ? null : reader.GetString (0);  	String dataType = reader.GetString (1);  	int length = (reader.IsDBNull (2)) ? 0 : Convert.ToInt32 (reader [2]);  	int isOutput = (reader.IsDBNull (3)) ? 0 : Convert.ToInt32 (reader [3]);  	byte precision = Convert.ToByte (reader [5]);  	byte scale = Convert.ToByte (reader [6]);  	var dp = new SqlParameter {  		Direction = GetParameterDirection (isOutput)  	};  	if (!String.IsNullOrEmpty (paramName)) {  		dp.ParameterName = paramName;  		dp.SourceColumn = paramName;  	} else {  		dp.Direction = ParameterDirection.ReturnValue;  	}  	dp.SqlDbType = GetDBType (dataType);  	String typeName = NormaliseTypeName (dataType);  	if (precision > 0)  		dp.Precision = precision;  	if (scale > 0)  		dp.Scale = scale;  	if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  		dp.Size = MAX_STRING_SIZE;  	else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  		dp.Size = System.Convert.ToInt32 (length) / 2;  	} else if (length > 0) {  		dp.Size = Convert.ToInt32 (length);  	} else {  		if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  			dp.Size = MAX_STRING_SIZE;  	}  	allParams [NameNormaliser.NormaliseName (paramName)] = new DbParameterAccessor (dp' GetDotNetType (dataType)' position++' dataType);  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: if ("NTEXT".Equals (typeName) || ("TEXT".Equals (typeName)))  	dp.Size = MAX_STRING_SIZE;  else if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  	dp.Size = System.Convert.ToInt32 (length) / 2;  } else if (length > 0) {  	dp.Size = Convert.ToInt32 (length);  } else {  	if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  		dp.Size = MAX_STRING_SIZE;  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: if ("NVARCHAR".Equals (typeName) || ("NCHAR".Equals (typeName))) {  	dp.Size = System.Convert.ToInt32 (length) / 2;  } else if (length > 0) {  	dp.Size = Convert.ToInt32 (length);  } else {  	if (!ParameterDirection.Input.Equals (dp.Direction) || typeof(String).Equals (GetDotNetType (dataType)))  		dp.Size = MAX_STRING_SIZE;  }  
Magic Number,dbfit,SqlServerEnvironment,F:\newReposMay17\jediwhale_fitsharp\source\dbfitSqlServer\SqlServerEnvironment.cs,ReadIntoParams,The following statement contains a magic number: dp.Size = System.Convert.ToInt32 (length) / 2;  
