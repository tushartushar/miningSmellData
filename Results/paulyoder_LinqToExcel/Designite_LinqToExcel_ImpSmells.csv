Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,LinqToExcel.Query,ProjectorBuildingExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ProjectorBuildingExpressionTreeVisitor.cs,,The length of the parameter s_getObjectGenericMethodDefinition is 34.
Long Statement,LinqToExcel.Query,ExcelQueryArgs,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelQueryArgs.cs,ToString,The length of the statement  "            return string.Format("FileName: '{0}'; WorksheetName: '{1}'; WorksheetIndex: {2}; StartRange: {3}; EndRange: {4}; Named Range: {11}; NoHeader: {5}; ColumnMappings: {6}; Transformations: {7}' StrictMapping: {8}' UsePersistentConnection: {9}' TrimSpaces: {10}"' " is 259.
Long Statement,LinqToExcel.Query,ExcelQueryArgs,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelQueryArgs.cs,ToString,The length of the statement  "                FileName' WorksheetName' WorksheetIndex' StartRange' EndRange' NoHeader' columnMappingsString' transformationsString' StrictMapping' UsePersistentConnection' TrimSpaces' NamedRangeName); " is 186.
Long Statement,LinqToExcel.Query,ExcelQueryExecutor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelQueryExecutor.cs,GetDataResults,The length of the statement  "                                          _args.WorksheetName' string.Join("'' '"' ExcelUtilities.GetWorksheetNames(_args.FileName).ToArray())' e.Message' _args.FileName)' e); " is 133.
Long Statement,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,IsTable,The length of the statement  "            return row["TABLE_NAME"].ToString().EndsWith("$") || (row["TABLE_NAME"].ToString().StartsWith("'") && row["TABLE_NAME"].ToString().EndsWith("$'")); " is 147.
Long Statement,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,IsNamedRange,The length of the statement  "            return (row["TABLE_NAME"].ToString().Contains("$") && !row["TABLE_NAME"].ToString().EndsWith("$") && !row["TABLE_NAME"].ToString().EndsWith("$'")) || !row["TABLE_NAME"].ToString().Contains("$"); " is 194.
Long Statement,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,GetColumnNames,The length of the statement  "                    command.CommandText = string.Format("SELECT TOP 1 * FROM [{0}{1}]"' string.Format("{0}{1}"' args.WorksheetName' "$")' args.NamedRangeName); " is 139.
Long Statement,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,GetNamedRanges,The length of the statement  "                    && (!string.IsNullOrEmpty(args.WorksheetName) ? row["TABLE_NAME"].ToString().StartsWith(args.WorksheetName) : !IsWorkseetScopedNamedRange(row)) " is 143.
Long Statement,LinqToExcel.Query,ProjectorBuildingExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ProjectorBuildingExpressionTreeVisitor.cs,BuildProjector,The length of the statement  "            // This is the parameter of the delegat we're building. It's the ResultObjectMapping' which holds all the input data needed for the projection. " is 143.
Long Statement,LinqToExcel.Query,ProjectorBuildingExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ProjectorBuildingExpressionTreeVisitor.cs,BuildProjector,The length of the statement  "            // The visitor gives us the projector's body. It simply replaces all QuerySourceReferenceExpressions with calls to ResultObjectMapping.GetObject<T>(). " is 150.
Long Statement,LinqToExcel.Query,ProjectorBuildingExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ProjectorBuildingExpressionTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "            // Substitute generic parameter "T" of ResultObjectMapping.GetObject<T>() with type of query source item' then return a call to that method " is 139.
Long Statement,LinqToExcel.Query,WhereClauseExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\WhereClauseExpressionTreeVisitor.cs,ConvertVbStringCompare,The length of the statement  "                if (compareStringCall.Method.DeclaringType.FullName == "Microsoft.VisualBasic.CompilerServices.Operators" && compareStringCall.Method.Name == "CompareString") " is 158.
Long Statement,LinqToExcel.Query,SqlGeneratorQueryModelVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\SqlGeneratorQueryModelVisitor.cs,VisitResultOperator,The length of the statement  "                throw new NotSupportedException("LinqToExcel does not provide support for the Single() method. Use the First() method instead"); " is 128.
Long Statement,LinqToExcel.Query,SqlGeneratorQueryModelVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\SqlGeneratorQueryModelVisitor.cs,ProcessDistinctAggregate,The length of the statement  "                throw new NotSupportedException("LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 237.
Magic Number,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,ColumnIndexToExcelColumnName,The following statement contains a magic number: var quotient = (--index) / 26;
Magic Number,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,ColumnIndexToExcelColumnName,The following statement contains a magic number: if (quotient > 0)              {                  return ColumnIndexToExcelColumnName(quotient) + (char)((index % 26) + 65);              }              else                {                  return ((char)((index % 26) + 65)).ToString();              }
Magic Number,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,ColumnIndexToExcelColumnName,The following statement contains a magic number: if (quotient > 0)              {                  return ColumnIndexToExcelColumnName(quotient) + (char)((index % 26) + 65);              }              else                {                  return ((char)((index % 26) + 65)).ToString();              }
Magic Number,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,ColumnIndexToExcelColumnName,The following statement contains a magic number: if (quotient > 0)              {                  return ColumnIndexToExcelColumnName(quotient) + (char)((index % 26) + 65);              }              else                {                  return ((char)((index % 26) + 65)).ToString();              }
Magic Number,LinqToExcel.Query,ExcelUtilities,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\ExcelUtilities.cs,ColumnIndexToExcelColumnName,The following statement contains a magic number: if (quotient > 0)              {                  return ColumnIndexToExcelColumnName(quotient) + (char)((index % 26) + 65);              }              else                {                  return ((char)((index % 26) + 65)).ToString();              }
Missing Default,LinqToExcel.Query,WhereClauseExpressionTreeVisitor,C:\repos\paulyoder_LinqToExcel\src\LinqToExcel\Query\WhereClauseExpressionTreeVisitor.cs,ProcessStringMethod,The following switch statement is missing a default case: switch (mExp.Method.Name)              {                  case "Contains":                      AddStringMethodToWhereClause(mExp' "LIKE"' "%{0}%");                      break;                  case "StartsWith":                      AddStringMethodToWhereClause(mExp' "LIKE"' "{0}%");                      break;                  case "EndsWith":                      AddStringMethodToWhereClause(mExp' "LIKE"' "%{0}");                      break;                  case "Equals":                      AddStringMethodToWhereClause(mExp' "="' "{0}");                      break;                  case "IsNullOrEmpty":                      AddStringIsNullOrEmptyToWhereClause(mExp);                      break;              }
