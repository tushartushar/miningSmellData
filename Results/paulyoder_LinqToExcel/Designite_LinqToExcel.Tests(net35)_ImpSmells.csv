Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,,The length of the parameter _excelFileWithBuiltinWorksheets is 31.
Long Statement,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,log_warning_when_property_with_column_mapping_not_in_where_clause_when_mapped_column_doesnt_exist,The length of the statement  "                    (logEvent.RenderedMessage == "'The Big Cheese' column that is mapped to the 'CEO' property does not exist in the 'ColumnMappings' worksheet")) " is 142.
Long Statement,LinqToExcel.Tests,ConfiguredWorksheetName_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConfiguredWorksheetName_IntegrationTests.cs,data_is_read_from_correct_worksheet,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<Company>("More Companies"' _excelFileName' new LogManagerFactory()) " is 121.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1"""' " is 122.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1"""' " is 122.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_readonly_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1"""' " is 122.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1"""' " is 122.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_readonly_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_connection_string,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet(null' @"C:\Desktop\spreadsheet.csv"' null' new LogManagerFactory()) " is 121.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""text;Excel 12.0;HDR=YES;IMEX=1"""' " is 127.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""text;Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 141.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""text;Excel 12.0;HDR=YES;IMEX=1"""' " is 127.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_with_Ace_DatabaseEngine_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""text;Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 141.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1"""' " is 126.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 140.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsm_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1"""' " is 126.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1"""' " is 122.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=NO;IMEX=1"""' " is 121.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_readonly_connection_string,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-1;Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;READONLY=TRUE"""' " is 135.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_readonly_connection_string_suppress_transactionscope,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-4;Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 140.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_readonly_connection_string_suppress_transactionscope,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-4;Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 136.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_with_Ace_DatabaseEngine_connection_string_suppress_transactionscope,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-4;Extended Properties=""text;Excel 12.0;HDR=YES;IMEX=1;READONLY=TRUE"""' " is 141.
Long Statement,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_readonly_connection_string_suppress_transactionscope,The length of the statement  "                @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};OLE DB Services=-4;Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;READONLY=TRUE"""' " is 135.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_null,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<Company>("NullCells"' _excelFileName + "x"' null' new LogManagerFactory()) " is 128.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_not_null,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<Company>("NullCells"' _excelFileName + "x"' null' new LogManagerFactory()) " is 128.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,no_exception_on_property_not_used_in_where_clause_when_column_doesnt_exist,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<CompanyWithCity>(null' _excelFileName' null' new LogManagerFactory()) " is 123.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,average,The length of the statement  "            var averageEmployees = (from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory()) " is 123.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,distinct,The length of the statement  "            var distinctCompanies = (from c in ExcelQueryFactory.Worksheet<Company>("Null Dates"' _excelFileName' null' new LogManagerFactory()) " is 132.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,take,The length of the statement  "            var threeEmployees = (from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory()) " is 121.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,skip,The length of the statement  "            var threeEmployees = (from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory()) " is 121.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,convert_nullable_properties,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<CompanyNullable>(null' _excelFileName' null' new LogManagerFactory()) " is 123.
Long Statement,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,dbnull_fields_return_null_and_dont_throw_exception,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<CompanyNullable>("Null Dates"' _excelFileName' null' new LogManagerFactory()) " is 131.
Long Statement,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_and_orderby,The length of the statement  "            var expectedSql = string.Format("SELECT * FROM [Sheet1$] WHERE ({0} > ?) ORDER BY {1} ASC"' GetSQLFieldName("EmployeeCount")' GetSQLFieldName("StartDate")); " is 156.
Long Statement,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_not_string_IsNullOrEmpty,The length of the statement  "            var expectedSql = string.Format("SELECT * FROM [Sheet1$] WHERE (({0} <> '') OR ({0} IS NOT NULL))"' GetSQLFieldName("CEO")); " is 124.
Long Statement,LinqToExcel.Tests,Excel2007_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Excel2007_IntegrationTests.cs,xlsm,The length of the statement  "            var companies = from c in ExcelQueryFactory.Worksheet<Company>("MoreCompanies"' fileName' null' new LogManagerFactory()) " is 120.
Long Statement,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,GetWorksheetNames_returns_worksheet_names,The length of the statement  "                "ColumnMappings' IMEX Table' Invalid Cast' More Companies' Null Dates' Range1' Sheet1' Transformation1' Transformation2' TrimSpaces"' " is 133.
Long Statement,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,negative_integer_should_throw_exception,The length of the statement  "            Assert.That(() => LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(-1)' Throws.ArgumentException' "Index should be a positive integer"); " is 149.
Long Statement,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,zero_should_throw_exception,The length of the statement  "            Assert.That(() => LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(-1)' Throws.ArgumentException' "Index should be a positive integer"); " is 149.
Long Statement,LinqToExcel.Tests,InvalidCastTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\InvalidCastTests.cs,invalid_number_cast_with_header,The length of the statement  "            Assert.That(() => (from x in ExcelQueryFactory.Worksheet<Company>("Invalid Cast"' _excelFileName' new LogManagerFactory()) " is 122.
Long Statement,LinqToExcel.Tests,InvalidCastTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\InvalidCastTests.cs,invalid_number_cast_with_header,The length of the statement  "                         select x).ToList()' Throws.TypeOf<LinqToExcel.Exceptions.ExcelException>()' "Error on row 8 and column name 'EmployeeCount'."); " is 127.
Long Statement,LinqToExcel.Tests,InvalidColumnNamesUsed,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\InvalidColumnNamesUsed.cs,bad_column_in_where_clause,The length of the statement  "            Assert.That(() => (from x in ExcelQueryFactory.Worksheet<CompanyWithCity>("Sheet1"' _excelFileName' new LogManagerFactory()) " is 124.
Long Statement,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,GetNamedRanges,The length of the statement  "            Assert.AreEqual("Companies' CompaniesRange' MoreCompanies"' string.Join("' "' namedRanges.ToArray())' "Workbook-scope"); " is 120.
Long Statement,LinqToExcel.Tests,NamedRange_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_SQLStatements_UnitTests.cs,use_sheetData_where_is_null,The length of the statement  "            var expectedSql = string.Format("SELECT * FROM [worksheetName$NamedRange] WHERE ({0} IS NULL)"' GetSQLFieldName("Name")); " is 121.
Long Statement,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,invalid_column_name_index_throws_argument_exception,The length of the statement  "            Throws.TypeOf<ArgumentException>()' "'First Name' column name does not exist. Valid column names are 'Name'' 'Favorite Sport'' 'Age'"); " is 135.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,single,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel does not provide support for the Single() method. Use the First() method instead"); " is 136.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,distinct_on_whole_row,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 245.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,distinct_on_no_header,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 245.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,distinct_on_no_header_with_selected_column,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 245.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,distinct_on_row,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 245.
Long Statement,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,distinct_on_row_with_selected_column,The length of the statement  "                Throws.TypeOf<NotSupportedException>()' "LinqToExcel only provides support for the Distinct() method when it's mapped to a class and a single property is selected. [e.g. (from row in excel.Worksheet<Person>() select row.FirstName).Distinct()]"); " is 245.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,where_clause_contains_property_with_column_mapping,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,where_clause_contains_property_without_column_mapping,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,mapped_property_is_not_native_type,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,mapped_property_is_native_type,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,multiple_mapped_properties,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,mapped_property_is_passed_in_as_a_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,distinct,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConfiguredWorksheetName_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConfiguredWorksheetName_SQLStatements_UnitTests.cs,table_name_in_sql_statement_matches_configured_table_name,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xls_readonly_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,unknown_file_type_readonly_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_with_Ace_DatabaseEngine_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsm_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_readonly_connection_string,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsx_readonly_connection_string_suppress_transactionscope,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,xlsb_readonly_connection_string_suppress_transactionscope,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,csv_readonly_with_Ace_DatabaseEngine_connection_string_suppress_transactionscope,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,ConnectionString_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConnectionString_UnitTests.cs,no_header_readonly_connection_string_suppress_transactionscope,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,select_all,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_equals,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_equals_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_not_equal,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_greater_than,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_greater_than_or_equal,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_lesser_than,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_lesser_than_or_equal,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_not_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_and,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_or,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,method_used_in_where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_contains,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_startswith,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_endswith,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,first,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,count,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,long_count,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,sum,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,average,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,max,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,min,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,orderby,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,orderby_desc,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,last,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,take,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,skip,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,worksheetName_is_set_to_Sheet1_when_null_worksheetName_argument,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_and_orderby,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,distinct,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_string_IsNullOrEmpty,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_not_string_IsNullOrEmpty,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,CSV_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_SQLStatements_UnitTests.cs,Connection_string_data_source_is_directory_of_csv_file,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,CSV_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_SQLStatements_UnitTests.cs,Connection_string_extended_properties_have_csv_settings,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,CSV_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_SQLStatements_UnitTests.cs,Table_name_is_csv_file_name,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NamedRange_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_SQLStatements_UnitTests.cs,Appends_named_range_info_to_table_name,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NamedRange_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_SQLStatements_UnitTests.cs,use_sheetData_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NamedRange_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_SQLStatements_UnitTests.cs,use_row_where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NamedRange_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_SQLStatements_UnitTests.cs,use_sheetData_where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NoHeader_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_SQLStatements_UnitTests.cs,where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,NoHeader_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_SQLStatements_UnitTests.cs,where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,Appends_range_info_to_table_name,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,Throws_argument_exception_if_startRange_is_incorrect_format,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,Throws_argument_exception_if_endRange_is_incorrect_format,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_sheetData_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_sheetData_worksheetName_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_row_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_row_worksheetName_method,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_row_where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Range_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_SQLStatements_UnitTests.cs,use_sheetData_where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,no_where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_used_in_where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_used_in_orderby_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_is_cast_in_where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,where_is_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,where_is_not_null,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,argument_exception_thrown_when_column_indexes_used_in_worksheet_where_clause,The method has an empty catch block.
Empty Catch Block,LinqToExcel.Tests,UnSupportedMethods,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\UnSupportedMethods.cs,group,The method has an empty catch block.
Magic Number,LinqToExcel.Tests,CellTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CellTest.cs,As_converts_cell_value_type_to_generic_argument_type,The following statement contains a magic number: Assert.AreEqual(2' newCell.Cast<int>());
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,all_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(400' rival.EmployeeCount' "EmployeeCount");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,all_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,all_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,all_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,some_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(300' rival.EmployeeCount' "EmployeeCount");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,some_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,some_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,some_properties_have_column_mappings,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,column_mappings_with_transformation,The following statement contains a magic number: Assert.AreEqual(company.StartDate > new DateTime(1980' 1' 1)' company.IsActive);
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,annotated_properties_map_to_columns,The following statement contains a magic number: Assert.AreEqual(400' rival.EmployeeCount' "EmployeeCount");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,annotated_properties_map_to_columns,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,annotated_properties_map_to_columns,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_IntegrationTests.cs,annotated_properties_map_to_columns,The following statement contains a magic number: Assert.AreEqual(new DateTime(1988' 7' 26)' rival.StartDate' "StartDate");
Magic Number,LinqToExcel.Tests,ColumnMappings_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ColumnMappings_SQLStatements_UnitTests.cs,mapped_property_is_not_native_type,The following statement contains a magic number: var companies = from c in _repo.Worksheet<Company>()                              where c.StartDate == new DateTime(2008' 1' 1)                              select c;
Magic Number,LinqToExcel.Tests,ConfiguredWorksheetName_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConfiguredWorksheetName_IntegrationTests.cs,data_is_read_from_correct_worksheet,The following statement contains a magic number: Assert.AreEqual(3' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,ConfiguredWorksheetName_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConfiguredWorksheetName_IntegrationTests.cs,worksheetIndex_of_2_uses_third_table_name_orderedby_name,The following statement contains a magic number: var companies = (from c in ExcelQueryFactory.Worksheet<Company>(3' _excelFileName' new LogManagerFactory())                               select c).ToList();
Magic Number,LinqToExcel.Tests,ConfiguredWorksheetName_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ConfiguredWorksheetName_IntegrationTests.cs,worksheetIndex_too_high_throws_exception,The following statement contains a magic number: Assert.That(() => from c in ExcelQueryFactory.Worksheet<Company>(100' _excelFileName' new LogManagerFactory())                                select c'              Throws.TypeOf<DataException>());
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,select_all,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_string_not_equal,The following statement contains a magic number: Assert.AreEqual(6' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_equals,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount == 25                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_not_equal,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount != 98                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_not_equal,The following statement contains a magic number: Assert.AreEqual(6' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_greater_than,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount > 98                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_greater_than,The following statement contains a magic number: Assert.AreEqual(3' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_greater_than_or_equal,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount >= 98                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_greater_than_or_equal,The following statement contains a magic number: Assert.AreEqual(4' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_less_than,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount < 300                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_less_than,The following statement contains a magic number: Assert.AreEqual(4' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_less_than_or_equal,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.EmployeeCount <= 300                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_int_less_than_or_equal,The following statement contains a magic number: Assert.AreEqual(5' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_datetime_equals,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(2008' 10' 9)                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_datetime_equals,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(2008' 10' 9)                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_datetime_equals,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(2008' 10' 9)                              select c;
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,where_not_string_IsNullOrEmpty,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,selection_row_to_anonymous_projection,The following statement contains a magic number: Assert.AreEqual(25' company.Employees);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,count,The following statement contains a magic number: Assert.AreEqual(7' companyCount);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,long_count,The following statement contains a magic number: Assert.AreEqual(7' companyCount);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,sum,The following statement contains a magic number: Assert.AreEqual(30723' companySum);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,average,The following statement contains a magic number: Assert.AreEqual(4389' averageEmployees);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,max,The following statement contains a magic number: Assert.AreEqual(29839' maxEmployees);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,distinct,The following statement contains a magic number: Assert.AreEqual(2' distinctCompanies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,oderby_desc,The following statement contains a magic number: Assert.AreEqual(29839' minEmployees.First().EmployeeCount);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,last,The following statement contains a magic number: Assert.AreEqual(455' minEmployees.Last().EmployeeCount);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,take,The following statement contains a magic number: var threeEmployees = (from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                                    select c).Take(3);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,take,The following statement contains a magic number: Assert.AreEqual(3' threeEmployees.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,skip,The following statement contains a magic number: var threeEmployees = (from c in ExcelQueryFactory.Worksheet<Company>(null' _excelFileName' null' new LogManagerFactory())                                    select c).Skip(3);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,skip,The following statement contains a magic number: Assert.AreEqual(4' threeEmployees.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,convert_nullable_properties,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Convention_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_IntegrationTests.cs,dbnull_fields_return_null_and_dont_throw_exception,The following statement contains a magic number: Assert.IsNull(companies.ToList()[3].StartDate);
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_greater_than,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount > 25                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_greater_than_or_equal,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount >= 25                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_lesser_than,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount < 25                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_lesser_than_or_equal,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount <= 25                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_and,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount > 5 && p.CEO == "Paul"                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_or,The following statement contains a magic number: var companies = from p in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where p.EmployeeCount > 5 || p.CEO == "Paul"                              select p;
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,take,The following statement contains a magic number: var companies = (from c in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                               select c).Take(3);
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,skip,The following statement contains a magic number: var companies = (from c in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                               select c).Skip(3);
Magic Number,LinqToExcel.Tests,Convention_SQLStatements_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Convention_SQLStatements_UnitTests.cs,where_and_orderby,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' ""' null' new LogManagerFactory())                              where c.EmployeeCount > 500                              orderby c.StartDate ascending                              select c;
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,select_all,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,where_contains_int_criteria,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _fileName' null' new LogManagerFactory())                              where c.EmployeeCount > 20                              select c;
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,where_contains_int_criteria,The following statement contains a magic number: Assert.AreEqual(5' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,where_contains_datetime_criteria,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _fileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(1980' 8' 23)                              select c;
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,where_contains_datetime_criteria,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _fileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(1980' 8' 23)                              select c;
Magic Number,LinqToExcel.Tests,CSV_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\CSV_IntegrationTests.cs,where_contains_datetime_criteria,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet<Company>(null' _fileName' null' new LogManagerFactory())                              where c.StartDate == new DateTime(1980' 8' 23)                              select c;
Magic Number,LinqToExcel.Tests,Excel2007_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Excel2007_IntegrationTests.cs,xlsx,The following statement contains a magic number: Assert.AreEqual(3' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Excel2007_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Excel2007_IntegrationTests.cs,xlsm,The following statement contains a magic number: Assert.AreEqual(3' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Excel2007_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Excel2007_IntegrationTests.cs,xlsb,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,Excel2007_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Excel2007_IntegrationTests.cs,xls_with_Ace_DatabaseEngine,The following statement contains a magic number: Assert.AreEqual(7' companies.ToList().Count);
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IContainsUnmappedCells_FillsInUnmappedCells,The following statement contains a magic number: Assert.AreEqual(3' companies.First().UnmappedCells.Count);
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IContainsUnmappedCells_FillsInUnmappedCells,The following statement contains a magic number: Assert.AreEqual(25' companies.First().UnmappedCells["EmployeeCount"].Cast<int>());
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IContainsUnmappedCells_FillsInUnmappedCells,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11)' companies.First().UnmappedCells["StartDate"].Cast<DateTime>());
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IContainsUnmappedCells_FillsInUnmappedCells,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11)' companies.First().UnmappedCells["StartDate"].Cast<DateTime>());
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IContainsUnmappedCells_FillsInUnmappedCells,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11)' companies.First().UnmappedCells["StartDate"].Cast<DateTime>());
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IAllowFieldTypeConversionExceptions_NoExceptionsWhenFieldsAreGood,The following statement contains a magic number: Assert.AreEqual(25' company.EmployeeCount);
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,IAllowFieldTypeConversionExceptions_GathersExceptions,The following statement contains a magic number: Assert.AreEqual(2' company.FieldTypeConversionExceptions.Count);
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,TrimSpaces_Both_TrimsWhiteSpacesOnBothSides,The following statement contains a magic number: Assert.AreEqual("White Space On Both Sides"' companies[2].Name);
Magic Number,LinqToExcel.Tests,ExcelQueryFactoryTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\ExcelQueryFactoryTests.cs,TrimSpaces_None_DoesntTrimWhitespace,The following statement contains a magic number: Assert.AreEqual(" White Space On Both Sides "' companies[2].Name);
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(2)' "B");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(3)' "C");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(25)' "Y");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(26)' "Z");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(27)' "AA");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(28)' "AB");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(51)' "AY");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(52)' "AZ");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(53)' "BA");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(54)' "BB");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(701)' "ZY");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(702)' "ZZ");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(703)' "AAA");
Magic Number,LinqToExcel.Tests,IndexToColumnNamesTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\IndexToColumnNamesTests.cs,valid_excel_column_indexes,The following statement contains a magic number: Assert.AreEqual(LinqToExcel.Query.ExcelUtilities.ColumnIndexToExcelColumnName(704)' "AAB");
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_sheetData_and_worksheetIndex,The following statement contains a magic number: var companies = from c in _factory.NamedRange<Company>(5' "CompaniesRange")                              select c;
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_sheetData_and_worksheetIndex,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_row_and_worksheetIndex,The following statement contains a magic number: var companies = from c in _factory.NamedRange(5' "CompaniesRange")                              select c;
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_row_and_worksheetIndex,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_sheetData_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_row_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_row_no_header_where_null,The following statement contains a magic number: var companies = from c in factory.NamedRangeNoHeader("NullCellCompanies")                              where c[2] == null                              select c;
Magic Number,LinqToExcel.Tests,NamedRange_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NamedRange_IntegrationTests.cs,use_row_no_header_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,NoHeader_no_args,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,NoHeader_no_args,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,NoHeader_no_args,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,csv_file,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,csv_file,The following statement contains a magic number: Assert.AreEqual(4554' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,csv_file,The following statement contains a magic number: Assert.AreEqual(4554' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,where_clause,The following statement contains a magic number: var oldCompanies = from c in _factory.WorksheetNoHeader()                                 where c[3].Cast<DateTime>() < new DateTime(1955' 1' 1)                                 select c;
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,where_clause,The following statement contains a magic number: var oldCompanies = from c in _factory.WorksheetNoHeader()                                 where c[3].Cast<DateTime>() < new DateTime(1955' 1' 1)                                 select c;
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,where_clause,The following statement contains a magic number: Assert.AreEqual(3' oldCompanies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,where_is_null,The following statement contains a magic number: var oldCompanies = from c in factory.WorksheetNoHeader("NullCells")                                 where c[2] == null                                 select c;
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,where_is_null,The following statement contains a magic number: Assert.AreEqual(2' oldCompanies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,no_header_range_where_clause,The following statement contains a magic number: Assert.AreEqual(2' ACompanies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,no_header_range_where_clause,The following statement contains a magic number: Assert.AreEqual(new DateTime(1917' 9' 1).ToShortDateString()'                   ACompanies.Last()[3].Cast<DateTime>().ToShortDateString()'                   "Last ACompany Date");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,no_header_range_where_clause,The following statement contains a magic number: Assert.AreEqual(new DateTime(1917' 9' 1).ToShortDateString()'                   ACompanies.Last()[3].Cast<DateTime>().ToShortDateString()'                   "Last ACompany Date");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,no_header_range_where_clause,The following statement contains a magic number: Assert.AreEqual(new DateTime(1917' 9' 1).ToShortDateString()'                   ACompanies.Last()[3].Cast<DateTime>().ToShortDateString()'                   "Last ACompany Date");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_no_arg,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_no_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_no_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetName_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Company Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,NoHeader_IntregrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\NoHeader_IntregrationTests.cs,WorksheetRangeNoHeader_WorksheetIndex_arg,The following statement contains a magic number: Assert.AreEqual(455' companies.Last()[2].Cast<int>()' "Last Company Employee Count");
Magic Number,LinqToExcel.Tests,PersistentConnection_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\PersistentConnection_IntegrationTests.cs,WorksheetRangeNoHeader_returns_7_companies,The following statement contains a magic number: Assert.AreEqual(7' companies.Count());
Magic Number,LinqToExcel.Tests,PersistentConnection_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\PersistentConnection_IntegrationTests.cs,WorksheetRangeNoHeader_can_query_sheet_500_times_on_same_connection,The following statement contains a magic number: i < 500
Magic Number,LinqToExcel.Tests,PersistentConnection_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\PersistentConnection_IntegrationTests.cs,WorksheetRangeNoHeader_can_query_sheet_500_times_on_same_connection,The following statement contains a magic number: Assert.AreEqual((500*7)' totalRows);
Magic Number,LinqToExcel.Tests,PersistentConnection_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\PersistentConnection_IntegrationTests.cs,WorksheetRangeNoHeader_can_query_sheet_500_times_on_same_connection,The following statement contains a magic number: Assert.AreEqual((500*7)' totalRows);
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_sheetData_and_worksheetIndex,The following statement contains a magic number: var companies = from c in _factory.WorksheetRange<Company>("C6"' "F13"' 5)                              select c;
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_sheetData_and_worksheetIndex,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_row_and_worksheetIndex,The following statement contains a magic number: var companies = from c in _factory.WorksheetRange("c6"' "f13"' 5)                              select c;
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_row_and_worksheetIndex,The following statement contains a magic number: Assert.AreEqual(7' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_sheetData_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_row_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_row_no_header_where_null,The following statement contains a magic number: var companies = from c in factory.WorksheetRangeNoHeader("A1"' "D4"' "NullCells")                              where c[2] == null                              select c;
Magic Number,LinqToExcel.Tests,Range_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Range_IntegrationTests.cs,use_row_no_header_where_null,The following statement contains a magic number: Assert.AreEqual(2' companies.Count()' "Count");
Magic Number,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,s,The following statement contains a magic number: _columnMappings["Age"] = 2;
Magic Number,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,s,The following statement contains a magic number: _cells.Add(new Cell(25));
Magic Number,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,index_maps_cells_correctly,The following statement contains a magic number: Assert.AreEqual(_cells[2]' row[2]);
Magic Number,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,index_maps_cells_correctly,The following statement contains a magic number: Assert.AreEqual(_cells[2]' row[2]);
Magic Number,LinqToExcel.Tests,RowTest,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\RowTest.cs,column_name_index_maps_cells_correctly,The following statement contains a magic number: Assert.AreEqual(_cells[2]' row["Age"]);
Magic Number,LinqToExcel.Tests,Row_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_IntegrationTests.cs,column_values,The following statement contains a magic number: Assert.AreEqual(25' firstCompany["EmployeeCount"].Cast<int>());
Magic Number,LinqToExcel.Tests,Row_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_IntegrationTests.cs,column_values,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11).Date' firstCompany["StartDate"].Cast<DateTime>().Date);
Magic Number,LinqToExcel.Tests,Row_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_IntegrationTests.cs,column_values,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11).Date' firstCompany["StartDate"].Cast<DateTime>().Date);
Magic Number,LinqToExcel.Tests,Row_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_IntegrationTests.cs,column_values,The following statement contains a magic number: Assert.AreEqual(new DateTime(1918' 11' 11).Date' firstCompany["StartDate"].Cast<DateTime>().Date);
Magic Number,LinqToExcel.Tests,Row_IntegrationTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_IntegrationTests.cs,columnNames_returns_list_of_column_names,The following statement contains a magic number: Assert.AreEqual(4' firstCompany.ColumnNames.Count());
Magic Number,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_is_cast_in_where_clause,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet(""' ""' null' new LogManagerFactory())                              where c["Modified"].Cast<DateTime>() < new DateTime(2009' 11' 2)                              select c;
Magic Number,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_is_cast_in_where_clause,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet(""' ""' null' new LogManagerFactory())                              where c["Modified"].Cast<DateTime>() < new DateTime(2009' 11' 2)                              select c;
Magic Number,LinqToExcel.Tests,Row_SQLStatement_UnitTests,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\Row_SQLStatement_UnitTests.cs,column_name_is_cast_in_where_clause,The following statement contains a magic number: var companies = from c in ExcelQueryFactory.Worksheet(""' ""' null' new LogManagerFactory())                              where c["Modified"].Cast<DateTime>() < new DateTime(2009' 11' 2)                              select c;
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetConnectionString,The following statement contains a magic number: return logEvent.RenderedMessage.Substring(19);
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetConnectionString,The following statement contains a magic number: message.Length > 5 && message.Substring(0' 18) == "Connection String:"
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetConnectionString,The following statement contains a magic number: message.Length > 5 && message.Substring(0' 18) == "Connection String:"
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetDataSource,The following statement contains a magic number: return conProp.Substring(12);
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetDataSource,The following statement contains a magic number: conProp.Substring(0' 11) == "Data Source"
Magic Number,LinqToExcel.Tests,SQLLogStatements_Helper,C:\research\architectureSmells\repos\paulyoder_LinqToExcel\src\LinqToExcel.Tests\SQLLogStatements_Helper.cs,GetExtendedProperties,The following statement contains a magic number: return conString.Substring(location + 20);
