Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SimSharp,Process,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Events\Process.cs,Resume,Cyclomatic complexity of the method is 13
Long Parameter List,SimSharp,PreemptiveRequest,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Resources\Events\PreemptiveRequest.cs,PreemptiveRequest,The method has 5 parameters.
Long Statement,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,HasHigherPriority,The length of the statement  "	return (higher.Priority < lower.Priority || (higher.Priority == lower.Priority && higher.InsertionIndex < lower.InsertionIndex)); " is 129.
Long Statement,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,IsValidQueue,The length of the statement  "			if (childLeftIndex < _nodes.Length && _nodes [childLeftIndex] != null && HasHigherPriority (_nodes [childLeftIndex]' _nodes [i])) " is 129.
Long Statement,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,IsValidQueue,The length of the statement  "			if (childRightIndex < _nodes.Length && _nodes [childRightIndex] != null && HasHigherPriority (_nodes [childRightIndex]' _nodes [i])) " is 132.
Long Statement,SimSharp,PreemptiveResource,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Resources\PreemptiveResource.cs,DoRequest,The length of the statement  "		}).OrderByDescending (x => x.Request.Priority).ThenByDescending (x => x.Request.Time).ThenByDescending (x => x.Request.Preempt).ThenByDescending (x => x.Index).First ().Request; " is 177.
Long Statement,SimSharp,PreemptiveResource,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Resources\PreemptiveResource.cs,DoRequest,The length of the statement  "		if (oldest.Priority > request.Priority || (oldest.Priority == request.Priority && (!oldest.Preempt && request.Preempt || (oldest.Preempt == request.Preempt && oldest.Time > request.Time)))) { " is 191.
Long Statement,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The length of the statement  "		return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound)); " is 144.
Long Statement,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The length of the statement  "	return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range); " is 131.
Complex Conditional,SimSharp,PreemptiveResource,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Resources\PreemptiveResource.cs,DoRequest,The conditional expression  "oldest.Priority > request.Priority || (oldest.Priority == request.Priority && (!oldest.Preempt && request.Preempt || (oldest.Preempt == request.Preempt && oldest.Time > request.Time)))"  is complex.
Virtual Method Call from Constructor,SimSharp,Condition,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Events\Condition.cs,Condition,The constructor "Condition" calls a virtual method "AddCallback".
Virtual Method Call from Constructor,SimSharp,Condition,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Events\Condition.cs,Condition,The constructor "Condition" calls a virtual method "Evaluate".
Magic Number,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,CascadeUp,The following statement contains a magic number: while (parent >= 1) {  	EventQueueNode parentNode = _nodes [parent];  	if (HasHigherPriority (parentNode' node))  		break;  	//Node has lower priority value' so move it up the heap  	Swap (node' parentNode);  	//For some reason' this is faster with Swap() rather than (less..?) individual operations' like in CascadeDown()  	parent = node.QueueIndex / 2;  }  
Magic Number,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,CascadeUp,The following statement contains a magic number: parent = node.QueueIndex / 2;  
Magic Number,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,CascadeDown,The following statement contains a magic number: while (true) {  	newParent = node;  	int childLeftIndex = 2 * finalQueueIndex;  	//Check if the left-child is higher-priority than the current node  	if (childLeftIndex > _numNodes) {  		//This could be placed outside the loop' but then we'd have to check newParent != node twice  		node.QueueIndex = finalQueueIndex;  		_nodes [finalQueueIndex] = node;  		break;  	}  	EventQueueNode childLeft = _nodes [childLeftIndex];  	if (HasHigherPriority (childLeft' newParent)) {  		newParent = childLeft;  	}  	//Check if the right-child is higher-priority than either the current node or the left child  	int childRightIndex = childLeftIndex + 1;  	if (childRightIndex <= _numNodes) {  		EventQueueNode childRight = _nodes [childRightIndex];  		if (HasHigherPriority (childRight' newParent)) {  			newParent = childRight;  		}  	}  	//If either of the children has higher (smaller) priority' swap and continue cascading  	if (newParent != node) {  		//Move new parent to its new index.  node will be moved once' at the end  		//Doing it this way is one less assignment operation than calling Swap()  		_nodes [finalQueueIndex] = newParent;  		int temp = newParent.QueueIndex;  		newParent.QueueIndex = finalQueueIndex;  		finalQueueIndex = temp;  	} else {  		//See note above  		node.QueueIndex = finalQueueIndex;  		_nodes [finalQueueIndex] = node;  		break;  	}  }  
Magic Number,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,IsValidQueue,The following statement contains a magic number: for (int i = 1; i < _nodes.Length; i++) {  	if (_nodes [i] != null) {  		int childLeftIndex = 2 * i;  		if (childLeftIndex < _nodes.Length && _nodes [childLeftIndex] != null && HasHigherPriority (_nodes [childLeftIndex]' _nodes [i]))  			return false;  		int childRightIndex = childLeftIndex + 1;  		if (childRightIndex < _nodes.Length && _nodes [childRightIndex] != null && HasHigherPriority (_nodes [childRightIndex]' _nodes [i]))  			return false;  	}  }  
Magic Number,SimSharp,EventQueue,F:\newReposMay17\abeham_SimSharp\SimSharp\Collections\EventQueue.cs,IsValidQueue,The following statement contains a magic number: if (_nodes [i] != null) {  	int childLeftIndex = 2 * i;  	if (childLeftIndex < _nodes.Length && _nodes [childLeftIndex] != null && HasHigherPriority (_nodes [childLeftIndex]' _nodes [i]))  		return false;  	int childRightIndex = childLeftIndex + 1;  	if (childRightIndex < _nodes.Length && _nodes [childRightIndex] != null && HasHigherPriority (_nodes [childRightIndex]' _nodes [i]))  		return false;  }  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,DoSchedule,The following statement contains a magic number: if (ScheduleQ.MaxSize == ScheduleQ.Count) {  	// the capacity has to be adjusted' there are more events in the queue than anticipated  	var oldSchedule = ScheduleQ;  	ScheduleQ = new EventQueue (ScheduleQ.MaxSize * 2);  	foreach (var e in oldSchedule)  		ScheduleQ.Enqueue (e.Priority' e.Event);  }  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,DoSchedule,The following statement contains a magic number: ScheduleQ = new EventQueue (ScheduleQ.MaxSize * 2);  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandTriangular,The following statement contains a magic number: if (u > 0.5)  	return high + (low - high) * Math.Sqrt (((1.0 - u) / 2));  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandTriangular,The following statement contains a magic number: if (u > 0.5)  	return high + (low - high) * Math.Sqrt (((1.0 - u) / 2));  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandTriangular,The following statement contains a magic number: return high + (low - high) * Math.Sqrt (((1.0 - u) / 2));  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandTriangular,The following statement contains a magic number: return low + (high - low) * Math.Sqrt (u / 2);  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandNormal,The following statement contains a magic number: do {  	u1 = Random.NextDouble ();  	u2 = 1 - Random.NextDouble ();  	z = NormalMagicConst * (u1 - 0.5) / u2;  	zz = z * z / 4.0;  } while (zz > -Math.Log (u2));  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandNormal,The following statement contains a magic number: do {  	u1 = Random.NextDouble ();  	u2 = 1 - Random.NextDouble ();  	z = NormalMagicConst * (u1 - 0.5) / u2;  	zz = z * z / 4.0;  } while (zz > -Math.Log (u2));  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandNormal,The following statement contains a magic number: z = NormalMagicConst * (u1 - 0.5) / u2;  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandNormal,The following statement contains a magic number: zz = z * z / 4.0;  
Magic Number,SimSharp,Environment,F:\newReposMay17\abeham_SimSharp\SimSharp\Core\Environment.cs,RandCauchy,The following statement contains a magic number: return x0 + gamma * Math.Tan (Math.PI * (Random.NextDouble () - 0.5));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Reinitialise,The following statement contains a magic number: _x = (uint)((seed * 1431655781) + (seed * 1183186591) + (seed * 622729787) + (seed * 338294347));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0) {  	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).  	// We also must use all 32 bits of precision' instead of the normal 31' which again is slower.    	return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextDouble,The following statement contains a magic number: return REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextDouble,The following statement contains a magic number: return REAL_UNIT_INT * (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound;) {  	// Generate 4 bytes.   	// Increased performance is achieved by generating 4 random bytes per loop.  	// Also note that no mask needs to be applied to zero out the higher order bytes before  	// casting because the cast ignores thos bytes. Thanks to Stefan Trosch�tz for pointing this out.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	buffer [i++] = (byte)(w >> 8);  	buffer [i++] = (byte)(w >> 16);  	buffer [i++] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 24);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	// Generate 4 bytes.  	t = x ^ (x << 11);  	x = y;  	y = z;  	z = w;  	w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  	buffer [i++] = (byte)w;  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 8);  		if (i < buffer.Length) {  			buffer [i++] = (byte)(w >> 16);  			if (i < buffer.Length) {  				buffer [i] = (byte)(w >> 24);  			}  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: t = x ^ (x << 11);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 8);  	if (i < buffer.Length) {  		buffer [i++] = (byte)(w >> 16);  		if (i < buffer.Length) {  			buffer [i] = (byte)(w >> 24);  		}  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 8);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i++] = (byte)(w >> 16);  	if (i < buffer.Length) {  		buffer [i] = (byte)(w >> 24);  	}  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i++] = (byte)(w >> 16);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length) {  	buffer [i] = (byte)(w >> 24);  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBytes,The following statement contains a magic number: buffer [i] = (byte)(w >> 24);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextUInt,The following statement contains a magic number: return _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8))));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextDoubleNonZero,The following statement contains a magic number: return REAL_UNIT_INT * (int)((0x7FFFFFFE & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) + 1U);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextDoubleNonZero,The following statement contains a magic number: return REAL_UNIT_INT * (int)((0x7FFFFFFE & (_w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8)))) + 1U);  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBool,The following statement contains a magic number: if (0 == _bitMask) {  	// Generate 32 more bits.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	// Reset the bitMask that tells us which bit to read next.  	_bitMask = 0x80000000;  	return (_bitBuffer & _bitMask) == 0;  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextBool,The following statement contains a magic number: _bitBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextByte,The following statement contains a magic number: if (0 == _byteBufferState) {  	// Generate 4 more bytes.  	uint t = _x ^ (_x << 11);  	_x = _y;  	_y = _z;  	_z = _w;  	_byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  	_byteBufferState = 0x4;  	return (byte)_byteBuffer;  	// Note. Masking with 0xFF is unnecessary.  }  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextByte,The following statement contains a magic number: _byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
Magic Number,SimSharp,FastRandom,F:\newReposMay17\abeham_SimSharp\SimSharp\Random\FastRandom.cs,NextByte,The following statement contains a magic number: _byteBuffer = _w = (_w ^ (_w >> 19)) ^ (t ^ (t >> 8));  
