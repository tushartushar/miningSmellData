Implementation smell,Namespace,Class,File,Method,Description
Long Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Insert,The method has 118 lines of code.
Complex Method,Adalbertus.BudgetPlanner.Converters,CompareConverter,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Converters\CompareConverter.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,Adalbertus.BudgetPlanner.Converters,EmptyToCollapsed,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Converters\EmptyToCollapsed.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateIfNeeded,Cyclomatic complexity of the method is 8
Complex Method,Adalbertus.BudgetPlanner.Extensions,ListViewExtensions,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Extensions\ListViewExtensions.cs,ColumnHeader_Click,Cyclomatic complexity of the method is 9
Complex Method,Adalbertus.BudgetPlanner.Extensions,MarginSetterExtension,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Extensions\MarginSetterExtension.cs,ChangeMarginSide,Cyclomatic complexity of the method is 13
Complex Method,Adalbertus.BudgetPlanner.Extensions,ModelExtensions,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Extensions\ModelExtensions.cs,ToName,Cyclomatic complexity of the method is 15
Complex Method,Adalbertus.BudgetPlanner.Models,BudgetCalculatorEquation,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\BudgetCalculatorEquation.cs,CreateStringEquation,Cyclomatic complexity of the method is 13
Complex Method,Adalbertus.BudgetPlanner.Models,BudgetTemplateItem,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\BudgetTemplateItem.cs,ApplyToBudget,Cyclomatic complexity of the method is 8
Complex Method,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,Cyclomatic complexity of the method is 9
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,Calculate,Cyclomatic complexity of the method is 15
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,Cyclomatic complexity of the method is 43
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,UpdateForeignDescriptions,Cyclomatic complexity of the method is 11
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,BudgetEquationWizardElementViewModel_PropertyChanged,Cyclomatic complexity of the method is 12
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,GetForeignId,Cyclomatic complexity of the method is 19
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,ValidateMovement,Cyclomatic complexity of the method is 9
Complex Method,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,SetCurrentItemForeignId,Cyclomatic complexity of the method is 23
Complex Method,Adalbertus.BudgetPlanner.ViewModels,CalculatorViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CalculatorViewModel.cs,CalculateValue,Cyclomatic complexity of the method is 16
Complex Method,Adalbertus.BudgetPlanner.ViewModels,CalculatorViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CalculatorViewModel.cs,AddToCalculator,Cyclomatic complexity of the method is 15
Complex Method,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,GetFilteredExpenses,Cyclomatic complexity of the method is 12
Complex Method,Adalbertus.BudgetPlanner.ViewModels,SavingsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\SavingsViewModel.cs,OnSavingPropertyChanged,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,CommonConstruct,Cyclomatic complexity of the method is 9
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 43
Complex Method,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Update,Cyclomatic complexity of the method is 13
Long Parameter List,Adalbertus.BudgetPlanner.Models,BudgetCalculatorEquation,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\BudgetCalculatorEquation.cs,AddItem,The method has 6 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Models,Expense,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\Expense.cs,CreateExpense,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanSummaryTable,The method has 7 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The method has 6 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The method has 7 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The method has 6 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The method has 6 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The method has 8 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BaseViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BaseViewModel.cs,BaseViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,BudgetCalculationsViewModel,The method has 7 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The method has 7 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,RefreshUI,The method has 6 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardVM,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardVM.cs,AddItem,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanCopyDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanCopyDialogViewModel.cs,BudgetPlanCopyDialogViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanCopyDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanCopyDialogViewModel.cs,LoadBudgetPlans,The method has 10 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanCopyDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanCopyDialogViewModel.cs,Copy,The method has 8 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanGroupItemVM,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanGroupItemVM.cs,BudgetPlanGroupItemVM,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanItemVM,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanItemVM.cs,BudgetPlanItemVM,The method has 7 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanViewModel.cs,BudgetPlanViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanViewModel.cs,OnRefreshRequest,The method has 8 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetTemplateDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetTemplateDialogViewModel.cs,BudgetTemplateDialogViewModel,The method has 9 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BudgetViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetViewModel.cs,BudgetViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,CashFlowDeleteConfirmationViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowDeleteConfirmationViewModel.cs,CashFlowDeleteConfirmationViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,CashFlowGroupDeleteConfirmationViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowGroupDeleteConfirmationViewModel.cs,CashFlowGroupDeleteConfirmationViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,CashFlowTypesViewModel,The method has 11 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,DownloadAndUpgradeViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\DownloadAndUpgradeViewModel.cs,DownloadAndUpgradeViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,ExpensesFilteringViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesFilteringViewModel.cs,ExpensesFilteringViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,ExpensesViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,ExportDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExportDialogViewModel.cs,ExportDialogViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,IncomesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\IncomesViewModel.cs,IncomesViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,MessageBoxViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\MessageBoxViewModel.cs,MessageBoxViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,NotepadViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\NotepadViewModel.cs,NotepadViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,RevenuesViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,LoadData,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,BaseDailogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BaseDailogViewModel.cs,BaseDailogViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,SavingsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\SavingsViewModel.cs,SavingsViewModel,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowMessage,The method has 5 parameters.
Long Parameter List,Adalbertus.BudgetPlanner.ViewModels,IShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\IShellViewModel.cs,ShowMessage,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,FindSplitPoint,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Update,The method has 5 parameters.
Long Statement,Adalbertus.BudgetPlanner,AppBootstrapper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\AppBootstrapper.cs,Configure,The length of the statement  "	var catalog = new AggregateCatalog (AssemblySource.Instance.Select (x => new AssemblyCatalog (x)).OfType<ComposablePartCatalog> ()); " is 132.
Long Statement,Adalbertus.BudgetPlanner,CastleBootstrapper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\CastleBootstrapper.cs,BuildUp,The length of the statement  "	container.GetType ().GetProperties ().Where (property => property.CanWrite && property.PropertyType.IsPublic).Where (property => container.Kernel.HasComponent (property.PropertyType)).ForEach (property => property.SetValue (instance' container.Resolve (property.PropertyType)' null)); " is 284.
Long Statement,Adalbertus.BudgetPlanner,App,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\App.xaml.cs,OnStartup,The length of the statement  "	EventManager.RegisterClassHandler (typeof(DatePicker)' DatePicker.PreviewKeyDownEvent' new KeyEventHandler (DatePicker_PreviewKeyDown)); " is 136.
Long Statement,Adalbertus.BudgetPlanner.Controls,ImageButton,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Controls\ImageButton.cs,OnImageUrlChanged,The length of the statement  "		var uriString = string.Format ("pack://application:'''/{0};component/{1}"' Assembly.GetEntryAssembly ().GetName ().Name' imageButton.ImageUrl); " is 143.
Long Statement,Adalbertus.BudgetPlanner.Core,Updater,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Core\Updater.cs,GetNumericVersion,The length of the statement  "	var numericVersion = Decimal.Parse (string.Format ("{0}{1}.{2}"' versionArray [0]' versionArray [1]' versionArray [2])' System.Globalization.NumberStyles.Float' CultureInfo.InvariantCulture); " is 191.
Long Statement,Adalbertus.BudgetPlanner.Core,ConfigurationManager,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Core\ConfigurationManager.cs,SaveValue,The length of the statement  "			Database.Execute ("INSERT INTO Configuration (Key' IsActive' Value' Decription) VALUES (@0' @1' @2' @3)"' key' this [key].IsActive' this [key].Value' this [key].Decription); " is 173.
Long Statement,Adalbertus.BudgetPlanner.Database,Commands,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\Commands.cs,AreBudgetTemplatesApplied,The length of the statement  "	return database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("[BudgetTemplateHistory]").Where ("BudgetId = @0"' budget.Id)) > 0; " is 150.
Long Statement,Adalbertus.BudgetPlanner.Database,CachedService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\CachedService.cs,GetAllCashFlows,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("CashFlow").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").LeftJoin ("Saving").On ("Saving.CashFlowId = CashFlow.Id").OrderBy ("CashFlowGroup.Position ASC"); " is 239.
Long Statement,Adalbertus.BudgetPlanner.Database,CachedService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\CachedService.cs,GetAllSavings,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("Saving").InnerJoin ("CashFlow").On ("CashFlow.Id = Saving.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id"); " is 201.
Long Statement,Adalbertus.BudgetPlanner.Database,CachedService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\CachedService.cs,GetAllSavings,The length of the statement  "		var savingValues = Database.Query<SavingValue' Budget' Expense> (PetaPoco.Sql.Builder.Select ("*").From ("SavingValue").LeftJoin ("Budget").On ("Budget.Id = SavingValue.BudgetId").LeftJoin ("Expense").On ("Expense.Id = SavingValue.ExpenseId").Where ("SavingId=@0"' saving.Id)).ToList (); " is 287.
Long Statement,Adalbertus.BudgetPlanner.Database,CachedService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\CachedService.cs,GetAllEquations,The length of the statement  "		var equationItems = Database.Query<BudgetCalculatorItem> ("WHERE BudgetCalculatorEquationId = @0 ORDER BY Id"' eq.Id).ToList (); " is 128.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseBackupHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseBackupHelper.cs,CreateBackup,The length of the statement  "		throw new ApplicationException (string.Format ("Nie można zrobić kopii bazy danych - baza danych nie istnieje w lokalizacji: {0}"' SQLiteHelper.DatabaseFile)); " is 159.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseBackupHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseBackupHelper.cs,CreateBackup,The length of the statement  "	var backupToFile = Path.Combine (backupDirectory' string.Format ("{0}_{1}"' DateTime.Now.ToString ("yyyy-MM-dd_HHmmss")' SQLiteHelper.DatabaseFile)); " is 149.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateIfNeeded,The length of the statement  "			throw new InvalidOperationException (string.Format ("Procedura aktualizacji bazy danych nie może być wykonana. Błędna wersja bazy danych: {0}"' currentDatabaseVersion)); " is 169.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateIfNeeded,The length of the statement  "		throw new ApplicationException (string.Format ("W trakcie aktualizacji bazy danych z wersji {0} do wersji {1} wystąpił błąd:\r\n{2}"' currentDatabaseVersion' currentDatabaseVersion + 1' ex.Message)); " is 199.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateToVersion2,The length of the statement  "		database.AlterTable ("Saving"' "[StartingBalance]"' "ALTER TABLE [Saving] ADD COLUMN [StartingBalance] NUMERIC NOT NULL DEFAULT 0"); " is 132.
Long Statement,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,AlterTable,The length of the statement  "	var ddlTable = database.ExecuteScalar<string> (PetaPoco.Sql.Builder.Select ("sql").From ("sqlite_master").Where ("name=@0"' tableName)); " is 136.
Long Statement,Adalbertus.BudgetPlanner.Models,BudgetTemplateItem,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\BudgetTemplateItem.cs,CheckIfCanBeExecuted,The length of the statement  "	var lastHistory = HistoryItems.Where (x => (x.Date.YearMonthToInt () >= StartDate.YearMonthToInt ()) && (x.Date.YearMonthToInt () <= budget.DateFrom.YearMonthToInt ())).OrderByDescending (x => x.Date).FirstOrDefault (); " is 219.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The length of the statement  "	//                                                     7            8          9            10              11               12         13           14 " is 151.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The length of the statement  "			var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup); " is 149.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The length of the statement  "			workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo); " is 120.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanSummaryTable,The length of the statement  "		lastCategoryIndex = FillCategorySummaryRows (workSheet' rowIndex' lastCategoryIndex' budget' previousBudgetPlanItem' expensesAddressLookup); " is 140.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The length of the statement  "		workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex); " is 133.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The length of the statement  "		workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex); " is 133.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The length of the statement  "		workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex); " is 135.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The length of the statement  "	workSheet.Cells [lastCategoryIndex' 12].Formula = string.Format ("SUM(D{0}:D{1})"' firstCategoryIndex' lastCategoryIndex); " is 122.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The length of the statement  "	string key = GetExpenseLookupKey (budget.Id' previousBudgetPlanItem.CashFlow.Group.Id' previousBudgetPlanItem.CashFlowId); " is 122.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The length of the statement  "		workSheet.Cells [lastCategoryIndex' 13].Formula = string.Format ("SUM({0})"' string.Join ("'"' expensesAddressLookup [key])); " is 125.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The length of the statement  "			var plansGroupped = budget.BudgetPlanItems.OrderBy (x => x.CashFlow.Group.Position).GroupBy (x => x.CashFlow.GroupName); " is 120.
Long Statement,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The length of the statement  "	var formula = string.Format ("F{0} - SUM({1})"' rowIndex - 1' string.Join ("'"' expenseSummaryRows.Select (x => string.Format ("F{0}"' x)))); " is 141.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,Delete,The length of the statement  "		var isRequiredForOthers = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("BudgetCalculatorItem").Where ("ForeignId = @0 AND ValueTypeName = 'CalculatorEquationValue'"' equation.Id)) > 0; " is 215.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,Delete,The length of the statement  "			Shell.ShowMessage (sb.ToString ()' () => Delete (equation' true)' null' System.Windows.MessageBoxButton.OKCancel' System.Windows.MessageBoxImage.Question); " is 155.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,ShowWizard,The length of the statement  "		Equations = Equations.Where (x => !x.Items.Any (y => y.ValueType == CalculatorValueType.CalculatorEquationValue && y.ForeignId == EquationToEdit.Id)).ToList ()' " is 160.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,DeleteEquation,The length of the statement  "		var equationsDeletedCounter = Database.Execute ("DELETE FROM BudgetCalculatorEquation WHERE Id IN (SELECT BudgetCalculatorEquationId FROM BudgetCalculatorItem WHERE ForeignId = @0 AND ValueTypeName = 'CalculatorEquationValue')"' equation.Id); " is 242.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculationsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculationsViewModel.cs,DeleteEquation,The length of the statement  "		Database.Execute ("DELETE FROM BudgetCalculatorItem WHERE ForeignId = @0 AND ValueTypeName = 'CalculatorEquationValue'"' equation.Id); " is 134.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The length of the statement  "			throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak kategorii."' calculatorItem.Equation.Name)); " is 129.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The length of the statement  "			throw new NullReferenceException (string.Format ("Nie udało się odnaleźć równania powiązanego z równaniem: {0}"' calculatorItem.Name)); " is 135.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The length of the statement  "			throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak kategorii."' calculatorItem.Equation.Name)); " is 129.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The length of the statement  "			throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak grupy."' calculatorItem.Equation.Name)); " is 125.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,ValidateFinish,The length of the statement  "	if (IsOperatorElementVisible && Model.CurrentItem != null && Model.CurrentItem.OperatorType != CalculatorOperatorType.None) { " is 125.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardShellViewModel.cs,Initialize,The length of the statement  "	var equations = (parameters.Equations as IEnumerable<BudgetCalculatorEquation>).Where (x => x.Id != parameters.Equation.Id).ToList (); " is 134.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanCopyDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanCopyDialogViewModel.cs,LoadAvaiableBudgets,The length of the statement  "	var avaiableBudgets = Database.Query<DateTime> (PetaPoco.Sql.Builder.Select ("DateFrom").From ("[Budget]").OrderBy ("[DateFrom]")).ToList (); " is 141.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanCopyDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanCopyDialogViewModel.cs,LoadBudgetPlans,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("BudgetPlan").InnerJoin ("Budget").On ("Budget.Id = BudgetPlan.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = BudgetPlan.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").Where ("Budget.DateFrom = datetime(@0)"' string.Format ("{0}-01"' SelectedBudgetDate)); " is 356.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanViewModel.cs,LoadBudgetPlanItems,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("BudgetPlan").InnerJoin ("Budget").On ("Budget.Id = BudgetPlan.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = BudgetPlan.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").Where ("BudgetPlan.BudgetId = @0"' Budget.Id); " is 315.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetPlanViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetPlanViewModel.cs,FindBudgetPlanItemVMFor,The length of the statement  "	var budgetPlanItem = AllBudgetPlanList.Where (x => x.CashFlow.Id == budgetPlan.CashFlowId && x.Budget.Id == budgetPlan.BudgetId).First (); " is 138.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetViewModel.cs,LoadOrCreateDefaultBudget,The length of the statement  "	ExpensesHeader = string.Format ("Realizacja budżetu za okres: {0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' Budget.DateFrom' Budget.DateTo); " is 128.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetViewModel.cs,LoadOrCreateDefaultBudget,The length of the statement  "		var sql = PetaPoco.Sql.Builder.Select ("*").From ("Budget").Where ("strftime('%Y%m'' DateFrom) = @0"' date.ToString ("yyyyMM")); " is 128.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetViewModel.cs,LoadExpensesForBudget,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("Expense").InnerJoin ("Budget").On ("Budget.Id = Expense.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = Expense.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").Where ("Expense.BudgetId = @0"' Budget.Id); " is 303.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,BudgetViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetViewModel.cs,OnRefreshRequest,The length of the statement  "	TypeSwitch.Do (refreshEvent.ChangedEntity' TypeSwitch.Case<Budget> (() => RefreshBudgetSummary ())' TypeSwitch.Case<IncomeValue> (() => RefreshBudgetSummary ())' TypeSwitch.Case<Expense> (() => RefreshBudgetSummary ())' TypeSwitch.Case<BudgetPlan> (() => RefreshBudgetSummary ())' TypeSwitch.Case<IEnumerable<BudgetPlan>> (() => RefreshBudgetSummary ())' TypeSwitch.Case<SavingValue> (() => RefreshBudgetSummary ())); " is 417.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowDeleteConfirmationViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowDeleteConfirmationViewModel.cs,UpdateCashFlow,The length of the statement  "		var sql = PetaPoco.Sql.Builder.Append ("SET CashFlowId = @0"' SelectedCashFlow.Id).Where ("CashFlowId = @0"' CashFlowToDelete.Id); " is 130.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowDeleteConfirmationViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowDeleteConfirmationViewModel.cs,UpdateCashFlow,The length of the statement  "		sql = PetaPoco.Sql.Builder.Append ("SET CashFlowId = @0"' SelectedCashFlow.Id).Where ("CashFlowId = @0"' CashFlowToDelete.Id); " is 126.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowGroupDeleteConfirmationViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowGroupDeleteConfirmationViewModel.cs,Close,The length of the statement  "		var sql = PetaPoco.Sql.Builder.Append ("SET CashFlowGroupId = @0"' SelectedCashFlowGroup.Id).Where ("CashFlow.CashFlowGroupId = @0"' CashFlowGroupToDelete.Id); " is 159.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,LoadCashFlows,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("CashFlow").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").LeftJoin ("Saving").On ("Saving.CashFlowId = CashFlow.Id"); " is 200.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowType,The length of the statement  "		var hasBudgetPlansDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("BudgetPlan").Where ("CashFlowId = @0"' cashFlow.Id)) > 0; " is 162.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowType,The length of the statement  "		var hasExpensesDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("Expense").Where ("CashFlowId = @0"' cashFlow.Id)) > 0; " is 156.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowType,The length of the statement  "		Database.Delete<SavingValue> ("WHERE ExpenseId IN (SELECT [Expense].Id FROM [Expense] WHERE CashFlowId = @0)"' cashFlow.Id); " is 124.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowType,The length of the statement  "		Database.Delete<BudgetTemplateHistory> ("WHERE BudgetTemplateItemId IN (SELECT Id FROM [BudgetTemplateItem] WHERE [ForeignId] = @0)"' cashFlow.Id); " is 147.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowGroup,The length of the statement  "		var hasCashFlowsDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("CashFlow").Where ("CashFlowGroupId = @0"' cashFlowGroup.Id)) > 0; " is 168.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowGroup,The length of the statement  "		var hasBudgetPlansDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("BudgetPlan").Where ("CashFlowId IN (SELECT [CashFlow].Id FROM [CashFlow] WHERE CashFlowGroupId = @0)"' cashFlowGroup.Id)) > 0; " is 231.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,DeleteCashFlowGroup,The length of the statement  "		var hasExpensesDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("Expense").Where ("CashFlowId IN (SELECT [CashFlow].Id FROM [CashFlow] WHERE CashFlowGroupId = @0)"' cashFlowGroup.Id)) > 0; " is 225.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,Save,The length of the statement  "			int savingValuesCount = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("SavingValue").Where ("ExpenseId = @0"' expense.Id)); " is 153.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,Save,The length of the statement  "				savingsDeletedCounter = Database.Delete<SavingValue> ("WHERE ExpenseId = @0 AND SavingId <> @1"' expense.Id' expense.SavingValue.SavingId); " is 139.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,OnFilteredBudgetExpensesPropertyChanged,The length of the statement  "	messageBuilder.AppendLine (string.Format ("Zmieniasz pozycję' która wykracza poza wybrany okres budżetowy: {0:yyyy-MM}"' Budget.DateFrom)); " is 139.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,GetFilteredExpenses,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("Expense").InnerJoin ("Budget").On ("Budget.Id = Expense.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = Expense.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id"); " is 260.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,Export,The length of the statement  "		var defaultFileName = string.Format ("Wydatki_{0}_{1}"' Filter.DateFrom.ToString ("yyyy-MM-dd")' Filter.DateTo.ToString ("yyyy-MM-dd")); " is 136.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,Export,The length of the statement  "		Shell.ShowMessage ("Brak dostępu do pliku. Być może jest on już otwarty..."' null' null' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error); " is 163.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExportDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExportDialogViewModel.cs,GetExportFilePath,The length of the statement  "	            return string.Format(@"{0}\Budżet {1}.xlsx"' Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)' SelectedExportPeriod);" is 133.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExportDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExportDialogViewModel.cs,ExportBudget,The length of the statement  "	var allBudgets = Database.Query<Budget> (PetaPoco.Sql.Builder.Select ("*").From ("Budget").Where ("date(Budget.DateFrom) BETWEEN date(@0) AND date(@1)"' DateFrom' DateTo).OrderBy ("Budget.DateFrom")).ToList (); " is 210.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExportDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExportDialogViewModel.cs,ExportBudget,The length of the statement  "	var sql = PetaPoco.Sql.Builder.Select ("*").From ("BudgetPlan").InnerJoin ("Budget").On ("Budget.Id = BudgetPlan.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = BudgetPlan.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").Where ("date(Budget.DateFrom) BETWEEN date(@0) AND date(@1)"' DateFrom' DateTo); " is 349.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ExportDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExportDialogViewModel.cs,ExportBudget,The length of the statement  "		var sqlExpense = PetaPoco.Sql.Builder.Select ("*").From ("Expense").InnerJoin ("Budget").On ("Budget.Id = Expense.BudgetId").InnerJoin ("CashFlow").On ("CashFlow.Id = Expense.CashFlowId").InnerJoin ("CashFlowGroup").On ("CashFlow.CashFlowGroupId = CashFlowGroup.Id").Where ("Budget.Id = @0"' budget.Id); " is 303.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,IncomesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\IncomesViewModel.cs,RemoveIncome,The length of the statement  "		var hasIncomeValuesDefined = Database.ExecuteScalar<int> (PetaPoco.Sql.Builder.Select ("COUNT(*)").From ("IncomeValue").Where ("IncomeId = @0"' income.Id)) > 0; " is 160.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,IncomesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\IncomesViewModel.cs,RemoveIncome,The length of the statement  "			var message = string.Format ("Dochód \"{0}\" jest już używany w budżecie. Usunięcie go spowoduje usunięcie jego wystąpień we wszystkich budżetach.\r\n\r\nCzy chcesz kontynuować?"' income.Name); " is 193.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,NotepadViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\NotepadViewModel.cs,LoadAvaiableBudgets,The length of the statement  "	var avaiableBudgets = Database.Query<Budget> (PetaPoco.Sql.Builder.Select ("*").From ("[Budget]").OrderBy ("[DateFrom]")).ToList (); " is 132.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,LoadIncomes,The length of the statement  "	var incomeValues = Database.Query<IncomeValue' Income' Budget> (PetaPoco.Sql.Builder.Select ("*").From ("IncomeValue").InnerJoin ("Income").On ("Income.Id = IncomeValue.IncomeId").InnerJoin ("Budget").On ("Budget.Id = IncomeValue.BudgetId").Where ("IncomeValue.BudgetId = @0"' Budget.Id)).ToList (); " is 299.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,AddIncomeValue,The length of the statement  "		var incomeValue = Budget.AddIncomeValue (SelectedAvailableIncome' IncomeValueValue' IncomeValueDate' IncomeValueDescription); " is 125.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,LoadSavings,The length of the statement  "	var budgetSavingValues = Database.Query<SavingValue' Saving' Budget' Expense> (PetaPoco.Sql.Builder.Select ("*").From ("SavingValue").InnerJoin ("Saving").On ("Saving.Id = SavingValue.SavingId").InnerJoin ("Budget").On ("Budget.Id = SavingValue.BudgetId").LeftJoin ("Expense").On ("Expense.Id = SavingValue.ExpenseId").Where ("SavingValue.BudgetId = @0"' Budget.Id)).ToList (); " is 377.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,RevenuesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\RevenuesViewModel.cs,AddSavingValue,The length of the statement  "		var savingValue = Budget.WithdrawSavingValue (SelectedAvailableSaving' SavingValueValue' SavingValueDate' SavingValueDescription); " is 130.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,CheckForUpdates,The length of the statement  "		var needToUpdate = Updater.CheckForNewVersion (ConfigurationManager.GetValueOrDefault<string> (ConfigurationKeys.UpdatePage' string.Empty)); " is 140.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,CheckForUpdates,The length of the statement  "		                    if (Updater.CheckForNewVersion(ConfigurationManager.GetValueOrDefault<string>(ConfigurationKeys.UpdatePage' string.Empty)))                    " is 123.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowHelp,The length of the statement  "		ShowMessage ("Nie mogę odnaleźć adresu strony WWW z pomocą.\r\nSpróbuj skontaktować się z Twórcą aplikacji."' null' null' MessageBoxButton.OK' MessageBoxImage.Error); " is 166.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowHelp,The length of the statement  "	//ShowMessage(message.ToString()' () => Process.Start(helpPage)' null' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine (string.Format ("Program Budżet Domowy jest  własnością autora: Wojciech Pietkiewicz <{0}>"' ConfigurationManager.GetValueOrDefault<string> (ConfigurationKeys.AuthorEmail))); " is 193.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine (string.Format ("Strona WWW: {0}"' ConfigurationManager.GetValueOrDefault<string> (ConfigurationKeys.HomePage))); " is 132.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine ("Program Budżet Domowy jest darmowy i może być użytkowany' kopiowany i przekazywany dalej' jeśli spełnione są następujące warunki: "); " is 154.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine ("1. Program może być używany prywatnie i zawodowo bez ograniczeń. Nie może być jednakże sprzedawany i nie może być dołączany do innych pakietów oprogramowania bez uzyskania zgody autora."); " is 209.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine ("4. Program pozostaje zawsze' również gdy jest przekazywany dla osób trzecich' własnością autora."); " is 120.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine ("5. Program musi pozostać niezmieniony. W szczególności nazwa programu i nazwisko autora nie mogą być zmieniane."); " is 135.
Long Statement,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,ShowAbout,The length of the statement  "	message.AppendLine ("6. AUTOR NIE GWARANTUJE: ŻE PROGRAM JEST BEZBLĘDNY' ŻE PRACUJE BEZ ZAWIESZEŃ' ŻE ODPOWIADA TWOIM WYMAGANIOM' ŻE BŁĘDY W PROGRAMIE BĘDĄ USUNIĘTE LUB NOWE WERSJE/POPRAWKI  ZOSTANĄ WYKONANE I UDOSTĘPNIONE. PROGRAM JEST DOSTARCZANY  „TAK JAK JEST” BEZ JAKIEJKOLWIEK GWARANCJI. UŻYTKOWNIK AKCEPTUJE' ŻE UŻYTKOWANIE PROGRAMU/ DOKUMENTACJI I JEGO SKUTKI NASTĘPUJE NA JEGO WŁASNE RYZYKO. ZA EWENTUALNE SZKODY WYNIKŁE Z UŻYTKOWANIA PROGRAMU' JAK N.P. UTRATA DANYCH' UTRATA ZAROBKU' PRZERWY W PRACY' UTRATA INFORMACJI BIZNESOWYCH LUB INNE STARTY FINANSOWE' NIEZALEŻNIE OD ICH PRZEWIDYWALNOŚCI' AUTOR NIE PRZEJMUJE ŻADNEJ ODPOWIEDZIALNOŚCI. UŻYTKOWANIE JEST WYŁĄCZNIE NA WŁASNE RYZYKO. PROGRAM JEST LICENCJONOWANY „TAK JAK JEST”."); " is 742.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,CommonConstruct,The length of the statement  "	if (_dbType == DBType.MySql && _connectionString != null && _connectionString.IndexOf ("Allow User Variables=true") >= 0) " is 121.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' _sql)); " is 164.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' _sql)); " is 163.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,ProcessParams,The length of the statement  "		if ((arg_val as System.Collections.IEnumerable) != null && (arg_val as string) == null && (arg_val as byte[]) == null) { " is 120.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,SplitSqlForPaging,The length of the statement  "		sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 128.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,BuildPageQueries,The length of the statement  "		sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : sqlOrderBy' sqlSelectRemoved' args.Length' args.Length + 1); " is 244.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' ForceDateTimesToUtc' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 147.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,FindSplitPoint,The length of the statement  "		return PocoData.ForType (typeThis).GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' pos' r.FieldCount - pos' r); " is 137.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,FindSplitPoint,The length of the statement  "			return pdThis.GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' firstColumn' pos - firstColumn' r); " is 123.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory () { " is 124.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Exists,The length of the statement  "	return FirstOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey) != null; " is 151.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 135.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 144.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}) VALUES ({2})"' EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' string.Join ("'"' values.ToArray ())); " is 175.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' EscapeTableName (tableName)' sb.ToString ()' EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 180.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Delete,The length of the statement  "	var sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' EscapeTableName (tableName)' EscapeSqlIdentifier (primaryKeyName)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Complex Conditional,Adalbertus.BudgetPlanner.Core,Updater,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Core\Updater.cs,Parse,The conditional expression  "versionElement == null || dateElement == null || changesElement == null || urlElement == null"  is complex.
Virtual Method Call from Constructor,Adalbertus.BudgetPlanner.ViewModels,BaseViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BaseViewModel.cs,BaseViewModel,The constructor "BaseViewModel" calls a virtual method "Initialize".
Empty Catch Block,Adalbertus.BudgetPlanner.Controls,CalculatorTextBox,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Controls\CalculatorTextBox.cs,ParseText,The method has an empty catch block.
Empty Catch Block,Adalbertus.BudgetPlanner.Controls,CalculatorTextBox,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Controls\CalculatorTextBox.cs,ParseText,The method has an empty catch block.
Magic Number,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateIfNeeded,The following statement contains a magic number: try {  	switch (currentDatabaseVersion) {  	case 1:  		UpdateToVersion2 (database);  		break;  	case 2:  		UpdateToVersion3 (database);  		return;  	default:  		throw new InvalidOperationException (string.Format ("Procedura aktualizacji bazy danych nie może być wykonana. Błędna wersja bazy danych: {0}"' currentDatabaseVersion));  	}  }  catch (Exception ex) {  	throw new ApplicationException (string.Format ("W trakcie aktualizacji bazy danych z wersji {0} do wersji {1} wystąpił błąd:\r\n{2}"' currentDatabaseVersion' currentDatabaseVersion + 1' ex.Message));  }  
Magic Number,Adalbertus.BudgetPlanner.Database,DatabaseUpdateHelper,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\DatabaseUpdateHelper.cs,UpdateIfNeeded,The following statement contains a magic number: switch (currentDatabaseVersion) {  case 1:  	UpdateToVersion2 (database);  	break;  case 2:  	UpdateToVersion3 (database);  	return;  default:  	throw new InvalidOperationException (string.Format ("Procedura aktualizacji bazy danych nie może być wykonana. Błędna wersja bazy danych: {0}"' currentDatabaseVersion));  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: CreateWorksheetHeader (workSheet' columnNames' 1' 2);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: CreateWorksheetHeader (workSheet' new string[] {  	"Grupa wydatków"'  	"Suma"'  	"Realizacja"'  	"Pozostało"'  	"Kategoria wydatków"'  	"Suma"'  	"Realizacja"'  	"Pozostało"  }' 7' 2);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: CreateWorksheetHeader (workSheet' new string[] {  	"Grupa wydatków"'  	"Suma"'  	"Realizacja"'  	"Pozostało"'  	"Kategoria wydatków"'  	"Suma"'  	"Realizacja"'  	"Pozostało"  }' 7' 2);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: foreach (var budget in budgets) {  	for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  		var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  		workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  		workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  		workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  		workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  		workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  		var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  		if (i + 1 < budget.BudgetPlanItems.Count) {  			if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  				borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  			}  		}  		else {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  		rowIndex++;  	}  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: foreach (var budget in budgets) {  	for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  		var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  		workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  		workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  		workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  		workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  		workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  		var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  		if (i + 1 < budget.BudgetPlanItems.Count) {  			if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  				borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  			}  		}  		else {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  		rowIndex++;  	}  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: foreach (var budget in budgets) {  	for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  		var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  		workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  		workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  		workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  		workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  		workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  		var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  		if (i + 1 < budget.BudgetPlanItems.Count) {  			if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  				borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  			}  		}  		else {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  		rowIndex++;  	}  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: foreach (var budget in budgets) {  	for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  		var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  		workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  		workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  		workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  		workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  		workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  		var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  		if (i + 1 < budget.BudgetPlanItems.Count) {  			if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  				borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  			}  		}  		else {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  		rowIndex++;  	}  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  	var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  	workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  	workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  	workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  	workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  	var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  	if (i + 1 < budget.BudgetPlanItems.Count) {  		if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  	}  	else {  		borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  	var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  	workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  	workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  	workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  	workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  	var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  	if (i + 1 < budget.BudgetPlanItems.Count) {  		if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  	}  	else {  		borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  	var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  	workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  	workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  	workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  	workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  	var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  	if (i + 1 < budget.BudgetPlanItems.Count) {  		if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  	}  	else {  		borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: for (int i = 0; i < budget.BudgetPlanItems.Count; i++) {  	var budgetPlanItem = CreateBudgetPlanSummaryTable (workSheet' rowIndex' ref lastGroupIndex' ref lastCategoryIndex' budget' i' expensesAddressLookup);  	workSheet.Cells [rowIndex' 1].Value = string.Format ("{0:yyyy-MM-dd} - {1:yyyy-MM-dd}"' budget.DateFrom' budget.DateTo);  	workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  	workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  	workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  	var borderRange = workSheet.Cells [rowIndex' 1' rowIndex' workSheet.Dimension.End.Column];  	if (i + 1 < budget.BudgetPlanItems.Count) {  		if (budgetPlanItem.CashFlow.Group.Id != budget.BudgetPlanItems [i + 1].CashFlow.Group.Id) {  			borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  		}  	}  	else {  		borderRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 2].Value = budgetPlanItem.CashFlow.GroupName;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = budgetPlanItem.CashFlow.Name;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = budgetPlanItem.Value;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Value = budgetPlanItem.Description;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: AlterateAndAutoFitRowsColumns (workSheet' 3' rowIndex - 1' columnNames.Length);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Column (4));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Cells [1' 8' workSheet.Dimension.End.Row' 10]);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Cells [1' 8' workSheet.Dimension.End.Row' 10]);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Cells [1' 12' workSheet.Dimension.End.Row' 14]);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Cells [1' 12' workSheet.Dimension.End.Row' 14]);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Column (6)' Color.White);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: workSheet.View.FreezePanes (3' 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: using (var range = workSheet.Cells [workSheet.Dimension.Address]) {  	range.AutoFitColumns (10);  	var negativeValueFormatting = workSheet.ConditionalFormatting.AddLessThan (new ExcelAddress (range.Address));  	negativeValueFormatting.Formula = "0";  	negativeValueFormatting.Style.Fill.PatternType = ExcelFillStyle.Solid;  	negativeValueFormatting.Style.Fill.BackgroundColor.Color = Color.LightPink;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheet,The following statement contains a magic number: range.AutoFitColumns (10);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 3].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 4].Formula = string.Format ("SUBTOTAL(9'D{0}:D{1})"' 3' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 4].Formula = string.Format ("SUBTOTAL(9'D{0}:D{1})"' 3' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 4]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 7].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 8].Formula = string.Format ("SUBTOTAL(9'H{0}:H{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 8].Formula = string.Format ("SUBTOTAL(9'H{0}:H{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 9].Formula = string.Format ("SUBTOTAL(9'I{0}:I{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 9].Formula = string.Format ("SUBTOTAL(9'I{0}:I{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 10].Formula = string.Format ("SUBTOTAL(9'J{0}:J{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 10].Formula = string.Format ("SUBTOTAL(9'J{0}:J{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 11].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 12].Formula = string.Format ("SUBTOTAL(9'L{0}:L{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 12].Formula = string.Format ("SUBTOTAL(9'L{0}:L{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 13].Formula = string.Format ("SUBTOTAL(9'M{0}:M{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 13].Formula = string.Format ("SUBTOTAL(9'M{0}:M{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 14].Formula = string.Format ("SUBTOTAL(9'N{0}:N{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [1' 14].Formula = string.Format ("SUBTOTAL(9'N{0}:N{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 8' 1' 10]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 8' 1' 10]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 12' 1' 14]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 12' 1' 14]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Formula = string.Format ("SUBTOTAL(9'D{0}:D{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Formula = string.Format ("SUBTOTAL(9'D{0}:D{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 4]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 7].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 8].Formula = string.Format ("SUBTOTAL(9'H{0}:H{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 8].Formula = string.Format ("SUBTOTAL(9'H{0}:H{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 9].Formula = string.Format ("SUBTOTAL(9'I{0}:I{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 9].Formula = string.Format ("SUBTOTAL(9'I{0}:I{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 10].Formula = string.Format ("SUBTOTAL(9'J{0}:J{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 10].Formula = string.Format ("SUBTOTAL(9'J{0}:J{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 11].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 12].Formula = string.Format ("SUBTOTAL(9'L{0}:L{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 12].Formula = string.Format ("SUBTOTAL(9'L{0}:L{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 13].Formula = string.Format ("SUBTOTAL(9'M{0}:M{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 13].Formula = string.Format ("SUBTOTAL(9'M{0}:M{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 14].Formula = string.Format ("SUBTOTAL(9'N{0}:N{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 14].Formula = string.Format ("SUBTOTAL(9'N{0}:N{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 8' rowIndex' 10]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 8' rowIndex' 10]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 12' rowIndex' 14]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWorksheetSummary,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 12' rowIndex' 14]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: if (lastGroupIndex > firstGroupIndex) {  	// Grupa wydatków  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  	workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  	// Suma  	workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  	// Realizacja  	workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  	// Pozostało  	workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  }  else {  	workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  	workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 7' lastGroupIndex' 7].Formula = string.Format ("B{0}"' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 8' firstGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 8' lastGroupIndex' 8].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 9' firstGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 9' lastGroupIndex' 9].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 10' firstGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [firstGroupIndex' 10' lastGroupIndex' 10].Merge = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [lastGroupIndex' 8].Formula = string.Format ("SUM(L{0}:L{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [lastGroupIndex' 9].Formula = string.Format ("SUM(M{0}:M{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillGroupSummaryRows,The following statement contains a magic number: workSheet.Cells [lastGroupIndex' 10].Formula = string.Format ("SUM(N{0}:N{1})"' firstGroupIndex' lastGroupIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: workSheet.Cells [lastCategoryIndex' 11].Formula = string.Format ("C{0}"' lastCategoryIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: workSheet.Cells [lastCategoryIndex' 12].Formula = string.Format ("SUM(D{0}:D{1})"' firstCategoryIndex' lastCategoryIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: if (expensesAddressLookup.ContainsKey (key)) {  	workSheet.Cells [lastCategoryIndex' 13].Formula = string.Format ("SUM({0})"' string.Join ("'"' expensesAddressLookup [key]));  }  else {  	workSheet.Cells [lastCategoryIndex' 13].Value = 0;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: if (expensesAddressLookup.ContainsKey (key)) {  	workSheet.Cells [lastCategoryIndex' 13].Formula = string.Format ("SUM({0})"' string.Join ("'"' expensesAddressLookup [key]));  }  else {  	workSheet.Cells [lastCategoryIndex' 13].Value = 0;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: workSheet.Cells [lastCategoryIndex' 13].Formula = string.Format ("SUM({0})"' string.Join ("'"' expensesAddressLookup [key]));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: workSheet.Cells [lastCategoryIndex' 13].Value = 0;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillCategorySummaryRows,The following statement contains a magic number: workSheet.Cells [lastCategoryIndex' 14].Formula = string.Format ("L{0} - M{0}"' lastCategoryIndex);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: CreateWorksheetHeader (workSheet' columnNames' 1' 2);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: foreach (var expense in expenses) {  	//workSheet  	workSheet.Cells [rowIndex' 1].Value = rowIndex - 1;  	workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  	workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  	workSheet.Cells [rowIndex' 4].Value = expense.Date;  	workSheet.Cells [rowIndex' 5].Value = expense.Value;  	workSheet.Cells [rowIndex' 6].Value = expense.Description;  	var key = GetExpenseLookupKey (expense.BudgetId' expense.CashFlowGroupId' expense.CashFlowId);  	if (expenseAddressLookup.ContainsKey (key)) {  		expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  	}  	else {  		expenseAddressLookup [key] = new List<string> {  			workSheet.Cells [rowIndex' 5].FullAddress  		};  	}  	rowIndex++;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 2].Value = expense.Flow.GroupName;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = expense.Flow.Name;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = expense.Date;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Value = expense.Value;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 6].Value = expense.Description;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: if (expenseAddressLookup.ContainsKey (key)) {  	expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  }  else {  	expenseAddressLookup [key] = new List<string> {  		workSheet.Cells [rowIndex' 5].FullAddress  	};  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: if (expenseAddressLookup.ContainsKey (key)) {  	expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  }  else {  	expenseAddressLookup [key] = new List<string> {  		workSheet.Cells [rowIndex' 5].FullAddress  	};  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: expenseAddressLookup [key].Add (workSheet.Cells [rowIndex' 5].FullAddress);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: expenseAddressLookup [key] = new List<string> {  	workSheet.Cells [rowIndex' 5].FullAddress  };  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [1' 4].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [1' 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [1' 5].Formula = string.Format ("SUBTOTAL(9'E{0}:E{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [1' 5].Formula = string.Format ("SUBTOTAL(9'E{0}:E{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [1' 5]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = "Suma";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Formula = string.Format ("SUBTOTAL(9'E{0}:E{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Formula = string.Format ("SUBTOTAL(9'E{0}:E{1})"' 2' rowIndex - 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [rowIndex' 5]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: FormatToDate (workSheet.Column (4));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Column (5));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: AlterateAndAutoFitRowsColumns (workSheet' 3' expenses.Count () + 1' columnNames.Length);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateExpensesWorksheet,The following statement contains a magic number: workSheet.View.FreezePanes (3' 1);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: FormatToDate (workSheet.Column (5));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: FormatToCurrency (workSheet.Column (6));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: AlterateAndAutoFitRowsColumns (workSheet' 2' rowIndex - 1' columnNames.Length);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: foreach (var row in expenseSummaryRows) {  	SetBackgroundColor (workSheet.Cells [row' 1' row' columnNames.Length]' Color.White);  	SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightGreen);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: foreach (var row in expenseSummaryRows) {  	SetBackgroundColor (workSheet.Cells [row' 1' row' columnNames.Length]' Color.White);  	SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightGreen);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightGreen);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: foreach (var row in planSummaryRows) {  	SetBackgroundColor (workSheet.Cells [row' 1' row' columnNames.Length]' Color.White);  	SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightBlue);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: foreach (var row in planSummaryRows) {  	SetBackgroundColor (workSheet.Cells [row' 1' row' columnNames.Length]' Color.White);  	SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightBlue);  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightBlue);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,CreateBudgetPlanWithExpensesWorksheet,The following statement contains a magic number: SetBackgroundColor (workSheet.Cells [row' 4' row' 6]' Color.LightBlue);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 2].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = "Plan łącznie";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 6].Formula = string.Format ("SUBTOTAL(9'{0})"' string.Join ("'"' categoriesAddressList));  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 7].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4' rowIndex' 6].Style.Font.Bold = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4' rowIndex' 6].Style.Font.Bold = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 2].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = "Pozostało do wydania";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 6].Formula = formula;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 7].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4' rowIndex' 6].Style.Font.Bold = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithPlanSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4' rowIndex' 6].Style.Font.Bold = true;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 2].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 3].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 4].Value = "Realizacja łącznie";  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 5].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: if (expenses.Any ()) {  	int subtotalFromRow = rowIndex - expenses.Count;  	int subtotalToRow = rowIndex - 1;  	workSheet.Cells [rowIndex' 6].Formula = string.Format ("SUBTOTAL(9'F{0}:F{1})"' subtotalFromRow' subtotalToRow);  }  else {  	workSheet.Cells [rowIndex' 6].Value = 0;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: if (expenses.Any ()) {  	int subtotalFromRow = rowIndex - expenses.Count;  	int subtotalToRow = rowIndex - 1;  	workSheet.Cells [rowIndex' 6].Formula = string.Format ("SUBTOTAL(9'F{0}:F{1})"' subtotalFromRow' subtotalToRow);  }  else {  	workSheet.Cells [rowIndex' 6].Value = 0;  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 6].Formula = string.Format ("SUBTOTAL(9'F{0}:F{1})"' subtotalFromRow' subtotalToRow);  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 6].Value = 0;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,FillWithExpensesAndSummary,The following statement contains a magic number: workSheet.Cells [rowIndex' 7].Value = null;  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,AlterateAndAutoFitRowsColumns,The following statement contains a magic number: for (int i = 1; i <= toRow - fromRow + 1; i++) {  	if (i % 2 == 0) {  		int rowIndex = i + fromRow - 1;  		SetBackgroundColor (workSheet.Cells [rowIndex' 1' rowIndex' numberOfColumns]' Color.LightGoldenrodYellow);  	}  }  
Magic Number,Adalbertus.BudgetPlanner.Services,ExportService,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Services\ExportService.cs,AlterateAndAutoFitRowsColumns,The following statement contains a magic number: if (i % 2 == 0) {  	int rowIndex = i + fromRow - 1;  	SetBackgroundColor (workSheet.Cells [rowIndex' 1' rowIndex' numberOfColumns]' Color.LightGoldenrodYellow);  }  
Magic Number,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,SetToDefault,The following statement contains a magic number: IsLastElement = (Model.Items.Count > 2) && (isLastItemNotOperator);  
Magic Number,Adalbertus.BudgetPlanner.ViewModels,BudgetTemplateDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetTemplateDialogViewModel.cs,Validate,The following statement contains a magic number: if (MonthDay < 0 || MonthDay > 31) {  	return false;  }  
Magic Number,Adalbertus.BudgetPlanner.ViewModels,BudgetTemplateDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetTemplateDialogViewModel.cs,Validate,The following statement contains a magic number: if (RepeatInterval < 0 || RepeatInterval > 12) {  	return false;  }  
Magic Number,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,OnActivate,The following statement contains a magic number: _timer.Interval = updateIntervalMinutes * 60 * 1000;  
Magic Number,Adalbertus.BudgetPlanner.ViewModels,ShellViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ShellViewModel.cs,OnActivate,The following statement contains a magic number: _timer.Interval = updateIntervalMinutes * 60 * 1000;  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Database\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
Missing Default,Adalbertus.BudgetPlanner.Controls,CalculatorTextBox,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Controls\CalculatorTextBox.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case System.Windows.Input.Key.Escape:  case System.Windows.Input.Key.Enter:  	if (ResultPopup != null) {  		ResultPopup.IsOpen = false;  		base.FormatValue ();  	}  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.Extensions,MarginSetterExtension,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Extensions\MarginSetterExtension.cs,ChangeMarginSide,The following switch statement is missing a default case: switch (marginSide) {  case MarginSides.Left:  	margin.Left = MarginSetterExtension.GetMarginLeft (frameworkElement);  	break;  case MarginSides.Top:  	margin.Top = MarginSetterExtension.GetMarginTop (frameworkElement);  	break;  case MarginSides.Right:  	margin.Right = MarginSetterExtension.GetMarginRight (frameworkElement);  	break;  case MarginSides.Bottom:  	margin.Bottom = MarginSetterExtension.GetMarginBottom (frameworkElement);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.Models,BudgetTemplateItem,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\Models\BudgetTemplateItem.cs,ApplyToBudget,The following switch statement is missing a default case: switch (TemplateType) {  case BudgetTemplateType.BudgetPlan:  	resultEntity = budget.AddPlanValue (cashFlow' value' description);  	break;  case BudgetTemplateType.BudgetExpense:  	var expenseDate = budget.DateFrom.SetMonthDay (MonthDay);  	resultEntity = budget.AddExpense (cashFlow' value' description' expenseDate);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,AttachEvaluator,The following switch statement is missing a default case: switch (calculatorItem.ValueType) {  case CalculatorValueType.BudgetTotalRevenuesValue:  	calculatorItem.Evaluator = () => Budget.TotalSumOfRevenues;  	break;  case CalculatorValueType.BudgetIncomesValue:  case CalculatorValueType.BudgetIncomesValueOfType:  	var income = CachedService.GetAllIncomes ().FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	calculatorItem.Evaluator = () => GetSumOfBudgetIncomes (income);  	break;  case CalculatorValueType.BudgetSavingsValue:  case CalculatorValueType.BudgetSavingsValueOfType:  	var saving = CachedService.GetAllSavings ().FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	calculatorItem.Evaluator = () => GetSumOfBudgetSavings (saving);  	break;  case CalculatorValueType.BudgetExpensesValueOfType:  	cashFlow = CachedService.GetAllCashFlows ().FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	if (cashFlow == null) {  		throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak kategorii."' calculatorItem.Equation.Name));  	}  	calculatorItem.Evaluator = () => GetSumOfBudgetExpenses (cashFlow);  	break;  case CalculatorValueType.BudgetExpensesWithDescription:  	calculatorItem.Evaluator = () => GetSumOfBudgetExpensesWithDescription (calculatorItem.Text);  	break;  case CalculatorValueType.CalculatorEquationValue:  	var calculatorEquation = Equations.FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	if (calculatorEquation == null) {  		throw new NullReferenceException (string.Format ("Nie udało się odnaleźć równania powiązanego z równaniem: {0}"' calculatorItem.Name));  	}  	calculatorItem.Evaluator = () => Calculate (calculatorEquation);  	break;  case CalculatorValueType.BudgetPlanValue:  	calculatorItem.Evaluator = () => Budget.TotalBudgetPlanValue;  	break;  case CalculatorValueType.BudgetPlanValueOfCategory:  	cashFlow = CachedService.GetAllCashFlows ().FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	if (cashFlow == null) {  		throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak kategorii."' calculatorItem.Equation.Name));  	}  	calculatorItem.Evaluator = () => GetSumOfBudgetPlansOfCategory (cashFlow);  	break;  case CalculatorValueType.BudgetPlanValueOfGroup:  	cashFlowGroup = CachedService.GetAllCashFlowGroups ().FirstOrDefault (x => x.Id == calculatorItem.ForeignId);  	if (cashFlowGroup == null) {  		throw new NullReferenceException (string.Format ("Błąd obliczania równania {0}. Brak grupy."' calculatorItem.Equation.Name));  	}  	calculatorItem.Evaluator = () => GetSumOfBudgetPlansOfGroup (cashFlowGroup);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetCalculatorEvaluator,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetCalculatorEvaluator.cs,UpdateForeignDescriptions,The following switch statement is missing a default case: switch (item.ValueType) {  case CalculatorValueType.CalculatorEquationValue:  	var eq = CachedService.GetAllEquations ().FirstOrDefault (x => x.Id == item.ForeignId);  	if (eq != null) {  		item.ForeignDescription = eq.Name;  	}  	break;  case CalculatorValueType.BudgetExpensesValueOfType:  	var cf = CachedService.GetAllCashFlows ().FirstOrDefault (x => x.Id == item.ForeignId);  	if (cf != null) {  		item.ForeignDescription = cf.Name;  	}  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,BudgetEquationWizardElementViewModel_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "SelectedValueType":  case "SelectedEquation":  case "UserValue":  case "SelectedCashFlow":  case "SelectedIncome":  case "SelectedSaving":  case "IsLastElement":  	if (_suppressEvents) {  		return;  	}  	if (Parent != null) {  		Parent.RefreshNavigationUI ();  	}  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,GetForeignId,The following switch statement is missing a default case: switch (SelectedValueType.Value) {  case CalculatorValueType.BudgetExpensesValueOfType:  	foreignId = SelectedCashFlow.Id;  	break;  case CalculatorValueType.CalculatorEquationValue:  	foreignId = SelectedEquation.Id;  	break;  case CalculatorValueType.BudgetPlanValueOfGroup:  	foreignId = SelectedCashFlowGroup.Id;  	break;  case CalculatorValueType.BudgetPlanValueOfCategory:  	foreignId = SelectedCashFlow.Id;  	break;  case CalculatorValueType.BudgetIncomesValueOfType:  	foreignId = SelectedIncome.Id;  	break;  case CalculatorValueType.BudgetSavingsValueOfType:  	foreignId = SelectedSaving.Id;  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,ValidateMovement,The following switch statement is missing a default case: switch (SelectedValueType.Value) {  case CalculatorValueType.CalculatorEquationValue:  	return SelectedEquation != null;  case CalculatorValueType.UserValue:  	return UserValue.HasValue;  case CalculatorValueType.BudgetExpensesValueOfType:  case CalculatorValueType.BudgetPlanValueOfCategory:  	return SelectedCashFlow != null;  case CalculatorValueType.BudgetPlanValueOfGroup:  	return SelectedCashFlowGroup != null;  case CalculatorValueType.BudgetIncomesValueOfType:  	return SelectedIncome != null;  case CalculatorValueType.BudgetSavingsValueOfType:  	return SelectedSaving != null;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetEquationWizardElementViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetEquationWizardElementViewModel.cs,SetCurrentItemForeignId,The following switch statement is missing a default case: switch (Model.CurrentItem.ValueType) {  case CalculatorValueType.BudgetExpensesValueOfType:  case CalculatorValueType.BudgetPlanValueOfCategory:  	if (foreignIdType != TypeOfForeignId.CashFlow) {  		return;  	}  	break;  case CalculatorValueType.BudgetIncomesValueOfType:  	if (foreignIdType != TypeOfForeignId.Incomes) {  		return;  	}  	break;  case CalculatorValueType.BudgetPlanValueOfGroup:  	if (foreignIdType != TypeOfForeignId.CashFlowGroup) {  		return;  	}  	break;  case CalculatorValueType.BudgetSavingsValueOfType:  	if (foreignIdType != TypeOfForeignId.Savings) {  		return;  	}  	break;  case CalculatorValueType.CalculatorEquationValue:  	if (foreignIdType != TypeOfForeignId.Equation) {  		return;  	}  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,BudgetTemplateDialogViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\BudgetTemplateDialogViewModel.cs,BudgetTemplateDialogViewModel,The following switch statement is missing a default case: switch (e.PropertyName) {  case "IsElementActive":  case "Value":  	Save (item.WrappedItem);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,CalculatorViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CalculatorViewModel.cs,CalculateValue,The following switch statement is missing a default case: switch (leftItem.Operator) {  case CaluculatorOperator.Add:  	result += rightItem.Value;  	break;  case CaluculatorOperator.Substract:  	result -= rightItem.Value;  	break;  case CaluculatorOperator.Multiply:  	result *= rightItem.Value;  	break;  case CaluculatorOperator.Divide:  	if (rightItem.Value != 0) {  		result -= rightItem.Value;  	}  	break;  case CaluculatorOperator.Result:  	return result;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,CalculatorViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CalculatorViewModel.cs,AddToCalculator,The following switch statement is missing a default case: switch (operatorName) {  case "+":  	calculatorOperator = CaluculatorOperator.Add;  	break;  case "-":  	calculatorOperator = CaluculatorOperator.Substract;  	break;  case "/":  	calculatorOperator = CaluculatorOperator.Divide;  	break;  case "*":  	calculatorOperator = CaluculatorOperator.Multiply;  	break;  case "=":  	calculatorOperator = CaluculatorOperator.Result;  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,CashFlowTypesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\CashFlowTypesViewModel.cs,OnPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "Name":  case "Description":  case "Group":  case "Position":  	Save (sender as Entity);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,ExpensesViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\ExpensesViewModel.cs,OnFilteredBudgetExpensesCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Remove:  	Delete (((ExpenseVM)e.OldItems [0]).WrappedItem);  	break;  }  
Missing Default,Adalbertus.BudgetPlanner.ViewModels,SavingsViewModel,C:\repos\adalbertus_BudgetPlanner\Adalbertus.BudgetPlanner\ViewModels\SavingsViewModel.cs,OnSavingPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "Name":  case "Description":  case "Value":  case "StartingBalance":  	var saving = sender as Saving;  	var savingValue = sender as SavingValue;  	if (saving != null) {  		UpdateSaving (saving' true);  	}  	if (savingValue != null) {  		Save (savingValue);  		savingValue.Saving.Refresh ();  		CachedService.Clear (CachedServiceKeys.AllSavings);  		CachedService.Clear (CachedServiceKeys.AllIncomes);  	}  	break;  }  
