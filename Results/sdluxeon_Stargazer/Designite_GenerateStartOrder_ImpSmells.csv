Implementation smell,Namespace,Class,File,Method,Description
Long Method,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The method has 124 lines of code.
Complex Method,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,Cyclomatic complexity of the method is 24
Long Parameter List,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The method has 5 parameters.
Long Statement,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The length of the statement  "				var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList (); " is 125.
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var disc in tournament.Disciplines) {  	var discDir = @".\StartOrder\" + disc.DisciplineName;  	Directory.CreateDirectory (discDir);  	var discName = disc.DisciplineName;  	foreach (var cat in disc.Categories) {  		var catNmae = cat.CategoryName;  		var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  		foreach (var ageGroup in groupedByAge) {  			DocX file = DocX.Load ("StartOrderTemplate.docx");  			file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			file.ReplaceText ("@{Category}"' cat.CategoryName);  			file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  			var cnt = ageGroup.Count ();  			var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  			Queue<CategoryMember> dances = new Queue<CategoryMember> ();  			while (true) {  				var clubsCnt = byClubs.Count;  				List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  				for (int i = 0; i < clubsCnt; i++) {  					dances.Enqueue (byClubs [i].Dequeue ());  					if (byClubs [i].Count == 0)  						toRemove.Add (byClubs [i]);  				}  				foreach (var index in toRemove) {  					byClubs.Remove (index);  				}  				if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  					break;  			}  			Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  			if (byClubs.Count == 0)  				FInaldances = dances;  			else {  				foreach (var dance in byClubs.First ()) {  					while (true) {  						if (dances.Count == 0) {  							dances = FInaldances;  							FInaldances = new Queue<CategoryMember> ();  						}  						var dnc = dances.Dequeue ();  						if (dnc.Club.Id != dance.Club.Id) {  							FInaldances.Enqueue (dnc);  							FInaldances.Enqueue (dance);  							break;  						}  						FInaldances.Enqueue (dnc);  					}  				}  				while (dances.Count > 0) {  					FInaldances.Enqueue (dances.Dequeue ());  				}  			}  			int m = 0;  			if (FInaldances.Count == 0) {  				int asdBreak = 0;  			}  			var totalDancesCount = FInaldances.Count;  			while (FInaldances.Count > 0) {  				var dance = FInaldances.Dequeue ();  				m++;  				var table = file.Tables.First ();  				var row = table.InsertRow ();  				var par = row.Cells [0].InsertParagraph (dance.Name);  				par.Alignment = Alignment.center;  				var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  				par2.Alignment = Alignment.center;  				var par3 = row.Cells [2].InsertParagraph (m.ToString ());  				par3.Alignment = Alignment.center;  			}  			Directory.CreateDirectory (discDir + @"\" + catNmae);  			file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  			file.Dispose ();  			//Protocols  			/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  			var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  			foreach (var JudgeName in Judges) {  				for (int page = 0; page < protocolPages; page++) {  					DocX protocol;  					if (disc.DisciplineName.ToLower ().Contains ("шоу"))  						protocol = DocX.Load ("ProtocolsTemplate4.docx");  					else  						protocol = DocX.Load ("ProtocolsTemplate3.docx");  					string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  					protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  					protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  					protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  					protocol.ReplaceText ("@{Judge}"' JudgeName);  					for (int j = 1; j <= 10; j++) {  						var startOrder = page * 10 + j;  						if (startOrder > totalDancesCount)  							protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  						else  							protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  					}  					protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  					var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  					Directory.CreateDirectory (protDir);  					protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  					protocol.Dispose ();  				}  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var disc in tournament.Disciplines) {  	var discDir = @".\StartOrder\" + disc.DisciplineName;  	Directory.CreateDirectory (discDir);  	var discName = disc.DisciplineName;  	foreach (var cat in disc.Categories) {  		var catNmae = cat.CategoryName;  		var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  		foreach (var ageGroup in groupedByAge) {  			DocX file = DocX.Load ("StartOrderTemplate.docx");  			file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			file.ReplaceText ("@{Category}"' cat.CategoryName);  			file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  			var cnt = ageGroup.Count ();  			var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  			Queue<CategoryMember> dances = new Queue<CategoryMember> ();  			while (true) {  				var clubsCnt = byClubs.Count;  				List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  				for (int i = 0; i < clubsCnt; i++) {  					dances.Enqueue (byClubs [i].Dequeue ());  					if (byClubs [i].Count == 0)  						toRemove.Add (byClubs [i]);  				}  				foreach (var index in toRemove) {  					byClubs.Remove (index);  				}  				if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  					break;  			}  			Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  			if (byClubs.Count == 0)  				FInaldances = dances;  			else {  				foreach (var dance in byClubs.First ()) {  					while (true) {  						if (dances.Count == 0) {  							dances = FInaldances;  							FInaldances = new Queue<CategoryMember> ();  						}  						var dnc = dances.Dequeue ();  						if (dnc.Club.Id != dance.Club.Id) {  							FInaldances.Enqueue (dnc);  							FInaldances.Enqueue (dance);  							break;  						}  						FInaldances.Enqueue (dnc);  					}  				}  				while (dances.Count > 0) {  					FInaldances.Enqueue (dances.Dequeue ());  				}  			}  			int m = 0;  			if (FInaldances.Count == 0) {  				int asdBreak = 0;  			}  			var totalDancesCount = FInaldances.Count;  			while (FInaldances.Count > 0) {  				var dance = FInaldances.Dequeue ();  				m++;  				var table = file.Tables.First ();  				var row = table.InsertRow ();  				var par = row.Cells [0].InsertParagraph (dance.Name);  				par.Alignment = Alignment.center;  				var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  				par2.Alignment = Alignment.center;  				var par3 = row.Cells [2].InsertParagraph (m.ToString ());  				par3.Alignment = Alignment.center;  			}  			Directory.CreateDirectory (discDir + @"\" + catNmae);  			file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  			file.Dispose ();  			//Protocols  			/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  			var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  			foreach (var JudgeName in Judges) {  				for (int page = 0; page < protocolPages; page++) {  					DocX protocol;  					if (disc.DisciplineName.ToLower ().Contains ("шоу"))  						protocol = DocX.Load ("ProtocolsTemplate4.docx");  					else  						protocol = DocX.Load ("ProtocolsTemplate3.docx");  					string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  					protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  					protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  					protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  					protocol.ReplaceText ("@{Judge}"' JudgeName);  					for (int j = 1; j <= 10; j++) {  						var startOrder = page * 10 + j;  						if (startOrder > totalDancesCount)  							protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  						else  							protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  					}  					protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  					var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  					Directory.CreateDirectory (protDir);  					protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  					protocol.Dispose ();  				}  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var disc in tournament.Disciplines) {  	var discDir = @".\StartOrder\" + disc.DisciplineName;  	Directory.CreateDirectory (discDir);  	var discName = disc.DisciplineName;  	foreach (var cat in disc.Categories) {  		var catNmae = cat.CategoryName;  		var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  		foreach (var ageGroup in groupedByAge) {  			DocX file = DocX.Load ("StartOrderTemplate.docx");  			file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			file.ReplaceText ("@{Category}"' cat.CategoryName);  			file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  			var cnt = ageGroup.Count ();  			var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  			Queue<CategoryMember> dances = new Queue<CategoryMember> ();  			while (true) {  				var clubsCnt = byClubs.Count;  				List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  				for (int i = 0; i < clubsCnt; i++) {  					dances.Enqueue (byClubs [i].Dequeue ());  					if (byClubs [i].Count == 0)  						toRemove.Add (byClubs [i]);  				}  				foreach (var index in toRemove) {  					byClubs.Remove (index);  				}  				if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  					break;  			}  			Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  			if (byClubs.Count == 0)  				FInaldances = dances;  			else {  				foreach (var dance in byClubs.First ()) {  					while (true) {  						if (dances.Count == 0) {  							dances = FInaldances;  							FInaldances = new Queue<CategoryMember> ();  						}  						var dnc = dances.Dequeue ();  						if (dnc.Club.Id != dance.Club.Id) {  							FInaldances.Enqueue (dnc);  							FInaldances.Enqueue (dance);  							break;  						}  						FInaldances.Enqueue (dnc);  					}  				}  				while (dances.Count > 0) {  					FInaldances.Enqueue (dances.Dequeue ());  				}  			}  			int m = 0;  			if (FInaldances.Count == 0) {  				int asdBreak = 0;  			}  			var totalDancesCount = FInaldances.Count;  			while (FInaldances.Count > 0) {  				var dance = FInaldances.Dequeue ();  				m++;  				var table = file.Tables.First ();  				var row = table.InsertRow ();  				var par = row.Cells [0].InsertParagraph (dance.Name);  				par.Alignment = Alignment.center;  				var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  				par2.Alignment = Alignment.center;  				var par3 = row.Cells [2].InsertParagraph (m.ToString ());  				par3.Alignment = Alignment.center;  			}  			Directory.CreateDirectory (discDir + @"\" + catNmae);  			file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  			file.Dispose ();  			//Protocols  			/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  			var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  			foreach (var JudgeName in Judges) {  				for (int page = 0; page < protocolPages; page++) {  					DocX protocol;  					if (disc.DisciplineName.ToLower ().Contains ("шоу"))  						protocol = DocX.Load ("ProtocolsTemplate4.docx");  					else  						protocol = DocX.Load ("ProtocolsTemplate3.docx");  					string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  					protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  					protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  					protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  					protocol.ReplaceText ("@{Judge}"' JudgeName);  					for (int j = 1; j <= 10; j++) {  						var startOrder = page * 10 + j;  						if (startOrder > totalDancesCount)  							protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  						else  							protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  					}  					protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  					var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  					Directory.CreateDirectory (protDir);  					protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  					protocol.Dispose ();  				}  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var disc in tournament.Disciplines) {  	var discDir = @".\StartOrder\" + disc.DisciplineName;  	Directory.CreateDirectory (discDir);  	var discName = disc.DisciplineName;  	foreach (var cat in disc.Categories) {  		var catNmae = cat.CategoryName;  		var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  		foreach (var ageGroup in groupedByAge) {  			DocX file = DocX.Load ("StartOrderTemplate.docx");  			file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			file.ReplaceText ("@{Category}"' cat.CategoryName);  			file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  			var cnt = ageGroup.Count ();  			var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  			Queue<CategoryMember> dances = new Queue<CategoryMember> ();  			while (true) {  				var clubsCnt = byClubs.Count;  				List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  				for (int i = 0; i < clubsCnt; i++) {  					dances.Enqueue (byClubs [i].Dequeue ());  					if (byClubs [i].Count == 0)  						toRemove.Add (byClubs [i]);  				}  				foreach (var index in toRemove) {  					byClubs.Remove (index);  				}  				if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  					break;  			}  			Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  			if (byClubs.Count == 0)  				FInaldances = dances;  			else {  				foreach (var dance in byClubs.First ()) {  					while (true) {  						if (dances.Count == 0) {  							dances = FInaldances;  							FInaldances = new Queue<CategoryMember> ();  						}  						var dnc = dances.Dequeue ();  						if (dnc.Club.Id != dance.Club.Id) {  							FInaldances.Enqueue (dnc);  							FInaldances.Enqueue (dance);  							break;  						}  						FInaldances.Enqueue (dnc);  					}  				}  				while (dances.Count > 0) {  					FInaldances.Enqueue (dances.Dequeue ());  				}  			}  			int m = 0;  			if (FInaldances.Count == 0) {  				int asdBreak = 0;  			}  			var totalDancesCount = FInaldances.Count;  			while (FInaldances.Count > 0) {  				var dance = FInaldances.Dequeue ();  				m++;  				var table = file.Tables.First ();  				var row = table.InsertRow ();  				var par = row.Cells [0].InsertParagraph (dance.Name);  				par.Alignment = Alignment.center;  				var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  				par2.Alignment = Alignment.center;  				var par3 = row.Cells [2].InsertParagraph (m.ToString ());  				par3.Alignment = Alignment.center;  			}  			Directory.CreateDirectory (discDir + @"\" + catNmae);  			file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  			file.Dispose ();  			//Protocols  			/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  			var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  			foreach (var JudgeName in Judges) {  				for (int page = 0; page < protocolPages; page++) {  					DocX protocol;  					if (disc.DisciplineName.ToLower ().Contains ("шоу"))  						protocol = DocX.Load ("ProtocolsTemplate4.docx");  					else  						protocol = DocX.Load ("ProtocolsTemplate3.docx");  					string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  					protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  					protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  					protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  					protocol.ReplaceText ("@{Judge}"' JudgeName);  					for (int j = 1; j <= 10; j++) {  						var startOrder = page * 10 + j;  						if (startOrder > totalDancesCount)  							protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  						else  							protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  					}  					protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  					var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  					Directory.CreateDirectory (protDir);  					protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  					protocol.Dispose ();  				}  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var cat in disc.Categories) {  	var catNmae = cat.CategoryName;  	var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  	foreach (var ageGroup in groupedByAge) {  		DocX file = DocX.Load ("StartOrderTemplate.docx");  		file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		file.ReplaceText ("@{Category}"' cat.CategoryName);  		file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  		var cnt = ageGroup.Count ();  		var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  		Queue<CategoryMember> dances = new Queue<CategoryMember> ();  		while (true) {  			var clubsCnt = byClubs.Count;  			List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  			for (int i = 0; i < clubsCnt; i++) {  				dances.Enqueue (byClubs [i].Dequeue ());  				if (byClubs [i].Count == 0)  					toRemove.Add (byClubs [i]);  			}  			foreach (var index in toRemove) {  				byClubs.Remove (index);  			}  			if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  				break;  		}  		Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  		if (byClubs.Count == 0)  			FInaldances = dances;  		else {  			foreach (var dance in byClubs.First ()) {  				while (true) {  					if (dances.Count == 0) {  						dances = FInaldances;  						FInaldances = new Queue<CategoryMember> ();  					}  					var dnc = dances.Dequeue ();  					if (dnc.Club.Id != dance.Club.Id) {  						FInaldances.Enqueue (dnc);  						FInaldances.Enqueue (dance);  						break;  					}  					FInaldances.Enqueue (dnc);  				}  			}  			while (dances.Count > 0) {  				FInaldances.Enqueue (dances.Dequeue ());  			}  		}  		int m = 0;  		if (FInaldances.Count == 0) {  			int asdBreak = 0;  		}  		var totalDancesCount = FInaldances.Count;  		while (FInaldances.Count > 0) {  			var dance = FInaldances.Dequeue ();  			m++;  			var table = file.Tables.First ();  			var row = table.InsertRow ();  			var par = row.Cells [0].InsertParagraph (dance.Name);  			par.Alignment = Alignment.center;  			var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  			par2.Alignment = Alignment.center;  			var par3 = row.Cells [2].InsertParagraph (m.ToString ());  			par3.Alignment = Alignment.center;  		}  		Directory.CreateDirectory (discDir + @"\" + catNmae);  		file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  		file.Dispose ();  		//Protocols  		/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  		var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  		foreach (var JudgeName in Judges) {  			for (int page = 0; page < protocolPages; page++) {  				DocX protocol;  				if (disc.DisciplineName.ToLower ().Contains ("шоу"))  					protocol = DocX.Load ("ProtocolsTemplate4.docx");  				else  					protocol = DocX.Load ("ProtocolsTemplate3.docx");  				string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  				protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  				protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  				protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  				protocol.ReplaceText ("@{Judge}"' JudgeName);  				for (int j = 1; j <= 10; j++) {  					var startOrder = page * 10 + j;  					if (startOrder > totalDancesCount)  						protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  					else  						protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  				}  				protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  				var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  				Directory.CreateDirectory (protDir);  				protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  				protocol.Dispose ();  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var cat in disc.Categories) {  	var catNmae = cat.CategoryName;  	var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  	foreach (var ageGroup in groupedByAge) {  		DocX file = DocX.Load ("StartOrderTemplate.docx");  		file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		file.ReplaceText ("@{Category}"' cat.CategoryName);  		file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  		var cnt = ageGroup.Count ();  		var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  		Queue<CategoryMember> dances = new Queue<CategoryMember> ();  		while (true) {  			var clubsCnt = byClubs.Count;  			List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  			for (int i = 0; i < clubsCnt; i++) {  				dances.Enqueue (byClubs [i].Dequeue ());  				if (byClubs [i].Count == 0)  					toRemove.Add (byClubs [i]);  			}  			foreach (var index in toRemove) {  				byClubs.Remove (index);  			}  			if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  				break;  		}  		Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  		if (byClubs.Count == 0)  			FInaldances = dances;  		else {  			foreach (var dance in byClubs.First ()) {  				while (true) {  					if (dances.Count == 0) {  						dances = FInaldances;  						FInaldances = new Queue<CategoryMember> ();  					}  					var dnc = dances.Dequeue ();  					if (dnc.Club.Id != dance.Club.Id) {  						FInaldances.Enqueue (dnc);  						FInaldances.Enqueue (dance);  						break;  					}  					FInaldances.Enqueue (dnc);  				}  			}  			while (dances.Count > 0) {  				FInaldances.Enqueue (dances.Dequeue ());  			}  		}  		int m = 0;  		if (FInaldances.Count == 0) {  			int asdBreak = 0;  		}  		var totalDancesCount = FInaldances.Count;  		while (FInaldances.Count > 0) {  			var dance = FInaldances.Dequeue ();  			m++;  			var table = file.Tables.First ();  			var row = table.InsertRow ();  			var par = row.Cells [0].InsertParagraph (dance.Name);  			par.Alignment = Alignment.center;  			var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  			par2.Alignment = Alignment.center;  			var par3 = row.Cells [2].InsertParagraph (m.ToString ());  			par3.Alignment = Alignment.center;  		}  		Directory.CreateDirectory (discDir + @"\" + catNmae);  		file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  		file.Dispose ();  		//Protocols  		/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  		var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  		foreach (var JudgeName in Judges) {  			for (int page = 0; page < protocolPages; page++) {  				DocX protocol;  				if (disc.DisciplineName.ToLower ().Contains ("шоу"))  					protocol = DocX.Load ("ProtocolsTemplate4.docx");  				else  					protocol = DocX.Load ("ProtocolsTemplate3.docx");  				string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  				protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  				protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  				protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  				protocol.ReplaceText ("@{Judge}"' JudgeName);  				for (int j = 1; j <= 10; j++) {  					var startOrder = page * 10 + j;  					if (startOrder > totalDancesCount)  						protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  					else  						protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  				}  				protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  				var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  				Directory.CreateDirectory (protDir);  				protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  				protocol.Dispose ();  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var cat in disc.Categories) {  	var catNmae = cat.CategoryName;  	var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  	foreach (var ageGroup in groupedByAge) {  		DocX file = DocX.Load ("StartOrderTemplate.docx");  		file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		file.ReplaceText ("@{Category}"' cat.CategoryName);  		file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  		var cnt = ageGroup.Count ();  		var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  		Queue<CategoryMember> dances = new Queue<CategoryMember> ();  		while (true) {  			var clubsCnt = byClubs.Count;  			List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  			for (int i = 0; i < clubsCnt; i++) {  				dances.Enqueue (byClubs [i].Dequeue ());  				if (byClubs [i].Count == 0)  					toRemove.Add (byClubs [i]);  			}  			foreach (var index in toRemove) {  				byClubs.Remove (index);  			}  			if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  				break;  		}  		Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  		if (byClubs.Count == 0)  			FInaldances = dances;  		else {  			foreach (var dance in byClubs.First ()) {  				while (true) {  					if (dances.Count == 0) {  						dances = FInaldances;  						FInaldances = new Queue<CategoryMember> ();  					}  					var dnc = dances.Dequeue ();  					if (dnc.Club.Id != dance.Club.Id) {  						FInaldances.Enqueue (dnc);  						FInaldances.Enqueue (dance);  						break;  					}  					FInaldances.Enqueue (dnc);  				}  			}  			while (dances.Count > 0) {  				FInaldances.Enqueue (dances.Dequeue ());  			}  		}  		int m = 0;  		if (FInaldances.Count == 0) {  			int asdBreak = 0;  		}  		var totalDancesCount = FInaldances.Count;  		while (FInaldances.Count > 0) {  			var dance = FInaldances.Dequeue ();  			m++;  			var table = file.Tables.First ();  			var row = table.InsertRow ();  			var par = row.Cells [0].InsertParagraph (dance.Name);  			par.Alignment = Alignment.center;  			var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  			par2.Alignment = Alignment.center;  			var par3 = row.Cells [2].InsertParagraph (m.ToString ());  			par3.Alignment = Alignment.center;  		}  		Directory.CreateDirectory (discDir + @"\" + catNmae);  		file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  		file.Dispose ();  		//Protocols  		/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  		var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  		foreach (var JudgeName in Judges) {  			for (int page = 0; page < protocolPages; page++) {  				DocX protocol;  				if (disc.DisciplineName.ToLower ().Contains ("шоу"))  					protocol = DocX.Load ("ProtocolsTemplate4.docx");  				else  					protocol = DocX.Load ("ProtocolsTemplate3.docx");  				string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  				protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  				protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  				protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  				protocol.ReplaceText ("@{Judge}"' JudgeName);  				for (int j = 1; j <= 10; j++) {  					var startOrder = page * 10 + j;  					if (startOrder > totalDancesCount)  						protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  					else  						protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  				}  				protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  				var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  				Directory.CreateDirectory (protDir);  				protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  				protocol.Dispose ();  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var cat in disc.Categories) {  	var catNmae = cat.CategoryName;  	var groupedByAge = cat.CategoryMembers.GroupBy (x => x.AgeGroup.Name);  	foreach (var ageGroup in groupedByAge) {  		DocX file = DocX.Load ("StartOrderTemplate.docx");  		file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		file.ReplaceText ("@{Category}"' cat.CategoryName);  		file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  		var cnt = ageGroup.Count ();  		var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  		Queue<CategoryMember> dances = new Queue<CategoryMember> ();  		while (true) {  			var clubsCnt = byClubs.Count;  			List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  			for (int i = 0; i < clubsCnt; i++) {  				dances.Enqueue (byClubs [i].Dequeue ());  				if (byClubs [i].Count == 0)  					toRemove.Add (byClubs [i]);  			}  			foreach (var index in toRemove) {  				byClubs.Remove (index);  			}  			if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  				break;  		}  		Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  		if (byClubs.Count == 0)  			FInaldances = dances;  		else {  			foreach (var dance in byClubs.First ()) {  				while (true) {  					if (dances.Count == 0) {  						dances = FInaldances;  						FInaldances = new Queue<CategoryMember> ();  					}  					var dnc = dances.Dequeue ();  					if (dnc.Club.Id != dance.Club.Id) {  						FInaldances.Enqueue (dnc);  						FInaldances.Enqueue (dance);  						break;  					}  					FInaldances.Enqueue (dnc);  				}  			}  			while (dances.Count > 0) {  				FInaldances.Enqueue (dances.Dequeue ());  			}  		}  		int m = 0;  		if (FInaldances.Count == 0) {  			int asdBreak = 0;  		}  		var totalDancesCount = FInaldances.Count;  		while (FInaldances.Count > 0) {  			var dance = FInaldances.Dequeue ();  			m++;  			var table = file.Tables.First ();  			var row = table.InsertRow ();  			var par = row.Cells [0].InsertParagraph (dance.Name);  			par.Alignment = Alignment.center;  			var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  			par2.Alignment = Alignment.center;  			var par3 = row.Cells [2].InsertParagraph (m.ToString ());  			par3.Alignment = Alignment.center;  		}  		Directory.CreateDirectory (discDir + @"\" + catNmae);  		file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  		file.Dispose ();  		//Protocols  		/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  		var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  		foreach (var JudgeName in Judges) {  			for (int page = 0; page < protocolPages; page++) {  				DocX protocol;  				if (disc.DisciplineName.ToLower ().Contains ("шоу"))  					protocol = DocX.Load ("ProtocolsTemplate4.docx");  				else  					protocol = DocX.Load ("ProtocolsTemplate3.docx");  				string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  				protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  				protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  				protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  				protocol.ReplaceText ("@{Judge}"' JudgeName);  				for (int j = 1; j <= 10; j++) {  					var startOrder = page * 10 + j;  					if (startOrder > totalDancesCount)  						protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  					else  						protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  				}  				protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  				var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  				Directory.CreateDirectory (protDir);  				protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  				protocol.Dispose ();  			}  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var ageGroup in groupedByAge) {  	DocX file = DocX.Load ("StartOrderTemplate.docx");  	file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	file.ReplaceText ("@{Category}"' cat.CategoryName);  	file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  	var cnt = ageGroup.Count ();  	var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  	Queue<CategoryMember> dances = new Queue<CategoryMember> ();  	while (true) {  		var clubsCnt = byClubs.Count;  		List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  		for (int i = 0; i < clubsCnt; i++) {  			dances.Enqueue (byClubs [i].Dequeue ());  			if (byClubs [i].Count == 0)  				toRemove.Add (byClubs [i]);  		}  		foreach (var index in toRemove) {  			byClubs.Remove (index);  		}  		if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  			break;  	}  	Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  	if (byClubs.Count == 0)  		FInaldances = dances;  	else {  		foreach (var dance in byClubs.First ()) {  			while (true) {  				if (dances.Count == 0) {  					dances = FInaldances;  					FInaldances = new Queue<CategoryMember> ();  				}  				var dnc = dances.Dequeue ();  				if (dnc.Club.Id != dance.Club.Id) {  					FInaldances.Enqueue (dnc);  					FInaldances.Enqueue (dance);  					break;  				}  				FInaldances.Enqueue (dnc);  			}  		}  		while (dances.Count > 0) {  			FInaldances.Enqueue (dances.Dequeue ());  		}  	}  	int m = 0;  	if (FInaldances.Count == 0) {  		int asdBreak = 0;  	}  	var totalDancesCount = FInaldances.Count;  	while (FInaldances.Count > 0) {  		var dance = FInaldances.Dequeue ();  		m++;  		var table = file.Tables.First ();  		var row = table.InsertRow ();  		var par = row.Cells [0].InsertParagraph (dance.Name);  		par.Alignment = Alignment.center;  		var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  		par2.Alignment = Alignment.center;  		var par3 = row.Cells [2].InsertParagraph (m.ToString ());  		par3.Alignment = Alignment.center;  	}  	Directory.CreateDirectory (discDir + @"\" + catNmae);  	file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  	file.Dispose ();  	//Protocols  	/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  	var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  	foreach (var JudgeName in Judges) {  		for (int page = 0; page < protocolPages; page++) {  			DocX protocol;  			if (disc.DisciplineName.ToLower ().Contains ("шоу"))  				protocol = DocX.Load ("ProtocolsTemplate4.docx");  			else  				protocol = DocX.Load ("ProtocolsTemplate3.docx");  			string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  			protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  			protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  			protocol.ReplaceText ("@{Judge}"' JudgeName);  			for (int j = 1; j <= 10; j++) {  				var startOrder = page * 10 + j;  				if (startOrder > totalDancesCount)  					protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  				else  					protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  			}  			protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  			var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  			Directory.CreateDirectory (protDir);  			protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  			protocol.Dispose ();  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var ageGroup in groupedByAge) {  	DocX file = DocX.Load ("StartOrderTemplate.docx");  	file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	file.ReplaceText ("@{Category}"' cat.CategoryName);  	file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  	var cnt = ageGroup.Count ();  	var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  	Queue<CategoryMember> dances = new Queue<CategoryMember> ();  	while (true) {  		var clubsCnt = byClubs.Count;  		List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  		for (int i = 0; i < clubsCnt; i++) {  			dances.Enqueue (byClubs [i].Dequeue ());  			if (byClubs [i].Count == 0)  				toRemove.Add (byClubs [i]);  		}  		foreach (var index in toRemove) {  			byClubs.Remove (index);  		}  		if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  			break;  	}  	Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  	if (byClubs.Count == 0)  		FInaldances = dances;  	else {  		foreach (var dance in byClubs.First ()) {  			while (true) {  				if (dances.Count == 0) {  					dances = FInaldances;  					FInaldances = new Queue<CategoryMember> ();  				}  				var dnc = dances.Dequeue ();  				if (dnc.Club.Id != dance.Club.Id) {  					FInaldances.Enqueue (dnc);  					FInaldances.Enqueue (dance);  					break;  				}  				FInaldances.Enqueue (dnc);  			}  		}  		while (dances.Count > 0) {  			FInaldances.Enqueue (dances.Dequeue ());  		}  	}  	int m = 0;  	if (FInaldances.Count == 0) {  		int asdBreak = 0;  	}  	var totalDancesCount = FInaldances.Count;  	while (FInaldances.Count > 0) {  		var dance = FInaldances.Dequeue ();  		m++;  		var table = file.Tables.First ();  		var row = table.InsertRow ();  		var par = row.Cells [0].InsertParagraph (dance.Name);  		par.Alignment = Alignment.center;  		var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  		par2.Alignment = Alignment.center;  		var par3 = row.Cells [2].InsertParagraph (m.ToString ());  		par3.Alignment = Alignment.center;  	}  	Directory.CreateDirectory (discDir + @"\" + catNmae);  	file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  	file.Dispose ();  	//Protocols  	/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  	var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  	foreach (var JudgeName in Judges) {  		for (int page = 0; page < protocolPages; page++) {  			DocX protocol;  			if (disc.DisciplineName.ToLower ().Contains ("шоу"))  				protocol = DocX.Load ("ProtocolsTemplate4.docx");  			else  				protocol = DocX.Load ("ProtocolsTemplate3.docx");  			string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  			protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  			protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  			protocol.ReplaceText ("@{Judge}"' JudgeName);  			for (int j = 1; j <= 10; j++) {  				var startOrder = page * 10 + j;  				if (startOrder > totalDancesCount)  					protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  				else  					protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  			}  			protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  			var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  			Directory.CreateDirectory (protDir);  			protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  			protocol.Dispose ();  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var ageGroup in groupedByAge) {  	DocX file = DocX.Load ("StartOrderTemplate.docx");  	file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	file.ReplaceText ("@{Category}"' cat.CategoryName);  	file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  	var cnt = ageGroup.Count ();  	var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  	Queue<CategoryMember> dances = new Queue<CategoryMember> ();  	while (true) {  		var clubsCnt = byClubs.Count;  		List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  		for (int i = 0; i < clubsCnt; i++) {  			dances.Enqueue (byClubs [i].Dequeue ());  			if (byClubs [i].Count == 0)  				toRemove.Add (byClubs [i]);  		}  		foreach (var index in toRemove) {  			byClubs.Remove (index);  		}  		if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  			break;  	}  	Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  	if (byClubs.Count == 0)  		FInaldances = dances;  	else {  		foreach (var dance in byClubs.First ()) {  			while (true) {  				if (dances.Count == 0) {  					dances = FInaldances;  					FInaldances = new Queue<CategoryMember> ();  				}  				var dnc = dances.Dequeue ();  				if (dnc.Club.Id != dance.Club.Id) {  					FInaldances.Enqueue (dnc);  					FInaldances.Enqueue (dance);  					break;  				}  				FInaldances.Enqueue (dnc);  			}  		}  		while (dances.Count > 0) {  			FInaldances.Enqueue (dances.Dequeue ());  		}  	}  	int m = 0;  	if (FInaldances.Count == 0) {  		int asdBreak = 0;  	}  	var totalDancesCount = FInaldances.Count;  	while (FInaldances.Count > 0) {  		var dance = FInaldances.Dequeue ();  		m++;  		var table = file.Tables.First ();  		var row = table.InsertRow ();  		var par = row.Cells [0].InsertParagraph (dance.Name);  		par.Alignment = Alignment.center;  		var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  		par2.Alignment = Alignment.center;  		var par3 = row.Cells [2].InsertParagraph (m.ToString ());  		par3.Alignment = Alignment.center;  	}  	Directory.CreateDirectory (discDir + @"\" + catNmae);  	file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  	file.Dispose ();  	//Protocols  	/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  	var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  	foreach (var JudgeName in Judges) {  		for (int page = 0; page < protocolPages; page++) {  			DocX protocol;  			if (disc.DisciplineName.ToLower ().Contains ("шоу"))  				protocol = DocX.Load ("ProtocolsTemplate4.docx");  			else  				protocol = DocX.Load ("ProtocolsTemplate3.docx");  			string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  			protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  			protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  			protocol.ReplaceText ("@{Judge}"' JudgeName);  			for (int j = 1; j <= 10; j++) {  				var startOrder = page * 10 + j;  				if (startOrder > totalDancesCount)  					protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  				else  					protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  			}  			protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  			var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  			Directory.CreateDirectory (protDir);  			protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  			protocol.Dispose ();  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var ageGroup in groupedByAge) {  	DocX file = DocX.Load ("StartOrderTemplate.docx");  	file.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	file.ReplaceText ("@{Category}"' cat.CategoryName);  	file.ReplaceText ("@{AgeGroup}"' ageGroup.Key);  	var cnt = ageGroup.Count ();  	var byClubs = ageGroup.GroupBy (x => x.Club.Id).Select (x => new Queue<CategoryMember> (x)).OrderBy (y => y.Count).ToList ();  	Queue<CategoryMember> dances = new Queue<CategoryMember> ();  	while (true) {  		var clubsCnt = byClubs.Count;  		List<Queue<CategoryMember>> toRemove = new List<Queue<CategoryMember>> ();  		for (int i = 0; i < clubsCnt; i++) {  			dances.Enqueue (byClubs [i].Dequeue ());  			if (byClubs [i].Count == 0)  				toRemove.Add (byClubs [i]);  		}  		foreach (var index in toRemove) {  			byClubs.Remove (index);  		}  		if ((byClubs.Count == 1 && dances.Last ().Club.Id == byClubs.Single ().First ().Club.Id) || byClubs.Count == 0)  			break;  	}  	Queue<CategoryMember> FInaldances = new Queue<CategoryMember> ();  	if (byClubs.Count == 0)  		FInaldances = dances;  	else {  		foreach (var dance in byClubs.First ()) {  			while (true) {  				if (dances.Count == 0) {  					dances = FInaldances;  					FInaldances = new Queue<CategoryMember> ();  				}  				var dnc = dances.Dequeue ();  				if (dnc.Club.Id != dance.Club.Id) {  					FInaldances.Enqueue (dnc);  					FInaldances.Enqueue (dance);  					break;  				}  				FInaldances.Enqueue (dnc);  			}  		}  		while (dances.Count > 0) {  			FInaldances.Enqueue (dances.Dequeue ());  		}  	}  	int m = 0;  	if (FInaldances.Count == 0) {  		int asdBreak = 0;  	}  	var totalDancesCount = FInaldances.Count;  	while (FInaldances.Count > 0) {  		var dance = FInaldances.Dequeue ();  		m++;  		var table = file.Tables.First ();  		var row = table.InsertRow ();  		var par = row.Cells [0].InsertParagraph (dance.Name);  		par.Alignment = Alignment.center;  		var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  		par2.Alignment = Alignment.center;  		var par3 = row.Cells [2].InsertParagraph (m.ToString ());  		par3.Alignment = Alignment.center;  	}  	Directory.CreateDirectory (discDir + @"\" + catNmae);  	file.SaveAs (String.Format (discDir + @"\{0}\'{0} - {1}'.docx"' catNmae' ageGroup.Key));  	file.Dispose ();  	//Protocols  	/*if (Directory.Exists(@".\Protocols"))                         {                              var dirs = Directory.GetDirectories(@".\Protocols");                             foreach (var item in dirs)                             {                                 Directory.Delete(item' true);                             }                             Directory.Delete(@".\Protocols"' true);                         }*/Console.WriteLine ("Doing protocols");  	var protocolPages = Math.Ceiling (((double)totalDancesCount / 10));  	foreach (var JudgeName in Judges) {  		for (int page = 0; page < protocolPages; page++) {  			DocX protocol;  			if (disc.DisciplineName.ToLower ().Contains ("шоу"))  				protocol = DocX.Load ("ProtocolsTemplate4.docx");  			else  				protocol = DocX.Load ("ProtocolsTemplate3.docx");  			string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  			protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  			protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  			protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  			protocol.ReplaceText ("@{Judge}"' JudgeName);  			for (int j = 1; j <= 10; j++) {  				var startOrder = page * 10 + j;  				if (startOrder > totalDancesCount)  					protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  				else  					protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  			}  			protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  			var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  			Directory.CreateDirectory (protDir);  			protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  			protocol.Dispose ();  		}  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: while (FInaldances.Count > 0) {  	var dance = FInaldances.Dequeue ();  	m++;  	var table = file.Tables.First ();  	var row = table.InsertRow ();  	var par = row.Cells [0].InsertParagraph (dance.Name);  	par.Alignment = Alignment.center;  	var par2 = row.Cells [1].InsertParagraph (dance.Club.Name);  	par2.Alignment = Alignment.center;  	var par3 = row.Cells [2].InsertParagraph (m.ToString ());  	par3.Alignment = Alignment.center;  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var JudgeName in Judges) {  	for (int page = 0; page < protocolPages; page++) {  		DocX protocol;  		if (disc.DisciplineName.ToLower ().Contains ("шоу"))  			protocol = DocX.Load ("ProtocolsTemplate4.docx");  		else  			protocol = DocX.Load ("ProtocolsTemplate3.docx");  		string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  		protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  		protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  		protocol.ReplaceText ("@{Judge}"' JudgeName);  		for (int j = 1; j <= 10; j++) {  			var startOrder = page * 10 + j;  			if (startOrder > totalDancesCount)  				protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  			else  				protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  		}  		protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  		var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  		Directory.CreateDirectory (protDir);  		protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  		protocol.Dispose ();  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: foreach (var JudgeName in Judges) {  	for (int page = 0; page < protocolPages; page++) {  		DocX protocol;  		if (disc.DisciplineName.ToLower ().Contains ("шоу"))  			protocol = DocX.Load ("ProtocolsTemplate4.docx");  		else  			protocol = DocX.Load ("ProtocolsTemplate3.docx");  		string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  		protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  		protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  		protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  		protocol.ReplaceText ("@{Judge}"' JudgeName);  		for (int j = 1; j <= 10; j++) {  			var startOrder = page * 10 + j;  			if (startOrder > totalDancesCount)  				protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  			else  				protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  		}  		protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  		var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  		Directory.CreateDirectory (protDir);  		protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  		protocol.Dispose ();  	}  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: for (int page = 0; page < protocolPages; page++) {  	DocX protocol;  	if (disc.DisciplineName.ToLower ().Contains ("шоу"))  		protocol = DocX.Load ("ProtocolsTemplate4.docx");  	else  		protocol = DocX.Load ("ProtocolsTemplate3.docx");  	string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  	protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  	protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  	protocol.ReplaceText ("@{Judge}"' JudgeName);  	for (int j = 1; j <= 10; j++) {  		var startOrder = page * 10 + j;  		if (startOrder > totalDancesCount)  			protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  		else  			protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  	}  	protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  	var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  	Directory.CreateDirectory (protDir);  	protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  	protocol.Dispose ();  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: for (int page = 0; page < protocolPages; page++) {  	DocX protocol;  	if (disc.DisciplineName.ToLower ().Contains ("шоу"))  		protocol = DocX.Load ("ProtocolsTemplate4.docx");  	else  		protocol = DocX.Load ("ProtocolsTemplate3.docx");  	string catPluseAgeGroup = String.Format ("{0} - {1}"' catNmae' ageGroup.Key);  	protocol.ReplaceText ("@{CategoryAndAgeGroup}"' catPluseAgeGroup);  	protocol.ReplaceText ("@{Discipline}"' disc.DisciplineName);  	protocol.ReplaceText ("@{Date}"' DateTime.Now.ToShortDateString ());  	protocol.ReplaceText ("@{Judge}"' JudgeName);  	for (int j = 1; j <= 10; j++) {  		var startOrder = page * 10 + j;  		if (startOrder > totalDancesCount)  			protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  		else  			protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  	}  	protocol.ReplaceText ("@{Page}"' (1 + page).ToString ());  	var protDir = @".\Protocols\" + disc.DisciplineName + @"\" + catNmae + @"\" + JudgeName + @"\";  	Directory.CreateDirectory (protDir);  	protocol.SaveAs (String.Format (protDir + @"'{0} - {1}' Page {2}.docx"' catNmae' ageGroup.Key' page + 1));  	protocol.Dispose ();  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: for (int j = 1; j <= 10; j++) {  	var startOrder = page * 10 + j;  	if (startOrder > totalDancesCount)  		protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  	else  		protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  }  
Magic Number,GenerateStartOrder,Program,C:\repos\sdluxeon_Stargazer\src\GenerateStartOrder\Program.cs,GenerateStartOrder,The following statement contains a magic number: for (int j = 1; j <= 10; j++) {  	var startOrder = page * 10 + j;  	if (startOrder > totalDancesCount)  		protocol.ReplaceText ("@{" + j.ToString () + "}"' string.Empty);  	else  		protocol.ReplaceText ("@{" + j.ToString () + "}"' startOrder.ToString ());  }  
