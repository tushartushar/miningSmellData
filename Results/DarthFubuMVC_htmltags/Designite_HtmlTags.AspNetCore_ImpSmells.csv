Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HtmlTags.Reflection,ReflectionHelper,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\ReflectionHelper.cs,BuildValueGetters,Cyclomatic complexity of the method is 8
Long Parameter List,HtmlTags,HtmlTag,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\HtmlTag.cs,RenderAttribute,The method has 5 parameters. Parameters: html' encoder' key' value' attributeIsEncoded
Long Parameter List,HtmlTags.Conventions.Formatting,DisplayFormatterExtensions,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\DisplayFormatterExtensions.cs,FormatValue,The method has 5 parameters. Parameters: formatter' modelType' accessor' value' format
Long Parameter List,HtmlTags.Conventions.Formatting,GetStringRequest,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\GetStringRequest.cs,GetStringRequest,The method has 5 parameters. Parameters: accessor' rawValue' locator' format' ownerType
Long Parameter List,HtmlTags.Conventions.Formatting,GetStringRequest,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\GetStringRequest.cs,GetStringRequest,The method has 5 parameters. Parameters: ownerType' property' rawValue' format' propertyType
Long Statement,HtmlTags,HtmlTag,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\HtmlTag.cs,AddClass,The length of the statement  "                    throw new ArgumentException(string.Format("CSS class names is not valid. Problem class was '{0}'"' new[] {className})' nameof(className)); " is 138.
Long Statement,HtmlTags,HtmlTag,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\HtmlTag.cs,TextIfEmpty,The length of the statement  "            if (TagName().EqualsIgnoreCase("input")) throw new InvalidOperationException("You are attempting to set the inner text on an INPUT tag. If you wanted a textarea' call MultilineMode() first."); " is 192.
Long Statement,HtmlTags,TypeExtensions,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\TypeExtensions.cs,IsAnEnumerationOf,The length of the statement  "            throw new Exception(string.Format("I don't know how to figure out what this is a collection of. Can you tell me? {0}"' new[] {type})); " is 134.
Long Statement,HtmlTags.Conventions.Elements,AccessorOverrideElementBuilderPolicy,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Elements\AccessorOverrideElementBuilderPolicy.cs,Matches,The length of the statement  "            return _rules.AllRulesFor<IElementTagOverride>(subject.Accessor).Any(x => x.Category == _category && x.Profile == _profile); " is 124.
Long Statement,HtmlTags.Reflection,MethodValueGetter,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\MethodValueGetter.cs,GetHashCode,The length of the statement  "                    return ((_methodInfo != null ? _methodInfo.GetHashCode() : 0) * 397) ^ (_arguments[0] != null ? _arguments[0].GetHashCode() : 0); " is 129.
Long Statement,HtmlTags.Reflection.Expressions,ConstructorBuilder,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\Expressions\ExpressionClasses.cs,CreateSingleStringArgumentConstructor,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(concreteType)' concreteType' "Only types with a ctor(string) can be used here"); " is 125.
Complex Conditional,HtmlTags,HtmlTag,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\HtmlTag.cs,BuildAttr,The conditional expression  "value.Equals(string.Empty) &&                  (IsCssClassAttr(attribute) || IsCssStyleAttr(attribute) || IsMetadataAttr(attribute))"  is complex.
Magic Number,HtmlTags,TagList,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\TagList.cs,ToHtmlString,The following statement contains a magic number: if (_tags.Count() > 5)              {                  var builder = new StringBuilder();                  _tags.Each(t => builder.AppendLine(t.ToString()));                    return builder.ToString();              }
Magic Number,HtmlTags.Conventions,TagSubject,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\TagSubject.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Profile?.GetHashCode() ?? 0)*397) ^                         (Subject?.GetHashCode() ?? 0);              }
Magic Number,HtmlTags.Conventions.Elements,AccessorDef,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Elements\AccessorDef.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Accessor?.GetHashCode() ?? 0) * 397) ^                         (ModelType?.GetHashCode() ?? 0);              }
Magic Number,HtmlTags.Conventions.Formatting,GetStringRequest,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\GetStringRequest.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = OwnerType?.GetHashCode() ?? 0;                  result = (result*397) ^ (Property?.GetHashCode() ?? 0);                  result = (result*397) ^ (RawValue?.GetHashCode() ?? 0);                  result = (result*397) ^ (Format?.GetHashCode() ?? 0);                  return result;              }
Magic Number,HtmlTags.Conventions.Formatting,GetStringRequest,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\GetStringRequest.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = OwnerType?.GetHashCode() ?? 0;                  result = (result*397) ^ (Property?.GetHashCode() ?? 0);                  result = (result*397) ^ (RawValue?.GetHashCode() ?? 0);                  result = (result*397) ^ (Format?.GetHashCode() ?? 0);                  return result;              }
Magic Number,HtmlTags.Conventions.Formatting,GetStringRequest,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Conventions\Formatting\GetStringRequest.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = OwnerType?.GetHashCode() ?? 0;                  result = (result*397) ^ (Property?.GetHashCode() ?? 0);                  result = (result*397) ^ (RawValue?.GetHashCode() ?? 0);                  result = (result*397) ^ (Format?.GetHashCode() ?? 0);                  return result;              }
Magic Number,HtmlTags.Reflection,IndexerValueGetter,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\IndexerValueGetter.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((DeclaringType?.GetHashCode() ?? 0) * 397) ^ Index;              }
Magic Number,HtmlTags.Reflection,MethodValueGetter,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\MethodValueGetter.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  if (_arguments.Length != 0)                  {                      return ((_methodInfo != null ? _methodInfo.GetHashCode() : 0) * 397) ^ (_arguments[0] != null ? _arguments[0].GetHashCode() : 0);                  }                    return _methodInfo.GetHashCode();              }
Missing Default,HtmlTags.Reflection,ReflectionHelper,C:\repos\DarthFubuMVC_htmltags\src\HtmlTags\Reflection\ReflectionHelper.cs,TryEvaluateExpression,The following switch statement is missing a default case: switch (operation.NodeType)              {                  case ExpressionType.Constant:                      value = ((ConstantExpression)operation).Value;                      return true;                  case ExpressionType.MemberAccess:                      MemberExpression me = (MemberExpression)operation;                      object target;                      if (TryEvaluateExpression(me.Expression' out target))                      { // instance target                          if (me.Member is FieldInfo)                          {                              value = ((FieldInfo)me.Member).GetValue(target);                              return true;                          }                          if (me.Member is PropertyInfo)                          {                              value = ((PropertyInfo)me.Member).GetValue(target' null);                              return true;                          }                      }                      break;              }
